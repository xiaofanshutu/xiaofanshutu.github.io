<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>事务</title>
    <link href="/posts/93ac284c.html"/>
    <url>/posts/93ac284c.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="事务概述"><a href="#事务概述" class="headerlink" title="事务概述"></a>事务概述</h1><ol><li><p>事务是一个最小的工作单元。在数据库当中，事务表示一件完整的事儿。</p></li><li><p>一个业务的完成可能需要多条DML语句共同配合才能完成，例如转账业务，需要执行两条DML语句，先更新张三账户的余额，再更新李四账户的余额，为了保证转账业务不出现问题，就必须保证要么同时成功，要么同时失败，怎么保证同时成功或者同时失败呢？就需要使用事务机制。</p></li><li><p>也就是说用了事务机制之后，在同一个事务当中，多条DML语句会同时成功，或者同时失败，不会出现一部分成功，一部分失败的现象。</p></li><li><p>事务只针对DML语句有效：因为只有这三个语句是改变表中数据的。</p><ol><li>insert</li><li>delete</li><li>update<h1 id="事务四大特性：ACID"><a href="#事务四大特性：ACID" class="headerlink" title="事务四大特性：ACID"></a>事务四大特性：ACID</h1></li></ol></li><li><p>原子性（Atomicity）：是指事务包含的所有操作要么全部成功，要么同时失败。</p></li><li><p>一致性（Consistency）：是指事务开始前，和事务完成后，数据应该是一致的。例如张三和李四的钱加起来是5000，中间不管进行过多少次的转账操作(update)，总量5000是不会变的。这就是事务的一致性。</p></li><li><p>隔离性（Isolation）：隔离性是当多个⽤户并发访问数据库时，⽐如操作同⼀张表时，数据库为每⼀个⽤户开启的事务，不能被其他事务的操作所⼲扰，多个并发事务之间要相互隔离。</p></li><li><p>持久性（Durability）：持久性是指⼀个事务⼀旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><h1 id="演示MySQL事务"><a href="#演示MySQL事务" class="headerlink" title="演示MySQL事务"></a>演示MySQL事务</h1><p>在dos命令窗口中开启MySQL事务：start transaction; 或者：begin;<br>回滚事务：rollback;<br>提交事务：commit;<br>只要执行以上的rollback或者commit，事务都会结束。<br>MySQL默认情况下采用的事务机制是：自动提交。所谓自动提交就是只要执行一条DML语句则提交一次。</p><h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070002096.png"></p></li></ol><p><strong>隔离级别从低到高排序：读未提交 &lt; 读提交 &lt; 可重复读 &lt; 串行化**<br>**不同隔离级别会存在不同的现象，现象按照严重性从高到低排序：脏读 &gt; 不可重复读 &gt; 幻读</strong></p><h2 id="查看与设置隔离级别"><a href="#查看与设置隔离级别" class="headerlink" title="查看与设置隔离级别"></a>查看与设置隔离级别</h2><p>mysql默认的隔离级别：可重复读（REPEATABLE READ）。</p><ul><li>查看当前会话的隔离级别：select @@transaction_isolation;</li><li>查看全局的隔离级别：select @@gobal.transaction_isolation;</li></ul><p>设置事务隔离级别：</p><ul><li>会话级：set session transaction isolation level read committed;</li><li>全局级：set global transaction isolation level read committed;<h2 id="不同现象"><a href="#不同现象" class="headerlink" title="不同现象"></a>不同现象</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3>指的是一个事务读取了另一个事务尚未提交的数据，即读取了另一个事务中的脏数据（Dirty Data）。在此情况下，如果另一个事务回滚了或者修改了这些数据，那么读取这些脏数据的事务所处理的数据就是不准确的。<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3>指在一个事务内，多次读取同一个数据行，得到的结果可能是不一样的。这是由于其他事务对数据行做出了修改操作，导致数据的不一致性。<h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3>指在事务执行过程中，前后两次相同的查询条件得到的结果集不一致，可能会变多或变少。<h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><h3 id="读未提交（READ-UNCOMMITTED）"><a href="#读未提交（READ-UNCOMMITTED）" class="headerlink" title="读未提交（READ UNCOMMITTED）"></a>读未提交（READ UNCOMMITTED）</h3>A事务与B事务，A事务可以读取到B事务未提交的数据。这是最低的隔离级别。几乎两个事务之间没有隔离。这种隔离级别是一种理论层面的，在实际的数据库产品中，没有从这个级别起步的。<br>当事务隔离级别是读未提交时，三种现象都存在：脏读，不可重复读，幻读。<br>我们可以开启两个DOS命令窗口，模拟两个事务，演示一下这种隔离级别。三种现象中最严重的是脏读，我们只需要演示脏读问题即可，因为存在脏读的话，就一定存在不可重复读和幻读问题。</li></ul><p>将全局事务隔离级别设置为：READ UNCOMMITTED</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">isolation</span> <span class="hljs-keyword">level</span> <span class="hljs-keyword">read</span> uncommitted;<br></code></pre></td></tr></tbody></table></figure><p>开启两个DOS命令窗口来模拟两个事务：A事务与B事务。</p><table><thead><tr><th><strong>A事务</strong></th><th><strong>B事务</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070014427.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(4);</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070018545.png"></td><td></td></tr></tbody></table><p>通过以上测试，可以看到，A事务读取到了B事务还没有提交的数据。这种现象就是脏读。</p><h3 id="读提交（READ-COMMITTED）"><a href="#读提交（READ-COMMITTED）" class="headerlink" title="读提交（READ COMMITTED）"></a>读提交（READ COMMITTED）</h3><p>A事务与B事务，A事务可以读取到B事务提交之后的数据。Oracle数据库默认的就是这种隔离级别。</p><p>将数据库的全局事务隔离级别设置为读提交：READ COMMITTED</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">isolation</span> <span class="hljs-keyword">level</span> <span class="hljs-keyword">read</span> committed;<br></code></pre></td></tr></tbody></table></figure><p>演示：</p><table><thead><tr><th><strong>A事务</strong></th><th><strong>B事务</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070023567.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(4);</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070027578.png"></td><td></td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1709004165277-dac7bc73-55ba-4034-bd48-b975689ffb41.png#averageHue=%230f0e0d&amp;clientId=u0fbbe02e-04ac-4&amp;from=paste&amp;height=214&amp;id=ucc8e1eca&amp;originHeight=214&amp;originWidth=298&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4626&amp;status=done&amp;style=shadow&amp;taskId=u2cac7a44-ba45-4bd7-86c2-2d280c9de57&amp;title=&amp;width=298" alt="image.png"></td><td></td></tr></tbody></table><p>通过以上测试看出，A事务只能读取到B事务提交之后的数据。这种隔离级别解决了脏读问题，但肯定是存在不可重复读和幻读问题。因为只要事务B进行了增删改操作之后并提交了，事务A读取到的数据肯定是不同的。即：不可重复读和幻读都存在。</p><h3 id="可重复读（REPEATABLE-READ）"><a href="#可重复读（REPEATABLE-READ）" class="headerlink" title="可重复读（REPEATABLE READ）"></a>可重复读（REPEATABLE READ）</h3><p>这个隔离级别是MySQL数据库默认的。<br>A事务和B事务，A事务开启后，读取了某一条记录，然后B事务对这条记录进行修改并提交，A事务读取到的还是修改前的数据。这种隔离级别称为可重复读。</p><p>将数据库全局隔离级别修改为可重复读：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">isolation</span> <span class="hljs-keyword">level</span> repeatable <span class="hljs-keyword">read</span>;<br></code></pre></td></tr></tbody></table></figure><p>演示：</p><table><thead><tr><th><strong>A事务</strong></th><th><strong>B事务</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select empno,ename,sal from emp where empno=7369;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070032177.png"></td><td></td></tr><tr><td></td><td>mysql&gt; update emp set ename=’SMITH’,sal=8000 where empno=7369;</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select empno,ename,sal from emp where empno=7369;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070035832.png"></td><td></td></tr></tbody></table><p>通过以上测试得知：当事务隔离级别设置为可重复读时，避免了不可重复读问题。</p><p>那么在MySQL当中，当事务隔离级别设置为可重复读时，能够避免幻读问题吗？测试一下：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070040811.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(5);</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070045242.png"></td><td></td></tr></tbody></table><p>通过以上测试得知：<strong>当事务隔离级别设置为可重复读时，也避免了幻读问题。是完全避免了幻读问题吗？并不是。</strong>请看以下测试：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070049057.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(6);</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select * from a <strong>for update;</strong></td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070100658.png"></td><td></td></tr></tbody></table><p>通过以上测试得知：<strong>当事务隔离级别设置为可重复读，MySQL会尽最大努力避免幻读问题，但这种隔离级别无法完全避免幻读问题。</strong></p><h3 id="串行化（SERIALIZABLE）"><a href="#串行化（SERIALIZABLE）" class="headerlink" title="串行化（SERIALIZABLE）"></a>串行化（SERIALIZABLE）</h3><p>这种隔离级别最高，避免了所有的问题，缺点是效率低，因为这种隔离级别会导致事务排队处理，不支持并发。</p><p>设置数据库全局隔离级别为串行化：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">isolation</span> <span class="hljs-keyword">level</span> <span class="hljs-keyword">serializable</span>;<br></code></pre></td></tr></tbody></table></figure><p>演示：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070107886.png"></td><td></td></tr><tr><td>mysql&gt; insert into a values(7);</td><td></td></tr><tr><td></td><td>mysql&gt; select * from a;</td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070113102.png"></td><td></td></tr><tr><td>mysql&gt; commit;</td><td></td></tr><tr><td></td><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070117518.png"></td></tr></tbody></table><p>通过以上测试得知：当事务隔离级别设置为串行化时，事务只能排队执行，不支持并发。</p><h2 id="可重复读的幻读问题"><a href="#可重复读的幻读问题" class="headerlink" title="可重复读的幻读问题"></a>可重复读的幻读问题</h2><p>在上面讲解过程中我提到，MySQL默认的隔离级别可重复读，在很大程度上避免了幻读问题（并不能完全解决），那么它是如何解决幻读问题的呢，解决方案包括两种：</p><ul><li><p>针对<strong>快照读</strong>（普通 select 语句），是<strong>通过 MVCC 方式解决了幻读</strong>，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好的避免了幻读问题。</p></li><li><p>针对<strong>当前读</strong>（select … for update 等语句），是<strong>通过 next-key lock（记录锁+间隙锁）方式解决了幻读</strong>，因为当执行 select … for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好的避免了幻读问题。</p><h3 id="快照读是如何解决幻读的"><a href="#快照读是如何解决幻读的" class="headerlink" title="快照读是如何解决幻读的"></a>快照读是如何解决幻读的</h3><p>什么是快照读？普通的select语句都是采用的快照读。顾名思义：在整个事务的处理过程中，执行相同的一个select语句时，每次都是读取的快照。（快照指的是固定的某个时刻的数据，就像现实世界中的拍照一样，把那个美好的时刻留下来）。也就是说，当事务隔离级别是可重复读，并且执行的select语句是一个普通的select语句时，都会采用快照读的方式读取数据，底层实现原理是：</p></li><li><p>底层由 MVCC（多版本并发控制）实现，实现的方式是开始事务后，在执行第一个查询语句后，会创建一个 Read View，后续的查询语句利用这个 Read View，通过这个 Read View 就可以在 undo log 版本链找到事务开始时的数据，所以事务过程中每次查询的数据都是一样的，即使中途有其他事务插入了新纪录，是查询不出来这条数据的，所以就很好的避免了幻读问题。</p></li></ul><p>演示：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a; //快照读</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070123937.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(5);</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select * from a; //快照读</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070128632.png"></td><td></td></tr></tbody></table><h3 id="当前读是如何解决幻读的"><a href="#当前读是如何解决幻读的" class="headerlink" title="当前读是如何解决幻读的"></a>当前读是如何解决幻读的</h3><p>当前读，顾名思义：每一次都读取最新的数据。当前读包括：update、delete、insert、select…for update。这个很好理解，因为增删改的时候都要基于最新的数据进行增删改。<br>而select…for update原理是：对查询范围内的数据进行加锁，不允许其它事务对这个范围内的数据进行增删改。也就是说这个select语句范围内的数据是不允许并发的，只能排队执行，从而避免幻读问题。<br>select…for update加的锁叫做：next-key lock。我们可以称其为：间隙锁 + 记录锁。间隙锁用来保证在锁定的范围内不允许insert操作。记录锁用来保证在锁定的范围内不允许delete和update操作。</p><p>假如有这样的数据：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070133681.png"><br>SQL语句是这样写的：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> a <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">between</span> <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">4</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>;<br></code></pre></td></tr></tbody></table></figure><p>那么id在[2-4]区间的所有记录行被锁定，不能插入3是通过间隙锁来搞定的。不能修改或删除2和4是通过记录锁来搞定的。</p><p>演示：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a where id between 2 and 4 for update; // 当前读</td><td></td></tr><tr><td></td><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070138619.png"></td></tr></tbody></table><h3 id="出现幻读的两种情况"><a href="#出现幻读的两种情况" class="headerlink" title="出现幻读的两种情况"></a>出现幻读的两种情况</h3><p>在同一个事务处理过程中，如果前后两次都采用快照读，或者都采用当前读，则不会出现幻读问题。如果第一次使用快照读，后面使用了当前读，则会出现幻读问题。</p><h4 id="第一种产生幻读的场景"><a href="#第一种产生幻读的场景" class="headerlink" title="第一种产生幻读的场景"></a>第一种产生幻读的场景</h4><p>A事务与B事务。在A事务中第一次查询使用快照读，B事务插入数据。然后在A事务中第二次查询使用当前读。则会产生幻读现象。<br>演示：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070144039.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(5);</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select * from a for update; // 产生了幻读</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070150445.png"></td><td></td></tr></tbody></table><h4 id="第二种产生幻读的场景"><a href="#第二种产生幻读的场景" class="headerlink" title="第二种产生幻读的场景"></a>第二种产生幻读的场景</h4><p>事务A与事务B，在事务A中第一次查询使用快照读，在事务B中插入一条数据，然后在事务A中更新事务B插入的那条记录，最后在事务A中再次使用快照读。则会发生幻读现象。</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070156454.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(6);</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; update a set id=100 where id=6; //主要是因为这个SQL语句的执行触发了当前读</td><td></td></tr><tr><td>mysql&gt; select * from a; // 产生了幻读</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070201823.png"></td><td></td></tr></tbody></table><h3 id="总结可重复读的幻读问题"><a href="#总结可重复读的幻读问题" class="headerlink" title="总结可重复读的幻读问题"></a>总结可重复读的幻读问题</h3><p>MySQL的可重复读隔离级别（默认隔离级），根据不同的查询方式，分别提出了避免幻读的方案：</p><ul><li>针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读。</li><li>针对当前读（select … for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读。</li></ul><p>我举例了两个发生幻读场景的例子。</p><ul><li>第一个例子：对于快照读， MVCC 并不能完全避免幻读现象。因为当事务 A 更新了一条事务 B 插入的记录，那么事务 A 前后两次查询的记录条目就不一样了，所以就发生幻读。</li><li>第二个例子：对于当前读，如果事务开启后，并没有执行当前读，而是先快照读，然后这期间如果其他事务插入了一条记录，那么事务后续使用当前读进行查询的时候，就会发现两次查询的记录条目就不一样了，所以就发生幻读。</li></ul><p>所以，MySQL 可重复读隔离级别并没有彻底解决幻读，只是很大程度上避免了幻读现象的发生。<br>要避免这类特殊场景下发生幻读的现象的话，就是尽量在开启事务之后，马上执行 select … for update 这类当前读的语句，因为它会对记录加 next-key lock，从而避免其他事务插入一条新记录。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>视图</title>
    <link href="/posts/50a54d3c.html"/>
    <url>/posts/50a54d3c.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>只能将select语句创建为视图。</p></li><li><p>创建视图</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">replace</span> <span class="hljs-keyword">view</span> v_emp <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> e.ename,d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno;<br></code></pre></td></tr></tbody></table></figure></li><li><p>视图作用</p><ol><li>如果开发中有一条非常复杂的SQL，而这个SQL在多处使用，会给开发和维护带来成本。使用视图可以降低开发和维护的成本。</li><li>视图可以隐藏表的字段名。</li></ol></li><li><p>修改视图</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">view</span> v_emp <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> e.ename,d.dname,d.deptno <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno;<br></code></pre></td></tr></tbody></table></figure></li><li><p>删除视图</p><ol><li>drop view if exists v_emp;</li></ol></li><li><p>对视图增删改（DML：insert delete update）可以影响到原表数据。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库设计三范式</title>
    <link href="/posts/80436e1d.html"/>
    <url>/posts/80436e1d.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是数据库设计三范式"><a href="#什么是数据库设计三范式" class="headerlink" title="什么是数据库设计三范式"></a>什么是数据库设计三范式</h1><p>数据库表设计的原则。教你怎么设计数据库表有效，并且节省空间。</p><h1 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h1><ol><li>第一范式：任何一张表都应该有主键，每个字段是原子性的不能再分<ol><li>以下表的设计不符合第一范式：无主键，并且联系方式可拆分。</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214226489.png"></p><ol start="2"><li>应该这样设计：</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214230960.png"></p><ol start="2"><li>第二范式：建立在第一范式基础上的，另外要求所有非主键字段完全依赖主键，不能产生部分依赖<ol><li>以下表存储了学生和老师的信息</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214234959.png"><br>虽然符合第一范式，但是违背了第二范式，学生姓名、老师姓名都产生了部分依赖。导致数据冗余。</p><ol start="2"><li>以下这种设计方式就是符合第二范式的：</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214239651.png"></p><ol start="3"><li>第三范式：建立在第二范式基础上的，非主键字段不能传递依赖于主键字段<ol><li>以下设计方式就是违背第三范式的</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214244205.png"><br>以上因为产生了传递依赖，导致班级名称冗余。</p><ol start="2"><li>以下这种方式就是符合第三范式的：</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214248100.png"></p><h1 id="一对多怎么设计"><a href="#一对多怎么设计" class="headerlink" title="一对多怎么设计"></a>一对多怎么设计</h1><p>口诀：一对多两张表，多的表加外键。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214252987.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214259929.png"></p><h1 id="多对多怎么设计"><a href="#多对多怎么设计" class="headerlink" title="多对多怎么设计"></a>多对多怎么设计</h1><p>多对多三张表，关系表添加外键。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214304436.png"></p><h1 id="一对一怎么设计"><a href="#一对一怎么设计" class="headerlink" title="一对一怎么设计"></a>一对一怎么设计</h1><p>两种方案：</p><ol><li>第一种：主键共享</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214308522.png"></p><ol start="2"><li>第二种：外键唯一</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214312778.png"></p><h1 id="最终的设计"><a href="#最终的设计" class="headerlink" title="最终的设计"></a>最终的设计</h1><p>最终以满足客户需求为原则，有的时候会拿空间换速度。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL表相关</title>
    <link href="/posts/31637be2.html"/>
    <url>/posts/31637be2.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>  字段名<span class="hljs-number">1</span> 数据类型,<br>  字段名<span class="hljs-number">2</span> 数据类型,<br>  字段名<span class="hljs-number">3</span> 数据类型,<br>  ......<br>);<br></code></pre></td></tr></tbody></table></figure><p>例如：创建学生表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>,<br>  gender <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">'男'</span><br>);<br></code></pre></td></tr></tbody></table></figure><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>, 字段名<span class="hljs-number">2</span>, 字段名<span class="hljs-number">3</span>,......) <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3</span>,......);<br></code></pre></td></tr></tbody></table></figure><p>字段名和值要一一对应。类型要一一对应，数量要一一对应。<br>字段名也可以省略，如果字段名省略就表示把所有字段名都写上去了，并且顺序和建表时的顺序相同。</p><h1 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h1><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> 表名;<br></code></pre></td></tr></tbody></table></figure><p>判断是否存在这个表，如果存在则删除。避免不存在时的报错。</p><h1 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h1><p>数据类型（data_type）是指系统中所允许的数据的类型。数据库中的每个列都应该有适当的数据类型，用于限制或允许该列中存储的数据。例如，列中存储的为数字，则相应的数据类型应该为数值类型。<br>如果使用错误的数据类型可能会严重影响应用程序的功能和性能，所以在设计表时，应该特别重视数据列所用的数据类型。更改包含数据的列不是一件小事，这样做可能会导致数据丢失。因此，在创建表时必须为每个列设置正确的数据类型和长度。<br>MySQL 的数据类型可以分为整数类型、浮点数类型、定点数类型、日期和时间类型、字符串类型、二进制类型等。</p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p>tinyint：1个字节（微小整数）<br>smallint：2个字节（小整数）<br>mediumint：3个字节（中等大小的整数）<br><strong>int（integer）：4个字节（普通大小整数）</strong><br><strong>bigint：8个字节（大整数）</strong></p><h2 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h2><p>float：4个字节，单精度（最多5位小数）<br><strong>double：8个字节，双精度（最多16位小数）</strong></p><h2 id="定点数类型"><a href="#定点数类型" class="headerlink" title="定点数类型"></a>定点数类型</h2><p>decimal：定点数类型。底层实际上采用字符串的形式存储数字。<br>语法：decimal(m, d)<br>例如：decimal(3, 2) 表示3个有效数字，2个小数。（有效数字最多65个，小数位最多30个）</p><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><p>year：1个字节，只存储年，格式YYYY<br>time：3个字节，只存储时间，格式HH:MM:SS / HHMMSS<br>date：3个字节，只存储年月日，格式：YYYY-MM-DD<br>datetime：8个字节，存储年月日+时分秒，格式：YYYY-MM-DD HH:MM:SS（从公元1000年<del>公元9999年）<br>timestamp：4个字节，存储年月日+时分秒，格式：YYYY-MM-DD HH:MM:SS（从公元1980年</del>公元2040年）或者格式为 YYYYMMDDHHMMSS（采用这种格式不需要使用单引号，当然你使用单引号也可以）</p><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p><strong>char(m)：</strong>m长度是0~255个字符。<br>固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。m表示列的长度，范围是 0～255 个字符。<br>例如，CHAR(4) 定义了一个固定长度的字符串列，包含的字符个数最大为 4。当插入的字符长度大于4，则报错（除非超过4个长度之后都是空格字符，则空格字符会自动被删除用来保证插入的成功）。</p><h3 id="varchar"><a href="#varchar" class="headerlink" title="varchar"></a>varchar</h3><p><strong>varchar(m)：</strong>m长度是0~16383个字符<br>长度可变的字符串。varchar 的最大实际长度由最长的行的大小和使用的字符集确定，而实际占用的空间为字符串的实际长度加 1。<br>例如，varchar(50) 定义了一个最大长度为 50 的字符串，如果插入的字符串只有 10 个字符，则实际存储的字符串为 10 个字符和一个字符串结束字符。varchar在值保存和检索时尾部的空格仍保留。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701072008930.png"></p><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p><strong>text类型：</strong></p><ul><li>tinytext 表示长度为 255字符的 TEXT 列。</li><li>text 表示长度为 65535字符的 TEXT 列。</li><li>mediumtext 表示长度为 16777215字符的 TEXT 列。</li><li>longtext 表示长度为 4294967295 或 4GB 字符的 TEXT 列。<h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3></li></ul><p><strong>enum类型：</strong></p><ul><li><p>语法：&lt;字段名&gt; enum(‘值1’,’值2’,…)</p></li><li><p>该字段插入值时，只能是指定的枚举值。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701080656297.png" alt="image-20250701080656297"></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3></li></ul><p><strong>set类型：</strong></p><ul><li><p>语法：&lt;字段名&gt; set(‘值1’,’值2’,’值3’,…)   注意：值不可重复。</p></li><li><p>该字段插入值时，只能是指定的值。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701080722000.png" alt="image-20250701080722000"></p></li></ul><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><p>BLOB（Binary Large Object）类型：二进制大对象，可以存储图片、声音、视频等文件。</p><ul><li>blob：小的，最大长度65535个字节</li><li>mediumblob：中等的，最大长度16777215个字节</li><li>longblob：大的，最大长度4GB的字节<h1 id="增删改表结构DDL"><a href="#增删改表结构DDL" class="headerlink" title="增删改表结构DDL"></a>增删改表结构DDL</h1><h2 id="创建一个学生表"><a href="#创建一个学生表" class="headerlink" title="创建一个学生表"></a>创建一个学生表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">bigint</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  age <span class="hljs-built_in">int</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'年龄'</span><br>);<br></code></pre></td></tr></tbody></table></figure><h2 id="查看建表语句"><a href="#查看建表语句" class="headerlink" title="查看建表语句"></a>查看建表语句</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></tbody></table></figure><h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">rename</span> 新表名;<br></code></pre></td></tr></tbody></table></figure><h2 id="新增字段"><a href="#新增字段" class="headerlink" title="新增字段"></a>新增字段</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> 字段名 数据类型;<br></code></pre></td></tr></tbody></table></figure><h2 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">change</span> 旧字段名 新字段名 数据类型;<br></code></pre></td></tr></tbody></table></figure><h2 id="修改字段数据类型"><a href="#修改字段数据类型" class="headerlink" title="修改字段数据类型"></a>修改字段数据类型</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">modify</span> <span class="hljs-keyword">column</span> 字段名 数据类型;<br></code></pre></td></tr></tbody></table></figure><h2 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> 字段名;<br></code></pre></td></tr></tbody></table></figure></li></ul><h1 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h1><p>当我们对表中的数据进行增删改的时候，称它为DML语句。（数据操纵语言），主要包括：insert、delete、update</p><h2 id="insert-增"><a href="#insert-增" class="headerlink" title="insert 增"></a>insert 增</h2><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,...) <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3</span>,...);<br></code></pre></td></tr></tbody></table></figure><p>表名后面的小括号当中的字段名如果省略掉，表示自动将所有字段都列出来了，并且字段的顺序和建表时的顺序一致。<br>一般为了可读性强，建议把字段名写上。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3</span>,...);<br></code></pre></td></tr></tbody></table></figure><p>一次可以插入多条记录：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_stu(<span class="hljs-keyword">no</span>,<span class="hljs-keyword">name</span>,age) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">'jack'</span>,<span class="hljs-number">20</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">'lucy'</span>,<span class="hljs-number">30</span>);<br></code></pre></td></tr></tbody></table></figure><h2 id="delete-删"><a href="#delete-删" class="headerlink" title="delete 删"></a>delete 删</h2><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 将所有记录全部删除</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名;<br><br><span class="hljs-comment"># 删除符合条件的记录</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件;<br></code></pre></td></tr></tbody></table></figure><p>以上的删除属于DML的方式删除，这种删除的数据是可以通过事务回滚的方式重新恢复的，但是删除的效率较低。（这种删除是支持事务的。）<br>另外还有一种删除表中数据的方式，但是这种方式不支持事务，不可以回滚，删了之后数据是永远也找不回来了。这种删除叫做：表被截断。<br>注意：这个语句删除效率非常高，巨大的表，瞬间干掉所有数据。但不可恢复。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></tbody></table></figure><h2 id="update-改"><a href="#update-改" class="headerlink" title="update 改"></a>update 改</h2><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span>=值<span class="hljs-number">1</span>, 字段名<span class="hljs-number">2</span>=值<span class="hljs-number">2</span>, 字段名<span class="hljs-number">3</span>=值<span class="hljs-number">3</span> <span class="hljs-keyword">where</span> 条件;<br></code></pre></td></tr></tbody></table></figure><p>如果没有更新条件的话，所有记录全部更新。</p><h1 id="约束constraint"><a href="#约束constraint" class="headerlink" title="约束constraint"></a>约束constraint</h1><p>创建表时，可以给表的字段添加约束，可以保证数据的完整性、有效性。比如大家上网注册用户时常见的：用户名不能为空。对不起，用户名已存在。等提示信息。<br>约束通常包括：</p><ul><li>非空约束：not null</li><li>检查约束：check</li><li>唯一性约束：unique</li><li>主键约束：primary key</li><li>外键约束：foreign key<h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2>语法格式：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>  age <span class="hljs-built_in">int</span><br>);<br></code></pre></td></tr></tbody></table></figure>name字段不能为空。插入数据时如果没有给name指定值，则报错。</li></ul><h2 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  age <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">check</span>(age &gt; <span class="hljs-number">18</span>)<br>);<br></code></pre></td></tr></tbody></table></figure><h2 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h2><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  email <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">unique</span><br>);<br></code></pre></td></tr></tbody></table></figure><p>email字段设置为唯一性，唯一性的字段值是可以为NULL的。但不能重复。以上在字段后面添加的约束，叫做列级约束。<br>当然，添加约束还有另一种方式：表级约束：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  email <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  <span class="hljs-keyword">unique</span>(email)<br>);<br></code></pre></td></tr></tbody></table></figure><p>使用表级约束可以为多个字段添加联合唯一。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  email <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  <span class="hljs-keyword">unique</span>(<span class="hljs-keyword">name</span>,email)<br>);<br></code></pre></td></tr></tbody></table></figure><p>创建约束时也可以给约束起名字，将来可以通过约束的名字来删除约束：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  email <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  <span class="hljs-keyword">constraint</span> t_stu_name_email_unique <span class="hljs-keyword">unique</span>(<span class="hljs-keyword">name</span>,email)<br>);<br></code></pre></td></tr></tbody></table></figure><p>所有的约束都存储在一个系统表当中：table_constraints。这个系统表在这个数据库当中：information_schema</p><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><ol><li><p>主键：primary key，简称PK</p></li><li><p>主键约束的字段不能为NULL，并且不能重复。</p></li><li><p>任何一张表都应该有主键，没有主键的表可以视为无效表。</p></li><li><p>主键值是这行记录的身份证号，是唯一标识。在数据库表中即使两条数据一模一样，但由于主键值不同，我们也会认为是两条完全的不同的数据。</p></li><li><p>主键分类：</p><ol><li>根据字段数量分类：<ol><li>单一主键（1个字段作为主键）==&gt;建议的</li><li>复合主键（2个或2个以上的字段作为主键）</li></ol></li><li>根据业务分类：<ol><li>自然主键（主键和任何业务都无关，只是一个单纯的自然数据）===&gt;建议的</li><li>业务主键（主键和业务挂钩，例如：银行卡账号作为主键）</li></ol></li></ol></li><li><p>单一主键（建议使用这种方式）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br>  <span class="hljs-keyword">id</span> <span class="hljs-built_in">bigint</span> primary <span class="hljs-keyword">key</span>,<br>  sno <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">unique</span>,<br>  sname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span><br>)<br></code></pre></td></tr></tbody></table></figure></li><li><p>复合主键（很少用，了解）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_user(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  age <span class="hljs-built_in">int</span>,<br>  primary <span class="hljs-keyword">key</span>(<span class="hljs-keyword">no</span>,<span class="hljs-keyword">name</span>)<br>);<br></code></pre></td></tr></tbody></table></figure></li><li><p>主键自增：既然主键值是一个自然的数字，mysql为主键值提供了一种自增机制，不需要我们程序员维护，mysql自动维护该字段</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_vip(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span> auto_increment,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>)<br>);<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><ol><li>有这样一个需求：要求设计表，能够存储学生以及学校信息。<ol><li>第一种方案：一张表</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071955954.png"><br>这种方式会导致数据冗余，浪费空间。</p><ol start="2"><li>第二种方案：两张表：一张存储学生，一张存储学校</li></ol><p>t_school 表<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071952148.png"><br>t_student 表<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071948405.png"><br>如果采用以上两张表存储数据，对于学生表来说，sno这个字段的值是不能随便填的，这个sno是学校编号，必须要求这个字段中的值来自学校表的sno。<br>为了达到要求，此时就必须要给t_student表的sno字段添加外键约束了。</p><ol start="2"><li>外键约束：foreign key，简称FK。</li><li>添加了外键约束的字段中的数据必须来自其他字段，不能随便填。</li><li>假设给a字段添加了外键约束，要求a字段中的数据必须来自b字段，b字段不一定是主键，但至少要有唯一性。</li><li>外键约束可以给单个字段添加，叫做单一外键。也可以给多个字段联合添加，叫做复合外键。复合外键很少用。</li><li>a表如果引用b表中的数据，可以把b表叫做父表，把a表叫做子表。<ol><li>创建表时，先创建父表，再创建子表。</li><li>插入数据时，先插入父表，在插入子表。</li><li>删除数据时，先删除子表，再删除父表。</li><li>删除表时，先删除子表，再删除父表。</li></ol></li><li>如何添加外键：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_school( <br>  sno <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>, <br>  sname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <br>); <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student( <br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>, <br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>), <br>  age <span class="hljs-built_in">int</span>, <br>  sno <span class="hljs-built_in">int</span>, <br>  <span class="hljs-keyword">constraint</span> t_school_sno_fk <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(sno) <span class="hljs-keyword">references</span> t_school(sno) <br>);<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="8"><li>级联删除</li></ol><p>创建子表时，外键可以添加：on delete cascade，这样在删除父表数据时，子表会级联删除。谨慎使用。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student( <br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>, <br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>), <br>  age <span class="hljs-built_in">int</span>, <br>  sno <span class="hljs-built_in">int</span>, <br>  <span class="hljs-keyword">constraint</span> t_school_sno_fk <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(sno) <span class="hljs-keyword">references</span> t_school(sno) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">cascade</span> <br>);<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">###删除约束</span><br>alert table t_student <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> t_student_sno_fk;<br><span class="hljs-comment">###添加约束</span><br>alert table t_student add constraint t_student_sno_fk foreign key(sno) references t_school(sno) on <span class="hljs-keyword">delete</span> <span class="hljs-keyword">cascade</span>;<br></code></pre></td></tr></tbody></table></figure><ol start="9"><li><p>级联更新 </p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student( <br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>, <br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>), <br>  age <span class="hljs-built_in">int</span>, <br>  sno <span class="hljs-built_in">int</span>, <br>  <span class="hljs-keyword">constraint</span> t_school_sno_fk <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(sno) <span class="hljs-keyword">references</span> t_school(sno) <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">cascade</span> <br>);<br></code></pre></td></tr></tbody></table></figure></li><li><p>级联置空</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student( <br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>, <br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>), <br>  age <span class="hljs-built_in">int</span>, <br>  sno <span class="hljs-built_in">int</span>, <br>  <span class="hljs-keyword">constraint</span> t_school_sno_fk <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(sno) <span class="hljs-keyword">references</span> t_school(sno) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">set</span> <span class="hljs-literal">null</span> <br>);<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库概述</title>
    <link href="/posts/ca9a1c2c.html"/>
    <url>/posts/ca9a1c2c.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h1><ul><li>数据库是一门独立的学科，只要是做软件开发的，数据库都要学。</li><li>数据库（电子化的文件柜）是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</li><li>它的存储空间很大，可以存放百万条、千万条、上亿条数据。</li><li>数据库并不是随意地将数据进行存放，是有一定的规则的，否则查询的效率会很低。</li><li>当今世界是一个充满着数据的互联网世界，充斥着大量的数据。即这个互联网世界就是数据世界。数据的来源有很多，比如出行记录、消费记录、浏览的网页、发送的消息等等。除了文本类型的数据，图像、音乐、声音都是数据。</li><li>数据库对应的英文单词是DataBase，简称DB。</li></ul><h1 id="数据库类型"><a href="#数据库类型" class="headerlink" title="数据库类型"></a>数据库类型</h1><ul><li>关系型数据库<ul><li>关系型数据库是依据关系模型来创建的数据库。所谓关系模型就是“一对一、一对多、多对多”等关系模型，关系模型就是指二维表格模型，因而一个关系型数据库就是由二维表及其之间的联系组成的一个数据组织。</li><li>关系型数据可以很好地存储一些关系模型的数据，比如一个老师对应多个学生的数据（“多对多”），一本书对应多个作者（“一对多”），一本书对应一个出版日期（“一对一”）。</li><li>关系模型包括数据结构（数据存储的问题，二维表）、操作指令集合（SQL语句）、完整性约束(表内数据约束、表与表之间的约束)。</li></ul></li><li>非关系型数据库（NoSQL）<ul><li>NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。</li><li>NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。NoSQL最常见的解释是“non-relational”， “Not Only SQL”也被很多人接受。</li><li>NoSQL仅仅是一个概念，泛指非关系型的数据库，区别于关系数据库，它们不保证关系数据的ACID特性。NoSQL是一项全新的数据库革命性运动，其拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</li><li>NoSQL有如下优点：易扩展，NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间也在架构的层面上带来了可扩展的能力。大数据量，高性能，NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。<h1 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h1></li></ul></li></ul><ul><li>数据库管理系统（Database Management System，简称DBMS）是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能。</li><li>数据库管理系统是数据库系统的核心组成部分，主要完成对数据库的操作与管理功能，实现数据库对象的创建、数据库存储数据的查询、添加、修改与删除操作和数据库的用户管理、权限管理等。</li><li>常见的数据库管理系统有：MySQL、Oracle、DB2、MS SQL Server、SQLite、PostgreSQL、Sybase等。</li></ul><h1 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h1><ul><li>结构化查询语言（Structured Query Language）简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</li><li>结构化查询语言是高级的非过程化编程语言，允许用户在高层数据结构上工作。它不要求用户指定对数据的存放方法，也不需要用户了解具体的数据存放方式，所以具有完全不同底层结构的不同数据库系统, 可以使用相同的结构化查询语言作为数据输入与管理的接口。结构化查询语言语句可以嵌套，这使它具有极大的灵活性和强大的功能。</li><li>SQL的分类<ul><li>DQL<ul><li>数据查询语言（Data Query Language, DQL）是SQL语言中，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有FROM，WHERE，GROUP BY，HAVING和ORDER BY。这些DQL保留字常与其他类型的SQL语句一起使用。</li></ul></li><li>DDL<ul><li>数据定义语言 (Data Definition Language, DDL) 是SQL语言集中，负责数据结构定义与数据库对象定义的语言，由CREATE、ALTER与DROP三个语法所组成，最早是由 Codasyl (Conference on Data Systems Languages) 数据模型开始，现在被纳入 SQL 指令中作为其中一个子集。</li></ul></li><li>DML<ul><li>数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除。</li></ul></li><li>DCL<ul><li>数据控制语言 (Data Control Language) 在SQL语言中，是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。DCL以控制用户的访问权限为主，GRANT为授权语句，对应的REVOKE是撤销授权语句。</li></ul></li><li>TPL<ul><li>数据事务管理语言（Transaction Processing Language）它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。</li></ul></li><li>CCL<ul><li>指针控制语言（Cursor Control Language），它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</li></ul></li></ul></li><li>DBMS、SQL、DB之间的关系<ul><li>DBMS通过执行SQL来操作DB中的数据。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库安装</title>
    <link href="/posts/1bbb3b3c.html"/>
    <url>/posts/1bbb3b3c.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL概述"><a href="#MySQL概述" class="headerlink" title="MySQL概述"></a>MySQL概述</h1><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630215621242.png" alt="image-20250630215621242"></p><ul><li>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，MySQL AB公司被Sun公司收购，Sun公司又被Oracle公司收购，目前属于Oracle公司。</li><li>MySQL是目前最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的RDBMS应用软件之一。 国内淘宝网站就使用的是MySQL集群。</li><li>MySQL特点<ul><li>MySQL有开源版本和收费版本，你使用开源版本是不收费的。</li><li>MySQL支持大型数据库，可以处理上千万记录的大型数据库。</li><li>MySQL使用标准的SQL数据库语言形式。</li><li>MySQL在很多系统上面都支持。</li><li>MySQL对Java，C都有很好的支持，当然其他的语言也支持比如Python、PHP。</li><li>MySQL是可以定制的，采用了GPL协议，你可以修改源码来开发自己的MySQL系统。</li></ul></li></ul><h1 id="MySQL的下载"><a href="#MySQL的下载" class="headerlink" title="MySQL的下载"></a>MySQL的下载</h1><h2 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h2><ul><li>第一步：打开MySQL官网<a href="https://www.mysql.com/">https://www.mysql.com/</a></li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630215717943.png" alt="image-20250630215717943"></p><ul><li>第二步：点击”DOWNLOADS”</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220059394.png" alt="image-20250630220059394"></p><ul><li>第三步：当前页继续下拉，直到找到下图链接</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220645283.png" alt="image-20250630220645283"></p><ul><li>第四步：点击上图链接，进入下面页面，其中“MySQL Community Server”是解压版mysql，“MySQL Installer for Windows”是安装版，这里我们选择解压版</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220635582.png" alt="image-20250630220635582"></p><ul><li>第五步：点击上图“MySQL Community Server”</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220628384.png" alt="image-20250630220628384"></p><ul><li>第六步：点击上图第1个“Download”</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220621251.png" alt="image-20250630220621251"></p><ul><li>第七步：点击上图“No thanks, just start my download.”开始下载，直到下载完毕。</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220612749.png" alt="image-20250630220612749"></p><h2 id="网盘下载"><a href="#网盘下载" class="headerlink" title="网盘下载"></a>网盘下载</h2><p>链接：<a href="https://pan.baidu.com/s/1lRWC069K8GE-8rxr259ArQ?pwd=2009">https://pan.baidu.com/s/1lRWC069K8GE-8rxr259ArQ?pwd=2009</a> 提取码：2009</p><h1 id="MySQL安装与配置"><a href="#MySQL安装与配置" class="headerlink" title="MySQL安装与配置"></a>MySQL安装与配置</h1><ul><li>将下载的zip压缩包解压，我这里直接解压到C盘的根目录下</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220604822.png" alt="image-20250630220604822"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220548051.png" alt="image-20250630220548051"></p><p>mysql的根目录为：C:\mysql-8.0.24-winx64</p><ul><li>将C:\mysql-8.0.24-winx64\bin目录配置到环境变量path当中</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220536490.png" alt="image-20250630220536490"></p><ul><li>初始化data目录</li></ul><p>使用管理员身份打开dos命令窗口（按win键，输入cmd，点击管理员身份运行）</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220529460.png" alt="image-20250630220529460"></p><p>cd命令切换到mysql的bin目录下，执行mysqld –initialize –console进行data目录初始化，此时会在控制台生成一个随机密码，下图红框中就是随机密码</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220520282.png" alt="image-20250630220520282"></p><p>技巧：左键选中密码，直接点击右键，此时密码已经复制到剪贴板中了，<br>然后随便找一个文件，将密码粘贴到文件中保存起来。</p><ul><li>安装MySQL服务：cd命令切换到bin目录下，执行命令mysqld -install</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220508206.png" alt="image-20250630220508206"></p><ul><li>查看mysql服务名称：此电脑-右键-管理-服务和应用程序-服务-找MySQL服务，如下图mysql服务名称：MySQL</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220501421.png" alt="image-20250630220501421"></p><ul><li>启动MySQL服务：net start mysql，注意start后面是mysql服务的名称</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220453540.png" alt="image-20250630220453540"></p><p>停止mysql服务的命令：net stop mysql<br>注意：启停mysql服务也可以在上一步的图中点击右键进行启停服务。</p><ul><li>登录mysql：输入mysql -uroot -p，然后回车，输入刚才的随机密码，然后回车，看到下图表示成功登录mysql</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220441823.png" alt="image-20250630220441823"></p><ul><li>修改MySQL的root账户密码：ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘新密码’;</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220435007.png" alt="image-20250630220435007"></p><ul><li>使用新密码登录mysql</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220426928.png" alt="image-20250630220426928"></p><h1 id="MySQL卸载"><a href="#MySQL卸载" class="headerlink" title="MySQL卸载"></a>MySQL卸载</h1><ul><li>停止mysql的服务</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220419488.png" alt="image-20250630220419488"></p><ul><li>删除mysql服务</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220410118.png" alt="image-20250630220410118"></p><ul><li>删除mysql的目录</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220402191.png" alt="image-20250630220402191"></p><h1 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h1><h2 id="本地登录"><a href="#本地登录" class="headerlink" title="本地登录"></a>本地登录</h2><ul><li>如果mysql的服务是启动的，打开dos命令窗口，输入：mysql -uroot -p，回车，然后输入root账户的密码</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220345579.png" alt="image-20250630220345579"></p><p>解释“mysql -uroot -p”：<br>mysql是一个命令，在bin目录下，对应的命令文件是mysql.exe，如果将bin目录配置到环境<br>变量path中，才可以在以上位置使用该命令。<br>-uroot 表示登录的用户是root，u实际上是user单词的首字母。<br>-p 表示登录时使用密码，p实际上是password单词的首字母。</p><ul><li>也可以将密码以明文的形式写到-p后面，这样做可能会导致你的密码泄露</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220335977.png" alt="image-20250630220335977"></p><h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><ul><li>假设mysql安装在A机器上，现在你要在B机器上连接mysql数据库，此时需要使用远程登录，远程登录时加上远程机器的ip地址即可</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220318198.png" alt="image-20250630220318198"></p><p>-h中的h实际上是host单词的首字母。在-h后面的是远程计算机的ip地址。<br>127.0.0.1是计算机默认的本机IP地址。<br>127.0.0.1又可以写作：localhost，他们是等效的。<br>注意：mysql默认情况下root账户是不支持远程登录的，其实这是一种安全策略，<br>为了保护root账户的安全。如果希望root账户支持远程登录，这是需要进行设置的。</p><ul><li><p>mysql8 开放root账户远程登录权限（危险动作）</p><p>第一步：现在本地使用root账户登录mysql</p><p>第二步：use mysql;</p><p>第三步：update user set host = ‘%’ where user = ‘root’;</p><p>第四步：flush privileges;</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL初始化数据</title>
    <link href="/posts/f4fc1fe7.html"/>
    <url>/posts/f4fc1fe7.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL命令行基本命令"><a href="#MySQL命令行基本命令" class="headerlink" title="MySQL命令行基本命令"></a>MySQL命令行基本命令</h1><ol><li>列出当前数据库管理系统中有哪些数据库。<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221212047.png" alt="image-20250630221212047"></p><ol start="2"><li><p>创建数据库，起名bjpowernode。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> bjpowernode1;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221358468.png" alt="image-20250630221358468"></p></li><li><p> 使用bjpowernode数据库。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">use</span> bjpowernode;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221518167.png" alt="image-20250630221518167"></p></li></ol><ol start="4"><li><p>查看当前用的是哪个数据库。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>();<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221529447.png" alt="image-20250630221529447"></p></li><li><p> 查看当前数据库中有哪些表。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221541925.png" alt="image-20250630221541925"></p></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221552087.png" alt="image-20250630221552087"></p><ol start="6"><li><p> 删除数据库bjpowernode。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> bjpowernode;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221610116.png" alt="image-20250630221610116"></p></li><li><p>退出mysql</p><ol><li>exit</li><li>quit</li><li>ctrl + c</li></ol></li><li><p>查看当前mysql版本</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">version</span>();<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221615405.png" alt="image-20250630221615405"><br>还可以使用mysql.exe命令来查看版本信息（在没有登录mysql之前使用）：mysql –version<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221633302.png" alt="image-20250630221633302"></p></li></ol><h1 id="数据库表的概述"><a href="#数据库表的概述" class="headerlink" title="数据库表的概述"></a>数据库表的概述</h1><table><thead><tr><th>name</th><th>age</th><th>gender</th></tr></thead><tbody><tr><td>张三</td><td>20</td><td>男</td></tr><tr><td>李四</td><td>22</td><td>女</td></tr></tbody></table><ul><li>以上就是数据库表格的直观展示形式。</li><li>表格英文单词table。</li><li>表是数据库存储数据的基本单元，数据库存储数据的时候，是将数据存储在表对象当中的。为什么将数据存储在表中呢？因为表存储数据非常直观。</li><li>任何一张表都有行和列：<ul><li>行：记录（一行就是一条数据）</li><li>列：字段（name字段、age字段、gender字段）</li></ul></li><li>每个字段包含以下属性：<ul><li>字段名：name、age、gender都是字段的名字</li><li>字段的数据类型：每个字段都有数据类型，比如：字符类型、数字类型、日期类型</li><li>字段的数据长度：每个字段有可能会有长度的限制</li><li>字段的约束：比如某些字段要求该字段下的数据不能重复、不能为空等，用来保证表格中数据合法有效</li></ul></li></ul><h1 id="初始化测试数据"><a href="#初始化测试数据" class="headerlink" title="初始化测试数据"></a>初始化测试数据</h1><p>为了方便后面内容的学习，老师提前准备了表以及表中的测试数据，以下是建表并且初始化数据的sql脚本</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> EMP;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> DEPT;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> SALGRADE;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> DEPT(DEPTNO <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> ,<br>DNAME <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">14</span>) ,<br>LOC <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">13</span>),<br>primary <span class="hljs-keyword">key</span> (DEPTNO)<br>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> EMP(EMPNO <span class="hljs-built_in">int</span>(<span class="hljs-number">4</span>)  <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> ,<br>ENAME <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">10</span>),<br>JOB <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">9</span>),<br>MGR <span class="hljs-built_in">INT</span>(<span class="hljs-number">4</span>),<br>HIREDATE <span class="hljs-built_in">DATE</span>  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>SAL <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>COMM <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>primary <span class="hljs-keyword">key</span> (EMPNO),<br>DEPTNO <span class="hljs-built_in">INT</span>(<span class="hljs-number">2</span>) <br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> SALGRADE( GRADE <span class="hljs-built_in">INT</span>,<br>LOSAL <span class="hljs-built_in">INT</span>,<br>HISAL <span class="hljs-built_in">INT</span><br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">10</span>, <span class="hljs-string">'ACCOUNTING'</span>, <span class="hljs-string">'NEW YORK'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">20</span>, <span class="hljs-string">'RESEARCH'</span>, <span class="hljs-string">'DALLAS'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">30</span>, <span class="hljs-string">'SALES'</span>, <span class="hljs-string">'CHICAGO'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">40</span>, <span class="hljs-string">'OPERATIONS'</span>, <span class="hljs-string">'BOSTON'</span>); <br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7369</span>, <span class="hljs-string">'SMITH'</span>, <span class="hljs-string">'CLERK'</span>, <span class="hljs-number">7902</span>,  <span class="hljs-string">'1980-12-17'</span>, <span class="hljs-number">800</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7499</span>, <span class="hljs-string">'ALLEN'</span>, <span class="hljs-string">'SALESMAN'</span>, <span class="hljs-number">7698</span>,  <span class="hljs-string">'1981-02-20'</span>, <span class="hljs-number">1600</span>, <span class="hljs-number">300</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7521</span>, <span class="hljs-string">'WARD'</span>, <span class="hljs-string">'SALESMAN'</span>, <span class="hljs-number">7698</span>,  <span class="hljs-string">'1981-02-22'</span>, <span class="hljs-number">1250</span>, <span class="hljs-number">500</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7566</span>, <span class="hljs-string">'JONES'</span>, <span class="hljs-string">'MANAGER'</span>, <span class="hljs-number">7839</span>,  <span class="hljs-string">'1981-04-02'</span>, <span class="hljs-number">2975</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7654</span>, <span class="hljs-string">'MARTIN'</span>, <span class="hljs-string">'SALESMAN'</span>, <span class="hljs-number">7698</span>,  <span class="hljs-string">'1981-09-28'</span>, <span class="hljs-number">1250</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7698</span>, <span class="hljs-string">'BLAKE'</span>, <span class="hljs-string">'MANAGER'</span>, <span class="hljs-number">7839</span>,  <span class="hljs-string">'1981-05-01'</span>, <span class="hljs-number">2850</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7782</span>, <span class="hljs-string">'CLARK'</span>, <span class="hljs-string">'MANAGER'</span>, <span class="hljs-number">7839</span>,  <span class="hljs-string">'1981-06-09'</span>, <span class="hljs-number">2450</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7788</span>, <span class="hljs-string">'SCOTT'</span>, <span class="hljs-string">'ANALYST'</span>, <span class="hljs-number">7566</span>,  <span class="hljs-string">'1987-04-19'</span>, <span class="hljs-number">3000</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7839</span>, <span class="hljs-string">'KING'</span>, <span class="hljs-string">'PRESIDENT'</span>, <span class="hljs-literal">NULL</span>,  <span class="hljs-string">'1981-11-17'</span>, <span class="hljs-number">5000</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7844</span>, <span class="hljs-string">'TURNER'</span>, <span class="hljs-string">'SALESMAN'</span>, <span class="hljs-number">7698</span>,  <span class="hljs-string">'1981-09-08'</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">0</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7876</span>, <span class="hljs-string">'ADAMS'</span>, <span class="hljs-string">'CLERK'</span>, <span class="hljs-number">7788</span>,  <span class="hljs-string">'1987-05-23'</span>, <span class="hljs-number">1100</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7900</span>, <span class="hljs-string">'JAMES'</span>, <span class="hljs-string">'CLERK'</span>, <span class="hljs-number">7698</span>,  <span class="hljs-string">'1981-12-03'</span>, <span class="hljs-number">950</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7902</span>, <span class="hljs-string">'FORD'</span>, <span class="hljs-string">'ANALYST'</span>, <span class="hljs-number">7566</span>,  <span class="hljs-string">'1981-12-03'</span>, <span class="hljs-number">3000</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7934</span>, <span class="hljs-string">'MILLER'</span>, <span class="hljs-string">'CLERK'</span>, <span class="hljs-number">7782</span>,  <span class="hljs-string">'1982-01-23'</span>, <span class="hljs-number">1300</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>); <br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">1</span>, <span class="hljs-number">700</span>, <span class="hljs-number">1200</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">2</span>, <span class="hljs-number">1201</span>, <span class="hljs-number">1400</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">3</span>, <span class="hljs-number">1401</span>, <span class="hljs-number">2000</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">4</span>, <span class="hljs-number">2001</span>, <span class="hljs-number">3000</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">5</span>, <span class="hljs-number">3001</span>, <span class="hljs-number">9999</span>); <br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></tbody></table></figure><ul><li>什么是sql脚本：文件名是.sql，并且该文件中编写了大量的SQL语句，执行sql脚本程序就相当于批量执行SQL语句。</li><li>你入职的时候，项目一般都是进展了一部分，多数情况下你进项目组的时候数据库的表以及数据都是有的，项目经理第一天可能会给你一个较大的sql脚本文件，你需要执行这个脚本文件来初始化你的本地数据库。（当然，也有可能数据库是共享的。）</li><li>创建文件：bjpowernode.sql，把以上SQL语句全部复制到sql脚本文件中。</li><li>执行SQL脚本文件，初始化数据库<ul><li>第一步：命令窗口登录mysql</li><li>第二步：创建数据库bjpowernode（如果之前已经创建就不需要再创建了）：create database bjpowernode;</li><li>第三步：使用数据库bjpowernode：use bjpowernode;</li><li>第四步：source命令执行sql脚本，注意：source命令后面是sql脚本文件的绝对路径。</li></ul></li></ul><p>&nbsp;       <img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221644143.png" alt="image-20250630221644143"></p><ul><li>第五步：查看是否初始化成功，执行：show tables;</li></ul><p>&nbsp;       <img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221703872.png" alt="image-20250630221703872"></p><ul><li>使用其他的mysql客户端工具也可以执行sql脚本，比如navicat。使用source命令执行sql脚本的优点：<strong>可支持大文件</strong>。</li></ul><h1 id="熟悉测试数据"><a href="#熟悉测试数据" class="headerlink" title="熟悉测试数据"></a>熟悉测试数据</h1><p>emp dept salgrade三张表分别存储什么信息</p><ul><li>emp：员工信息</li><li>dept：部门信息</li><li>salgrade：工资等级信息</li></ul><p>查看表结构：desc或describe，语法格式：desc或describe +表名<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221713009.png" alt="image-20250630221713009"><br>以上的结果展示的不是表中的数据，而是表的结构。</p><ul><li>Field是字段名</li><li>Type是这个字段的数据类型</li><li>Null是这个字段是否允许为空</li><li>Key是这个字段是否为主键或外键</li><li>Default是这个字段的默认值</li></ul><p>对以上表结构进行解释说明：</p><ul><li>emp表<ul><li>empno：员工编号，int类型（整数），不能为空，主键（主键后期学习约束时会进行说明）</li><li>ename：员工姓名，varchar类型（字符串）</li><li>job：工作岗位，varchar类型</li><li>mgr：上级领导编号，int类型</li><li>hiredate：雇佣日期，date类型（日期类型）</li><li>sal：月薪，double类型（带有浮点的数字）</li><li>comm：补助津贴，double类型</li><li>deptno：部门编号，int类型</li></ul></li><li>dept表<ul><li>deptno：部门编号，int类型，主键</li><li>dname：部门名称，varchar类型</li><li>loc：位置，varchar类型</li></ul></li><li>salgrade表<ul><li>grade：等级，int类型</li><li>losal：最低工资，int类型</li><li>hisal：最高工资，int类型</li></ul></li></ul><p>对于以上表结构要提前了解，后面学习的内容需要你马上反应出：哪个字段是什么意思。<br>查看一下表中的数据，来加深一下印象（以下SQL语句会在后面课程中学习）：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221723278.png" alt="image-20250630221723278"></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL查询DQL专题</title>
    <link href="/posts/5d301c0f.html"/>
    <url>/posts/5d301c0f.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h1><p>查询是SQL语言的核心，用于表达SQL查询的select查询命令是功能最强也是最为复杂的SQL语句，它的作用就是从数据库中检索数据，并将查询结果返回给用户。 select语句由：select子句(查询内容)、from子句(查询对象)、where子句(查询条件)、order by子句(排序方式)、group by子句(分组方式)等组成。查询语句属于SQL语句中的DQL语句，是所有SQL语句中最为复杂也是最重要的语句，所以必须掌握。接下来我们先从简单查询语句开始学习。</p><h2 id="查一个字段"><a href="#查一个字段" class="headerlink" title="查一个字段"></a>查一个字段</h2><p>查询一个字段说的是：一个表有多列，查询其中的一列。<br>语法格式：select 字段名 from 表名;</p><ul><li>select和from是关键字，不能随便写</li><li><strong>一条SQL语句必须以“;”结尾</strong></li><li><strong>对于SQL语句来说，大小写都可以</strong></li><li>字段名和表名属于标识符，按照表的实际情况填写，不知道字段名的，可以使用desc命令查看表结构</li></ul><p>案例1：查询公司中所有员工编号</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno <span class="hljs-keyword">from</span> emp; <br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221738866.png" alt="image-20250630221738866"><br>案例2：查询公司中所有员工姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ENAME <span class="hljs-keyword">FROM</span> EMP;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221748076.png" alt="image-20250630221748076"></p><p>在mysql命令行客户端中，sql语句没有分号是不会执行的：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221756361.png" alt="image-20250630221756361"><br>末尾加上“;”就执行了：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221805370.png" alt="image-20250630221805370"><br>以上sql虽然以分号结尾之后执行了，但是报错了，错误信息显示：语法错误。<br>假设一个SQL语句在书写过程中出错了，怎么终止这条SQL呢？\c<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221815238.png" alt="image-20250630221815238"></p><ul><li><input disabled="" type="checkbox"> 任务1：查询所有部门名称。</li><li><input disabled="" type="checkbox"> 任务2：查询所有薪资等级。</li></ul><h2 id="查多个字段"><a href="#查多个字段" class="headerlink" title="查多个字段"></a>查多个字段</h2><p>查询多个字段时，在字段名和字段名之间添加“,”即可。<br>语法格式：select 字段名1,字段名2,字段名3 from 表名;<br>案例1：查询员工编号以及员工姓名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno, ename <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221822818.png" alt="image-20250630221822818"></p><p>字段的前后顺序无所谓（只是显示结果列的时候顺序变了)：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, empno <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221830185.png" alt="image-20250630221830185"></p><ul><li><input disabled="" type="checkbox"> 任务1：查询部门编号、部门名称以及位置。</li><li><input disabled="" type="checkbox"> 任务2：查询员工的名字以及工作岗位。</li></ul><h2 id="查所有字段"><a href="#查所有字段" class="headerlink" title="查所有字段"></a>查所有字段</h2><p>查询所有字段的可以将每个字段都列出来查询，也可以采用“*”来代表所有字段<br>案例1：查询员工的所有信息</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221844093.png" alt="image-20250630221844093"><br>案例2：查询所有部门信息</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dept;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070342364.png"><br>采用“*”进行查询存在的缺点：</p><ul><li>select * from dept; 在执行的时候会被解析为 select DEPTNO, DNAME, LOC from dept; 再执行，所以这种效率方面弱一些。</li><li>采用“<em>”的可读性较差，通过“</em>”很难看出都有哪些具体的字段。</li></ul><p>什么时候使用“*”？</p><ul><li><p>这个SQL语句不在项目编码中使用，如果平时自己想快速查看表中所有数据的话，这种写法还是很给力的。</p></li><li><p><input disabled="" type="checkbox">  任务1：查询所有的薪资等级以及每个薪资等级的最低工资和最高工资。</p></li></ul><h2 id="查询时字段可参与数学运算"><a href="#查询时字段可参与数学运算" class="headerlink" title="查询时字段可参与数学运算"></a>查询时字段可参与数学运算</h2><p>在进行查询操作的时候，字段是可以参与数学运算的，例如加减乘除等。<br>案例1：查询每个员工的月薪</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070355554.png"></p><p>案例2：查询每个员工的年薪（月薪 * 12)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070404499.png"></p><ul><li><input disabled="" type="checkbox"> 任务1：查询每个员工月薪加1000之后的月薪</li><li><input disabled="" type="checkbox"> 任务2：查询每个员工月薪加1000之后的年薪</li></ul><h2 id="查询时字段可起别名"><a href="#查询时字段可起别名" class="headerlink" title="查询时字段可起别名"></a>查询时字段可起别名</h2><p>我们借用一下之前的SQL语句</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070414034.png"><br>以上的查询结果列名“sal * 12”可读性较差，是否可以给查询结果的列名进行重命名呢？</p><h3 id="as关键字"><a href="#as关键字" class="headerlink" title="as关键字"></a>as关键字</h3><ul><li>使用as关键字<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-keyword">as</span> yearsal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071552173.png"><br>通过as关键字起别名后，查询结果列显示yearsal，可读性增强。</li></ul><h3 id="省略as关键字"><a href="#省略as关键字" class="headerlink" title="省略as关键字"></a>省略as关键字</h3><ul><li><p>其实as关键字可以省略，只要使用空格即可</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> yearsal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071547735.png"></p></li><li><p>通过以上测试，得知as可以省略，可以使用空格代替as，但如果别名中有空格呢？</p><h3 id="别名中有空格"><a href="#别名中有空格" class="headerlink" title="别名中有空格"></a>别名中有空格</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-keyword">year</span> sal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071542621.png"><br>可以看出，执行报错了，说语法有问题，这是为什么？分析一下：SQL语句编译器在检查该语句的时候，在year后面遇到了空格，会继续找from关键字，但year后面不是from关键字，所以编译器报错了。怎么解决这个问题？记住：如果别名中有空格的话，可以将这个别名使用双引号或者单引号将其括起来。</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-string">"year sal"</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-string">'year sal'</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071537169.png"><br><strong>在mysql中，字符串既可以使用双引号也可以使用单引号，但还是建议使用单引号，因为单引号属于标准SQL。</strong></p><h3 id="别名中有中文"><a href="#别名中有中文" class="headerlink" title="别名中有中文"></a>别名中有中文</h3><ul><li>如果别名采用中文呢？<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> 年薪 <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071530100.png"></li></ul><p><strong>别名是中文是可以的，但是对于低版本的mysql来说会报错，需要添加双引号或单引号。</strong>我们当前使用的mysql版本是：8.0.24</p><ul><li><input disabled="" type="checkbox"> 任务：查询所有员工的信息，要求每个字段名采用中文显示。</li></ul><h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><p>通常在进行查询操作的时候，都是查询符合某些条件的数据，很少将表中所有数据都取出来。怎么取出表的部分数据？需要在查询语句中添加条件进行数据的过滤。常见的过滤条件如下：</p><table><thead><tr><th><strong>条件</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;或!=</td><td>不等于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>between…and…</td><td>等同于 &gt;= and &lt;=</td></tr><tr><td>is null</td><td>为空</td></tr><tr><td>is not null</td><td>不为空</td></tr><tr><td>&lt;=&gt;</td><td>安全等于（可读性差，很少使用了）。</td></tr><tr><td>and 或 &amp;&amp;</td><td>并且</td></tr><tr><td>or 或 ||</td><td>或者</td></tr><tr><td>in</td><td>在指定的值当中</td></tr><tr><td>not in</td><td>不在指定的值当中</td></tr><tr><td>exists</td><td></td></tr><tr><td>not exists</td><td></td></tr><tr><td>like</td><td>模糊查询</td></tr></tbody></table><h2 id="条件查询语法格式"><a href="#条件查询语法格式" class="headerlink" title="条件查询语法格式"></a>条件查询语法格式</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ...<br><span class="hljs-keyword">from</span><br>  ...<br><span class="hljs-keyword">where</span><br>  过滤条件;<br></code></pre></td></tr></tbody></table></figure><p>过滤条件放在where子句当中，以上语句的执行顺序是：<br>    第一步：先执行from<br>    第二步：再通过where条件过滤<br>    第三步：最后执行select，查询并将结果展示到控制台</p><h2 id="等于、不等于"><a href="#等于、不等于" class="headerlink" title="等于、不等于"></a>等于、不等于</h2><h3 id="等于"><a href="#等于" class="headerlink" title="等于 ="></a>等于 =</h3><p>判断等量关系，支持多种数据类型，比如：数字、字符串、日期等。<br>案例1：查询月薪3000的员工编号及姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  empno,ename<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal = <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071523402.png"><br>案例2：查询员工FORD的岗位及月薪</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>job, sal<br><span class="hljs-keyword">from</span><br>emp<br><span class="hljs-keyword">where</span><br>ename = <span class="hljs-string">'FORD'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071518435.png"><br>存储在表emp中的员工姓名是FORD，全部大写，如果在查询的时候，写成全部小写会怎样呢？</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>job, sal<br><span class="hljs-keyword">from</span><br>emp<br><span class="hljs-keyword">where</span><br>ename = <span class="hljs-string">'ford'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071514136.png"></p><p>通过测试发现，即使写成小写ford，也是可以查询到结果的，<strong>不过这里需要注意的是：在Oracle数据库当中是查询不到数据的，Oracle的语法要比MySQL的语法严谨。对于SQL语句本身来说是不区分大小写的，但是对于表中真实存储的数据，大写A和小写a还是不一样的，这一点Oracle做的很好。MySQL的语法更随性。另外在Oracle当中，字符串是必须使用单引号括起来的，但在MySQL当中，字符串可以使用单引号，也可以使用双引号</strong>，如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>job, sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  ename = <span class="hljs-string">"FORD"</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071509627.png"><br>案例3：查询岗位是MANAGER的员工编号及姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  empno, ename<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job = <span class="hljs-string">'MANAGER'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071504317.png"></p><ul><li><input disabled="" type="checkbox"> 任务：查询工资级别是1的最低工资以及最高工资</li></ul><h3 id="不等于-lt-gt-或"><a href="#不等于-lt-gt-或" class="headerlink" title="不等于 <> 或 !="></a>不等于 &lt;&gt; 或 !=</h3><p>判断非等量关系，支持字符串、数字、日期类型等。不等号有两种写法，第一种&lt;&gt;，第二种!=，第二种写法和Java程序中的不等号相同，第一种写法比较诡异，不过也很好理解，比如&lt;&gt;3，表示小于3、大于3，就是不等于3。你get到了吗？<br>案例1：查询工资不是3000的员工编号、姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  empno,ename,sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &lt;&gt; <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071458135.png"><br>案例2：查询工作岗位不是MANAGER的员工姓名和岗位</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,job<br><span class="hljs-keyword">from</span><br>emp<br><span class="hljs-keyword">where</span><br>job &lt;&gt; <span class="hljs-string">'MANAGER'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071453294.png"></p><ul><li><input disabled="" type="checkbox"> 任务：查询不在部门编号为10的部门工作的员工信息</li></ul><h2 id="大于、大于等于、小于、小于等于"><a href="#大于、大于等于、小于、小于等于" class="headerlink" title="大于、大于等于、小于、小于等于"></a>大于、大于等于、小于、小于等于</h2><h3 id="大于-gt"><a href="#大于-gt" class="headerlink" title="大于 >"></a>大于 &gt;</h3><p>案例：找出薪资大于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &gt; <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071449077.png"></p><h3 id="大于等于-gt"><a href="#大于等于-gt" class="headerlink" title="大于等于 >="></a>大于等于 &gt;=</h3><p>案例：找出薪资大于等于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &gt;= <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071445184.png"></p><h3 id="小于-lt"><a href="#小于-lt" class="headerlink" title="小于 <"></a>小于 &lt;</h3><p>案例：找出薪资小于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &lt; <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071440119.png"></p><h3 id="小于等于-lt"><a href="#小于等于-lt" class="headerlink" title="小于等于 <="></a>小于等于 &lt;=</h3><p>案例：找出薪资小于等于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &lt;= <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071435498.png"></p><h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><p>and表示并且，还有另一种写法：&amp;&amp;<br>案例：找出薪资大于等于3000并且小于等于5000的员工姓名、薪资。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &gt;= <span class="hljs-number">3000</span> <span class="hljs-keyword">and</span> sal &lt;= <span class="hljs-number">5000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071430220.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071426239.png"></p><ul><li><input disabled="" type="checkbox"> 任务：找出工资级别为2~4（包含2和4）的最低工资和最高工资。</li></ul><h2 id="or"><a href="#or" class="headerlink" title="or"></a>or</h2><p>or表示或者，还有另一种写法：||<br>案例：找出工作岗位是MANAGER和SALESMAN的员工姓名、工作岗位</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job = <span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">or</span> job = <span class="hljs-string">'SALESMAN'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071421204.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071416782.png"></p><p>注意：这个题目描述中有这样一句话：MANAGER和SALESMAN，有的同学一看到“和”，就直接使用“and”了，因为“和”对应的英文单词是“and”，如果是这样的话，就大错特错了，因为and表示并且，使用and表示工作岗位既是MANAGER又是SALESMAN的员工，这样的员工是不存在的，因为每一个员工只有一个岗位，不可能同时从事两个岗位。所以使用and是查询不到任何结果的。如下</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job = <span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">and</span> job = <span class="hljs-string">'SALESMAN'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071411789.png"></p><ul><li><input disabled="" type="checkbox"> 任务：查询20和30部门的员工信息。</li></ul><h2 id="and和or的优先级问题"><a href="#and和or的优先级问题" class="headerlink" title="and和or的优先级问题"></a>and和or的优先级问题</h2><p>and和or同时出现时，and优先级较高，会先执行，如果希望or先执行，这个时候需要给or条件添加小括号。另外，以后遇到不确定的优先级时，可以通过添加小括号的方式来解决。对于优先级问题没必要记忆。<br>案例：找出薪资小于1500，并且部门编号是20或30的员工姓名、薪资、部门编号。<br>先来看一下错误写法：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,deptno<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &lt; <span class="hljs-number">1500</span> <span class="hljs-keyword">and</span> deptno = <span class="hljs-number">20</span> <span class="hljs-keyword">or</span> deptno = <span class="hljs-number">30</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071407010.png"><br>认真解读题意得知：薪资小于1500是一个大前提，要找出的是薪资小于1500的，满足这个条件的前提下，再找部门编号是20或30的，显然以上的运行结果中出现了薪资为1600的，为什么1600的会出现呢？这是因为“sal &lt; 1500 and deptno = 20”结合在一起了，“depnto = 30”成了一个独立的条件。会导致部门编号为30的所有员工全部查询出来。我们应该让“deptno = 20 or deptno = 30”结合在一起，正确写法如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,deptno<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &lt; <span class="hljs-number">1500</span> <span class="hljs-keyword">and</span> (deptno = <span class="hljs-number">20</span> <span class="hljs-keyword">or</span> deptno = <span class="hljs-number">30</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071402751.png"></p><ul><li><input disabled="" type="checkbox"> 任务：找出薪资小于1500的，并且工作岗位是CLERK和SALESMAN的员工姓名、薪资、岗位。</li></ul><h2 id="between…and…"><a href="#between…and…" class="headerlink" title="between…and…"></a>between…and…</h2><p>between…and…等同于 &gt;= and &lt;=<br>做区间判断的，包含左右两个边界值。<br>它支持数字、日期、字符串等数据类型。<br>between…and…在使用时一定是**左小右大**。左大右小时无法查询到数据。<br>between…and… 和 &gt;= and &lt;=只是在写法结构上有区别，执行原理和效率方面没有区别。<br>案例：找出薪资在1600到3000的员工姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename,sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>sal <span class="hljs-keyword">between</span> <span class="hljs-number">1600</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071357262.png"><br>采用左大右小的方式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename,sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>sal <span class="hljs-keyword">between</span> <span class="hljs-number">3000</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1600</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071352019.png"><br>没有查询到任何数据，所以在使用的时候一定要注意：<strong>左小右大</strong>。</p><ul><li><input disabled="" type="checkbox"> 任务：查询在1982-01-23到1987-04-19之间入职的员工</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071347380.png"><br>注意：以上SQL语句中日期需要加上单引号。</p><h2 id="is-null、is-not-null"><a href="#is-null、is-not-null" class="headerlink" title="is null、is not null"></a>is null、is not null</h2><p>判断某个数据是否为null，不能使用等号，只能使用 is null<br>判断某个数据是否不为null，不能使用不等号，只能使用 is not null<br>在数据库中null不是一个值，不能用等号和不等号衡量，null代表什么也没有，没有数据，没有值</p><h3 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h3><p>案例1：找出津贴为空的员工姓名、薪资、津贴。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,comm<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  comm <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071342073.png"><br>我们使用等号，尝试一下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,comm<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  comm = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071337122.png"><br>查询不到任何数据，所以判断是否为空，不能用等号。</p><h3 id="is-not-null"><a href="#is-not-null" class="headerlink" title="is not null"></a>is not null</h3><p>案例2：找出津贴不为空的员工姓名、薪资、津贴</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,comm<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071332925.png"></p><h2 id="in、not-in"><a href="#in、not-in" class="headerlink" title="in、not in"></a>in、not in</h2><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>job in(‘MANAGER’,’SALESMAN’,’CLERK’) 等同于 job = ‘MANAGER’ or job = ‘SALESMAN’ or job = ‘CLERK’<br>sal in(1600, 3000, 5000) 等同于 sal = 1600 or sal = 3000 or sal = 5000<br>in后面有一个小括号，小括号当中有多个值，值和值之间采用逗号隔开<br>sal in(1500, 5000)，需要注意的是：这个并不是说薪资在1500到5000之间，in不代表区间，表示sal是1500的和sal是5000的<br>案例1：找出工作岗位是MANAGER和SALESMAN的员工姓名、薪资、工作岗位<br>第一种：使用or</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job = <span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">or</span> job = <span class="hljs-string">'SALESMAN'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071327240.png"><br>第二种：使用in</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job <span class="hljs-keyword">in</span>(<span class="hljs-string">'MANAGER'</span>, <span class="hljs-string">'SALESMAN'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071321867.png"><br>案例2：找出薪资是1500/1600/3000的员工姓名、工作岗位</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal <span class="hljs-keyword">in</span>(<span class="hljs-number">1500</span>, <span class="hljs-number">1600</span>, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071316721.png"></p><ul><li><input disabled="" type="checkbox"> 任务：找出部门编号是10和20的员工编号、姓名。（要求使用两种方案）</li></ul><h3 id="not-in"><a href="#not-in" class="headerlink" title="not in"></a>not in</h3><p>job not in(‘MANAGER’,’SALESMAN’) 等同于 job &lt;&gt; ‘MANAGER’ and job &lt;&gt; ‘SALESMAN’<br>sal not in(1600, 5000) 等同于 sal &lt;&gt; 1600 and sal &lt;&gt; 5000<br>案例：找出工作岗位不是MANAGER和SALESMAN的员工姓名、工作岗位<br>第一种：使用and</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename,job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job &lt;&gt; <span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">and</span> job &lt;&gt; <span class="hljs-string">'SALESMAN'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071311768.png"><br>第二种：使用not in</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename,job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-string">'MANAGER'</span>, <span class="hljs-string">'SALESMAN'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071306928.png"></p><ul><li><input disabled="" type="checkbox"> 任务：找出薪资不是1600和3000的员工姓名、薪资。</li></ul><h3 id="in、not-in-与-NULL"><a href="#in、not-in-与-NULL" class="headerlink" title="in、not in 与 NULL"></a>in、not in 与 NULL</h3><p>先来看一下emp表中的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071301774.png"><br>通过表中数据观察到，有4个员工的津贴不为NULL，剩下10个员工的津贴都是NULL。<br>写这样一条SQL语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">in</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">300</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071256767.png"><br>为什么以上执行结果只有一条记录呢？分析一下：<br>首先你要知道in的执行原理实际上是采用=和or的方式，也就是说，以上SQL语句实际上是：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm = <span class="hljs-literal">NULL</span> <span class="hljs-keyword">or</span> comm = <span class="hljs-number">300</span>;<br></code></pre></td></tr></tbody></table></figure><p>其中NULL不能用等号=进行判断，所以comm = NULL结果是false，然而中间使用的是or，所以comm = NULL被忽略了。所以查询结果就以上一条数据。<br>通过以上的测试得知：<strong>in是自动忽略NULL的</strong>。<br>再写这样一条SQL语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">300</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071252589.png"><br>以上的执行结果奇怪了，为什么没有查到任何数据呢？我们分析一下：<br>首先你要知道not in的执行原理实际上是采用&lt;&gt;和and的方式，也就是说，以上SQL语句实际上是：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm &lt;&gt; <span class="hljs-literal">NULL</span> <span class="hljs-keyword">and</span> comm &lt;&gt; <span class="hljs-number">300</span>;<br></code></pre></td></tr></tbody></table></figure><p>其中NULL的判断不能使用&lt;&gt;，所以comm &lt;&gt; NULL结果是false，由于后面是and，and表示并且，comm &lt;&gt; NULL已经是false了，所以and右边的就没必要运算了，comm &lt;&gt; NULL and comm &lt;&gt; 300的整体运算结果就是false。所以查询不到任何数据。<br>通过以上测试得知，<strong>not in是不会自动忽略NULL的</strong>，所以在使用not in的时候一定要提前过滤掉NULL。</p><h2 id="in和or的效率比拼"><a href="#in和or的效率比拼" class="headerlink" title="in和or的效率比拼"></a>in和or的效率比拼</h2><p>在MySQL当中，如何统计一个SQL语句的执行时长？</p><ul><li>可以使用这个命令：show profiles;  这个命令可以查看在mysql中执行的所有SQL以及命令的耗费时长。</li><li>show profiles; 是在mysql5.0.37之后添加的。所以要确保你的mysql版本没问题。</li><li>如何开启时长统计功能：set profiling = 1;</li><li>查看时长统计功能是否开启：show variables like ‘%pro%’;</li><li>查看每条SQL的耗时：show profiles;</li><li>查看其中某条SQL耗时明细：show profile for query query_id;</li><li>查看最新一条SQL的耗时明细：show profile;</li><li>查看cpu，io等信息：show profile block io, cpu for query query_id; </li></ul><p>or的效率为O(n)，而in的效率为O(log n), 当n越大的时候效率相差越明显（<strong>也就是说数据量越大的时候，in的效率越高</strong>）。以下是测试过程：<br>第一步，创建测试表，并生成测试数据，测试数据为1000万条记录。数据库中关闭了query cache，因此数据库缓存不会对查询造成影响。具体的代码如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">#创建测试的test表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-keyword">test</span>; <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">test</span>( <br>    <span class="hljs-keyword">ID</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>, <br>    <span class="hljs-string">`Name`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>, <br>    PRIMARY <span class="hljs-keyword">KEY</span>( <span class="hljs-keyword">ID</span> ) <br>)<span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span> utf8; <br><br><span class="hljs-comment">#创建生成测试数据的存储过程</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> pre_test; <br>DELIMITER //<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> pre_test() <br><span class="hljs-keyword">BEGIN</span> <br><span class="hljs-keyword">DECLARE</span> i <span class="hljs-built_in">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>; <br><span class="hljs-keyword">SET</span> autocommit = <span class="hljs-number">0</span>; <br>WHILE i&lt;10000000 DO <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">test</span> ( <span class="hljs-keyword">ID</span>,<span class="hljs-string">`Name`</span> ) <span class="hljs-keyword">VALUES</span>( i, <span class="hljs-keyword">CONCAT</span>( <span class="hljs-string">'Carl'</span>, i ) ); <br><span class="hljs-keyword">SET</span> i = i+<span class="hljs-number">1</span>; <br>IF i%2000 = 0 THEN <br><span class="hljs-keyword">COMMIT</span>; <br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>; <br><span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span>; <br><span class="hljs-keyword">END</span>; //<br>DELIMITER ;<br><br><span class="hljs-comment">#执行存储过程生成测试数据</span><br><span class="hljs-keyword">CALL</span> pre_test();<br></code></pre></td></tr></tbody></table></figure><p>以上SQL看不懂没关系，先执行它，进行数据初始化准备工作。<br>第二步：分三种情况进行测试，分别是：<br>第1种情况：in和or所在列为主键的情形。<br>第2种情况：in和or所在列创建有索引的情形。<br>第3种情况：in和or所在列没有索引的情形。<br>每种情况又采用不同的in和or的数量进行测试。由于测试语句的数据量有4种情况，我这里就称为A组、B组、C组、D组，其中A组为3个值，B组为150个值，C组为300个值，D组为1000个值。具体的测试语句如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">#A组</span><br><span class="hljs-comment">#in和or中有3条数据的情况</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">23</span>,<span class="hljs-number">48</span>);<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> =<span class="hljs-number">1</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48</span>;<br><br><span class="hljs-comment">#B组</span><br><span class="hljs-comment">#in和or中有150条数据的情况</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">59617932</span>,<span class="hljs-number">98114476</span>,<span class="hljs-number">89047409</span>,<span class="hljs-number">26968186</span>,<span class="hljs-number">56586105</span>,<span class="hljs-number">35488201</span>,<span class="hljs-number">53251989</span>,<span class="hljs-number">18182139</span>,<span class="hljs-number">71164231</span>,<span class="hljs-number">57655852</span>,<span class="hljs-number">7948544</span>,<span class="hljs-number">60658339</span>,<span class="hljs-number">50758185</span>,<span class="hljs-number">66667117</span>,<span class="hljs-number">34771253</span>,<span class="hljs-number">68699137</span>,<span class="hljs-number">27877290</span>,<span class="hljs-number">44275282</span>,<span class="hljs-number">1585444</span>,<span class="hljs-number">71219424</span>,<span class="hljs-number">90937482</span>,<span class="hljs-number">83928635</span>,<span class="hljs-number">24588528</span>,<span class="hljs-number">81933207</span>,<span class="hljs-number">9607562</span>,<span class="hljs-number">12013895</span>,<span class="hljs-number">84640278</span>,<span class="hljs-number">85549596</span>,<span class="hljs-number">53249244</span>,<span class="hljs-number">8567444</span>,<span class="hljs-number">85402877</span>,<span class="hljs-number">15040223</span>,<span class="hljs-number">54266509</span>,<span class="hljs-number">17718135</span>,<span class="hljs-number">91687882</span>,<span class="hljs-number">22930500</span>,<span class="hljs-number">94756430</span>,<span class="hljs-number">66031097</span>,<span class="hljs-number">13084573</span>,<span class="hljs-number">18137443</span>,<span class="hljs-number">89917778</span>,<span class="hljs-number">46845456</span>,<span class="hljs-number">43939093</span>,<span class="hljs-number">35943480</span>,<span class="hljs-number">18213703</span>,<span class="hljs-number">46362815</span>,<span class="hljs-number">49835919</span>,<span class="hljs-number">83137546</span>,<span class="hljs-number">2101409</span>,<span class="hljs-number">74932951</span>,<span class="hljs-number">11984477</span>,<span class="hljs-number">93113331</span>,<span class="hljs-number">77848222</span>,<span class="hljs-number">68546065</span>,<span class="hljs-number">33728734</span>,<span class="hljs-number">90793684</span>,<span class="hljs-number">44975642</span>,<span class="hljs-number">61387237</span>,<span class="hljs-number">52483391</span>,<span class="hljs-number">97716233</span>,<span class="hljs-number">49449060</span>,<span class="hljs-number">22411182</span>,<span class="hljs-number">30776331</span>,<span class="hljs-number">60597240</span>,<span class="hljs-number">6911731</span>,<span class="hljs-number">45789095</span>,<span class="hljs-number">62075344</span>,<span class="hljs-number">8379933</span>,<span class="hljs-number">97910423</span>,<span class="hljs-number">86861971</span>,<span class="hljs-number">81342386</span>,<span class="hljs-number">93423963</span>,<span class="hljs-number">83852896</span>,<span class="hljs-number">18566482</span>,<span class="hljs-number">22747687</span>,<span class="hljs-number">51420625</span>,<span class="hljs-number">75862064</span>,<span class="hljs-number">26402882</span>,<span class="hljs-number">93958561</span>,<span class="hljs-number">85202979</span>,<span class="hljs-number">97049369</span>,<span class="hljs-number">67674725</span>,<span class="hljs-number">9475653</span>,<span class="hljs-number">92302381</span>,<span class="hljs-number">78133617</span>,<span class="hljs-number">49295001</span>,<span class="hljs-number">36517340</span>,<span class="hljs-number">81387142</span>,<span class="hljs-number">15707241</span>,<span class="hljs-number">60832834</span>,<span class="hljs-number">93157830</span>,<span class="hljs-number">64171432</span>,<span class="hljs-number">58537826</span>,<span class="hljs-number">70141767</span>,<span class="hljs-number">7326025</span>,<span class="hljs-number">36632075</span>,<span class="hljs-number">9639624</span>,<span class="hljs-number">8900056</span>,<span class="hljs-number">99702164</span>,<span class="hljs-number">35108945</span>,<span class="hljs-number">87820933</span>,<span class="hljs-number">57302965</span>,<span class="hljs-number">16652391</span>,<span class="hljs-number">41845132</span>,<span class="hljs-number">62184393</span>,<span class="hljs-number">70136913</span>,<span class="hljs-number">79574630</span>,<span class="hljs-number">32562398</span>,<span class="hljs-number">94616790</span>,<span class="hljs-number">61258220</span>,<span class="hljs-number">73162018</span>,<span class="hljs-number">81644480</span>,<span class="hljs-number">19453596</span>,<span class="hljs-number">97380163</span>,<span class="hljs-number">1204733</span>,<span class="hljs-number">33357040</span>,<span class="hljs-number">84854495</span>,<span class="hljs-number">13888863</span>,<span class="hljs-number">49041868</span>,<span class="hljs-number">89272326</span>,<span class="hljs-number">38405345</span>,<span class="hljs-number">571248</span>,<span class="hljs-number">6349029</span>,<span class="hljs-number">70755321</span>,<span class="hljs-number">79307694</span>,<span class="hljs-number">60619684</span>,<span class="hljs-number">92624181</span>,<span class="hljs-number">73135306</span>,<span class="hljs-number">23279848</span>,<span class="hljs-number">95612954</span>,<span class="hljs-number">55845916</span>,<span class="hljs-number">6223606</span>,<span class="hljs-number">43836918</span>,<span class="hljs-number">37459781</span>,<span class="hljs-number">67969314</span>,<span class="hljs-number">99398872</span>,<span class="hljs-number">7616960</span>,<span class="hljs-number">37189193</span>,<span class="hljs-number">50151920</span>,<span class="hljs-number">62881879</span>,<span class="hljs-number">12364637</span>,<span class="hljs-number">33204320</span>,<span class="hljs-number">27135672</span>,<span class="hljs-number">28441504</span>,<span class="hljs-number">47373461</span>,<span class="hljs-number">87967926</span>,<span class="hljs-number">30631796</span>,<span class="hljs-number">20053540</span>,<span class="hljs-number">18735984</span>,<span class="hljs-number">83406724</span>);<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59617932</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98114476</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89047409</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26968186</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56586105</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35488201</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53251989</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18182139</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71164231</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57655852</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7948544</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60658339</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50758185</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66667117</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34771253</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68699137</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27877290</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44275282</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1585444</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71219424</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90937482</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83928635</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24588528</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81933207</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9607562</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12013895</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84640278</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85549596</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53249244</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8567444</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85402877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15040223</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54266509</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17718135</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91687882</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22930500</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94756430</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66031097</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13084573</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18137443</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89917778</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46845456</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43939093</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35943480</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18213703</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46362815</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49835919</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83137546</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2101409</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74932951</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11984477</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93113331</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77848222</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68546065</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33728734</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90793684</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44975642</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61387237</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52483391</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97716233</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49449060</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22411182</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30776331</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60597240</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6911731</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45789095</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62075344</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8379933</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97910423</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86861971</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81342386</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93423963</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83852896</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18566482</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22747687</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51420625</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75862064</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26402882</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93958561</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85202979</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97049369</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67674725</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9475653</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92302381</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78133617</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49295001</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36517340</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81387142</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15707241</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60832834</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93157830</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64171432</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58537826</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70141767</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7326025</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36632075</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9639624</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8900056</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99702164</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35108945</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87820933</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57302965</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16652391</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41845132</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62184393</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70136913</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79574630</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32562398</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94616790</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61258220</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73162018</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81644480</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19453596</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97380163</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1204733</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33357040</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84854495</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13888863</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49041868</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89272326</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38405345</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">571248</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6349029</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70755321</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79307694</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60619684</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92624181</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73135306</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23279848</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95612954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55845916</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6223606</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43836918</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37459781</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67969314</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99398872</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7616960</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37189193</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50151920</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62881879</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12364637</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33204320</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27135672</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28441504</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47373461</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87967926</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30631796</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20053540</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18735984</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83406724</span>;<br><br><br><span class="hljs-comment">#C组</span><br><span class="hljs-comment">#in和or中有300条数据的情况</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">37092877</span>,<span class="hljs-number">94859722</span>,<span class="hljs-number">74276090</span>,<span class="hljs-number">8763830</span>,<span class="hljs-number">38727241</span>,<span class="hljs-number">95732954</span>,<span class="hljs-number">93414819</span>,<span class="hljs-number">55070016</span>,<span class="hljs-number">3591352</span>,<span class="hljs-number">73857925</span>,<span class="hljs-number">92290525</span>,<span class="hljs-number">15210159</span>,<span class="hljs-number">83905516</span>,<span class="hljs-number">54934589</span>,<span class="hljs-number">83004136</span>,<span class="hljs-number">31442143</span>,<span class="hljs-number">6060569</span>,<span class="hljs-number">22209206</span>,<span class="hljs-number">27649629</span>,<span class="hljs-number">11464943</span>,<span class="hljs-number">77822402</span>,<span class="hljs-number">28714780</span>,<span class="hljs-number">10058522</span>,<span class="hljs-number">62252663</span>,<span class="hljs-number">13751461</span>,<span class="hljs-number">38997875</span>,<span class="hljs-number">47320577</span>,<span class="hljs-number">64507359</span>,<span class="hljs-number">36137908</span>,<span class="hljs-number">54297630</span>,<span class="hljs-number">97411161</span>,<span class="hljs-number">56542672</span>,<span class="hljs-number">22017966</span>,<span class="hljs-number">55190708</span>,<span class="hljs-number">70072386</span>,<span class="hljs-number">24300664</span>,<span class="hljs-number">93413617</span>,<span class="hljs-number">23621629</span>,<span class="hljs-number">74772508</span>,<span class="hljs-number">62774612</span>,<span class="hljs-number">43001947</span>,<span class="hljs-number">46161388</span>,<span class="hljs-number">85563006</span>,<span class="hljs-number">70177147</span>,<span class="hljs-number">63960440</span>,<span class="hljs-number">18001207</span>,<span class="hljs-number">81734850</span>,<span class="hljs-number">10635060</span>,<span class="hljs-number">6551152</span>,<span class="hljs-number">54877885</span>,<span class="hljs-number">44426798</span>,<span class="hljs-number">73950635</span>,<span class="hljs-number">18713144</span>,<span class="hljs-number">21690065</span>,<span class="hljs-number">82153543</span>,<span class="hljs-number">26048520</span>,<span class="hljs-number">79954773</span>,<span class="hljs-number">22411093</span>,<span class="hljs-number">97307339</span>,<span class="hljs-number">74193176</span>,<span class="hljs-number">1413532</span>,<span class="hljs-number">88006544</span>,<span class="hljs-number">36062746</span>,<span class="hljs-number">24043946</span>,<span class="hljs-number">17132007</span>,<span class="hljs-number">95958217</span>,<span class="hljs-number">26112542</span>,<span class="hljs-number">27303972</span>,<span class="hljs-number">17247403</span>,<span class="hljs-number">56778979</span>,<span class="hljs-number">60928031</span>,<span class="hljs-number">69369613</span>,<span class="hljs-number">90584759</span>,<span class="hljs-number">86234538</span>,<span class="hljs-number">41726089</span>,<span class="hljs-number">25315005</span>,<span class="hljs-number">27568726</span>,<span class="hljs-number">25091624</span>,<span class="hljs-number">15307765</span>,<span class="hljs-number">83130887</span>,<span class="hljs-number">42726438</span>,<span class="hljs-number">75872353</span>,<span class="hljs-number">18991223</span>,<span class="hljs-number">47819224</span>,<span class="hljs-number">75457713</span>,<span class="hljs-number">54659391</span>,<span class="hljs-number">54889687</span>,<span class="hljs-number">65229322</span>,<span class="hljs-number">17124556</span>,<span class="hljs-number">38376043</span>,<span class="hljs-number">1989975</span>,<span class="hljs-number">45973571</span>,<span class="hljs-number">48597804</span>,<span class="hljs-number">58632319</span>,<span class="hljs-number">43388664</span>,<span class="hljs-number">97010450</span>,<span class="hljs-number">94745635</span>,<span class="hljs-number">13217373</span>,<span class="hljs-number">40472912</span>,<span class="hljs-number">40220510</span>,<span class="hljs-number">58319808</span>,<span class="hljs-number">48228318</span>,<span class="hljs-number">48936085</span>,<span class="hljs-number">86281500</span>,<span class="hljs-number">65466706</span>,<span class="hljs-number">96815281</span>,<span class="hljs-number">11751559</span>,<span class="hljs-number">50188155</span>,<span class="hljs-number">76649755</span>,<span class="hljs-number">35315411</span>,<span class="hljs-number">20360954</span>,<span class="hljs-number">17739218</span>,<span class="hljs-number">10918461</span>,<span class="hljs-number">51429591</span>,<span class="hljs-number">41447650</span>,<span class="hljs-number">65170472</span>,<span class="hljs-number">26810295</span>,<span class="hljs-number">80912347</span>,<span class="hljs-number">17157209</span>,<span class="hljs-number">75851858</span>,<span class="hljs-number">61150903</span>,<span class="hljs-number">4408208</span>,<span class="hljs-number">61200404</span>,<span class="hljs-number">6655467</span>,<span class="hljs-number">66863737</span>,<span class="hljs-number">51549112</span>,<span class="hljs-number">61951371</span>,<span class="hljs-number">14368308</span>,<span class="hljs-number">14663119</span>,<span class="hljs-number">8762531</span>,<span class="hljs-number">31765056</span>,<span class="hljs-number">30560647</span>,<span class="hljs-number">41048147</span>,<span class="hljs-number">95526521</span>,<span class="hljs-number">94929131</span>,<span class="hljs-number">56881239</span>,<span class="hljs-number">79014587</span>,<span class="hljs-number">62705983</span>,<span class="hljs-number">15892901</span>,<span class="hljs-number">66151473</span>,<span class="hljs-number">98846144</span>,<span class="hljs-number">79336731</span>,<span class="hljs-number">35949035</span>,<span class="hljs-number">26250054</span>,<span class="hljs-number">97536202</span>,<span class="hljs-number">40575682</span>,<span class="hljs-number">6965144</span>,<span class="hljs-number">91059908</span>,<span class="hljs-number">97939380</span>,<span class="hljs-number">30854180</span>,<span class="hljs-number">1965937</span>,<span class="hljs-number">17193347</span>,<span class="hljs-number">76584991</span>,<span class="hljs-number">70467475</span>,<span class="hljs-number">6559872</span>,<span class="hljs-number">97386594</span>,<span class="hljs-number">13939914</span>,<span class="hljs-number">20379091</span>,<span class="hljs-number">84906436</span>,<span class="hljs-number">45989448</span>,<span class="hljs-number">17337270</span>,<span class="hljs-number">4949675</span>,<span class="hljs-number">96963499</span>,<span class="hljs-number">12561575</span>,<span class="hljs-number">77153018</span>,<span class="hljs-number">73213368</span>,<span class="hljs-number">68283041</span>,<span class="hljs-number">33977574</span>,<span class="hljs-number">86290771</span>,<span class="hljs-number">70381017</span>,<span class="hljs-number">73095085</span>,<span class="hljs-number">454900</span>,<span class="hljs-number">44614195</span>,<span class="hljs-number">48171334</span>,<span class="hljs-number">49603342</span>,<span class="hljs-number">7430998</span>,<span class="hljs-number">29447060</span>,<span class="hljs-number">47643508</span>,<span class="hljs-number">82393912</span>,<span class="hljs-number">83169846</span>,<span class="hljs-number">94256496</span>,<span class="hljs-number">35275444</span>,<span class="hljs-number">40024984</span>,<span class="hljs-number">25377535</span>,<span class="hljs-number">46571333</span>,<span class="hljs-number">32510994</span>,<span class="hljs-number">70927802</span>,<span class="hljs-number">92017916</span>,<span class="hljs-number">97302502</span>,<span class="hljs-number">22859741</span>,<span class="hljs-number">32726786</span>,<span class="hljs-number">79071601</span>,<span class="hljs-number">93977472</span>,<span class="hljs-number">47409421</span>,<span class="hljs-number">49311618</span>,<span class="hljs-number">77366144</span>,<span class="hljs-number">84838598</span>,<span class="hljs-number">59401507</span>,<span class="hljs-number">67110877</span>,<span class="hljs-number">42075938</span>,<span class="hljs-number">76962007</span>,<span class="hljs-number">27984930</span>,<span class="hljs-number">72982484</span>,<span class="hljs-number">81363683</span>,<span class="hljs-number">75017478</span>,<span class="hljs-number">88624177</span>,<span class="hljs-number">67220235</span>,<span class="hljs-number">88290070</span>,<span class="hljs-number">26311443</span>,<span class="hljs-number">87681081</span>,<span class="hljs-number">77960250</span>,<span class="hljs-number">4996033</span>,<span class="hljs-number">68448074</span>,<span class="hljs-number">67762279</span>,<span class="hljs-number">99650583</span>,<span class="hljs-number">36766422</span>,<span class="hljs-number">27233152</span>,<span class="hljs-number">71436659</span>,<span class="hljs-number">25428777</span>,<span class="hljs-number">81481679</span>,<span class="hljs-number">51070397</span>,<span class="hljs-number">88351803</span>,<span class="hljs-number">78755075</span>,<span class="hljs-number">26783938</span>,<span class="hljs-number">83610840</span>,<span class="hljs-number">45650662</span>,<span class="hljs-number">86305644</span>,<span class="hljs-number">1717314</span>,<span class="hljs-number">66176062</span>,<span class="hljs-number">6507047</span>,<span class="hljs-number">45084786</span>,<span class="hljs-number">74402982</span>,<span class="hljs-number">55661367</span>,<span class="hljs-number">35721238</span>,<span class="hljs-number">40424913</span>,<span class="hljs-number">24294239</span>,<span class="hljs-number">30223531</span>,<span class="hljs-number">55367671</span>,<span class="hljs-number">56777532</span>,<span class="hljs-number">12604154</span>,<span class="hljs-number">4870493</span>,<span class="hljs-number">14750488</span>,<span class="hljs-number">74039611</span>,<span class="hljs-number">42549918</span>,<span class="hljs-number">70710424</span>,<span class="hljs-number">56247316</span>,<span class="hljs-number">63002053</span>,<span class="hljs-number">71117605</span>,<span class="hljs-number">16510883</span>,<span class="hljs-number">67417211</span>,<span class="hljs-number">34057637</span>,<span class="hljs-number">74185092</span>,<span class="hljs-number">58603491</span>,<span class="hljs-number">66987830</span>,<span class="hljs-number">73584171</span>,<span class="hljs-number">9178319</span>,<span class="hljs-number">47096502</span>,<span class="hljs-number">1554825</span>,<span class="hljs-number">37756804</span>,<span class="hljs-number">85168245</span>,<span class="hljs-number">92690138</span>,<span class="hljs-number">6120773</span>,<span class="hljs-number">99586029</span>,<span class="hljs-number">74696745</span>,<span class="hljs-number">61803307</span>,<span class="hljs-number">56631845</span>,<span class="hljs-number">42681796</span>,<span class="hljs-number">58965644</span>,<span class="hljs-number">68703695</span>,<span class="hljs-number">69660559</span>,<span class="hljs-number">15879062</span>,<span class="hljs-number">26713059</span>,<span class="hljs-number">85186928</span>,<span class="hljs-number">63117471</span>,<span class="hljs-number">53007808</span>,<span class="hljs-number">74576547</span>,<span class="hljs-number">32187857</span>,<span class="hljs-number">13701205</span>,<span class="hljs-number">88645881</span>,<span class="hljs-number">24507258</span>,<span class="hljs-number">87453800</span>,<span class="hljs-number">39624977</span>,<span class="hljs-number">75862710</span>,<span class="hljs-number">62419627</span>,<span class="hljs-number">70804059</span>,<span class="hljs-number">10461373</span>,<span class="hljs-number">18265782</span>,<span class="hljs-number">56366177</span>,<span class="hljs-number">68093007</span>,<span class="hljs-number">75760763</span>,<span class="hljs-number">43931574</span>,<span class="hljs-number">65808002</span>,<span class="hljs-number">49148775</span>,<span class="hljs-number">98019987</span>,<span class="hljs-number">71183123</span>,<span class="hljs-number">53762434</span>,<span class="hljs-number">78851856</span>,<span class="hljs-number">37767085</span>,<span class="hljs-number">89124453</span>,<span class="hljs-number">47566746</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37092877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94859722</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74276090</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8763830</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38727241</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95732954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93414819</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55070016</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3591352</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73857925</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92290525</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15210159</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83905516</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54934589</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83004136</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31442143</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6060569</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22209206</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27649629</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11464943</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77822402</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28714780</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10058522</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62252663</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13751461</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38997875</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47320577</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64507359</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36137908</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54297630</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97411161</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56542672</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22017966</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55190708</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70072386</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24300664</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93413617</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23621629</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74772508</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62774612</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43001947</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46161388</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85563006</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70177147</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63960440</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18001207</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81734850</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10635060</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6551152</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54877885</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44426798</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73950635</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18713144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21690065</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82153543</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26048520</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79954773</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22411093</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97307339</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74193176</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1413532</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88006544</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36062746</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24043946</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17132007</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95958217</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26112542</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27303972</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17247403</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56778979</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60928031</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69369613</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90584759</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86234538</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41726089</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25315005</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27568726</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25091624</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15307765</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83130887</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42726438</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75872353</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18991223</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47819224</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75457713</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54659391</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54889687</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65229322</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17124556</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38376043</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1989975</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45973571</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48597804</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58632319</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43388664</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97010450</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94745635</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13217373</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40472912</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40220510</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58319808</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48228318</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48936085</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86281500</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65466706</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96815281</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11751559</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50188155</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76649755</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35315411</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20360954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17739218</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10918461</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51429591</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41447650</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65170472</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26810295</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80912347</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17157209</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75851858</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61150903</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4408208</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61200404</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6655467</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66863737</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51549112</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61951371</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14368308</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14663119</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8762531</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31765056</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30560647</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41048147</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95526521</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94929131</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56881239</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79014587</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62705983</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15892901</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66151473</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98846144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79336731</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35949035</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26250054</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97536202</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40575682</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6965144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91059908</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97939380</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30854180</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1965937</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17193347</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76584991</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70467475</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6559872</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97386594</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13939914</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20379091</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84906436</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45989448</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17337270</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4949675</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96963499</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12561575</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77153018</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73213368</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68283041</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33977574</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86290771</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70381017</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73095085</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">454900</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44614195</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48171334</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49603342</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7430998</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29447060</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47643508</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82393912</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83169846</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94256496</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35275444</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40024984</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25377535</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46571333</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32510994</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70927802</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92017916</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97302502</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22859741</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32726786</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79071601</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93977472</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47409421</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49311618</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77366144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84838598</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59401507</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67110877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42075938</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76962007</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27984930</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72982484</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81363683</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75017478</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88624177</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67220235</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88290070</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26311443</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87681081</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77960250</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4996033</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68448074</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67762279</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99650583</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36766422</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27233152</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71436659</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25428777</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81481679</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51070397</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88351803</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78755075</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26783938</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83610840</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45650662</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86305644</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1717314</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66176062</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6507047</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45084786</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74402982</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55661367</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35721238</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40424913</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24294239</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30223531</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55367671</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56777532</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12604154</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4870493</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14750488</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74039611</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42549918</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70710424</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56247316</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63002053</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71117605</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16510883</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67417211</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34057637</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74185092</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58603491</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66987830</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73584171</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9178319</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47096502</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1554825</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37756804</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85168245</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92690138</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6120773</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99586029</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74696745</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61803307</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56631845</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42681796</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58965644</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68703695</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69660559</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15879062</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26713059</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85186928</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63117471</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53007808</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74576547</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32187857</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13701205</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88645881</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24507258</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87453800</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39624977</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75862710</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62419627</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70804059</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10461373</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18265782</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56366177</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68093007</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75760763</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43931574</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65808002</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49148775</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98019987</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71183123</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53762434</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78851856</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37767085</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89124453</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47566746</span>;<br><br><br><span class="hljs-comment">#D组</span><br><span class="hljs-comment">#in和or中有1000条数据的情况</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">93674701</span>,<span class="hljs-number">9720356</span>,<span class="hljs-number">31732184</span>,<span class="hljs-number">53855095</span>,<span class="hljs-number">33144472</span>,<span class="hljs-number">71864888</span>,<span class="hljs-number">27541768</span>,<span class="hljs-number">27238726</span>,<span class="hljs-number">83648428</span>,<span class="hljs-number">12942332</span>,<span class="hljs-number">26918445</span>,<span class="hljs-number">19781953</span>,<span class="hljs-number">81861032</span>,<span class="hljs-number">74800064</span>,<span class="hljs-number">12286132</span>,<span class="hljs-number">6624397</span>,<span class="hljs-number">64942581</span>,<span class="hljs-number">70512799</span>,<span class="hljs-number">46356598</span>,<span class="hljs-number">88292448</span>,<span class="hljs-number">87069909</span>,<span class="hljs-number">38175756</span>,<span class="hljs-number">98121997</span>,<span class="hljs-number">62570414</span>,<span class="hljs-number">15900806</span>,<span class="hljs-number">51527968</span>,<span class="hljs-number">89092372</span>,<span class="hljs-number">8084203</span>,<span class="hljs-number">53772848</span>,<span class="hljs-number">78871524</span>,<span class="hljs-number">3608561</span>,<span class="hljs-number">85909562</span>,<span class="hljs-number">41702172</span>,<span class="hljs-number">61800503</span>,<span class="hljs-number">57877634</span>,<span class="hljs-number">93407278</span>,<span class="hljs-number">30824340</span>,<span class="hljs-number">13159046</span>,<span class="hljs-number">49055339</span>,<span class="hljs-number">73058078</span>,<span class="hljs-number">983603</span>,<span class="hljs-number">73571456</span>,<span class="hljs-number">51694978</span>,<span class="hljs-number">75136628</span>,<span class="hljs-number">82716874</span>,<span class="hljs-number">83551181</span>,<span class="hljs-number">7964224</span>,<span class="hljs-number">47505945</span>,<span class="hljs-number">92695321</span>,<span class="hljs-number">15885152</span>,<span class="hljs-number">79282709</span>,<span class="hljs-number">18572099</span>,<span class="hljs-number">27392970</span>,<span class="hljs-number">14552787</span>,<span class="hljs-number">19848227</span>,<span class="hljs-number">4518183</span>,<span class="hljs-number">11773920</span>,<span class="hljs-number">22285326</span>,<span class="hljs-number">71605145</span>,<span class="hljs-number">2402625</span>,<span class="hljs-number">63365854</span>,<span class="hljs-number">70973600</span>,<span class="hljs-number">10584706</span>,<span class="hljs-number">83688869</span>,<span class="hljs-number">84268419</span>,<span class="hljs-number">6026005</span>,<span class="hljs-number">36545233</span>,<span class="hljs-number">24462648</span>,<span class="hljs-number">19293921</span>,<span class="hljs-number">17561083</span>,<span class="hljs-number">52105483</span>,<span class="hljs-number">59243514</span>,<span class="hljs-number">35230465</span>,<span class="hljs-number">34650779</span>,<span class="hljs-number">30053489</span>,<span class="hljs-number">24225251</span>,<span class="hljs-number">59642405</span>,<span class="hljs-number">81933853</span>,<span class="hljs-number">94495716</span>,<span class="hljs-number">26364324</span>,<span class="hljs-number">25980634</span>,<span class="hljs-number">5579237</span>,<span class="hljs-number">14569289</span>,<span class="hljs-number">89417845</span>,<span class="hljs-number">71178959</span>,<span class="hljs-number">4143920</span>,<span class="hljs-number">20467990</span>,<span class="hljs-number">53316808</span>,<span class="hljs-number">21288525</span>,<span class="hljs-number">82249537</span>,<span class="hljs-number">37737589</span>,<span class="hljs-number">44712689</span>,<span class="hljs-number">36788133</span>,<span class="hljs-number">15668654</span>,<span class="hljs-number">4697556</span>,<span class="hljs-number">63785060</span>,<span class="hljs-number">11555169</span>,<span class="hljs-number">36401204</span>,<span class="hljs-number">92276179</span>,<span class="hljs-number">4135929</span>,<span class="hljs-number">75453019</span>,<span class="hljs-number">28231031</span>,<span class="hljs-number">8649240</span>,<span class="hljs-number">11576980</span>,<span class="hljs-number">20262028</span>,<span class="hljs-number">56242424</span>,<span class="hljs-number">11305608</span>,<span class="hljs-number">5655216</span>,<span class="hljs-number">90240601</span>,<span class="hljs-number">28569373</span>,<span class="hljs-number">5296027</span>,<span class="hljs-number">10739594</span>,<span class="hljs-number">72751648</span>,<span class="hljs-number">22531251</span>,<span class="hljs-number">12535926</span>,<span class="hljs-number">36347415</span>,<span class="hljs-number">19740655</span>,<span class="hljs-number">69125465</span>,<span class="hljs-number">7523885</span>,<span class="hljs-number">88128548</span>,<span class="hljs-number">88830806</span>,<span class="hljs-number">25010302</span>,<span class="hljs-number">29411467</span>,<span class="hljs-number">99614288</span>,<span class="hljs-number">32646290</span>,<span class="hljs-number">16592563</span>,<span class="hljs-number">69036910</span>,<span class="hljs-number">32604729</span>,<span class="hljs-number">88737786</span>,<span class="hljs-number">90169676</span>,<span class="hljs-number">57646877</span>,<span class="hljs-number">72105460</span>,<span class="hljs-number">40027541</span>,<span class="hljs-number">70362483</span>,<span class="hljs-number">37221415</span>,<span class="hljs-number">25284914</span>,<span class="hljs-number">69691185</span>,<span class="hljs-number">17972978</span>,<span class="hljs-number">1544661</span>,<span class="hljs-number">47324366</span>,<span class="hljs-number">25337670</span>,<span class="hljs-number">91133621</span>,<span class="hljs-number">63697117</span>,<span class="hljs-number">48652228</span>,<span class="hljs-number">18538437</span>,<span class="hljs-number">79966496</span>,<span class="hljs-number">26066529</span>,<span class="hljs-number">65334307</span>,<span class="hljs-number">8305141</span>,<span class="hljs-number">86289387</span>,<span class="hljs-number">20178085</span>,<span class="hljs-number">88836090</span>,<span class="hljs-number">74948034</span>,<span class="hljs-number">14101728</span>,<span class="hljs-number">7837868</span>,<span class="hljs-number">83548120</span>,<span class="hljs-number">65602502</span>,<span class="hljs-number">83129211</span>,<span class="hljs-number">24785681</span>,<span class="hljs-number">65000269</span>,<span class="hljs-number">49140174</span>,<span class="hljs-number">62636621</span>,<span class="hljs-number">31096695</span>,<span class="hljs-number">52276400</span>,<span class="hljs-number">28546681</span>,<span class="hljs-number">83631937</span>,<span class="hljs-number">57100225</span>,<span class="hljs-number">42531528</span>,<span class="hljs-number">28326396</span>,<span class="hljs-number">38641032</span>,<span class="hljs-number">93055463</span>,<span class="hljs-number">20525612</span>,<span class="hljs-number">66073509</span>,<span class="hljs-number">35154065</span>,<span class="hljs-number">29007664</span>,<span class="hljs-number">12600294</span>,<span class="hljs-number">76829494</span>,<span class="hljs-number">73917074</span>,<span class="hljs-number">67226149</span>,<span class="hljs-number">12478806</span>,<span class="hljs-number">39842542</span>,<span class="hljs-number">70312958</span>,<span class="hljs-number">82792046</span>,<span class="hljs-number">49668650</span>,<span class="hljs-number">46280815</span>,<span class="hljs-number">96555182</span>,<span class="hljs-number">22966062</span>,<span class="hljs-number">83158116</span>,<span class="hljs-number">87566530</span>,<span class="hljs-number">66277804</span>,<span class="hljs-number">7944142</span>,<span class="hljs-number">90649884</span>,<span class="hljs-number">64342810</span>,<span class="hljs-number">9881875</span>,<span class="hljs-number">14833854</span>,<span class="hljs-number">82959569</span>,<span class="hljs-number">50523207</span>,<span class="hljs-number">48788762</span>,<span class="hljs-number">3801076</span>,<span class="hljs-number">14677723</span>,<span class="hljs-number">63080506</span>,<span class="hljs-number">96215352</span>,<span class="hljs-number">36302231</span>,<span class="hljs-number">35067168</span>,<span class="hljs-number">11695282</span>,<span class="hljs-number">19447382</span>,<span class="hljs-number">66401373</span>,<span class="hljs-number">40822285</span>,<span class="hljs-number">41406321</span>,<span class="hljs-number">48630216</span>,<span class="hljs-number">78955925</span>,<span class="hljs-number">57194625</span>,<span class="hljs-number">52097877</span>,<span class="hljs-number">16169037</span>,<span class="hljs-number">44834346</span>,<span class="hljs-number">2593695</span>,<span class="hljs-number">29948466</span>,<span class="hljs-number">41842778</span>,<span class="hljs-number">50510473</span>,<span class="hljs-number">39669493</span>,<span class="hljs-number">64590865</span>,<span class="hljs-number">26160800</span>,<span class="hljs-number">94882286</span>,<span class="hljs-number">2703212</span>,<span class="hljs-number">41243905</span>,<span class="hljs-number">89363549</span>,<span class="hljs-number">82819429</span>,<span class="hljs-number">25565895</span>,<span class="hljs-number">86836890</span>,<span class="hljs-number">58385785</span>,<span class="hljs-number">55898457</span>,<span class="hljs-number">99305620</span>,<span class="hljs-number">43332680</span>,<span class="hljs-number">98223672</span>,<span class="hljs-number">4494624</span>,<span class="hljs-number">25408421</span>,<span class="hljs-number">28054121</span>,<span class="hljs-number">48197701</span>,<span class="hljs-number">90633404</span>,<span class="hljs-number">25825550</span>,<span class="hljs-number">90631154</span>,<span class="hljs-number">24867226</span>,<span class="hljs-number">61846156</span>,<span class="hljs-number">38911183</span>,<span class="hljs-number">67826056</span>,<span class="hljs-number">10676975</span>,<span class="hljs-number">57116645</span>,<span class="hljs-number">474292</span>,<span class="hljs-number">82387517</span>,<span class="hljs-number">56211477</span>,<span class="hljs-number">46555785</span>,<span class="hljs-number">49282428</span>,<span class="hljs-number">99468990</span>,<span class="hljs-number">81172472</span>,<span class="hljs-number">26720330</span>,<span class="hljs-number">38692582</span>,<span class="hljs-number">96073680</span>,<span class="hljs-number">88412290</span>,<span class="hljs-number">28829489</span>,<span class="hljs-number">1816508</span>,<span class="hljs-number">75321051</span>,<span class="hljs-number">81650509</span>,<span class="hljs-number">23175973</span>,<span class="hljs-number">42008725</span>,<span class="hljs-number">60743468</span>,<span class="hljs-number">52532114</span>,<span class="hljs-number">731909</span>,<span class="hljs-number">77811415</span>,<span class="hljs-number">86804961</span>,<span class="hljs-number">29675484</span>,<span class="hljs-number">33584929</span>,<span class="hljs-number">180367</span>,<span class="hljs-number">93687804</span>,<span class="hljs-number">41093066</span>,<span class="hljs-number">5987495</span>,<span class="hljs-number">27291494</span>,<span class="hljs-number">78229979</span>,<span class="hljs-number">63194139</span>,<span class="hljs-number">34357776</span>,<span class="hljs-number">9992084</span>,<span class="hljs-number">22643334</span>,<span class="hljs-number">22407822</span>,<span class="hljs-number">69740170</span>,<span class="hljs-number">29581361</span>,<span class="hljs-number">50036776</span>,<span class="hljs-number">88768091</span>,<span class="hljs-number">82537322</span>,<span class="hljs-number">83709895</span>,<span class="hljs-number">55361776</span>,<span class="hljs-number">90616169</span>,<span class="hljs-number">44595355</span>,<span class="hljs-number">9468440</span>,<span class="hljs-number">54552233</span>,<span class="hljs-number">73496954</span>,<span class="hljs-number">46104486</span>,<span class="hljs-number">92947715</span>,<span class="hljs-number">38522993</span>,<span class="hljs-number">88515232</span>,<span class="hljs-number">57725249</span>,<span class="hljs-number">48507967</span>,<span class="hljs-number">25309486</span>,<span class="hljs-number">91597013</span>,<span class="hljs-number">85635814</span>,<span class="hljs-number">69579638</span>,<span class="hljs-number">68775627</span>,<span class="hljs-number">57556546</span>,<span class="hljs-number">77900275</span>,<span class="hljs-number">95965693</span>,<span class="hljs-number">9601780</span>,<span class="hljs-number">5448068</span>,<span class="hljs-number">54075952</span>,<span class="hljs-number">64335883</span>,<span class="hljs-number">80114875</span>,<span class="hljs-number">14793294</span>,<span class="hljs-number">21016639</span>,<span class="hljs-number">1959922</span>,<span class="hljs-number">93176996</span>,<span class="hljs-number">7893733</span>,<span class="hljs-number">51407895</span>,<span class="hljs-number">45849129</span>,<span class="hljs-number">33857790</span>,<span class="hljs-number">30096194</span>,<span class="hljs-number">78021982</span>,<span class="hljs-number">66555961</span>,<span class="hljs-number">15842998</span>,<span class="hljs-number">77678123</span>,<span class="hljs-number">56648395</span>,<span class="hljs-number">8171848</span>,<span class="hljs-number">80152264</span>,<span class="hljs-number">78616680</span>,<span class="hljs-number">80098122</span>,<span class="hljs-number">22882409</span>,<span class="hljs-number">77242219</span>,<span class="hljs-number">3124519</span>,<span class="hljs-number">60865422</span>,<span class="hljs-number">43164198</span>,<span class="hljs-number">43256621</span>,<span class="hljs-number">73261157</span>,<span class="hljs-number">12541949</span>,<span class="hljs-number">49780175</span>,<span class="hljs-number">23167183</span>,<span class="hljs-number">10509251</span>,<span class="hljs-number">41809106</span>,<span class="hljs-number">25655902</span>,<span class="hljs-number">6752559</span>,<span class="hljs-number">39850293</span>,<span class="hljs-number">50992519</span>,<span class="hljs-number">40061483</span>,<span class="hljs-number">84526968</span>,<span class="hljs-number">93056718</span>,<span class="hljs-number">53267125</span>,<span class="hljs-number">53914467</span>,<span class="hljs-number">39404926</span>,<span class="hljs-number">83672449</span>,<span class="hljs-number">21484465</span>,<span class="hljs-number">34147538</span>,<span class="hljs-number">13437853</span>,<span class="hljs-number">74079093</span>,<span class="hljs-number">50400032</span>,<span class="hljs-number">85705998</span>,<span class="hljs-number">7557614</span>,<span class="hljs-number">10300505</span>,<span class="hljs-number">79264856</span>,<span class="hljs-number">65669946</span>,<span class="hljs-number">23899714</span>,<span class="hljs-number">53506926</span>,<span class="hljs-number">36081544</span>,<span class="hljs-number">11113765</span>,<span class="hljs-number">65755643</span>,<span class="hljs-number">5826515</span>,<span class="hljs-number">60392667</span>,<span class="hljs-number">55562374</span>,<span class="hljs-number">98132987</span>,<span class="hljs-number">80904530</span>,<span class="hljs-number">92663352</span>,<span class="hljs-number">7283593</span>,<span class="hljs-number">3709276</span>,<span class="hljs-number">52078745</span>,<span class="hljs-number">84847057</span>,<span class="hljs-number">34235334</span>,<span class="hljs-number">63889320</span>,<span class="hljs-number">70036669</span>,<span class="hljs-number">58603533</span>,<span class="hljs-number">27394053</span>,<span class="hljs-number">54766781</span>,<span class="hljs-number">50920854</span>,<span class="hljs-number">80202681</span>,<span class="hljs-number">67618417</span>,<span class="hljs-number">82912294</span>,<span class="hljs-number">20150728</span>,<span class="hljs-number">20042189</span>,<span class="hljs-number">86403320</span>,<span class="hljs-number">38738266</span>,<span class="hljs-number">58393070</span>,<span class="hljs-number">50887299</span>,<span class="hljs-number">12170654</span>,<span class="hljs-number">16212895</span>,<span class="hljs-number">37361223</span>,<span class="hljs-number">13677457</span>,<span class="hljs-number">19503506</span>,<span class="hljs-number">20213757</span>,<span class="hljs-number">84240441</span>,<span class="hljs-number">39618969</span>,<span class="hljs-number">26401150</span>,<span class="hljs-number">47937678</span>,<span class="hljs-number">55871130</span>,<span class="hljs-number">79189571</span>,<span class="hljs-number">5717133</span>,<span class="hljs-number">12444503</span>,<span class="hljs-number">95283334</span>,<span class="hljs-number">14827147</span>,<span class="hljs-number">22008485</span>,<span class="hljs-number">56345882</span>,<span class="hljs-number">43237192</span>,<span class="hljs-number">56980197</span>,<span class="hljs-number">68699371</span>,<span class="hljs-number">46407250</span>,<span class="hljs-number">72120555</span>,<span class="hljs-number">70694039</span>,<span class="hljs-number">46438829</span>,<span class="hljs-number">17774982</span>,<span class="hljs-number">36484024</span>,<span class="hljs-number">138767</span>,<span class="hljs-number">89563532</span>,<span class="hljs-number">54847019</span>,<span class="hljs-number">7815592</span>,<span class="hljs-number">44909604</span>,<span class="hljs-number">50479084</span>,<span class="hljs-number">17462504</span>,<span class="hljs-number">96594465</span>,<span class="hljs-number">58317102</span>,<span class="hljs-number">92426225</span>,<span class="hljs-number">91894699</span>,<span class="hljs-number">4501659</span>,<span class="hljs-number">43315607</span>,<span class="hljs-number">9442814</span>,<span class="hljs-number">19705166</span>,<span class="hljs-number">87751308</span>,<span class="hljs-number">95588126</span>,<span class="hljs-number">92372510</span>,<span class="hljs-number">20281564</span>,<span class="hljs-number">19251355</span>,<span class="hljs-number">10321183</span>,<span class="hljs-number">34573093</span>,<span class="hljs-number">19074704</span>,<span class="hljs-number">84678191</span>,<span class="hljs-number">24383998</span>,<span class="hljs-number">27670253</span>,<span class="hljs-number">50223562</span>,<span class="hljs-number">34091936</span>,<span class="hljs-number">99304371</span>,<span class="hljs-number">32477827</span>,<span class="hljs-number">54273037</span>,<span class="hljs-number">86525073</span>,<span class="hljs-number">73253547</span>,<span class="hljs-number">33316827</span>,<span class="hljs-number">6724062</span>,<span class="hljs-number">76707318</span>,<span class="hljs-number">78171148</span>,<span class="hljs-number">44729510</span>,<span class="hljs-number">16697684</span>,<span class="hljs-number">68966388</span>,<span class="hljs-number">57448392</span>,<span class="hljs-number">51380186</span>,<span class="hljs-number">35344477</span>,<span class="hljs-number">98153122</span>,<span class="hljs-number">51825492</span>,<span class="hljs-number">27202774</span>,<span class="hljs-number">26901641</span>,<span class="hljs-number">37527637</span>,<span class="hljs-number">88241695</span>,<span class="hljs-number">15100257</span>,<span class="hljs-number">30418000</span>,<span class="hljs-number">21821200</span>,<span class="hljs-number">95511035</span>,<span class="hljs-number">9289513</span>,<span class="hljs-number">83870196</span>,<span class="hljs-number">54628801</span>,<span class="hljs-number">39402988</span>,<span class="hljs-number">88345504</span>,<span class="hljs-number">84232433</span>,<span class="hljs-number">13925255</span>,<span class="hljs-number">70816934</span>,<span class="hljs-number">6822742</span>,<span class="hljs-number">14400466</span>,<span class="hljs-number">430652</span>,<span class="hljs-number">87397095</span>,<span class="hljs-number">89773413</span>,<span class="hljs-number">10883914</span>,<span class="hljs-number">89939310</span>,<span class="hljs-number">39597573</span>,<span class="hljs-number">49356789</span>,<span class="hljs-number">62857680</span>,<span class="hljs-number">93292662</span>,<span class="hljs-number">55644642</span>,<span class="hljs-number">81922551</span>,<span class="hljs-number">94304087</span>,<span class="hljs-number">63705961</span>,<span class="hljs-number">137763</span>,<span class="hljs-number">22392805</span>,<span class="hljs-number">65195561</span>,<span class="hljs-number">39498904</span>,<span class="hljs-number">22576234</span>,<span class="hljs-number">59467794</span>,<span class="hljs-number">46389072</span>,<span class="hljs-number">66341462</span>,<span class="hljs-number">44602153</span>,<span class="hljs-number">18204976</span>,<span class="hljs-number">45366397</span>,<span class="hljs-number">3880945</span>,<span class="hljs-number">98231882</span>,<span class="hljs-number">27999162</span>,<span class="hljs-number">38209350</span>,<span class="hljs-number">10599910</span>,<span class="hljs-number">77139550</span>,<span class="hljs-number">35114264</span>,<span class="hljs-number">57109708</span>,<span class="hljs-number">93064441</span>,<span class="hljs-number">34801782</span>,<span class="hljs-number">24938667</span>,<span class="hljs-number">84955486</span>,<span class="hljs-number">53018874</span>,<span class="hljs-number">37969943</span>,<span class="hljs-number">64372852</span>,<span class="hljs-number">69596670</span>,<span class="hljs-number">21288762</span>,<span class="hljs-number">12774121</span>,<span class="hljs-number">97588451</span>,<span class="hljs-number">23575359</span>,<span class="hljs-number">10954061</span>,<span class="hljs-number">50363988</span>,<span class="hljs-number">56263940</span>,<span class="hljs-number">61520763</span>,<span class="hljs-number">85096643</span>,<span class="hljs-number">36250068</span>,<span class="hljs-number">19807406</span>,<span class="hljs-number">20984386</span>,<span class="hljs-number">24520668</span>,<span class="hljs-number">44631794</span>,<span class="hljs-number">62587890</span>,<span class="hljs-number">44963362</span>,<span class="hljs-number">7663521</span>,<span class="hljs-number">78505677</span>,<span class="hljs-number">98442373</span>,<span class="hljs-number">90280978</span>,<span class="hljs-number">14494324</span>,<span class="hljs-number">16069861</span>,<span class="hljs-number">11397153</span>,<span class="hljs-number">87726305</span>,<span class="hljs-number">26133866</span>,<span class="hljs-number">42024935</span>,<span class="hljs-number">93393929</span>,<span class="hljs-number">72575268</span>,<span class="hljs-number">76384597</span>,<span class="hljs-number">42272046</span>,<span class="hljs-number">81658814</span>,<span class="hljs-number">40811718</span>,<span class="hljs-number">86054463</span>,<span class="hljs-number">35997739</span>,<span class="hljs-number">51075676</span>,<span class="hljs-number">62839927</span>,<span class="hljs-number">68179261</span>,<span class="hljs-number">19292480</span>,<span class="hljs-number">10464999</span>,<span class="hljs-number">6342696</span>,<span class="hljs-number">75842285</span>,<span class="hljs-number">28671096</span>,<span class="hljs-number">30029838</span>,<span class="hljs-number">19617648</span>,<span class="hljs-number">94667632</span>,<span class="hljs-number">75855376</span>,<span class="hljs-number">83477767</span>,<span class="hljs-number">456684</span>,<span class="hljs-number">81197213</span>,<span class="hljs-number">1961395</span>,<span class="hljs-number">79590898</span>,<span class="hljs-number">470693</span>,<span class="hljs-number">64786459</span>,<span class="hljs-number">90138714</span>,<span class="hljs-number">30486571</span>,<span class="hljs-number">75566704</span>,<span class="hljs-number">64467558</span>,<span class="hljs-number">21380112</span>,<span class="hljs-number">17742907</span>,<span class="hljs-number">7733647</span>,<span class="hljs-number">92017</span>,<span class="hljs-number">64615799</span>,<span class="hljs-number">72272722</span>,<span class="hljs-number">66873854</span>,<span class="hljs-number">77198963</span>,<span class="hljs-number">35594848</span>,<span class="hljs-number">42694993</span>,<span class="hljs-number">12431322</span>,<span class="hljs-number">2247181</span>,<span class="hljs-number">11020746</span>,<span class="hljs-number">42416726</span>,<span class="hljs-number">19127785</span>,<span class="hljs-number">95444937</span>,<span class="hljs-number">36842133</span>,<span class="hljs-number">4203521</span>,<span class="hljs-number">48149533</span>,<span class="hljs-number">45322440</span>,<span class="hljs-number">59710953</span>,<span class="hljs-number">38250773</span>,<span class="hljs-number">31370132</span>,<span class="hljs-number">26889920</span>,<span class="hljs-number">45927952</span>,<span class="hljs-number">55298246</span>,<span class="hljs-number">31197238</span>,<span class="hljs-number">44744953</span>,<span class="hljs-number">35531670</span>,<span class="hljs-number">38850041</span>,<span class="hljs-number">29759177</span>,<span class="hljs-number">76433451</span>,<span class="hljs-number">33696500</span>,<span class="hljs-number">2823716</span>,<span class="hljs-number">68574340</span>,<span class="hljs-number">68889919</span>,<span class="hljs-number">35744793</span>,<span class="hljs-number">64772909</span>,<span class="hljs-number">41562277</span>,<span class="hljs-number">72606631</span>,<span class="hljs-number">54617176</span>,<span class="hljs-number">76086087</span>,<span class="hljs-number">61060196</span>,<span class="hljs-number">1593669</span>,<span class="hljs-number">4666059</span>,<span class="hljs-number">44201567</span>,<span class="hljs-number">97015910</span>,<span class="hljs-number">51039786</span>,<span class="hljs-number">47534369</span>,<span class="hljs-number">36899420</span>,<span class="hljs-number">95163693</span>,<span class="hljs-number">34278055</span>,<span class="hljs-number">24361819</span>,<span class="hljs-number">93200909</span>,<span class="hljs-number">29991418</span>,<span class="hljs-number">63172824</span>,<span class="hljs-number">53644148</span>,<span class="hljs-number">61454424</span>,<span class="hljs-number">44726508</span>,<span class="hljs-number">64910883</span>,<span class="hljs-number">31088636</span>,<span class="hljs-number">14005026</span>,<span class="hljs-number">83267869</span>,<span class="hljs-number">28497493</span>,<span class="hljs-number">12406441</span>,<span class="hljs-number">34686539</span>,<span class="hljs-number">70646963</span>,<span class="hljs-number">7687253</span>,<span class="hljs-number">23115957</span>,<span class="hljs-number">64556990</span>,<span class="hljs-number">49701688</span>,<span class="hljs-number">76843379</span>,<span class="hljs-number">22370877</span>,<span class="hljs-number">11199132</span>,<span class="hljs-number">15492661</span>,<span class="hljs-number">72101877</span>,<span class="hljs-number">47154152</span>,<span class="hljs-number">54969058</span>,<span class="hljs-number">96696025</span>,<span class="hljs-number">33567129</span>,<span class="hljs-number">95788960</span>,<span class="hljs-number">13301506</span>,<span class="hljs-number">38695877</span>,<span class="hljs-number">52992551</span>,<span class="hljs-number">37817234</span>,<span class="hljs-number">82136809</span>,<span class="hljs-number">28111091</span>,<span class="hljs-number">84977065</span>,<span class="hljs-number">93404791</span>,<span class="hljs-number">56350318</span>,<span class="hljs-number">27576451</span>,<span class="hljs-number">84170153</span>,<span class="hljs-number">37381626</span>,<span class="hljs-number">22432144</span>,<span class="hljs-number">35119973</span>,<span class="hljs-number">23922989</span>,<span class="hljs-number">98961080</span>,<span class="hljs-number">14336913</span>,<span class="hljs-number">49612713</span>,<span class="hljs-number">47410677</span>,<span class="hljs-number">41559348</span>,<span class="hljs-number">64216475</span>,<span class="hljs-number">75502736</span>,<span class="hljs-number">16203656</span>,<span class="hljs-number">81726720</span>,<span class="hljs-number">64541981</span>,<span class="hljs-number">82181762</span>,<span class="hljs-number">95869963</span>,<span class="hljs-number">1086041</span>,<span class="hljs-number">76856852</span>,<span class="hljs-number">99484886</span>,<span class="hljs-number">47292021</span>,<span class="hljs-number">99746735</span>,<span class="hljs-number">79082859</span>,<span class="hljs-number">67416188</span>,<span class="hljs-number">46391963</span>,<span class="hljs-number">58631281</span>,<span class="hljs-number">80994168</span>,<span class="hljs-number">9464550</span>,<span class="hljs-number">5851058</span>,<span class="hljs-number">16534935</span>,<span class="hljs-number">63307701</span>,<span class="hljs-number">91875109</span>,<span class="hljs-number">18716507</span>,<span class="hljs-number">15870646</span>,<span class="hljs-number">6003995</span>,<span class="hljs-number">836024</span>,<span class="hljs-number">35610568</span>,<span class="hljs-number">39574140</span>,<span class="hljs-number">76244639</span>,<span class="hljs-number">83403189</span>,<span class="hljs-number">51252728</span>,<span class="hljs-number">6516065</span>,<span class="hljs-number">94907007</span>,<span class="hljs-number">81605606</span>,<span class="hljs-number">40398075</span>,<span class="hljs-number">40258386</span>,<span class="hljs-number">6692981</span>,<span class="hljs-number">50852074</span>,<span class="hljs-number">2869416</span>,<span class="hljs-number">97682971</span>,<span class="hljs-number">44427361</span>,<span class="hljs-number">9608914</span>,<span class="hljs-number">58464559</span>,<span class="hljs-number">81806036</span>,<span class="hljs-number">20047387</span>,<span class="hljs-number">66264452</span>,<span class="hljs-number">58063775</span>,<span class="hljs-number">54179837</span>,<span class="hljs-number">48463792</span>,<span class="hljs-number">17877188</span>,<span class="hljs-number">31718426</span>,<span class="hljs-number">64192249</span>,<span class="hljs-number">35574859</span>,<span class="hljs-number">3671766</span>,<span class="hljs-number">88905164</span>,<span class="hljs-number">78137697</span>,<span class="hljs-number">46929619</span>,<span class="hljs-number">21063327</span>,<span class="hljs-number">83078770</span>,<span class="hljs-number">93293821</span>,<span class="hljs-number">41618319</span>,<span class="hljs-number">3832324</span>,<span class="hljs-number">91310612</span>,<span class="hljs-number">79854291</span>,<span class="hljs-number">68734227</span>,<span class="hljs-number">8826717</span>,<span class="hljs-number">80881657</span>,<span class="hljs-number">95208907</span>,<span class="hljs-number">7079422</span>,<span class="hljs-number">30037415</span>,<span class="hljs-number">5494004</span>,<span class="hljs-number">44809486</span>,<span class="hljs-number">97620027</span>,<span class="hljs-number">35689182</span>,<span class="hljs-number">13120783</span>,<span class="hljs-number">26108678</span>,<span class="hljs-number">1537176</span>,<span class="hljs-number">16538727</span>,<span class="hljs-number">50841024</span>,<span class="hljs-number">36515680</span>,<span class="hljs-number">82635278</span>,<span class="hljs-number">11112660</span>,<span class="hljs-number">16276555</span>,<span class="hljs-number">72997511</span>,<span class="hljs-number">93487848</span>,<span class="hljs-number">88201238</span>,<span class="hljs-number">53997085</span>,<span class="hljs-number">15198916</span>,<span class="hljs-number">61214583</span>,<span class="hljs-number">78412499</span>,<span class="hljs-number">3585265</span>,<span class="hljs-number">1402827</span>,<span class="hljs-number">56445518</span>,<span class="hljs-number">47661453</span>,<span class="hljs-number">25615629</span>,<span class="hljs-number">58263458</span>,<span class="hljs-number">62155263</span>,<span class="hljs-number">46608555</span>,<span class="hljs-number">15822703</span>,<span class="hljs-number">82285214</span>,<span class="hljs-number">76021596</span>,<span class="hljs-number">84571697</span>,<span class="hljs-number">45999350</span>,<span class="hljs-number">40074628</span>,<span class="hljs-number">8219220</span>,<span class="hljs-number">5429523</span>,<span class="hljs-number">74024203</span>,<span class="hljs-number">22354037</span>,<span class="hljs-number">17605466</span>,<span class="hljs-number">60436920</span>,<span class="hljs-number">52777032</span>,<span class="hljs-number">65801717</span>,<span class="hljs-number">43656316</span>,<span class="hljs-number">10424270</span>,<span class="hljs-number">48035786</span>,<span class="hljs-number">29493228</span>,<span class="hljs-number">83897372</span>,<span class="hljs-number">62101275</span>,<span class="hljs-number">84793857</span>,<span class="hljs-number">56894828</span>,<span class="hljs-number">70636689</span>,<span class="hljs-number">72497148</span>,<span class="hljs-number">67388694</span>,<span class="hljs-number">68146510</span>,<span class="hljs-number">64298548</span>,<span class="hljs-number">97117498</span>,<span class="hljs-number">25553211</span>,<span class="hljs-number">54226533</span>,<span class="hljs-number">90395845</span>,<span class="hljs-number">24172623</span>,<span class="hljs-number">91712292</span>,<span class="hljs-number">98280822</span>,<span class="hljs-number">54042497</span>,<span class="hljs-number">25032894</span>,<span class="hljs-number">6833135</span>,<span class="hljs-number">39011254</span>,<span class="hljs-number">9837753</span>,<span class="hljs-number">63507766</span>,<span class="hljs-number">26747954</span>,<span class="hljs-number">45941264</span>,<span class="hljs-number">99955245</span>,<span class="hljs-number">80051546</span>,<span class="hljs-number">78510759</span>,<span class="hljs-number">71322333</span>,<span class="hljs-number">92407609</span>,<span class="hljs-number">95809491</span>,<span class="hljs-number">18999217</span>,<span class="hljs-number">23430377</span>,<span class="hljs-number">11861293</span>,<span class="hljs-number">42583098</span>,<span class="hljs-number">24163209</span>,<span class="hljs-number">11358738</span>,<span class="hljs-number">3237302</span>,<span class="hljs-number">3176665</span>,<span class="hljs-number">87151132</span>,<span class="hljs-number">2789150</span>,<span class="hljs-number">63905882</span>,<span class="hljs-number">59864282</span>,<span class="hljs-number">3673596</span>,<span class="hljs-number">19570439</span>,<span class="hljs-number">22883042</span>,<span class="hljs-number">72375525</span>,<span class="hljs-number">51614404</span>,<span class="hljs-number">47526636</span>,<span class="hljs-number">98443133</span>,<span class="hljs-number">99140135</span>,<span class="hljs-number">33855918</span>,<span class="hljs-number">28333489</span>,<span class="hljs-number">81416033</span>,<span class="hljs-number">2670097</span>,<span class="hljs-number">4897577</span>,<span class="hljs-number">24439616</span>,<span class="hljs-number">36643479</span>,<span class="hljs-number">40817600</span>,<span class="hljs-number">76022791</span>,<span class="hljs-number">40072872</span>,<span class="hljs-number">95193435</span>,<span class="hljs-number">96967607</span>,<span class="hljs-number">24983145</span>,<span class="hljs-number">49883271</span>,<span class="hljs-number">94602753</span>,<span class="hljs-number">83555050</span>,<span class="hljs-number">85455145</span>,<span class="hljs-number">34563229</span>,<span class="hljs-number">72328311</span>,<span class="hljs-number">12002151</span>,<span class="hljs-number">71481181</span>,<span class="hljs-number">72998351</span>,<span class="hljs-number">1489188</span>,<span class="hljs-number">38426973</span>,<span class="hljs-number">91893116</span>,<span class="hljs-number">61594591</span>,<span class="hljs-number">89693630</span>,<span class="hljs-number">6268166</span>,<span class="hljs-number">20056665</span>,<span class="hljs-number">62169880</span>,<span class="hljs-number">17143472</span>,<span class="hljs-number">35103925</span>,<span class="hljs-number">22452590</span>,<span class="hljs-number">54272289</span>,<span class="hljs-number">34236829</span>,<span class="hljs-number">78028543</span>,<span class="hljs-number">84474414</span>,<span class="hljs-number">40386926</span>,<span class="hljs-number">50550952</span>,<span class="hljs-number">49413559</span>,<span class="hljs-number">48781941</span>,<span class="hljs-number">22927237</span>,<span class="hljs-number">44447815</span>,<span class="hljs-number">29960478</span>,<span class="hljs-number">47578119</span>,<span class="hljs-number">10192558</span>,<span class="hljs-number">87733936</span>,<span class="hljs-number">88699383</span>,<span class="hljs-number">38808712</span>,<span class="hljs-number">79944807</span>,<span class="hljs-number">84014713</span>,<span class="hljs-number">31865463</span>,<span class="hljs-number">72617685</span>,<span class="hljs-number">19557568</span>,<span class="hljs-number">47865990</span>,<span class="hljs-number">39069638</span>,<span class="hljs-number">20086122</span>,<span class="hljs-number">1777562</span>,<span class="hljs-number">29018078</span>,<span class="hljs-number">78358083</span>,<span class="hljs-number">94561719</span>,<span class="hljs-number">46281152</span>,<span class="hljs-number">99789008</span>,<span class="hljs-number">86929490</span>,<span class="hljs-number">16534451</span>,<span class="hljs-number">55989144</span>,<span class="hljs-number">52455669</span>,<span class="hljs-number">54561585</span>,<span class="hljs-number">97379646</span>,<span class="hljs-number">20416183</span>,<span class="hljs-number">87617750</span>,<span class="hljs-number">76115505</span>,<span class="hljs-number">3282482</span>,<span class="hljs-number">8383619</span>,<span class="hljs-number">45456319</span>,<span class="hljs-number">29576432</span>,<span class="hljs-number">67750627</span>,<span class="hljs-number">61736333</span>,<span class="hljs-number">33745442</span>,<span class="hljs-number">51502165</span>,<span class="hljs-number">35349384</span>,<span class="hljs-number">78106651</span>,<span class="hljs-number">23232822</span>,<span class="hljs-number">94851387</span>,<span class="hljs-number">78254073</span>,<span class="hljs-number">82406754</span>,<span class="hljs-number">10317954</span>,<span class="hljs-number">70125940</span>,<span class="hljs-number">45067526</span>,<span class="hljs-number">27061875</span>,<span class="hljs-number">25640164</span>,<span class="hljs-number">52574899</span>,<span class="hljs-number">93819227</span>,<span class="hljs-number">93789607</span>,<span class="hljs-number">96122951</span>,<span class="hljs-number">31673246</span>,<span class="hljs-number">70431904</span>,<span class="hljs-number">54067896</span>,<span class="hljs-number">37146857</span>,<span class="hljs-number">37817889</span>,<span class="hljs-number">14058940</span>,<span class="hljs-number">60710246</span>,<span class="hljs-number">64844350</span>,<span class="hljs-number">91604383</span>,<span class="hljs-number">71972005</span>,<span class="hljs-number">13888349</span>,<span class="hljs-number">19093493</span>,<span class="hljs-number">27397281</span>,<span class="hljs-number">61085409</span>,<span class="hljs-number">66529387</span>,<span class="hljs-number">82761299</span>,<span class="hljs-number">72236310</span>,<span class="hljs-number">19277077</span>,<span class="hljs-number">96599501</span>,<span class="hljs-number">68304096</span>,<span class="hljs-number">48292937</span>,<span class="hljs-number">97503321</span>,<span class="hljs-number">88011133</span>,<span class="hljs-number">29224803</span>,<span class="hljs-number">79782945</span>,<span class="hljs-number">79965966</span>,<span class="hljs-number">83716914</span>,<span class="hljs-number">90432214</span>,<span class="hljs-number">48938902</span>,<span class="hljs-number">12498489</span>,<span class="hljs-number">30246261</span>,<span class="hljs-number">91624049</span>,<span class="hljs-number">68652396</span>,<span class="hljs-number">23677785</span>,<span class="hljs-number">44084687</span>,<span class="hljs-number">3865123</span>,<span class="hljs-number">37823170</span>,<span class="hljs-number">45287730</span>,<span class="hljs-number">38784682</span>,<span class="hljs-number">28058351</span>,<span class="hljs-number">68226368</span>,<span class="hljs-number">61569897</span>,<span class="hljs-number">44737876</span>,<span class="hljs-number">70575908</span>,<span class="hljs-number">25568463</span>,<span class="hljs-number">24668386</span>,<span class="hljs-number">88650569</span>,<span class="hljs-number">35559584</span>,<span class="hljs-number">1897737</span>,<span class="hljs-number">77844785</span>,<span class="hljs-number">29780669</span>,<span class="hljs-number">84004602</span>,<span class="hljs-number">29029776</span>,<span class="hljs-number">91003545</span>,<span class="hljs-number">48058106</span>,<span class="hljs-number">9463847</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93674701</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9720356</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31732184</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53855095</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33144472</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71864888</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27541768</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27238726</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83648428</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12942332</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26918445</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19781953</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81861032</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74800064</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12286132</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6624397</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64942581</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70512799</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46356598</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88292448</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87069909</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38175756</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98121997</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62570414</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15900806</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51527968</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89092372</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8084203</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53772848</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78871524</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3608561</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85909562</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41702172</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61800503</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57877634</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93407278</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30824340</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13159046</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49055339</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73058078</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">983603</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73571456</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51694978</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75136628</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82716874</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83551181</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7964224</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47505945</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92695321</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15885152</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79282709</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18572099</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27392970</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14552787</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19848227</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4518183</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11773920</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22285326</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71605145</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2402625</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63365854</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70973600</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10584706</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83688869</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84268419</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6026005</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36545233</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24462648</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19293921</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17561083</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52105483</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59243514</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35230465</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34650779</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30053489</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24225251</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59642405</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81933853</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94495716</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26364324</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25980634</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5579237</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14569289</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89417845</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71178959</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4143920</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20467990</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53316808</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21288525</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82249537</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37737589</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44712689</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36788133</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15668654</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4697556</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63785060</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11555169</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36401204</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92276179</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4135929</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75453019</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28231031</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8649240</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11576980</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20262028</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56242424</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11305608</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5655216</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90240601</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28569373</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5296027</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10739594</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72751648</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22531251</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12535926</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36347415</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19740655</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69125465</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7523885</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88128548</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88830806</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25010302</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29411467</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99614288</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32646290</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16592563</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69036910</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32604729</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88737786</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90169676</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57646877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72105460</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40027541</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70362483</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37221415</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25284914</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69691185</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17972978</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1544661</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47324366</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25337670</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91133621</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63697117</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48652228</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18538437</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79966496</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26066529</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65334307</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8305141</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86289387</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20178085</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88836090</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74948034</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14101728</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7837868</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83548120</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65602502</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83129211</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24785681</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65000269</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49140174</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62636621</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31096695</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52276400</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28546681</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83631937</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57100225</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42531528</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28326396</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38641032</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93055463</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20525612</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66073509</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35154065</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29007664</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12600294</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76829494</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73917074</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67226149</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12478806</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39842542</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70312958</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82792046</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49668650</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46280815</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96555182</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22966062</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83158116</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87566530</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66277804</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7944142</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90649884</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64342810</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9881875</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14833854</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82959569</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50523207</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48788762</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3801076</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14677723</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63080506</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96215352</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36302231</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35067168</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11695282</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19447382</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66401373</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40822285</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41406321</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48630216</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78955925</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57194625</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52097877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16169037</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44834346</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2593695</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29948466</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41842778</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50510473</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39669493</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64590865</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26160800</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94882286</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2703212</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41243905</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89363549</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82819429</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25565895</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86836890</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58385785</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55898457</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99305620</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43332680</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98223672</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4494624</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25408421</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28054121</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48197701</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90633404</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25825550</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90631154</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24867226</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61846156</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38911183</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67826056</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10676975</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57116645</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">474292</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82387517</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56211477</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46555785</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49282428</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99468990</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81172472</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26720330</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38692582</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96073680</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88412290</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28829489</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1816508</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75321051</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81650509</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23175973</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42008725</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60743468</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52532114</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">731909</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77811415</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86804961</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29675484</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33584929</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">180367</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93687804</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41093066</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5987495</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27291494</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78229979</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63194139</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34357776</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9992084</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22643334</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22407822</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69740170</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29581361</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50036776</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88768091</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82537322</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83709895</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55361776</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90616169</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44595355</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9468440</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54552233</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73496954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46104486</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92947715</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38522993</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88515232</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57725249</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48507967</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25309486</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91597013</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85635814</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69579638</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68775627</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57556546</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77900275</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95965693</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9601780</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5448068</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54075952</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64335883</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80114875</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14793294</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21016639</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1959922</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93176996</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7893733</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51407895</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45849129</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33857790</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30096194</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78021982</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66555961</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15842998</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77678123</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56648395</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8171848</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80152264</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78616680</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80098122</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22882409</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77242219</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3124519</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60865422</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43164198</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43256621</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73261157</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12541949</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49780175</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23167183</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10509251</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41809106</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25655902</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6752559</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39850293</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50992519</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40061483</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84526968</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93056718</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53267125</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53914467</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39404926</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83672449</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21484465</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34147538</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13437853</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74079093</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50400032</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85705998</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7557614</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10300505</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79264856</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65669946</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23899714</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53506926</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36081544</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11113765</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65755643</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5826515</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60392667</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55562374</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98132987</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80904530</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92663352</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7283593</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3709276</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52078745</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84847057</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34235334</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63889320</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70036669</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58603533</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27394053</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54766781</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50920854</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80202681</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67618417</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82912294</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20150728</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20042189</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86403320</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38738266</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58393070</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50887299</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12170654</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16212895</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37361223</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13677457</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19503506</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20213757</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84240441</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39618969</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26401150</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47937678</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55871130</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79189571</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5717133</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12444503</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95283334</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14827147</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22008485</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56345882</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43237192</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56980197</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68699371</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46407250</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72120555</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70694039</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46438829</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17774982</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36484024</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">138767</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89563532</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54847019</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7815592</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44909604</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50479084</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17462504</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96594465</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58317102</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92426225</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91894699</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4501659</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43315607</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9442814</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19705166</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87751308</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95588126</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92372510</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20281564</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19251355</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10321183</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34573093</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19074704</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84678191</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24383998</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27670253</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50223562</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34091936</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99304371</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32477827</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54273037</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86525073</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73253547</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33316827</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6724062</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76707318</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78171148</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44729510</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16697684</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68966388</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57448392</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51380186</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35344477</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98153122</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51825492</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27202774</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26901641</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37527637</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88241695</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15100257</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30418000</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21821200</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95511035</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9289513</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83870196</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54628801</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39402988</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88345504</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84232433</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13925255</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70816934</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6822742</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14400466</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">430652</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87397095</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89773413</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10883914</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89939310</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39597573</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49356789</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62857680</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93292662</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55644642</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81922551</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94304087</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63705961</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">137763</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22392805</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65195561</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39498904</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22576234</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59467794</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46389072</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66341462</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44602153</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18204976</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45366397</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3880945</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98231882</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27999162</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38209350</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10599910</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77139550</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35114264</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57109708</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93064441</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34801782</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24938667</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84955486</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53018874</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37969943</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64372852</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69596670</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21288762</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12774121</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97588451</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23575359</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10954061</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50363988</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56263940</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61520763</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85096643</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36250068</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19807406</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20984386</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24520668</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44631794</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62587890</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44963362</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7663521</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78505677</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98442373</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90280978</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14494324</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16069861</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11397153</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87726305</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26133866</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42024935</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93393929</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72575268</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76384597</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42272046</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81658814</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40811718</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86054463</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35997739</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51075676</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62839927</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68179261</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19292480</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10464999</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6342696</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75842285</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28671096</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30029838</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19617648</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94667632</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75855376</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83477767</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">456684</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81197213</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1961395</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79590898</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">470693</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64786459</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90138714</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30486571</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75566704</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64467558</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21380112</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17742907</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7733647</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92017</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64615799</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72272722</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66873854</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77198963</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35594848</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42694993</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12431322</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2247181</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11020746</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42416726</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19127785</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95444937</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36842133</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4203521</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48149533</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45322440</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59710953</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38250773</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31370132</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26889920</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45927952</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55298246</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31197238</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44744953</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35531670</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38850041</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29759177</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76433451</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33696500</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2823716</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68574340</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68889919</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35744793</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64772909</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41562277</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72606631</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54617176</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76086087</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61060196</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1593669</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4666059</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44201567</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97015910</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51039786</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47534369</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36899420</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95163693</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34278055</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24361819</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93200909</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29991418</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63172824</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53644148</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61454424</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44726508</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64910883</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31088636</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14005026</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83267869</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28497493</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12406441</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34686539</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70646963</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7687253</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23115957</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64556990</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49701688</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76843379</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22370877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11199132</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15492661</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72101877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47154152</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54969058</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96696025</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33567129</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95788960</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13301506</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38695877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52992551</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37817234</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82136809</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28111091</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84977065</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93404791</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56350318</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27576451</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84170153</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37381626</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22432144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35119973</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23922989</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98961080</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14336913</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49612713</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47410677</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41559348</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64216475</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75502736</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16203656</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81726720</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64541981</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82181762</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95869963</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1086041</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76856852</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99484886</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47292021</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99746735</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79082859</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67416188</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46391963</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58631281</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80994168</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9464550</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5851058</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16534935</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63307701</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91875109</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18716507</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15870646</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6003995</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">836024</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35610568</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39574140</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76244639</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83403189</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51252728</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6516065</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94907007</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81605606</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40398075</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40258386</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6692981</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50852074</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2869416</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97682971</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44427361</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9608914</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58464559</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81806036</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20047387</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66264452</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58063775</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54179837</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48463792</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17877188</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31718426</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64192249</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35574859</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3671766</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88905164</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78137697</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46929619</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21063327</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83078770</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93293821</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41618319</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3832324</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91310612</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79854291</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68734227</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8826717</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80881657</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95208907</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7079422</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30037415</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5494004</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44809486</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97620027</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35689182</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13120783</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26108678</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1537176</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16538727</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50841024</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36515680</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82635278</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11112660</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16276555</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72997511</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93487848</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88201238</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53997085</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15198916</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61214583</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78412499</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3585265</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1402827</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56445518</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47661453</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25615629</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58263458</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62155263</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46608555</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15822703</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82285214</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76021596</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84571697</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45999350</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40074628</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8219220</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5429523</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74024203</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22354037</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17605466</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60436920</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52777032</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65801717</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43656316</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10424270</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48035786</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29493228</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83897372</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62101275</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84793857</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56894828</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70636689</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72497148</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67388694</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68146510</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64298548</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97117498</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25553211</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54226533</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90395845</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24172623</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91712292</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98280822</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54042497</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25032894</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6833135</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39011254</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9837753</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63507766</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26747954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45941264</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99955245</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80051546</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78510759</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71322333</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92407609</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95809491</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18999217</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23430377</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11861293</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42583098</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24163209</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11358738</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3237302</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3176665</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87151132</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2789150</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63905882</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59864282</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3673596</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19570439</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22883042</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72375525</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51614404</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47526636</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98443133</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99140135</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33855918</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28333489</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81416033</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2670097</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4897577</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24439616</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36643479</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40817600</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76022791</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40072872</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95193435</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96967607</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24983145</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49883271</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94602753</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83555050</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85455145</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34563229</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72328311</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12002151</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71481181</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72998351</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1489188</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38426973</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91893116</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61594591</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89693630</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6268166</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20056665</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62169880</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17143472</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35103925</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22452590</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54272289</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34236829</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78028543</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84474414</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40386926</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50550952</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49413559</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48781941</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22927237</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44447815</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29960478</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47578119</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10192558</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87733936</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88699383</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38808712</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79944807</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84014713</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31865463</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72617685</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19557568</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47865990</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39069638</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20086122</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1777562</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29018078</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78358083</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94561719</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46281152</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99789008</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86929490</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16534451</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55989144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52455669</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54561585</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97379646</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20416183</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87617750</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76115505</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3282482</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8383619</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45456319</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29576432</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67750627</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61736333</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33745442</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51502165</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35349384</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78106651</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23232822</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94851387</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78254073</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82406754</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10317954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70125940</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45067526</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27061875</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25640164</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52574899</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93819227</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93789607</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96122951</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31673246</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70431904</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54067896</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37146857</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37817889</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14058940</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60710246</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64844350</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91604383</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71972005</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13888349</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19093493</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27397281</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61085409</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66529387</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82761299</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72236310</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19277077</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96599501</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68304096</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48292937</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97503321</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88011133</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29224803</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79782945</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79965966</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83716914</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90432214</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48938902</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12498489</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30246261</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91624049</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68652396</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23677785</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44084687</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3865123</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37823170</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45287730</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38784682</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28058351</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68226368</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61569897</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44737876</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70575908</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25568463</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24668386</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88650569</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35559584</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1897737</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77844785</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29780669</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84004602</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29029776</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91003545</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48058106</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9463847</span>;<br></code></pre></td></tr></tbody></table></figure><p>测试结果如下：<br>第一种情况，ID列为主键的情况，4组测试执行计划一样，执行的时间也基本没有区别。<br>A组or和in的执行时间： or的执行时间为：0.002s &nbsp; &nbsp; in的执行时间为：0.002s<br>B组or和in的执行时间： or的执行时间为：0.004s &nbsp; &nbsp; in的执行时间为：0.004s<br>C组or和in的执行时间： or的执行时间为：0.006s &nbsp; &nbsp; in的执行时间为：0.005s<br>D组or和in的执行时间： or的执行时间为：0.018s &nbsp; &nbsp; in的执行时间为：0.014s<br>第二种情况，ID列为一般索引的情况，4组测试执行计划一样，执行的时间也基本没有区别。<br>A组or和in的执行时间： or的执行时间为：0.002s &nbsp; &nbsp; in的执行时间为：0.002s<br>B组or和in的执行时间： or的执行时间为：0.006s &nbsp; &nbsp; in的执行时间为：0.005s &nbsp;<br>C组or和in的执行时间： or的执行时间为：0.008s &nbsp; &nbsp; in的执行时间为：0.008s<br>D组or和in的执行时间： or的执行时间为：0.021s &nbsp; &nbsp; in的执行时间为：0.020s &nbsp;<br>第三种情况，ID列没有索引的情况，4组测试执行计划一样，执行的时间有很大的区别。<br>A组or和in的执行时间： or的执行时间为：5.016s &nbsp; &nbsp; &nbsp;in的执行时间为：5.071s<br>B组or和in的执行时间： or的执行时间为：1min 02s &nbsp; &nbsp; in的执行时间为：5.018s<br>C组or和in的执行时间： or的执行时间为：1min 55s &nbsp; &nbsp; in的执行时间为：5.018s<br>D组or和in的执行时间： or的执行时间为：6min 17s &nbsp; &nbsp; in的执行时间为：5.057s</p><p><strong>结论：从上面的测试结果，可以看出如果in和or所在列有索引或者主键的话，or和in没啥差别，执行计划和执行时间都几乎一样。如果in和or所在列没有索引的话，性能差别就很大了。在没有索引的情况下，随着in或者or后面的数据量越多，in的效率不会有太大的下降，但是or会随着记录越多的话性能下降非常厉害，从第三种测试情况中可以很明显地看出了，基本上是指数级增长。因此在给in和or的效率下定义的时候，应该再加上一个条件，就是所在的列是否有索引或者是否是主键。如果有索引或者主键性能没啥差别，如果没有索引，性能差别不是一点点！</strong> </p><h2 id="模糊查询like"><a href="#模糊查询like" class="headerlink" title="模糊查询like"></a>模糊查询like</h2><p>模糊查询又被称为模糊匹配，在实际开发中使用较多，比如：查询公司中所有姓张的，查询岗位中带有经理两个字的职位等等，这些都需要使用模糊查询。<br>模糊查询的语法格式如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> .. <span class="hljs-keyword">from</span> .. <span class="hljs-keyword">where</span> 字段 <span class="hljs-keyword">like</span> <span class="hljs-string">'通配符表达式'</span>;<br></code></pre></td></tr></tbody></table></figure><p>在模糊查询中，通配符主要包括两个：一个是%，一个是下划线_。其中%代表任意多个字符。下划线_代表任意一个字符。<br>案例1：查询员工名字以’S’开始的员工姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">'S%'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071240690.png"><br>案例2：查询员工名字以’T’结尾的员工姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">'%T'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071236651.png"><br>案例3：查询员工名字中含有’O’的员工姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">'%O%'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071232760.png"></p><p>案例4：查询员工名字中第二个字母是’A’的员工姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">'_A%'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071228879.png"><br>案例5：查询学员名字中含有下划线的。<br>执行以下SQL语句，先准备测试数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> student;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  <span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>)<br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>, <span class="hljs-string">'susan'</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>, <span class="hljs-string">'lucy'</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>, <span class="hljs-string">'jack_son'</span>);<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071224597.png"><br>查询学员名字中含有下划线的，执行以下SQL试试：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">'%_%'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071220713.png"><br>显然这个查询结果不是我们想要的，以上SQL之所以将所有数据全部显示了，因为下划线代表任意单个字符，如果你想让这个下划线变成一个普通的下划线字符，就要使用转义字符了，在mysql当中转义字符是“\”，这个和java语言中的转义字符是一样的：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">'%\_%'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071216797.png"></p><h1 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h1><p>排序操作很常用，比如查询学员成绩，按照成绩降序排列。排序的SQL语法：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> .. <span class="hljs-keyword">from</span> .. <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段 <span class="hljs-keyword">asc</span>/<span class="hljs-keyword">desc</span><br></code></pre></td></tr></tbody></table></figure><h2 id="单一字段升序"><a href="#单一字段升序" class="headerlink" title="单一字段升序"></a>单一字段升序</h2><p>查询员工的编号、姓名、薪资，按照薪资升序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071212451.png"></p><h2 id="单一字段降序"><a href="#单一字段降序" class="headerlink" title="单一字段降序"></a>单一字段降序</h2><p>查询员工的编号、姓名、薪资，按照薪资降序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071207658.png"></p><h2 id="默认采用升序"><a href="#默认采用升序" class="headerlink" title="默认采用升序"></a>默认采用升序</h2><p>查询员工的编号、姓名、薪资，按照薪资升序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071149356.png"><br>查询员工的编号、姓名，按照姓名升序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ename;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071145085.png"></p><h2 id="多个字段排序"><a href="#多个字段排序" class="headerlink" title="多个字段排序"></a>多个字段排序</h2><p>查询员工的编号、姓名、薪资，按照薪资升序排列，如果薪资相同的，再按照姓名升序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">asc</span>, ename <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071140449.png"></p><h2 id="where和order-by的位置"><a href="#where和order-by的位置" class="headerlink" title="where和order by的位置"></a>where和order by的位置</h2><p>找出岗位是MANAGER的员工姓名和薪资，按照薪资升序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job = <span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071135663.png"><br><strong>通过这个例子主要是想告诉大家：where先执行，order by语句是最后执行的。</strong></p><h1 id="distinct去重"><a href="#distinct去重" class="headerlink" title="distinct去重"></a>distinct去重</h1><p>查询工作岗位</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> job <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071130155.png"><br>可以看到工作岗位中有重复的记录，如何在显示的时候去除重复记录呢？在字段前添加distinct关键字。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> job <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071126423.png"><br>注意：这个去重只是将显示的结果去重，原表数据不会被更改。<br>接下来测试一下，在distinct关键字前添加其它字段是否可以？</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, <span class="hljs-keyword">distinct</span> job <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p>分析一下：ename是14条记录，distinct job是5条记录，可以同时显示吗？<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071122762.png"><br>报错了，通过测试得知，distinct只能出现在所有字段的最前面。<br><strong>当distinct出现后，后面多个字段一定是联合去重的</strong>，我们来做两个练习就知道了：<br>练习1：找出公司中所有的工作岗位。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071119131.png"></p><p>练习2：找出公司中不同部门的不同工作岗位。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071113773.png"></p><h1 id="数据处理函数"><a href="#数据处理函数" class="headerlink" title="数据处理函数"></a>数据处理函数</h1><p>关于select语句，我们之前都是这样写：select 字段名 from 表名; 其实，这里的字段名可以看做“变量”，select后面既然可以跟变量，那么可以跟常量吗，尝试一下：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071108628.png"><br>通过以上sql的测试得知，select后面既可以跟变量，又可以跟常量。<br>以上三条SQL中前两条中100和’abc’都是常量，最后一条SQL的abc没有添加单引号，它会被当做某个表的字段名，因为没有这个字段所以报错。 </p><h2 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h2><h3 id="转大写upper和ucase"><a href="#转大写upper和ucase" class="headerlink" title="转大写upper和ucase"></a>转大写upper和ucase</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 查询所有员工名字，以大写形式展现</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">upper</span>(ename) <span class="hljs-keyword">as</span> ename <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071102727.png"><br>还有一个和upper函数功能相同的函数ucase，也可以转大写，了解一下即可：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 查询所有员工姓名，以大写形式展现</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">ucase</span>(ename) <span class="hljs-keyword">as</span> ename <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071058673.png"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 查询员工smith的岗位、薪资（假如你不知道数据库表中的人名是大写、小写还是大小写混合）</span><br><span class="hljs-keyword">select</span> ename, job, sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-keyword">upper</span>(ename) = <span class="hljs-string">'SMITH'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071055092.png"></p><h3 id="转小写lower和lcase"><a href="#转小写lower和lcase" class="headerlink" title="转小写lower和lcase"></a>转小写lower和lcase</h3><p><strong>很简单，不再赘述，直接上代码：</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 查询员工姓名，以小写形式展现</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">lower</span>(ename) <span class="hljs-keyword">as</span> ename <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">lcase</span>(ename) <span class="hljs-keyword">as</span> ename <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071050634.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071047379.png"></p><h3 id="截取字符串substr"><a href="#截取字符串substr" class="headerlink" title="截取字符串substr"></a>截取字符串substr</h3><p>语法：substr(‘被截取的字符串’, 起始下标, 截取长度)<br>有两种写法：<br>第一种：substr(‘被截取的字符串’, 起始下标, 截取长度)<br>第二种：substr(‘被截取的字符串’, 起始下标)，当第三个参数“截取长度”缺失时，截取到字符串末尾<br>注意：起始下标从1开始，不是从0开始。（1表示从左侧开始的第一个位置，-1表示从右侧开始的第一个位置。）<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071042957.png"></p><p>练习：找出员工名字中第二个字母是A的</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-keyword">substr</span>(ename, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) = <span class="hljs-string">'A'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071039658.png"></p><h3 id="获取字符串长度length"><a href="#获取字符串长度length" class="headerlink" title="获取字符串长度length"></a>获取字符串长度length</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071036575.png"><br>注意：一个汉字是2个长度。</p><h3 id="获取字符的个数char-length"><a href="#获取字符的个数char-length" class="headerlink" title="获取字符的个数char_length"></a>获取字符的个数char_length</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071033198.png"></p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>语法：concat(‘字符串1’, ‘字符串2’, ‘字符串3’….)<br>拼接的字符串数量没有限制。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071022892.png"><br>注意：在mysql8之前，双竖线||也是可以完成字符串拼接的。但在mysql8之后，||只作为逻辑运算符，不能再进行字符串拼接了。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">'abc'</span> || <span class="hljs-string">'def'</span> || <span class="hljs-string">'xyz'</span>;<br></code></pre></td></tr></tbody></table></figure><p>mysql8之后，|| 只作为“或者”运算符，例如：找出工资高于3000或者低于900的员工姓名和薪资：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt; <span class="hljs-number">3000</span> || sal &lt; <span class="hljs-number">900</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071019150.png"><br>mysql中可以使用+进行字符串的拼接吗？不可以，在mysql中+只作加法运算，在进行加法运算时，会将加号两边的数据尽最大的努力转换成数字再求和，如果无法转换成数字，最终运算结果通通是0</p><h3 id="去除字符串前后空白trim"><a href="#去除字符串前后空白trim" class="headerlink" title="去除字符串前后空白trim"></a>去除字符串前后空白trim</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">concat</span>(<span class="hljs-keyword">trim</span>(<span class="hljs-string">'    abc    '</span>), <span class="hljs-string">'def'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071015562.png"><br>默认是去除前后空白，也可以去除指定的前缀后缀，例如：<br>去除前置0</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">trim</span>(<span class="hljs-keyword">leading</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'000111000'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071011934.png"><br>去除后置0</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">trim</span>(trailing <span class="hljs-string">'0'</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'000111000'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071007892.png"><br>前置0和后置0全部去除</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">trim</span>(<span class="hljs-keyword">both</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'000111000'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071004324.png"></p><h2 id="数字相关"><a href="#数字相关" class="headerlink" title="数字相关"></a>数字相关</h2><h3 id="rand-和rand-x"><a href="#rand-和rand-x" class="headerlink" title="rand()和rand(x)"></a>rand()和rand(x)</h3><p>rand()生成0到1的随机浮点数。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071000927.png"><br>rand(x)生成0到1的随机浮点数，通过指定整数x来确定每次获取到相同的浮点值。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070957548.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070954448.png"></p><h3 id="round-x-和round-x-y-四舍五入"><a href="#round-x-和round-x-y-四舍五入" class="headerlink" title="round(x)和round(x,y)四舍五入"></a>round(x)和round(x,y)四舍五入</h3><p>round(x) 四舍五入，保留整数位，舍去所有小数<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070951035.png"><br>round(x,y) 四舍五入，保留y位小数<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070947658.png"></p><h3 id="truncate-x-y-舍去"><a href="#truncate-x-y-舍去" class="headerlink" title="truncate(x, y)舍去"></a>truncate(x, y)舍去</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070944411.png"><br>以上SQL表示保留两位小数，剩下的全部舍去。</p><h3 id="ceil与floor"><a href="#ceil与floor" class="headerlink" title="ceil与floor"></a>ceil与floor</h3><p>数字处理函数除了以上的之外，还有ceil和floor函数：</p><ul><li>ceil函数：返回大于或等于数值x的最小整数</li><li>floor函数：返回小于或等于数值x的最大整数</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070940988.png"></p><h2 id="空处理"><a href="#空处理" class="headerlink" title="空处理"></a>空处理</h2><p>ifnull(x, y)，空处理函数，当x为NULL时，将x当做y处理。<br>ifnull(comm, 0)，表示如果员工的津贴是NULL时当做0处理。<br>在SQL语句中，凡是有NULL参与的数学运算，最终的计算结果都是NULL：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070937319.png"><br>看这样一个需求：查询每个员工的年薪。（年薪 = (月薪 + 津贴) * 12个月。注意：有的员工津贴comm是NULL。）<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070933438.png"></p><p>以上查询结果中显示SMITH等人的年薪是NULL，这是为什么，这是因为SMITH等人的津贴comm是NULL，有NULL参与的数学运算，最终结果都是NULL，显然这个需要空处理，此时就用到了ifnull函数：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070929632.png"></p><h2 id="日期和时间相关函数"><a href="#日期和时间相关函数" class="headerlink" title="日期和时间相关函数"></a>日期和时间相关函数</h2><h3 id="获取当前日期和时间"><a href="#获取当前日期和时间" class="headerlink" title="获取当前日期和时间"></a>获取当前日期和时间</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070926123.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070922856.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070917646.png"><br>now()和sysdate()的区别：</p><ul><li>now()：获取的是执行select语句的时刻。</li><li>sysdate()：获取的是执行sysdate()函数的时刻。</li></ul><h3 id="获取当前日期"><a href="#获取当前日期" class="headerlink" title="获取当前日期"></a>获取当前日期</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070913169.png"><br>获取当前日期有三种写法，掌握任意一种即可：</p><ul><li><p>curdate()</p></li><li><p>current_date()</p></li><li><p>current_date</p><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070908902.png"><br>获取档期时间有三种写法，掌握其中一种即可：</p></li><li><p>curtime()</p></li><li><p>current_time()</p></li><li><p>current_time</p></li></ul><h3 id="获取单独的年、月、日、时、分、秒"><a href="#获取单独的年、月、日、时、分、秒" class="headerlink" title="获取单独的年、月、日、时、分、秒"></a>获取单独的年、月、日、时、分、秒</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070904549.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070900056.png"><br>注意：这些函数在使用的时候，需要传递一个日期参数给它，它可以获取到你给定的这个日期相关的年、月、日、时、分、秒的信息。<br>一次性提取一个给定日期的“年月日”部分，可以使用date()函数，例如：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070856362.png"><br>一次性提取一个给定日期的“时分秒”部分，可以使用time()函数，例如：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070853347.png"></p><h3 id="date-add函数"><a href="#date-add函数" class="headerlink" title="date_add函数"></a>date_add函数</h3><p>date_add函数的作用：给指定的日期添加间隔的时间，从而得到一个新的日期。<br>date_add函数的语法格式：date_add(日期, interval expr 单位)，例如：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070849778.png"><br>以’2023-01-03’为基准，间隔3天之后的日期：’2023-01-06’<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070845401.png"></p><p>以’2023-01-03’为基准，间隔3个月之后的日期：’2023-04-03’<br>详细解释一下这个函数的相关参数：</p><ul><li>日期：一个日期类型的数据</li><li>interval：关键字，翻译为“间隔”，固定写法</li><li>expr：指定具体的间隔量，一般是一个数字。<strong>也可以为负数，如果为负数，效果和date_sub函数相同</strong>。</li><li>单位：<ul><li>year：年</li><li>month：月</li><li>day：日</li><li>hour：时</li><li>minute：分</li><li>second：秒</li><li>microsecond：微秒（1秒等于1000毫秒，1毫秒等于1000微秒）</li><li>week：周</li><li>quarter：季度</li></ul></li></ul><p>请分析下面这条SQL语句所表达的含义：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070837214.png"><br>以上SQL表示：以2022-10-01 10:10:10为基准，在这个时间基础上添加-1微秒，也就是减去1微秒。<br>以上SQL也可以采用date_sub函数完成，例如：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070833644.png"><br>另外，单位也可以采用复合型单位，例如：</p><ul><li>SECOND_MICROSECOND</li><li>MINUTE_MICROSECOND</li><li>MINUTE_SECOND：几分几秒之后</li><li>HOUR_MICROSECOND</li><li>HOUR_SECOND</li><li>HOUR_MINUTE：几小时几分之后</li><li>DAY_MICROSECOND</li><li>DAY_SECOND</li><li>DAY_MINUTE</li><li>DAY_HOUR：几天几小时之后</li><li>YEAR_MONTH：几年几个月之后</li></ul><p>如果单位采用复合型的话，expr该怎么写呢？例如单位采用：day_hour，假设我要表示3天2小时之后，怎么写？<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070828580.png"><br>‘3,2’这个应该很好理解，表示3天2个小时之后。’3,2’和day_hour是对应的。</p><h3 id="date-format日期格式化函数"><a href="#date-format日期格式化函数" class="headerlink" title="date_format日期格式化函数"></a>date_format日期格式化函数</h3><p>将日期转换成具有某种格式的日期字符串，通常用在查询操作当中。（date类型转换成char类型）<br>语法格式：date_format(日期, ‘日期格式’)<br>该函数有两个参数：</p><ul><li>第一个参数：日期。这个参数就是即将要被格式化的日期。类型是date类型。</li><li>第二个参数：指定要格式化的格式字符串。<ul><li>%Y：四位年份</li><li>%y：两位年份</li><li>%m：月份（1..12）</li><li>%d：日（1..30）</li><li>%H：小时（0..23）</li><li>%i：分（0..59）</li><li>%s：秒（0..59）</li></ul></li></ul><p>例如：获取当前系统时间，让其以这个格式展示：2000-10-11 20:15:30<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070823576.png"><br>注意：在mysql当中，默认的日期格式就是：%Y-%m-%d %H:%i:%s，所以当你直接输出日期数据的时候，会自动转换成该格式的字符串：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070818690.png"></p><h3 id="str-to-date函数"><a href="#str-to-date函数" class="headerlink" title="str_to_date函数"></a>str_to_date函数</h3><p>该函数的作用是将char类型的日期字符串转换成日期类型date，通常使用在插入和修改操作当中。（char类型转换成date类型）<br>假设有一个学生表t_student，学生有一个生日的字段，类型是date类型：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> t_student;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  birth <span class="hljs-built_in">date</span><br>);<br>desc t_student;<br></code></pre></td></tr></tbody></table></figure><p>我们要给这个表插入一条数据：姓名zhangsan，生日85年10月1日，执行以下insert语句：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070813896.png"><br>错误原因：日期值不正确。意思是：birth字段需要一个日期，你给的这个字符串’10/01/1985’我识别不了。这种情况下，我们就可以使用str_to_date函数进行类型转换：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070807662.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070801463.png"><br>当然，如果你提供的日期字符串格式能够被mysql解析，str_to_date函数是可以省略的，底层会自动调用该函数进行类型转换：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070756628.png"><br>如果日期格式符合以上的几种格式，mysql都会自动进行类型转换的。</p><h3 id="dayofweek、dayofmonth、dayofyear函数"><a href="#dayofweek、dayofmonth、dayofyear函数" class="headerlink" title="dayofweek、dayofmonth、dayofyear函数"></a>dayofweek、dayofmonth、dayofyear函数</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070751969.png"><br>dayofweek：一周中的第几天（1<del>7），周日是1，周六是7。<br>dayofmonth：一个月中的第几天（1</del>31）<br>dayofyear：一年中的第几天（1~366)</p><h3 id="last-day函数"><a href="#last-day函数" class="headerlink" title="last_day函数"></a>last_day函数</h3><p>获取给定日期所在月的最后一天的日期：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070746468.png"></p><h3 id="datediff函数"><a href="#datediff函数" class="headerlink" title="datediff函数"></a>datediff函数</h3><p>计算两个日期之间所差天数：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070742829.png"><br>时分秒不算，只计算日期部分相差的天数。</p><h3 id="timediff函数"><a href="#timediff函数" class="headerlink" title="timediff函数"></a>timediff函数</h3><p>计算两个日期所差时间，例如日期1和日期2所差10:20:30，表示差10小时20分钟30秒。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070738685.png"></p><h2 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h2><p>如果条件为TRUE则返回“YES”，如果条件为FALSE则返回“NO”：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">IF</span>(<span class="hljs-number">500</span>&lt;<span class="hljs-number">1000</span>, <span class="hljs-string">"YES"</span>, <span class="hljs-string">"NO"</span>);<br></code></pre></td></tr></tbody></table></figure><p>例如：如果工资高于3000，则输出1，反之则输出0<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070734203.png"><br>再例如：如果名字是SMITH的，工资上调10%，其他员工工资正常显示。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070729532.png"><br>再例如：工作岗位是MANAGER的工资上调10%，是SALESMAN的工资上调20%，其他岗位工资正常。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070724969.png"><br><strong>上面这个需求也可以使用：case.. when.. then.. when.. then.. else.. end来完成：</strong><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070720083.png"></p><h2 id="cast函数"><a href="#cast函数" class="headerlink" title="cast函数"></a>cast函数</h2><p>cast函数用于将值从一种数据类型转换为表达式中指定的另一种数据类型<br>语法：cast(值 as 数据类型)<br>例如：cast(‘2020-10-11’ as date)，表示将字符串’2020-10-11’转换成日期date类型。<br>在使用cast函数时，可用的数据类型包括：</p><ul><li>date：日期类型</li><li>time：时间类型</li><li>datetime：日期时间类型</li><li>signed：有符号的int类型（有符号指的是正数负数）</li><li>char：定长字符串类型</li><li>decimal：浮点型</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070708940.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070704116.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070656664.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070652672.png"></p><h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><p>md5函数，可以将给定的字符串经过md5算法进行加密处理，字符串经过加密之后会生成一个固定长度32位的字符串，md5加密之后的密文通常是不能解密的：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070643563.png"></p><h1 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h1><p><strong>分组函数的执行原则：先分组，然后对每一组数据执行分组函数。如果没有分组语句group by的话，整张表的数据自成一组。</strong><br>分组函数包括五个：</p><ul><li>max：最大值</li><li>min：最小值</li><li>avg：平均值</li><li>sum：求和</li><li>count：计数</li></ul><h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><p><strong>找出员工的最高薪资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><h2 id="min"><a href="#min" class="headerlink" title="min"></a>min</h2><p><strong>找出员工的最低工资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(sal) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><h2 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h2><p><strong>计算员工的平均薪资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><h2 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h2><p><strong>计算员工的工资和</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">sum</span>(sal) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><strong>计算员工的津贴之和</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">sum</span>(comm) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p>重点：所有的分组函数都是自动忽略NULL的。</p><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><strong>统计员工人数</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(ename) <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p>count(*)和count(1)的效果一样，统计该组中总记录行数。<br>count(ename)统计的是这个ename字段中不为NULL个数总和。<br>例如：count(comm) 结果是 4，而不是14</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(comm) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><strong>统计岗位数量</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(<span class="hljs-keyword">distinct</span> job) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><h2 id="分组函数组合使用"><a href="#分组函数组合使用" class="headerlink" title="分组函数组合使用"></a>分组函数组合使用</h2><p>select count(*),max(sal),min(sal),avg(sal),sum(sal) from emp;</p><h2 id="分组函数注意事项"><a href="#分组函数注意事项" class="headerlink" title="分组函数注意事项"></a>分组函数注意事项</h2><p><strong>分组函数不能直接使用在where子句当中</strong><br>select ename,job from emp where sal &gt; avg(sal); 这个会报错的<br>原因：分组的行为是在where执行之后才开始的。</p><h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><p>按照某个字段分组，或者按照某些字段联合分组。注意：group by的执行是在where之后执行。<br>语法：<br>group by 字段<br>group by 字段1,字段2,字段3….<br><strong>找出每个岗位的平均薪资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> job, <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job;<br></code></pre></td></tr></tbody></table></figure><p><strong>找出每个部门最高工资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure><p><strong>找出每个部门不同岗位的平均薪资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,job,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job;<br></code></pre></td></tr></tbody></table></figure><p><strong>当select语句中有group by的话，select后面只能跟分组函数或参加分组的字段</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno; // 这个SQL执行后会报错。<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070637605.png"></p><h2 id="having"><a href="#having" class="headerlink" title="having"></a>having</h2><p>having写在group by的后面，当你对分组之后的数据不满意，可以继续通过having对分组之后的数据进行过滤。<br>where的过滤是在分组前进行过滤。<br>使用原则：尽量在where中过滤，实在不行，再使用having。越早过滤效率越高。</p><p><strong>找出除20部分之外，其它部门的平均薪资。</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno&lt;&gt;<span class="hljs-number">20</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno; // 建议<br><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">having</span> deptno &lt;&gt; <span class="hljs-number">20</span>; // 不建议<br></code></pre></td></tr></tbody></table></figure><p><strong>查询每个部门平均薪资，找出平均薪资高于2000的。</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">having</span> <span class="hljs-keyword">avg</span>(sal) &gt; <span class="hljs-number">2000</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="组内排序"><a href="#组内排序" class="headerlink" title="组内排序"></a>组内排序</h2><p>案例：找出每个工作岗位的工资排名在前两名的。<br>substring_index函数的使用：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070633127.png"><br>group_concat函数的使用：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070629747.png"><br>学习了这两个函数之后，自己可以尝试写出来吗？</p><h1 id="总结单表的DQL语句"><a href="#总结单表的DQL语句" class="headerlink" title="总结单表的DQL语句"></a>总结单表的DQL语句</h1><p>select …5<br>from …1<br>where …2<br>group by …3<br>having …4<br>order by …6<br>重点掌握一个完整的DQL语句执行顺序。</p><h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><h2 id="什么是连接查询"><a href="#什么是连接查询" class="headerlink" title="什么是连接查询"></a>什么是连接查询</h2><ol><li><p>从一张表中查询数据称为单表查询。</p></li><li><p>从两张或更多张表中联合查询数据称为多表查询，又叫做连接查询。</p></li><li><p>什么时候需要使用连接查询？</p><ol><li>比如这样的需求：员工表中有员工姓名，部门表中有部门名字，要求查询每个员工所在的部门名字，这个时候就需要连接查询。<h2 id="连接查询的分类"><a href="#连接查询的分类" class="headerlink" title="连接查询的分类"></a>连接查询的分类</h2></li></ol></li><li><p>根据语法出现的年代进行分类：</p><ol><li>SQL92（这种语法很少用，可以不用学。）</li><li>SQL99（我们主要学习这种语法。）</li></ol></li><li><p>根据连接方式的不同进行分类：</p><ol><li>内连接<ol><li>等值连接</li><li>非等值连接</li><li>自连接</li></ol></li><li>外连接<ol><li>左外连接（左连接）</li><li>右外连接（右连接）</li></ol></li><li>全连接</li></ol></li></ol><h2 id="笛卡尔积现象"><a href="#笛卡尔积现象" class="headerlink" title="笛卡尔积现象"></a>笛卡尔积现象</h2><ol><li>当两张表进行连接查询时，如果没有任何条件进行过滤，最终的查询结果条数是两张表条数的乘积。为了避免笛卡尔积现象的发生，需要添加条件进行筛选过滤。</li><li>需要注意：添加条件之后，虽然避免了笛卡尔积现象，但是匹配的次数没有减少。</li><li>为了SQL语句的可读性，为了执行效率，建议给表起别名。<h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><h3 id="什么叫内连接"><a href="#什么叫内连接" class="headerlink" title="什么叫内连接"></a>什么叫内连接</h3><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070622806.png"><br>满足条件的记录才会出现在结果集中。</li></ol><h3 id="内连接之等值连接"><a href="#内连接之等值连接" class="headerlink" title="内连接之等值连接"></a>内连接之等值连接</h3><p>连接时，条件为等量关系。<br>案例：查询每个员工所在的部门名称，要求显示员工名、部门名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>e.ename,d.dname<br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>dept d<br><span class="hljs-keyword">on</span><br>e.deptno = d.deptno;<br></code></pre></td></tr></tbody></table></figure><p>注意：inner可以省略。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070617299.png"></p><h3 id="内连接之非等值连接"><a href="#内连接之非等值连接" class="headerlink" title="内连接之非等值连接"></a>内连接之非等值连接</h3><p>连接时，条件是非等量关系。<br>案例：查询每个员工的工资等级，要求显示员工名、工资、工资等级。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>e.ename,e.sal,s.grade<br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">join</span><br>salgrade s<br><span class="hljs-keyword">on</span><br>e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070612386.png"></p><h3 id="内连接之自连接"><a href="#内连接之自连接" class="headerlink" title="内连接之自连接"></a>内连接之自连接</h3><p>连接时，一张表看做两张表，自己和自己进行连接。<br>案例：找出每个员工的直属领导，要求显示员工名、领导名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>e.ename 员工名, l.ename 领导名<br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">join</span><br>emp l<br><span class="hljs-keyword">on</span><br>e.mgr = l.empno;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070608141.png"><br>思路：<br>将emp表当做员工表 e<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070603762.png"><br>将emp表当做领导表 l<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070559420.png"><br>可以发现连接条件是：e.mgr = l.empno（员工的领导编号=领导的员工编号)<br>注意：KING这个员工没有查询出来。如果想将KING也查询出来，需要使用外连接。</p><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><h3 id="什么叫外连接"><a href="#什么叫外连接" class="headerlink" title="什么叫外连接"></a>什么叫外连接</h3><p>内连接是满足条件的记录查询出来。也就是两张表的交集。<br>外连接是除了满足条件的记录查询出来，再将其中一张表的记录全部查询出来，另一张表如果没有与之匹配的记录，自动模拟出NULL与其匹配。<br>左外连接：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070554170.png"><br>右外连接：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070549590.png"></p><h3 id="外连接之左外连接（左连接）"><a href="#外连接之左外连接（左连接）" class="headerlink" title="外连接之左外连接（左连接）"></a>外连接之左外连接（左连接）</h3><p>案例：查询所有部门信息，并且找出每个部门下的员工。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  d.*,e.ename<br><span class="hljs-keyword">from</span><br>  dept d<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span><br>  emp e<br><span class="hljs-keyword">on</span><br>  d.deptno = e.deptno;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070544556.png"><br>注意：outer可以省略。<br>任何一个左连接都可以写作右连接。</p><h3 id="外连接之右外连接（右连接）"><a href="#外连接之右外连接（右连接）" class="headerlink" title="外连接之右外连接（右连接）"></a>外连接之右外连接（右连接）</h3><p>还是上面的案例，可以写作右连接。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  d.*,e.ename<br><span class="hljs-keyword">from</span><br>  emp e<br><span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span><br>  dept d<br><span class="hljs-keyword">on</span><br>  d.deptno = e.deptno;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070539772.png"><br>案例：找出所有员工的上级领导，要求显示员工名和领导名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  e.ename 员工名,l.ename 领导名 <br><span class="hljs-keyword">from</span> <br>  emp e <br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> <br>  emp l <br><span class="hljs-keyword">on</span><br>  e.mgr = l.empno;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  e.ename 员工名,l.ename 领导名 <br><span class="hljs-keyword">from</span> <br>  emp l <br><span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> <br>  emp e <br><span class="hljs-keyword">on</span><br>  e.mgr = l.empno;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070532633.png"></p><h2 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h2><p>什么是全连接？<br>MySQL不支持full join。oracle数据库支持。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070526771.png"><br>两张表数据全部查询出来，没有匹配的记录，各自为对方模拟出NULL进行匹配。<br>客户表：t_customer<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070521539.png"><br>订单表：t_order<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070517678.png"><br>案例：查询所有的客户和订单。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br> c.*,o.* <br><span class="hljs-keyword">from</span> <br> t_customer c <br><span class="hljs-keyword">full</span> <span class="hljs-keyword">join</span> <br> t_order o <br><span class="hljs-keyword">on</span> <br> c.cid = o.cid;<br></code></pre></td></tr></tbody></table></figure><h2 id="多张表连接"><a href="#多张表连接" class="headerlink" title="多张表连接"></a>多张表连接</h2><p>三张表甚至更多张表如何进行表连接<br>案例：找出每个员工的部门，并且要求显示每个员工的薪资等级。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br> e.ename,d.dname,s.grade <br><span class="hljs-keyword">from</span> <br> emp e <br><span class="hljs-keyword">join</span> <br> dept d <br><span class="hljs-keyword">on</span> <br> e.deptno = d.deptno <br><span class="hljs-keyword">join</span> <br> salgrade s <br><span class="hljs-keyword">on</span> <br> e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070512471.png"></p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="什么是子查询"><a href="#什么是子查询" class="headerlink" title="什么是子查询"></a>什么是子查询</h2><ol><li>select语句中嵌套select语句就叫做子查询。</li><li>select语句可以嵌套在哪里？<ol><li>where后面、from后面、select后面都是可以的。</li></ol></li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ..(<span class="hljs-keyword">select</span>)..<br><span class="hljs-keyword">from</span> ..(<span class="hljs-keyword">select</span>)..<br><span class="hljs-keyword">where</span> ..(<span class="hljs-keyword">select</span>)..<br></code></pre></td></tr></tbody></table></figure><h2 id="where后面使用子查询"><a href="#where后面使用子查询" class="headerlink" title="where后面使用子查询"></a>where后面使用子查询</h2><p>案例：找出高于平均薪资的员工姓名和薪资。<br>错误的示范：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt; <span class="hljs-keyword">avg</span>(sal);<br></code></pre></td></tr></tbody></table></figure><p>错误原因：where后面不能直接使用分组函数。<br>可以使用子查询：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt; (<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp);<br></code></pre></td></tr></tbody></table></figure><h2 id="from后面使用子查询"><a href="#from后面使用子查询" class="headerlink" title="from后面使用子查询"></a>from后面使用子查询</h2><p>小窍门：from后面的子查询可以看做一张临时表。<br>案例：找出每个部门的平均工资的等级。<br>第一步：先找出每个部门平均工资。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">avg</span>(sal) avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070458323.png"><br>第二步：将以上查询结果当做临时表t，t表和salgrade表进行连接查询。条件：t.avgsal between s.losal and s.hisal</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.*,s.grade <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">avg</span>(sal) avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> t.avgsal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070454918.png"></p><h2 id="select后面使用子查询"><a href="#select后面使用子查询" class="headerlink" title="select后面使用子查询"></a>select后面使用子查询</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,(<span class="hljs-keyword">select</span> d.dname <span class="hljs-keyword">from</span> dept d <span class="hljs-keyword">where</span> e.deptno = d.deptno) <span class="hljs-keyword">as</span> dname <span class="hljs-keyword">from</span> emp e;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070451163.png"></p><h2 id="exists、not-exists"><a href="#exists、not-exists" class="headerlink" title="exists、not exists"></a>exists、not exists</h2><p>在 MySQL 数据库中，EXISTS（存在）用于检查子查询的查询结果行数是否大于0。如果子查询的查询结果行数大于0，则 EXISTS 条件为真。（即存在查询结果则是true。）</p><p>主要应用场景：</p><ul><li>EXISTS 可以与 SELECT、UPDATE、DELETE 一起使用，用于检查另一个查询是否返回任何行；</li><li>EXISTS 可以用于验证条件子句中的表达式是否存在；</li><li>EXISTS 常用于子查询条件过滤，例如查询有订单的用户等。</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> t_customer;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> t_order;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_customer(<br>  customer_id <span class="hljs-built_in">int</span>,<br>  customer_name <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>)<br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_order(<br>  order_id <span class="hljs-built_in">int</span>,<br>  order_price <span class="hljs-built_in">decimal</span>(<span class="hljs-number">5</span>,<span class="hljs-number">1</span>),<br>  customer_id <span class="hljs-built_in">int</span><br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_customer(customer_id,customer_name) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">'zhangsan'</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_customer(customer_id,customer_name) <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">'lisi'</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_customer(customer_id,customer_name) <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">'wangwu'</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_order(order_id, order_price, customer_id) <span class="hljs-keyword">values</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1000.0</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_order(order_id, order_price, customer_id) <span class="hljs-keyword">values</span>(<span class="hljs-number">20</span>, <span class="hljs-number">2000.0</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_order(order_id, order_price, customer_id) <span class="hljs-keyword">values</span>(<span class="hljs-number">30</span>, <span class="hljs-number">3000.0</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_order(order_id, order_price, customer_id) <span class="hljs-keyword">values</span>(<span class="hljs-number">40</span>, <span class="hljs-number">4000.0</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-keyword">commit</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_customer;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_order;<br></code></pre></td></tr></tbody></table></figure><p>现在我们来看一个简单的案例，假设我们要查询先前有过订单的顾客，而订单信息保存在 t_order 表中，顾客信息保存在 t_customer 表中。我们可以使用以下 sql 语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_customer c <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_order o <span class="hljs-keyword">where</span> o.customer_id=c.customer_id);<br></code></pre></td></tr></tbody></table></figure><p>在这个查询语句中，子查询用于检查是否有订单与每个客户相关联。如果子查询返回至少一行，则表示该顾客已经下过订单，并返回此客户的所有信息，否则该顾客将不被包含在结果中。</p><p>以下是这个查询语句的执行过程：</p><ol><li> 首先查询表 t_customer 中的所有顾客信息（以下简称为顾客表）； </li><li> 对于顾客表中的每一行，都执行一次子查询，子查询查询该顾客有没有订单，如果有，则在结果集中保留该顾客信息；如果没有，则将该顾客排除； </li><li> 最终返回有订单顾客的所有信息。 </li></ol><p>除了 EXISTS，也可以使用 NOT EXISTS 条件从 SELECT、UPDATE、DELETE 语句中获取子查询的返回结果。NOT EXISTS 用于检查一个子查询是否返回任何行，如果没有行返回，那么 NOT EXISTS 将返回 true。</p><p>例如，我们想要查找所有没有下过订单的顾客，可以使用以下 sql 语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_customer c <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_order o <span class="hljs-keyword">where</span> o.customer_id=c.customer_id);<br></code></pre></td></tr></tbody></table></figure><p>在这个查询语句中，如果没有任何与顾客相关联的订单，则 NOT EXISTS 子查询将返回一个空结果集，这时候 WHERE 条件为 true，并将返回所有顾客信息。如果顾客有订单，则 NOT EXISTS 子查询的结果集将不为空，WHERE 条件为 false，则不会返回该顾客的信息。</p><p>总之，无论是 EXISTS 还是 NOT EXISTS，都是非常有用的 SQL 工具。可以通过它们来结合子查询来动态过滤查询结果，使 SQL 查询变得更加灵活和高效。</p><h2 id="in和exists区别"><a href="#in和exists区别" class="headerlink" title="in和exists区别"></a>in和exists区别</h2><p>IN 和 EXISTS 都是用于关系型数据库查询的操作符。不同之处在于：</p><ol><li> IN 操作符是根据指定列表中的值来判断是否满足条件，而 EXISTS 操作符则是根据子查询的结果是否有返回记录集来判断。 </li><li> EXISTS 操作符通常比 IN 操作符更快，尤其是在子查询返回记录数很大的情况下。因为 EXISTS 只需要判断是否存在符合条件的记录，而 IN 操作符需要比对整个列表，因此执行效率相对较低。 </li><li> IN 操作符可同时匹配多个值，而 EXISTS 只能匹配一组条件。 </li></ol><p>下面是一个简单的示例，用于演示 IN 和 EXISTS 之间的区别。假设我们有两个表 orders 和 products，orders 表中记录了订单信息，products 表中记录了商品信息。现在我们想查询所有“手机”和“平板电脑”这两种商品中，至少有一笔订单销售了 $1000 以上的商品：</p><p>使用 IN 操作符：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> product_name <span class="hljs-keyword">IN</span> (<span class="hljs-string">'手机'</span>, <span class="hljs-string">'平板电脑'</span>)<br><span class="hljs-keyword">AND</span> product_id <span class="hljs-keyword">IN</span> (<br>  <span class="hljs-keyword">SELECT</span> product_id<br>  <span class="hljs-keyword">FROM</span> orders<br>  <span class="hljs-keyword">WHERE</span> order_amount &gt; <span class="hljs-number">1000</span><br>);<br></code></pre></td></tr></tbody></table></figure><p>使用 EXISTS 操作符：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> product_name <span class="hljs-keyword">IN</span> (<span class="hljs-string">'手机'</span>, <span class="hljs-string">'平板电脑'</span>)<br><span class="hljs-keyword">AND</span> <span class="hljs-keyword">EXISTS</span> (<br>  <span class="hljs-keyword">SELECT</span> *<br>  <span class="hljs-keyword">FROM</span> orders<br>  <span class="hljs-keyword">WHERE</span> orders.product_id = products.product_id<br>  <span class="hljs-keyword">AND</span> order_amount &gt; <span class="hljs-number">1000</span><br>);<br></code></pre></td></tr></tbody></table></figure><p>总之，IN 和 EXISTS 都是用于条件过滤的操作符，但其实现方式和性能特点都不同，需要根据具体情况进行选择和使用。</p><h1 id="union-amp-union-all"><a href="#union-amp-union-all" class="headerlink" title="union&amp;union all"></a>union&amp;union all</h1><p>不管是union还是union all都可以将两个查询结果集进行合并。<br>union会对合并之后的查询结果集进行去重操作。<br>union all是直接将查询结果集合并，不进行去重操作。（union all和union都可以完成的话，优先选择union all，union all因为不需要去重，所以效率高一些。）<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070442242.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070437679.png"><br>案例：查询工作岗位是MANAGER和SALESMAN的员工。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job=<span class="hljs-string">'MANAGER'</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job=<span class="hljs-string">'SALESMAN'</span>;<br></code></pre></td></tr></tbody></table></figure><p>以上案例采用or也可以完成，那or和union all有什么区别？考虑走索引优化之类的选择union all，其它选择or。<br>两个结果集合并时，列数量要相同：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070433107.png"></p><h1 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h1><ol><li><p>limit作用：查询第几条到第几条的记录。通常是因为表中数据量太大，需要分页显示。</p></li><li><p>limit语法格式：</p><ol><li>limit 开始下标, 长度</li></ol></li><li><p>案例：查询员工表前5条记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>, <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><p>如果下标是从0开始，可以简写为：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>查询工资排名在前5名的员工（limit是在order by执行之后才会执行的）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>通用的分页sql</p></li></ol><p>假设每页显示3条记录：pageSize = 3<br>第1页：limit 0, 3<br>第2页：limit 3, 3<br>第3页：limit 6, 3<br>第pageNo页：limit (pageNo - 1)*pageSize, pageSize</p><h1 id="35个DQL练手题"><a href="#35个DQL练手题" class="headerlink" title="35个DQL练手题"></a>35个DQL练手题</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><ol><li><p>取得每个部门最高薪水的人员名称</p><p>第一步：取得每个部门最高薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">as</span> maxsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：将上面第一步的查询结果当做一张临时表t，进行表连接，条件是：t.deptno=e.deptno and t.maxsal=e.sal</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,t.* <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">as</span> maxsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t <span class="hljs-keyword">on</span> e.deptno = t.deptno <span class="hljs-keyword">and</span> e.sal = t.maxsal;<br></code></pre></td></tr></tbody></table></figure><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><ol start="2"><li><p>哪些人的薪水在部门的平均薪水之上</p><p>第一步：取得每个部门的平均薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：将上面的查询结果当做临时表t，让t和emp e表进行表连接，条件是：t.deptno=e.deptno and e.sal&gt;t.avgsal</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,e.sal,t.* <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t <span class="hljs-keyword">on</span> t.deptno=e.deptno <span class="hljs-keyword">and</span> e.sal&gt;t.avgsal;<br></code></pre></td></tr></tbody></table></figure><h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><ol start="3"><li><p>取得每个部门平均薪水的等级</p><p>第一步：取得每个部门的平均薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：将上面的查询结果当做临时表t，然后t和salgrade s表进行连接，条件是：t.avgsal between s.losal and s.hisal</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.*,s.grade <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> t.avgsal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure><h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><ol start="4"><li><p>取得部门中（所有人的）平均的薪水等级</p><p>第一步：找出每个人的薪水等级</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,e.sal,s.grade <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：在上面的查询结果当中继续按照部门编号进行分组，求平均值。（不需要将上面的查询结果当做临时表，继续基于它进行分组即可。）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>   e.deptno,<span class="hljs-keyword">avg</span>(s.grade) <br><span class="hljs-keyword">from</span> <br>  emp e <br><span class="hljs-keyword">join</span> <br>  salgrade s <br><span class="hljs-keyword">on</span> <br>  e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <br>  e.deptno;<br></code></pre></td></tr></tbody></table></figure><h2 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h2><ol start="5"><li><p>不准用组函数（Max），取得最高薪水（给出两种解决方案）</p><p>第一种方案：按照薪资降序排列，取第一个。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二种方案：采用表的自连接方式。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> a.sal <span class="hljs-keyword">from</span> emp a <span class="hljs-keyword">join</span> emp b <span class="hljs-keyword">on</span> a.sal &lt; b.sal);<br></code></pre></td></tr></tbody></table></figure><h2 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h2><ol start="6"><li><p>取得平均薪水最高的部门的部门编号（至少给出两种解决方案）</p><p>第一种方案：降序排列取第一个</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> avgsal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二种方案：max函数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">having</span> <span class="hljs-keyword">avg</span>(sal)=(<span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(t.avgsal) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t);<br></code></pre></td></tr></tbody></table></figure><h2 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h2><ol start="7"><li><p>取得平均薪水最高的部门的部门名称</p><p>比上面的题目多一个表连接，和dept表连接，按照部门名称进行分组。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.dname,<span class="hljs-keyword">avg</span>(e.sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno=d.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> avgsal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h2></li><li><p>求平均薪水的等级最低的部门的部门名称</p><p>第一步：求每个部门的平均薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.dname,<span class="hljs-keyword">avg</span>(e.sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：求每个部门的平均薪水等级（将以上的执行结果当做临时表t，t和salgrade s表进行连接，条件：t.avgsal between .s.losal and s.hisal）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.*,s.grade <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> d.dname,<span class="hljs-keyword">avg</span>(e.sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname) t <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> t.avgsal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure><p>第三步：找到最低的部门名称（以上结果继续按照grade进行升序，然后limit 1）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.*,s.grade <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> d.dname,<span class="hljs-keyword">avg</span>(e.sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname) t <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> t.avgsal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> s.grade <span class="hljs-keyword">asc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h2><ol start="9"><li><p>取得比普通员工(员工代码没有在mgr字段上出现的)的最高薪水还要高的领导人姓名</p><p>第一步：找出所有的普通员工的最高薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> empno <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> mgr <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> mgr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>);<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：大于以上最高薪水的一定是要找的领导人。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt; (<span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> empno <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> mgr <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> mgr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>));<br></code></pre></td></tr></tbody></table></figure><h2 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h2><ol start="10"><li><p>取得薪水最高的前五名员工</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h2></li><li><p>取得薪水最高的第六到第十名员工</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>, <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第12题"><a href="#第12题" class="headerlink" title="第12题"></a>第12题</h2></li><li><p>取得最后入职的5名员工</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal,hiredate <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> hiredate <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第13题"><a href="#第13题" class="headerlink" title="第13题"></a>第13题</h2><ol start="13"><li><p>取得每个薪水等级有多少员工</p><p>第一步：找出每个员工的薪水等级</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,s.grade <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：基于以上的记录继续根据等级分组，count即可。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s.grade,<span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> s.grade;<br></code></pre></td></tr></tbody></table></figure><h2 id="第14题"><a href="#第14题" class="headerlink" title="第14题"></a>第14题</h2><ol start="14"><li><p>列出所有员工及领导的姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename 员工名, l.ename 领导名 <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.mgr = l.empno;<br></code></pre></td></tr></tbody></table></figure><h2 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h2></li><li><p>列出受雇日期早于其直接上级的所有员工的编号,姓名,部门名称</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename 员工名,e.hiredate, l.ename 领导名,l.hiredate,d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.mgr = l.empno <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">where</span> e.hiredate &lt; l.hiredate;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h2><ol start="16"><li><p>列出部门名称和这些部门的员工信息,同时列出那些没有员工的部门</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.dname,e.ename,e.sal <span class="hljs-keyword">from</span> dept d <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp e <span class="hljs-keyword">on</span> d.deptno = e.deptno;<br></code></pre></td></tr></tbody></table></figure><h2 id="第17题"><a href="#第17题" class="headerlink" title="第17题"></a>第17题</h2></li><li><p>列出至少有5个员工的所有部门</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(*) &gt;= <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第18题"><a href="#第18题" class="headerlink" title="第18题"></a>第18题</h2></li><li><p>列出薪金比”SMITH”多的所有员工信息</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt; (<span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename = <span class="hljs-string">'SMITH'</span>);<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第19题"><a href="#第19题" class="headerlink" title="第19题"></a>第19题</h2><ol start="19"><li><p>列出所有”CLERK”(办事员)的姓名及其部门名称,部门的人数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t1.ename,t1.dname,t2.total <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> e.ename,d.dname,d.deptno <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">where</span> e.job = <span class="hljs-string">'CLERK'</span>) t1 <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">as</span> total,deptno  <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t2 <span class="hljs-keyword">on</span> t1.deptno = t2.deptno;<br></code></pre></td></tr></tbody></table></figure><h2 id="第20题"><a href="#第20题" class="headerlink" title="第20题"></a>第20题</h2></li><li><p>列出最低薪金大于1500的各种工作及从事此工作的全部雇员人数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> job,<span class="hljs-keyword">min</span>(sal),<span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job <span class="hljs-keyword">having</span> <span class="hljs-keyword">min</span>(sal)&gt;<span class="hljs-number">1500</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第21题"><a href="#第21题" class="headerlink" title="第21题"></a>第21题</h2></li><li><p>列出在部门”SALES”&lt;销售部&gt;工作的员工的姓名,假定不知道销售部的部门编号</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">where</span> d.dname=<span class="hljs-string">'sales'</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第22题"><a href="#第22题" class="headerlink" title="第22题"></a>第22题</h2><ol start="22"><li><p>列出薪金高于公司平均薪金的所有员工,所在部门,上级领导,雇员的工资等级</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename 员工,l.ename 领导,d.dname,s.grade <span class="hljs-keyword">from</span> <br>emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.mgr = l.empno <br><span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <br><span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal <br><span class="hljs-keyword">where</span> e.sal &gt; (<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp);<br></code></pre></td></tr></tbody></table></figure><h2 id="第23题"><a href="#第23题" class="headerlink" title="第23题"></a>第23题</h2></li><li><p>列出与”SCOTT”从事相同工作的所有员工及部门名称</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,d.dname,e.job <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno=d.deptno <span class="hljs-keyword">where</span> job=(<span class="hljs-keyword">select</span> job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename =<span class="hljs-string">'scott'</span>);<br></code></pre></td></tr></tbody></table></figure><h2 id="第24题"><a href="#第24题" class="headerlink" title="第24题"></a>第24题</h2></li><li><p>列出薪金等于部门30中员工的薪金的其他员工的姓名和薪金</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal,deptno <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno=<span class="hljs-number">30</span>) <span class="hljs-keyword">and</span> deptno &lt;&gt; <span class="hljs-number">30</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第25题"><a href="#第25题" class="headerlink" title="第25题"></a>第25题</h2><ol start="25"><li><p>列出薪金高于在部门30工作的所有员工的薪金的员工姓名和薪金.部门名称</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,e.sal,d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">where</span> sal &gt; (<span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno=<span class="hljs-number">30</span>);<br></code></pre></td></tr></tbody></table></figure><h2 id="第26题"><a href="#第26题" class="headerlink" title="第26题"></a>第26题</h2></li><li><p>列出在每个部门工作的员工数量,平均工资和平均服务期限</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal),<span class="hljs-keyword">count</span>(*),deptno,<span class="hljs-keyword">avg</span>(<span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">now</span>(),hiredate)) <span class="hljs-keyword">as</span> avgtime <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure><h2 id="第27题"><a href="#第27题" class="headerlink" title="第27题"></a>第27题</h2></li><li><p>列出所有员工的姓名、部门名称和工资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,e.sal,d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第28题"><a href="#第28题" class="headerlink" title="第28题"></a>第28题</h2><ol start="28"><li><p>列出所有部门的详细信息和人数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.deptno,d.dname,d.loc,<span class="hljs-keyword">count</span>(e.deptno) <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno=d.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>  d.deptno,d.dname,d.loc;<br></code></pre></td></tr></tbody></table></figure><h2 id="第29题"><a href="#第29题" class="headerlink" title="第29题"></a>第29题</h2></li><li><p>列出各种工作的最低工资及从事此工作的雇员姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.job,t.minsal,e.ename <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> job,<span class="hljs-keyword">min</span>(sal) <span class="hljs-keyword">as</span> minsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job) t <span class="hljs-keyword">on</span> e.job=t.job <span class="hljs-keyword">and</span> e.sal=t.minsal;<br></code></pre></td></tr></tbody></table></figure><h2 id="第30题"><a href="#第30题" class="headerlink" title="第30题"></a>第30题</h2></li><li><p>列出各个部门的MANAGER(领导)的最低薪金</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">min</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job=<span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第31题"><a href="#第31题" class="headerlink" title="第31题"></a>第31题</h2><ol start="31"><li><p>列出所有员工的年工资,按年薪从低到高排序</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,(sal+<span class="hljs-keyword">ifnull</span>(comm,<span class="hljs-number">0</span>))*<span class="hljs-number">12</span> <span class="hljs-keyword">as</span> yearsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> yearsal <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第32题"><a href="#第32题" class="headerlink" title="第32题"></a>第32题</h2></li><li><p>求出员工领导的薪水超过3000的员工名称与领导名称</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename 员工名, l.ename 领导名 <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.mgr = l.empno <span class="hljs-keyword">where</span> l.sal&gt;<span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第33题"><a href="#第33题" class="headerlink" title="第33题"></a>第33题</h2></li><li><p>求出部门名称中,带’S’字符的部门员工的工资合计、部门人数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.dname,<span class="hljs-keyword">ifnull</span>(<span class="hljs-keyword">sum</span>(sal),<span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> sumsal,<span class="hljs-keyword">count</span>(e.ename) <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno=d.deptno <span class="hljs-keyword">where</span> d.dname <span class="hljs-keyword">like</span> <span class="hljs-string">'%S%'</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname;<br></code></pre></td></tr></tbody></table></figure><h2 id="第34题"><a href="#第34题" class="headerlink" title="第34题"></a>第34题</h2></li><li><p>给任职日期超过30年的员工加薪10%</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> emp <span class="hljs-keyword">set</span> sal=sal*<span class="hljs-number">1.1</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">now</span>(),hiredate)/<span class="hljs-number">365</span> &gt; <span class="hljs-number">30</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第35题"><a href="#第35题" class="headerlink" title="第35题"></a>第35题</h2><ol start="35"><li>某公司面试题</li></ol><p>有3个表S（学生表），C（课程表），SC（学生选课表）<br>S（SNO，SNAME）代表（学号，姓名）<br>C（CNO，CNAME，CTEACHER）代表（课号，课名，教师）<br>SC（SNO，CNO，SCGRADE）代表（学号，课号，成绩）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> SC<br>(<br>  SNO      <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>),<br>  CNO      <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>),<br>  SCGRADE  <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> S<br>(<br>  SNO    <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span> ),<br>  SNAME  <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> C<br>(<br>  CNO       <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>),<br>  CNAME     <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>),<br>  CTEACHER  <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'语文'</span>, <span class="hljs-string">'张'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'政治'</span>, <span class="hljs-string">'王'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'3'</span>, <span class="hljs-string">'英语'</span>, <span class="hljs-string">'李'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'4'</span>, <span class="hljs-string">'数学'</span>, <span class="hljs-string">'赵'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'5'</span>, <span class="hljs-string">'物理'</span>, <span class="hljs-string">'黎明'</span>); <br><span class="hljs-keyword">commit</span>;<br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> S ( SNO, SNAME ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'学生1'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> S ( SNO, SNAME ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'学生2'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> S ( SNO, SNAME ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'3'</span>, <span class="hljs-string">'学生3'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> S ( SNO, SNAME ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'4'</span>, <span class="hljs-string">'学生4'</span>); <br><span class="hljs-keyword">commit</span>;<br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'40'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'30'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'20'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'80'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'40'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'3'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'80'</span>); <br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></tbody></table></figure><p>问题：<br>1，找出没选过“黎明”老师的所有学生姓名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname <span class="hljs-keyword">from</span> s <span class="hljs-keyword">where</span> sno <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> sno <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno=(<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> c <span class="hljs-keyword">where</span> cteacher=<span class="hljs-string">'黎明'</span>));<br></code></pre></td></tr></tbody></table></figure><p>2，列出2门以上（含2门）不及格学生姓名及平均成绩。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.*,b.avgscore <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> s.sno,s.sname,<span class="hljs-keyword">count</span>(sc.scgrade) <span class="hljs-keyword">as</span> <span class="hljs-keyword">num</span> <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">join</span> s <span class="hljs-keyword">on</span> sc.sno=s.sno <span class="hljs-keyword">where</span> sc.scgrade &lt; <span class="hljs-number">60</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> s.sname,s.sno <span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(sc.scgrade) &gt;= <span class="hljs-number">2</span>) a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> sno,<span class="hljs-keyword">avg</span>(scgrade) avgscore <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno) b <span class="hljs-keyword">on</span> a.sno = b.sno;<br></code></pre></td></tr></tbody></table></figure><p>3，既学过1号课程又学过2号课所有学生的姓名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sc.sno,s.sname <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">join</span> s <span class="hljs-keyword">on</span> sc.sno=s.sno <span class="hljs-keyword">where</span> sc.cno=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sc.sno <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> sno <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno=<span class="hljs-number">2</span>);<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java异常</title>
    <link href="/posts/f495a96f.html"/>
    <url>/posts/f495a96f.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="异常继承结构"><a href="#异常继承结构" class="headerlink" title="异常继承结构"></a>异常继承结构</h2><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626065730758.png" alt="image-20250626065730758"></p><ol><li>所有的异常和错误都是可抛出的。都继承了Throwable类。</li><li>Error是无法处理的，出现后只有一个结果：JVM终止。</li><li>Exception是可以处理的。</li><li>Exception的分类：<ul><li>所有的RuntimeException的子类：运行时异常/未检查异常(UncheckedException)/非受控异常</li><li>Exception的子类（除RuntimeException之外）：编译时异常/检查异常(CheckedException)/受控异常</li></ul></li><li>编译时异常和运行时异常区别：<ul><li>编译时异常特点：在编译阶段必须提前处理，如果不处理编译器报错。</li><li>运行时异常特点：在编译阶段可以选择处理，也可以不处理，没有硬性要求。</li><li>编译时异常一般是由外部环境或外在条件引起的，如网络故障、磁盘空间不足、文件找不到等</li><li>运行时异常一般是由程序员的错误引起的，并且不需要强制进行异常处理</li><li>注意：编译时异常并不是在编译阶段发生的异常，所有的异常发生都是在运行阶段的，因为每个异常发生都是会new异常对象的，new异常对象只能在运行阶段完成。那为什么叫做编译时异常呢？这是因为这种异常必须在编译阶段提前预处理，如果不处理编译器报错，因此而得名编译时异常。</li></ul></li></ol><h2 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h2><p>异常的处理包括两种方式：</p><ul><li>声明异常：类似于推卸责任的处理方式<ul><li>在方法定义时使用throws关键字声明异常，告知调用者，调用这个方法可能会出现异常。这种处理方式的态度是：如果出现了异常则会抛给调用者来处理。</li></ul></li><li>捕捉异常：真正的处理捕捉异常<ul><li>在可能出现异常的代码上使用try..catch进行捕捉处理。这种处理方式的态度是：把异常抓住。其它方法如果调用这个方法，对于调用者来说是不知道这个异常发生的。因为这个异常被抓住并处理掉了。</li></ul></li><li>异常在处理的整个过程中应该是：声明和捕捉联合使用。</li><li>什么时候捕捉？什么时候声明？如果异常发生后需要调用者来处理的，需要调用者知道的，则采用声明方式。否则采用捕捉。</li></ul><h3 id="声明异常-throws-关键字"><a href="#声明异常-throws-关键字" class="headerlink" title="声明异常(throws 关键字)"></a>声明异常(throws 关键字)</h3><ol><li><p>如果一个异常发生后希望调用者来处理的，使用声明异常（俗话说：交给上级处理）</p><p><code>public void m() throws AException, BException... {}</code></p></li><li><p>如果AException和BException都继承了XException，那么也可以这样写：</p><p><code>public void m() throws XException{}</code></p></li><li><p>调用者在调用m()方法时，编译器会检测到该方法上用throws声明了异常，表示可能会抛出异常，编译器会继续检测该异常是否为编译时异常，如果为编译时异常则必须在编译阶段进行处理，如果不处理编译器就会报错。</p></li><li><p>如果所有位置都采用throws，包括main方法的处理态度也是throws，如果运行时出现了异常，最终异常是抛给了main方法的调用者（JVM），JVM则会终止程序的执行。因此为了保证程序在出现异常后不被中断，至少main方法不要再使用throws进行声明了。</p></li><li><p>发生异常后，在发生异常的位置上，往下的代码是不会执行的，除非进行了异常的捕捉。</p></li></ol><h3 id="捕捉异常-try…catch…关键字"><a href="#捕捉异常-try…catch…关键字" class="headerlink" title="捕捉异常 (try…catch…关键字)"></a>捕捉异常 (try…catch…关键字)</h3><ol><li><p>如果一个异常发生后，不需要调用者知道，也不需要调用者来处理，选择使用捕捉方式处理。</p><p>try{</p><p>// 尝试执行可能会出现异常的代码</p><p>// try块中的代码如果执行出现异常，出现异常的位置往下的代码是不会执行的，直接进入catch块执行</p><p>}catch(AException e){</p><p>// 如果捕捉到AException类型的异常，在这里处理</p><p>}catch(BException e){</p><p>// 如果捕捉到BException类型的异常，在这里处理</p><p>}catch(XException e){</p><p>// 如果捕捉到XException类型的异常，在这里处理}</p><p>// 当try..catch..将所有发生的异常捕捉后，这里的代码是会继续往下执行的。</p></li><li><p>catch可以写多个。并且遵循自上而下，从小到大。</p></li><li><p>Java7新特性：catch后面小括号中可以编写多个异常，使用运算符“|”隔开。</p></li></ol><h2 id="异常的常用方法"><a href="#异常的常用方法" class="headerlink" title="异常的常用方法"></a>异常的常用方法</h2><ol><li>获取异常的简单描述信息：<ol><li>exception.getMessage();</li><li>获取的message是通过构造方法创建异常对象时传递过去的message。</li></ol></li><li>打印异常堆栈信息：<ol><li>exception.printStackTrace();</li></ol></li><li>要会看异常的堆栈信息：<ol><li>异常信息的打印是符合栈数据结构的。</li><li>看异常信息主要看最开始的描述信息。看栈顶信息。</li></ol></li></ol><h2 id="finally语句块"><a href="#finally语句块" class="headerlink" title="finally语句块"></a>finally语句块</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>finally语句块中的代码是一定会执行的。</li><li>finally语句块不能单独使用，至少需要配合try语句块一起使用：<ol><li>try…finally</li><li>try…catch…finally</li><li>资源释放的工作比较重要，如果资源没有释放会一直占用内存。</li><li>为了保证资源的关闭，也就是说：不管程序是否出现异常，关闭资源的代码一定要保证执行。</li><li>因此在finally语句块中通常进行资源的释放。</li></ol></li><li>final、finally、finalize分别是什么？<ol><li>final是一个关键字，修饰的类无法继承，修饰的方法无法覆盖，修饰的变量不能修改。</li><li>finally是一个关键字，和try一起使用，finally语句块中的代码一定会执行。</li><li>finalize是一个标识符，它是Object类中的一个方法名。</li></ol></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>以下程序的执行结果？</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626070934605.png" alt="image-20250626070934605"></p><p>以下程序的执行结果？</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626070946473.png" alt="image-20250626070946473"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626070955746.png" alt="image-20250626070955746"></p><h2 id="方法覆盖与异常"><a href="#方法覆盖与异常" class="headerlink" title="方法覆盖与异常"></a>方法覆盖与异常</h2><p>方法重写之后，不能比父类方法抛出更多的异常，可以更少。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626071036017.png" alt="image-20250626071036017"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java数组</title>
    <link href="/posts/e3345db4.html"/>
    <url>/posts/e3345db4.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h2><ul><li>什么是数组？<ol><li>在Java中，数组是一种用于存储多个相同数据类型元素的容器。</li><li>例如一个存储整数的数组：int[] nums = {100, 200, 300};</li><li>例如一个存储字符串的数组：String[] names = {“jack”,“lucy”,“lisi”};</li><li>数组是一种引用数据类型，隐式继承Object。因此数组也可以调用Object类中的方法。</li><li>数组对象存储在堆内存中。</li></ol></li><li>数组的分类？<ol><li>根据维数进行分类：一维数组，二维数组，三维数组，多维数组。</li><li>根据数组中存储的元素类型分类：基本类型数组，引用类型数组。</li><li>根据数组初始化方式不同分类：静态数组，动态数组。</li></ol></li><li>Java数组存储元素的特点？<ol><li>数组长度一旦确定不可变。</li><li>数组中元素数据类型一致，每个元素占用空间大小相同。</li><li>数组中每个元素在空间存储上，内存地址是连续的。</li><li>每个元素有索引，首元素索引0，以1递增。</li><li>以首元素的内存地址作为数组对象在堆内存中的地址。</li><li>所有数组对象都有length属性用来获取数组元素个数。末尾元素下标：length-1</li></ol></li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619212910246.png" alt="image-20250619212910246"></p><ul><li>数组优点？<ol><li>根据下标查询某个元素的效率极高。数组中有100个元素和有100万个元素，查询效率相同。时间复杂度O(1)。也就是说在数组中根据下标查询某个元素时，不管数组的长短，耗费时间是固定不变的。</li><li>原因：知道首元素内存地址，元素在空间存储上内存地址又是连续的，每个元素占用空间大小相同，只要知道下标，就可以通过数学表达式计算出来要查找元素的内存地址。直接通过内存地址定位元素。</li></ol></li><li>数组缺点？<ol><li>随机增删元素的效率较低。因为随机增删元素时，为了保证数组中元素的内存地址连续，就需要涉及到后续元素的位移问题。时间复杂度O(n)。O(n)表示的是线性阶，随着问题规模n的不断增大，时间复杂度不断增大，算法的执行效率越低。（不过需要注意的是：对数组末尾元素的增删效率是不受影响的。）</li><li>无法存储大量数据，因为很难在内存上找到非常大的一块连续的内存。</li></ol></li></ul><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><ol><li><p>一维数组是线性结构。二维数组，三维数组，多维数组是非线性结构。</p></li><li><p>如何静态初始化一维数组？</p><ul><li>第一种：int[] arr = {55,67,22}; 或者 int arr[] = {55,67,22};</li><li>第二种：int[] arr = new int[]{55,67,22};</li></ul></li><li><p>如何访问数组中的元素？</p><p>​    通过下标来访问。注意ArrayIndexOutOfBoundsException异常的发生。</p></li><li><p>如何遍历数组？</p><p>​    普通for循环遍历</p><p>​    for-each遍历（优点是代码简洁。缺点是没有下标。）</p></li><li><p>如何动态初始化一维数组？</p><p>​    int[] arr = new int[4];</p><p>​    Object[] objs = new Object[5];</p><p>​    数组动态初始化的时候，确定长度，并且数组中每个元素采用默认值。</p></li></ol><ol start="6"><li>一维数组中存储引用时的内存图</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213239940.png" alt="image-20250619213239940"></p><ol start="7"><li><p>关于main方法的形参args？</p><ul><li><p>接收命令行参数</p></li><li><p>在DOS命令窗口中怎么传？在IDEA中怎么传？</p></li></ul></li><li><p>关于方法的可变长度参数？</p><ul><li>可变长参数只能出现在形参列表中的最后一个位置。</li><li>可变长参数可以当做数组来处理。</li></ul></li></ol><h3 id="一维数组的扩容"><a href="#一维数组的扩容" class="headerlink" title="一维数组的扩容"></a>一维数组的扩容</h3><ol><li>数组长度一旦确定不可变。</li><li>那数组应该如何扩容？<ul><li>只能创建一个更大的数组将原数组中的数据全部拷贝到新数组中</li><li>可以使用System.arraycopy()方法完成数组的拷贝。</li></ul></li><li>数组扩容会影响程序的执行效率，因此尽可能预测数据量，创建一个接近数量的数组，减少扩容次数</li></ol><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ol><li>二维数组是一个特殊的一维数组，特殊在：这个一维数组中每个元素是一个一维数组。</li><li>二维数组的静态初始化<ul><li><code>int[][] arr = new int[][]{{},{},{}}</code>;</li><li><code>int[][] arr = {{},{},{}}</code>;</li></ul></li><li>二维数组的动态初始化(等长)<ul><li><code>int[][] arr = new int[3][4]</code>;</li></ul></li><li>二维数组的动态初始化（不等长）<ul><li><code>int[][] arr = new int[3][]</code>;</li></ul></li><li>二维数组中元素的访问<ul><li><code>第一个元素：arr[0][0]</code></li><li><code>最后一个元素：arr[arr.length-1][arr[arr.length-1].length-1]</code></li></ul></li><li>二维数组中元素的遍历</li></ol><h2 id="IDEA中的Debug调试"><a href="#IDEA中的Debug调试" class="headerlink" title="IDEA中的Debug调试"></a>IDEA中的Debug调试</h2><ol><li>在可能出现问题的代码附近添加断点。一般是将断点添加在方法体的某一行代码上。</li><li>断点可以添加多个。点一次添加一个断点。再点一次断点则消失。</li><li>添加断点后，如果想让程序运行到断点处停下来，需要使用Debug模式运行程序。</li><li>Debug窗口中的按钮</li><li>给断点添加条件</li><li>Debug窗口中的隐藏按钮</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213825573.png" alt="image-20250619213825573"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213838455.png" alt="image-20250619213838455"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213850130.png" alt="image-20250619213850130"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213901588.png" alt="image-20250619213901588"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213916165.png" alt="image-20250619213916165"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213926947.png" alt="image-20250619213926947"></p><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><h3 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h3><ul><li>数据结构概述数据结构是指用来存储和组织数据的一种方式，就像在生活中我们用文件柜、书架、衣柜等来整理我们的物品一样，数据结构也可以帮助我们整理和管理程序中的数据。</li><li>数据结构分为：数据的逻辑结构、数据的物理结构<ol><li>逻辑结构是指数据元素之间的逻辑关系，它是从抽象的角度描述数据元素之间的关系，不涉及具体的存储方式或实现细节。逻辑结构主要关注问题的本质、特点和抽象模型，是数据结构的逻辑表示。</li><li>物理结构是指数据结构在计算机内存中实际存储和组织的方式。它是从具体的角度描述数据结构的实现方式和存储结构，包括数据元素在内存中的存储分布和访问方式等。物理结构主要关注问题的具体实现和操作。</li><li>因此，逻辑结构与物理结构的区别在于：逻辑结构是从抽象的角度描述数据元素之间的关系，物理结构是从具体的角度描述内存中数据元素的存储方式和组织形式。逻辑结构主要关注问题的本质和特点，物理结构主要关注问题的具体实现和操作。</li></ol></li><li>逻辑结构的划分？<ol><li>集合结构：数据结构中的元素之间除了在“同属一个集合”的关系外，别无其它关系；</li><li>线性结构：数据结构中的元素存在“一对一”的线性关系，例如冰糖葫芦； </li><li>树形结构：数据结构中的元素存在“一对多”的层次关系，例如公司组织架构； </li><li>图形结构或网状结构：数据结构中的元素存在“多对多”的任意关系，例如地图。 </li></ol></li><li>物理结构的划分？<ol><li>顺序存储结构：用一组连续的存储空间单元来依次的存储数据元素，例如数组。</li><li>链式存储结构：用一组任意的存储单元来存储元素，通过保存地址找到相关联的元素，元素之间的逻辑关系用引用来表示，例如链表。</li><li>散列存储结构：根据节点key计算出该节点的存储地址。例如：java集合中的HashMap采用了散列存储结构，添加、查询速度都很快。</li></ol></li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619214145962.png" alt="image-20250619214145962"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619214158108.png" alt="image-20250619214158108"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619214209590.png" alt="image-20250619214209590"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619214225269.png" alt="image-20250619214225269"></p><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><ul><li><p>什么是算法？</p><p>算法就是解决问题的方法和步骤，可以让计算机完成特定任务，并提高计算机系统的效率和性能。就像烹饪食品需要遵循一定的步骤和配方一样，例如，做牛排需要选择牛排肉、煎炸的方式、烹饪的时间等，按照一定的步骤最终会有一个好的成品。一个良好的算法可以提高程序的执行效率。</p></li><li><p>怎么评价一个算法好不好？</p><p>如何计算1+2+3+…+100的结果？</p><ul><li>算法1：通过循环，依次累加来实现。耗费时间</li><li>算法2：使用递归来实现。耗费内存</li><li>算法3：高斯算法。(1 + 100)*50。既节省时间，又节省空间。</li></ul><p>同一问题可用不同的算法来解决，而一个算法的质量优劣将影响到算法乃至程序的效率。因此，我们学习算法目的在于选择合适算法和改进算法，一个算法的评价主要从时间复杂度和空间复杂度来考虑。</p><ul><li>时间复杂度：评估执行程序所需的时间，可以估算出程序对处理器的使用程度。</li><li>空间复杂度：评估执行程序所需的存储空间，可以估算出程序对计算机内存的使用程度。</li></ul></li></ul><h3 id="数组的排序算法"><a href="#数组的排序算法" class="headerlink" title="数组的排序算法"></a>数组的排序算法</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><strong>核心思想</strong></p><p>相邻两个元素做比较大小，如果前一个元素大于后一个元素，则交换位置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) {<br>            System.out.println(<span class="hljs-string">"============================"</span>);<br>            <span class="hljs-comment">// 两个两个进行比较</span><br>            <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) {<br>                <span class="hljs-keyword">int</span> temp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = temp;<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">============================<br>============================<br>============================<br>============================<br>============================<br>============================<br>============================<br>============================<br>============================<br>============================<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 冒泡排序算法的优化。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {<br>        <span class="hljs-comment">// 默认是排好序的。</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) {<br>            System.out.println(<span class="hljs-string">"======================="</span>);<br>            <span class="hljs-comment">// 两个两个进行比较</span><br>            <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) {<br>                <span class="hljs-keyword">int</span> temp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = temp;<br>                flag = <span class="hljs-keyword">false</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span>(flag){<br>            <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">=======================<br>=======================<br>=======================<br>=======================<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></tbody></table></figure><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p><strong>核心思想</strong></p><p>在未排序的序列中，把未排序第一个元素和未排序的最小元素交换位置。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 选择排序：</span><br><span class="hljs-comment"> *      核心原理：找出参与比较的这些数据中最小的，然后拿着这个最小的数据和参与比较的这堆数据中最左边的元素交换位置。</span><br><span class="hljs-comment"> *      优点：交换的次数比冒泡排序的少。执行效率比冒泡排序高。（冒泡排序中的元素每一次比完之后就交换，这个交换有时是没必要的。）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 原理：</span><br><span class="hljs-comment"> *      (1)参与比较的数据：3, 2, 7, 6, 1</span><br><span class="hljs-comment"> *      第一次循环之后的结果：1, 2, 7, 6, 3</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      (2)参与比较的数据：x, 2, 7, 6, 3</span><br><span class="hljs-comment"> *      第二次循环之后的结果：1, 2, 7, 6, 3</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      (3)参与比较的数据：x, x, 7, 6, 3</span><br><span class="hljs-comment"> *      第三次循环之后的结果：1, 2, 3, 6, 7</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      (4)参与比较的数据：x, x, x, 6, 7</span><br><span class="hljs-comment"> *      第四次循环之后的结果：1, 2, 3, 6, 7</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">80</span>, <span class="hljs-number">870</span>};<br>    selectSort(arr);<br>    System.out.println(Arrays.toString(arr));<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) {<br>        <span class="hljs-comment">// 假定参与比较的这些数据中最左边的是最小的。</span><br>        <span class="hljs-keyword">int</span> min = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++){<br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[min]) {<br>                min = j;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span>(min != i){ <span class="hljs-comment">// 说明有更小的值</span><br>            <span class="hljs-comment">// 交换位置（拿着当下的最小值和参与比较的这些数据中最前面的值交换位置）</span><br>            <span class="hljs-keyword">int</span> temp = arr[min];<br>            arr[min] = arr[i];<br>            arr[i] = temp;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">80</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">870</span>]<br></code></pre></td></tr></tbody></table></figure><h3 id="数组的查找算法"><a href="#数组的查找算法" class="headerlink" title="数组的查找算法"></a>数组的查找算法</h3><h4 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h4><p>①线性查找是一种最简单粗暴的查找法了，采用逐一比对的方式进行对数组的遍历，如果发现了匹配值，返回数组下标即可。</p><p>②线性查找，优点是查找数组无需有序；其缺点是查找的次数多，效率低下。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">102</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">54</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">67</span>,<span class="hljs-number">7</span>,<span class="hljs-number">78</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">87</span>,<span class="hljs-number">67</span>,<span class="hljs-number">6</span>};<br>    <span class="hljs-comment">// 找出以上数组中67元素的下标（67元素第一次出现处的下标）</span><br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">67</span>;<br>    <span class="hljs-keyword">int</span> index = search(arr, num);<br>    System.out.println(index &gt;= <span class="hljs-number">0</span> ? num + <span class="hljs-string">" first occur at: "</span> + index : <span class="hljs-string">"don't have this data"</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> num)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>        <span class="hljs-keyword">if</span>(num == arr[i]){<br>            <span class="hljs-keyword">return</span> i;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">67</span> first occur at: <span class="hljs-number">6</span><br></code></pre></td></tr></tbody></table></figure><h4 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h4><p>①二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；缺点是要求待查数组必须排序，且执行插入和删除操作困难。因此，折半查找方法适用于不经常变动而查找频繁的数组。</p><p>②查找思路：</p><p>假设查找的数组为升序排序，则首先定义两个变量，分别用于保存查找元素（value）所在范围的最小索引值（min）和最大索引值（max）。</p><p>然后开启二分查找，每次查找前都定义一个mid变量，并设置该变量的初始值为：(max + min)/2。在查找的过程中，发生以下三种情况，则做对应的处理。</p><ol><li><p>如果arr[mid]大于value，则证明查找的元素在mid的左侧，那么更新max的值为：mid-1</p></li><li><p>如果arr[mid]小于value，则证明查找的元素在mid的右侧，那么更新min的值为：mid+1</p></li><li><p>如果arr[mid]等于value，则证明查找元素的索引值就是mid，返回mid的值即可！</p></li></ol><p>在以上的操作中，我们不停的更改min和max的值，如果发生min大于max的情况，则证明查找的元素不存在，那么返回-1（表示找不到）即可！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>,<span class="hljs-number">20</span>,<span class="hljs-number">50</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">99</span>,<span class="hljs-number">101</span>,<span class="hljs-number">256</span>,<span class="hljs-number">666</span>,<span class="hljs-number">888</span>};<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">101</span>;<br>    <span class="hljs-keyword">int</span> index = binarySearch(arr, num);<br>    System.out.println(index &gt;= <span class="hljs-number">0</span> ? num + <span class="hljs-string">"'s index is: "</span> + index : <span class="hljs-string">"can't find this data"</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> num)</span> </span>{<br>    <span class="hljs-keyword">int</span> begin = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> end = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(begin &lt;= end){<br>        <span class="hljs-keyword">int</span> mid = (begin + end) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[mid] == num) {<br>            <span class="hljs-keyword">return</span> mid;<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num &gt; arr[mid]){<br>            begin = mid + <span class="hljs-number">1</span>;<br>        }<span class="hljs-keyword">else</span>{<br>            end = mid - <span class="hljs-number">1</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">101</span><span class="hljs-string">'s index is: 6</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h2><p>①Arrays.toString()方法：将数组转换成字符串</p><p>②Arrays.deepToString()方法：可以将二维数组转换成字符串</p><p>③Arrays.equals(int[] arr1, int[] arr2)方法：判断两个数组是否相等</p><p>④Arrays.equals(Object[] arr1, Object[] arr2)方法</p><p>⑤Arrays.deepEquals(Object[] arr1, Object[] arr2)方法：判断两个二维数组是否相等</p><p>⑥Arrays.sort(int[] arr)方法：基于快速排序算法，适合小型数据量排序。</p><p>⑦Arrays.sort(String[] arr)方法</p><p>⑧Arrays.parallelSort(int[] arr)方法：基于分治的归并排序算法，支持多核CPU排序，适合大数据量排序。</p><p>⑨int binarySearch(int[] arr, int elt)方法：二分法查找</p><p>⑩Arrays.fill(int[] arr, int data)方法：填充数组</p><p>⑪Arrays.fill(int[] a, int fromIndex, int toIndex, int val)方法</p><p>⑫int[] Arrays.copyOf(int[] original, int newLength)方法：数组拷贝</p><p>⑬int[] Arrays.copyOfRange(int[] original, int from, int to)</p><p>⑭Arrays.asList(T… data)方法：将一组数据转换成List集合。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testToString</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, <span class="hljs-number">54</span>};<br>    System.out.println(arr); <span class="hljs-comment">// [I@3d3fcdb0</span><br>    System.out.println(Arrays.toString(arr)); <span class="hljs-comment">// [1, 2, 3, 34, 54]</span><br><br>    String[] names = {<span class="hljs-string">"zhangsan"</span>, <span class="hljs-string">"lisi"</span>, <span class="hljs-string">"wangwu"</span>};<br>    System.out.println(names); <span class="hljs-comment">// [Ljava.lang.String;@641147d0</span><br>    System.out.println(Arrays.toString(names)); <span class="hljs-comment">//[zhangsan, lisi, wangwu]</span><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Arrays.deepToString()作用是：适合于将多维数组转换成字符串。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeepToString</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// 适合于二维数组以及多维数组的。</span><br>    <span class="hljs-keyword">int</span>[][] arr = {<br>        {<span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>},<br>        {<span class="hljs-number">4</span>, <span class="hljs-number">45</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>},<br>        {<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>}<br>    };<br>    System.out.println(Arrays.toString(arr)); <span class="hljs-comment">// [[I@641147d0, [I@6e38921c, [I@64d7f7e0]</span><br>    System.out.println(Arrays.deepToString(arr)); <span class="hljs-comment">// [[12, 2, 3, 3], [4, 45, 5, 5], [1, 1, 1, 1, 1, 1]]</span><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testEquals</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr1 = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br>    <span class="hljs-keyword">int</span>[] arr2 = {<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>};<br>    System.out.println(Arrays.equals(arr1, arr2));<br><br>    String[] names1 = <span class="hljs-keyword">new</span> String[]{<span class="hljs-string">"abc"</span>, <span class="hljs-string">"def"</span>, <span class="hljs-string">"xyz"</span>};<br>    String[] names2 = <span class="hljs-keyword">new</span> String[]{<span class="hljs-string">"abc"</span>, <span class="hljs-string">"def"</span>, <span class="hljs-string">"xyz"</span>};<br>    System.out.println(Arrays.equals(names1, names2));<br>}<br></code></pre></td></tr></tbody></table></figure><p>Equals方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testEquals</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr1 = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br>    <span class="hljs-keyword">int</span>[] arr2 = {<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>};<br>    System.out.println(Arrays.equals(arr1, arr2)); <span class="hljs-comment">//false</span><br><br>    String[] names1 = <span class="hljs-keyword">new</span> String[]{<span class="hljs-string">"abc"</span>, <span class="hljs-string">"def"</span>, <span class="hljs-string">"xyz"</span>};<br>    String[] names2 = <span class="hljs-keyword">new</span> String[]{<span class="hljs-string">"abc"</span>, <span class="hljs-string">"def"</span>, <span class="hljs-string">"xyz"</span>};<br>    System.out.println(Arrays.equals(names1, names2)); <span class="hljs-comment">//true</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>Sort方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSort</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">45</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">87</span>, <span class="hljs-number">8</span>};<br>    Arrays.sort(arr);<br>    System.out.println(Arrays.toString(arr));<span class="hljs-comment">//[1, 3, 5, 6, 7, 8, 45, 87]</span><br><br>    String[] strs = {<span class="hljs-string">"a"</span>, <span class="hljs-string">"ac"</span>, <span class="hljs-string">"ab"</span>, <span class="hljs-string">"b"</span>};<br>    <span class="hljs-comment">// 应该是根据字典的顺序排序的。</span><br>    Arrays.sort(strs);<br>    System.out.println(Arrays.toString(strs));<span class="hljs-comment">//[a, ab, ac, b]</span><br><br>    <span class="hljs-comment">// 能不能对Person数组排序</span><br>    Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">20</span>);<br>    Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">22</span>);<br>    Person p3 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">19</span>);<br>    Person p4 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">18</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        java.lang.ClassCastException: class com.powernode.javase.Person cannot be cast to class java.lang.Comparable</span><br><span class="hljs-comment">        猜测，底层一定有这样一行代码：</span><br><span class="hljs-comment">            Comparable c = (Comparable)p1; 为什么会报这样的错误呢？也进一步说明了我们的Person类不是可比较的。</span><br><span class="hljs-comment">            Comparable字面意思：可比较的。</span><br><span class="hljs-comment">         */</span><br>    Person[] persons = {p1, p2, p3, p4};<br>    <span class="hljs-comment">// 排序</span><br>    Arrays.sort(persons);<br>    System.out.println(Arrays.toString(persons));<span class="hljs-comment">//[Person{age=18}, Person{age=19}, Person{age=20}, Person{age=22}]</span><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 凡是自定义的类型要做比较的话，这个自定义类型必须实现一个接口：Comparable接口，并且实现compareTo方法，在这个方法中编写比较规则。</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person{"</span> +<br>                <span class="hljs-string">"age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Object o)</span> </span>{<br>        <span class="hljs-comment">// 编写比较规则。</span><br>        <span class="hljs-comment">// 根据年龄进行比较</span><br>        <span class="hljs-comment">// p1.compareTo(p2) p1和p2之间进行比较。</span><br>        <span class="hljs-comment">// this是p1</span><br>        <span class="hljs-comment">// o是p2</span><br>        <span class="hljs-comment">// 当前对象的年龄</span><br>        <span class="hljs-comment">//this.age;</span><br><br>        <span class="hljs-comment">// 另一个对象的年龄</span><br>        Person person = (Person) o;<br>        <span class="hljs-comment">//person.age;</span><br><br>        <span class="hljs-comment">// 按照年龄进行比较。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age - person.age;<br>        <span class="hljs-comment">//return person.age - this.age;</span><br><br>        <span class="hljs-comment">// 按照字符串进行比较。</span><br>        <span class="hljs-comment">// 升序</span><br>        <span class="hljs-comment">//return this.name.compareTo(person.name);</span><br>        <span class="hljs-comment">// 降序</span><br>        <span class="hljs-comment">//return person.name.compareTo(this.name);</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>Copyof方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCopyOf</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// 数组拷贝</span><br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>};<br>    <span class="hljs-keyword">int</span>[] newArr = Arrays.copyOf(arr, <span class="hljs-number">3</span>);<br>    System.out.println(Arrays.toString(newArr));<span class="hljs-comment">//[1, 2, 3]</span><br><br>    <span class="hljs-comment">// to不包含</span><br>    <span class="hljs-keyword">int</span>[] newArr2 = Arrays.copyOfRange(arr, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>    System.out.println(Arrays.toString(newArr2));<span class="hljs-comment">//[3, 4]</span><br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象</title>
    <link href="/posts/5f8d3e42.html"/>
    <url>/posts/5f8d3e42.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h2><p><strong>软件开发方法：面向过程和面向对象</strong></p><ol><li>面向过程：关注点在实现功能的步骤上。<ul><li>PO：Procedure Oriented。代表语言：C语言</li><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</li><li>例如开汽车：启动、踩离合、挂挡、松离合、踩油门、车走了。</li><li>再例如装修房子：做水电、刷墙、贴地砖、做柜子和家具、入住。</li><li>对于简单的流程是适合使用面向过程的方式进行的。复杂的流程不适合使用面向过程的开发方式。</li></ul></li><li>面向对象：关注点在实现功能需要哪些对象的参与。<ul><li>OO：Object Oriented 面向对象。包括OOA,OOD,OOP。OOA：Object Oriented Analysis 面向对象分析。OOD：Object Oriented Design 面向对象设计。OOP：Object Oriented Programming 面向对象编程。代表语言：Java、C#、Python等。</li><li>人类是以面向对象的方式去认知世界的。所以采用面向对象的思想更加容易处理复杂的问题。</li><li>面向对象就是分析出解决这个问题都需要哪些对象的参加，然后让对象与对象之间协作起来形成一个系统。</li><li>例如开汽车：汽车对象、司机对象。司机对象有一个驾驶的行为。司机对象驾驶汽车对象。</li><li>再例如装修房子：水电工对象，油漆工对象，瓦工对象，木工对象。每个对象都有自己的行为动作。最终完成装修。</li><li>面向对象开发方式耦合度低，扩展能力强。例如采用面向过程生产一台电脑，不会分CPU、内存和硬盘，它会按照电脑的工作流程一次成型。采用面向对象生产一台电脑，CPU是一个对象，内存条是一个对象，硬盘是一个对象，如果觉得硬盘容量小，后期是很容易更换的，这就是扩展性。</li></ul></li></ol><p><strong>面向对象三大特征</strong></p><ol><li>封装（Encapsulation）</li><li>继承（Inheritance）</li><li>多态（Polymorphism）</li></ol><p><strong>类与对象</strong></p><ol><li>类<ul><li>现实世界中，事物与事物之间具有共同特征，例如：刘德华和梁朝伟都有姓名、身份证号、身高等状态，都有吃、跑、跳等行为。将这些共同的状态和行为提取出来，形成了一个模板，称为类。</li><li>类实际上是人类大脑思考总结的一个模板，类是一个抽象的概念。</li><li>状态在程序中对应属性。属性通常用变量来表示。</li><li>行为在程序中对应方法。用方法来描述行为动作。</li><li>类 = 属性 + 方法。</li></ul></li><li>对象<ul><li>实际存在的个体。</li><li>对象又称为实例（instance）。</li><li>通过类这个模板可以实例化n个对象。（通过类可以创造多个对象）<ul><li>例如通过“明星类”可以创造出“刘德华对象”和“梁朝伟对象”。</li></ul></li><li>明星类中有一个属性姓名：String name;“</li><li>刘德华对象”和“梁朝伟对象”由于是通过明星类造出来的，所以这两个都有name属性，但是值是不同的。因此这种属性被称为<font color="red">实例变量</font>。</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609065526094.png" alt="image-20250609065526094"></p><p><strong>对象的创建和使用</strong></p><p>类的定义语法格式：</p><p>[修饰符列表] class 类名 {</p><p>​    // 属性（描述状态）</p><p>​    // 方法（描述行为动作）</p><p>}</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>{<br>    <span class="hljs-comment">// 姓名</span><br>    String name; <span class="hljs-comment">// 实例变量</span><br>    <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-comment">// 性别</span><br>    <span class="hljs-keyword">boolean</span> gender;<br>    <span class="hljs-comment">// 学习</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>{ System.out.println(“正在学习”); } <span class="hljs-comment">// 实例方法（实例方法又叫对象方法）</span><br>}<br></code></pre></td></tr></tbody></table></figure><ol><li>对象的创建<ul><li>Student s = new Student();</li><li>在Java中，使用class定义的类，属于引用数据类型。所以Student属于引用数据类型。类型名为：Student。</li><li>Student s; 表示定义一个变量。数据类型是Student。变量名是s。</li></ul></li><li>对象的使用<ul><li>读取属性值：s.name</li><li>修改属性值：s.name = “jackson”;</li></ul></li><li>通过一个类可以实例化多个对象<ul><li>Student s1 = new Student();</li><li>Student s2 = new Student();</li></ul></li></ol><p><strong>对象的内存分析（对象与引用）</strong></p><ol><li><p>new运算符会在JVM的堆内存中分配空间用来存储实例变量。new分配的空间就是Java对象。</p></li><li><p>在JVM中对象创建后会有对应的内存地址，将内存地址赋值给一个变量，这个变量被称为引用。</p></li><li><p>Java中的GC主要针对的是JVM的堆内存。</p></li><li><p>空指针异常是如何发生的？</p><p>程序计数器</p><p>虚拟机栈</p><p>堆</p><p>方法区</p><p>运行时常量池</p><p>本地方法区</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609070610111.png" alt="image-20250609070610111"></p></li></ol><p>   <img src="C:\Users\winner\AppData\Roaming\Typora\typora-user-images\image-20250609070123919.png" alt="image-20250609070123919"></p><ol start="5"><li>方法调用时参数是如何传递的？将变量中保存的值复制一份传递过去。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609070107374.png" alt="image-20250609070107374"></p><ol start="6"><li>初次认识this关键字：出现在实例方法中，代表当前对象。“this.”大部分情况下可以省略。this存储在实例方法栈帧的局部变量表的0号槽位上。任何一个实例方法，局部变量表0号槽位放的是this。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609070055017.png" alt="image-20250609070055017"></p><p>this.用来区分局部变量和实例变量的时候不能省略。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609234419797.png" alt="image-20250609234419797"></p><p><font color="red"><strong>传递的是u变量保存的那个地址</strong></font></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609070219176.png" alt="image-20250609070219176"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609070232517.png" alt="image-20250609070232517"></p><h2 id="面向对象的封装特性"><a href="#面向对象的封装特性" class="headerlink" title="面向对象的封装特性"></a>面向对象的封装特性</h2><p>什么是封装？</p><p>​    封装是一种将数据和方法加以包装，使之成为一个独立的实体，并且把它与外部对象隔离开来的机制。具体来说，封装是将一个对象的所有“状态（属性）”以及“行为（方法）”统一封装到一个类中，从而隐藏了对象内部的具体实现细节，向外界提供了有限的访问接口，以实现对对象的保护和隔离。</p><p>实现封装的步骤：</p><p>第一步：属性私有化</p><p>第二步：对外提供getter setter方法</p><p>封装保证安全性，提高复用性</p><h2 id="实例方法中调用实例方法"><a href="#实例方法中调用实例方法" class="headerlink" title="实例方法中调用实例方法"></a>实例方法中调用实例方法</h2><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609234658995.png" alt="image-20250609234658995"></p><h2 id="构造方法Constructor-构造器-的语法"><a href="#构造方法Constructor-构造器-的语法" class="headerlink" title="构造方法Constructor(构造器)的语法"></a>构造方法Constructor(构造器)的语法</h2><ol><li><p>构造方法有什么作用？</p><ul><li>构造方法的执行分为两个阶段：对象的创建和对象的初始化。这两个阶段不能颠倒，也不可分割。</li><li>在Java中，当我们使用关键字new时，就会在内存中创建一个新的对象，虽然对象已经被创建出来了，但还没有被初始化。而初始化则是在执行构造方法体时进行的。</li></ul></li><li><p>构造方法如何定义？</p><ul><li>[修饰符列表] 构造方法名(形参){}</li></ul></li><li><p>构造方法如何调用？</p><p> new 构造方法名(实参);</p></li><li><p>关于无参数构造方法：</p><ul><li>如果一个类没有显示的定义任何构造方法，系统会默认提供一个无参数构造方法，也被称为缺省构造器。一旦显示的定义了构造方法，则缺省构造器将不存在。为了方便对象的创建，建议将缺省构造器显示的定义出来。</li></ul></li><li><p>构造方法支持重载机制。</p></li><li><p>关于构造代码块。对象的创建和初始化过程梳理：</p><ul><li>new的时候在堆内存中开辟空间，给所有属性赋默认值</li><li>执行构造代码块进行初始化</li><li>执行构造方法体进行初始化</li><li>构造方法执行结束，对象初始化完毕。</li></ul></li></ol><p>构造方法/Constructor/构造器</p><ol><li><p>构造方法有什么作用？</p><p>作用1：对象的创建（通过调用构造方法可以完成对象的创建）</p><p>作用2：对象的初始化（给对象的所有属性赋值就是对象的初始化）</p></li><li><p>怎么定义构造方法呢？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] 构造方法名(形参列表){<br>    构造方法体;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><p>注意：</p><ul><li><p>构造方法名必须和类名一致。</p></li><li><p>构造方法不需要提供返回值类型。</p></li><li><p>如果提供了返回值类型，那么这个方法就不是构造方法了，就变成普通方法了。</p></li></ul><ol start="3"><li><p>构造方法怎么调用呢？</p><ul><li>使用new运算符来调用。</li><li>语法：new 构造方法名(实参);</li><li>注意：构造方法最终执行结束之后，会自动将创建的对象的内存地址返回。但构造方法体中不需要提供“return 值;”这样的语句。</li></ul></li><li><p>在java语言中，如果一个类没有显示的去定义构造方法，系统会默认提供一个无参数的构造方法。（通常把这个构造方法叫做缺省构造器。）</p></li><li><p>一个类中如果显示的定义了构造方法，系统则不再提供缺省构造器。所以，为了对象创建更加方便，建议把无参数构造方法手动的写出来。</p></li><li><p>在java中，一个类中可以定义多个构造方法，而且这些构造方法自动构成了方法的重载(overload)。</p></li><li><p>构造方法中给属性赋值了？为什么还需要单独定义set方法给属性赋值呢？</p><ul><li><p>在构造方法中赋值是对象第一次创建时属性赋的值。set方法可以在后期的时候调用，来完成属性值的修改。</p></li><li><p>时机不一样</p><p>set方法是出生之后想改内容，调用构造方法</p><p>构造方法里面设置属性内容是在创建对象的时候给属性赋值</p></li></ul></li></ol><ol start="8"><li><p>构造方法执行原理？</p><ul><li>构造方法执行包括两个重要的阶段：<ul><li> 第一阶段：对象的创建</li><li>第二阶段：对象的初始化</li></ul></li><li>对象在什么时候创建的？<ul><li>new的时候，会直接在堆内存中开辟空间。然后给所有属性赋默认值，完成对象的创建。（这个过程是在构造方法体执行之前就完成了。）</li></ul></li><li>对象初始化在什么时候完成的？<ul><li>构造方法体开始执行，标志着开始进行对象初始化。构造方法体执行完毕，表示对象初始化完毕。</li></ul></li></ul></li><li><p>构造代码块？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//语法格式</span><br>{<br>    <span class="hljs-comment">//构造代码块</span><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">{<br>构造代码块：<span class="hljs-keyword">new</span>一次就会执行一次这个，每次执行构造方法前会执行一次（构造代码块执行之前对象已经创建好了）<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ul><li>构造代码块什么时候执行，执行几次？<ul><li>每一次在new的时候，都会先执行一次构造代码块。</li><li>构造代码块是在构造方法执行之前执行的。</li></ul></li></ul><ol start="10"><li><p>构造代码块有什么用？</p><p>如果所有的构造方法在最开始的时候有相同的一部分代码，不妨将这个公共的代码提取到构造代码块当中，这样代码可以得到复用。</p></li></ol><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><ol><li>this是一个关键字</li><li>this出现在实例方法中，代表当前对象。语法是：<strong>this.</strong></li><li>this本质上是一个引用，该引用保存当前对象的内存地址。</li><li>通过“this.”可以访问实例变量，可以调用实例方法。</li><li>this存储在：栈帧的局部变量表的第0个槽位上。</li><li>this. 大部分情况下可以省略，用于区分局部变量和实例变量时不能省略。</li><li>this不能出现在静态方法中。</li><li>“this(实参)”语法：<ul><li>只能出现在构造方法的第一行。</li><li>通过当前构造方法去调用本类中其他的构造方法。</li><li>作用是：代码复用。</li></ul></li></ol><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">this(实参)：<br>1. 通过这种语法可以在构造方法中调用本类中其他的构造方法。<br>2. 作用：代码复用。<br>3. this(实参); 只能出现在构造方法第一行。<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        this.year = 1970;</span><br><span class="hljs-comment">        this.month = 1;</span><br><span class="hljs-comment">        this.day = 1;</span><br><span class="hljs-comment">         */</span><br><br>    <span class="hljs-comment">// 不要这么写，这样会导致再创建一个新的对象。</span><br>    <span class="hljs-comment">//new Date(1970,1,1);</span><br><br>    <span class="hljs-comment">// 不会创建新对象。只是通过一个构造方法去调用另一个构造方法。</span><br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">1970</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><br>    System.out.println(<span class="hljs-string">"日期创建成功！~"</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day)</span> </span>{<br>    <span class="hljs-keyword">this</span>.year = year;<br>    <span class="hljs-keyword">this</span>.month = month;<br>    <span class="hljs-keyword">this</span>.day = day;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><ol><li>static是一个关键字，翻译为：静态的。</li><li>static修饰的变量叫做静态变量。当所有对象的某个属性的值是相同的，建议将该属性定义为静态变量，来节省内存的开销。</li><li>静态变量在类加载时初始化，存储在堆中。</li><li>static修饰的方法叫做静态方法。</li><li>所有静态变量和静态方法，统一使用“类名.”调用。虽然可以使用“引用.”来调用，但实际运行时和对象无关，所以不建议这样写，因为这样写会给其他人造成疑惑。</li><li>使用“引用.”访问静态相关的，即使引用为null，也不会出现空指针异常。</li><li>静态方法中不能使用this关键字。因此无法直接访问实例变量和调用实例方法。</li><li>静态代码块在类加载时执行，一个类中可以编写多个静态代码块，遵循自上而下的顺序依次执行。</li><li>静态代码块代表了类加载时刻，如果你有代码需要在此时刻执行，可以将该代码放到静态代码块中。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000917927.png" alt="image-20250610000917927"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000944986.png" alt="image-20250610000944986"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000027814.png" alt="image-20250610000027814"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000020447.png" alt="image-20250610000020447"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * static关键字：</span><br><span class="hljs-comment"> *      1. static翻译为静态的</span><br><span class="hljs-comment"> *      2. static修饰的变量：静态变量</span><br><span class="hljs-comment"> *      3. static修饰的方法：静态方法</span><br><span class="hljs-comment"> *      4. 所有static修饰的，访问的时候，直接采用“类名.”，不需要new对象。</span><br><span class="hljs-comment"> *      5. 什么情况下把成员变量定义为静态成员变量？</span><br><span class="hljs-comment"> *          当一个属性是对象级别的，这个属性通常定义为实例变量。（实例变量是一个对象一份。100个对象就应该有100个空间）</span><br><span class="hljs-comment"> *          当一个属性是类级别的（所有对象都有这个属性，并且这个属性的值是一样的），建议将其定义为静态变量，在内存空间上只有一份。节省内存开销。</span><br><span class="hljs-comment"> *          这种类级别的属性，不需要new对象，直接通过类名访问。</span><br><span class="hljs-comment"> *      6. 静态变量存储在哪里？静态变量在什么时候初始化？（什么时候开辟空间）</span><br><span class="hljs-comment"> *          JDK8之后：静态变量存储在堆内存当中。</span><br><span class="hljs-comment"> *          类加载时初始化。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><h3 id="静态变量的内存图"><a href="#静态变量的内存图" class="headerlink" title="静态变量的内存图"></a>静态变量的内存图</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000422264.png" alt="image-20250610000422264"></p><p>类加载的时候会去检查类中有没有静态变量，有静态变量的话就将其放在类的静态变量中</p><p>类加载是在main方法执行之前执行的</p><h3 id="空指针异常何时发生"><a href="#空指针异常何时发生" class="headerlink" title="空指针异常何时发生"></a>空指针异常何时发生</h3><p>实例相关：实例变量 实例方法</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000511236.png" alt="image-20250610000511236"></p><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>i可以访问，j不能访问</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000559552.png" alt="image-20250610000559552"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * static关键字还可以定义静态代码块：</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1.语法格式：</span><br><span class="hljs-comment"> *      static {</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      }</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2. 静态代码块什么时候执行？执行几次？</span><br><span class="hljs-comment"> *      静态代码块在类加载时执行，并且只执行一次。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3. 静态代码块可以编写多个，并且遵循自上而下的顺序依次执行。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 4. 静态代码块什么时候使用？</span><br><span class="hljs-comment"> *      本质上，静态代码块就是为程序员预留的一个特殊的时间点：类加载时刻</span><br><span class="hljs-comment"> *      如果你需要再类加载时刻执行一段程序的话，这段代码就可以写到静态代码块当中。</span><br><span class="hljs-comment"> *      例如，有这样一个需求：请在类加载时，记录日志。那么记录日志的代码就可以编写到静态代码块当中。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Java虚拟机规范"><a href="#Java虚拟机规范" class="headerlink" title="Java虚拟机规范"></a>Java虚拟机规范</h2><h3 id="JVM对应了一套规范（Java虚拟机规范），它可以有不同的实现"><a href="#JVM对应了一套规范（Java虚拟机规范），它可以有不同的实现" class="headerlink" title="JVM对应了一套规范（Java虚拟机规范），它可以有不同的实现"></a>JVM对应了一套规范（Java虚拟机规范），它可以有不同的实现</h3><p>JVM规范是一种抽象的概念，它可以有多种不同的实现。例如：</p><ol><li>HotSpot：HotSpot 由 Oracle 公司开发，是目前最常用的虚拟机实现，也是默认的 Java 虚拟机，默认包含在 Oracle JDK 和 OpenJDK 中</li><li>JRockit：JRockit 也是由 Oracle 公司开发。它是一款针对生产环境优化的 JVM 实现，能够提供高性能和可伸缩性</li><li>IBM JDK：IBM JDK 是 IBM 公司开发的 Java 环境，采用了与 HotSpot 不同的 J9 VM，能够提供更小的内存占用和更迅速的启动时间</li><li>Azul Zing：Azul Zing 是针对生产环境优化的虚拟机实现，能够提供高性能和实时处理能力，适合于高负载的企业应用和实时分析等场景</li><li>OpenJ9：OpenJ9 是由 IBM 开发的优化的 Java 虚拟机实现，支持高度轻量级、低时延的 GC、优化的 JIT 编译器和用于健康度测试的可观察性仪表板</li></ol><p>Oracle官网上Java虚拟机规范的一部分</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610081313410.png" alt="image-20250610081313410"></p><h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><ol><li><p>The pc Register（程序计数器）</p><p>是一块较小的内存空间，此计数器记录的是正在执行的虚拟机字节码指令的地址；</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610082447152.png" alt="image-20250610082447152"></p></li><li><p>Java Virtual Machine Stacks（Java虚拟机栈）</p><p>Java虚拟机栈用于存储栈帧。栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p></li><li><p>Heap（堆）</p><p>是Java虚拟机所管理的最大的一块内存。堆内存用于存放Java对象实例以及数组。堆是垃圾收集器收集垃圾的主要区域。</p></li><li><p>Method Area（方法区）</p><p>用于存储已被虚拟机加载的类信息、常量、<strong>静态变量</strong>、即时编译器编译后的代码等数据。</p><p><strong>规范上静态变量在方法区，但是实际上在堆中</strong></p></li><li><p>Run-Time Constant Pool（运行时常量池）</p><p>是方法区的一部分，用于存放编译期生成的各种字面量与符号引用。</p><p>符号引用：类名，方法名，属性名，字面量，都存在于运行时常量池</p></li><li><p>Native Method Stacks（本地方法栈）</p><p>在本地方法的执行过程中，会使用到本地方法栈。和 Java 虚拟机栈十分相似。</p><p>压栈是给本地方法栈压。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610082609041.png" alt="image-20250610082609041"></p></li></ol><p>总结：这些运行时数据区虽然在功能上有所区别，但在整个 Java 虚拟机启动时都需要被创建，并且在虚拟机运行期间始终存在，直到虚拟机停止运行时被销毁。同时，不同的 JVM 实现对运行时数据区的分配和管理方式也可能不同，会对性能和功能产生影响。</p><h3 id="JVM体系结构图（该图属于JVM规范，不是具体的实现）"><a href="#JVM体系结构图（该图属于JVM规范，不是具体的实现）" class="headerlink" title="JVM体系结构图（该图属于JVM规范，不是具体的实现）"></a>JVM体系结构图（该图属于JVM规范，不是具体的实现）</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610081647995.png" alt="image-20250610081647995"></p><h3 id="JVM规范的实现：HotSpot（Oracle-JDK-Open-JDK内部使用的JVM就是HotSpot）"><a href="#JVM规范的实现：HotSpot（Oracle-JDK-Open-JDK内部使用的JVM就是HotSpot）" class="headerlink" title="JVM规范的实现：HotSpot（Oracle JDK/Open JDK内部使用的JVM就是HotSpot）"></a>JVM规范的实现：HotSpot（Oracle JDK/Open JDK内部使用的JVM就是HotSpot）</h3><h4 id="JDK6的HotSpot"><a href="#JDK6的HotSpot" class="headerlink" title="JDK6的HotSpot"></a>JDK6的HotSpot</h4><ul><li><p>年轻代：刚new出来的对象放在这里。</p></li><li><p>老年代：经过垃圾回收之后仍然存活的对象。</p></li><li><p>符号引用：类全名，字段全名，方法全名等。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610082727228.png" alt="image-20250610082727228"></p></li><li><p>这个时期的永久代和堆是相邻的，使用连续的物理内存，但是内存空间是隔离的。</p></li><li><p>永久代的垃圾收集是和老年代捆绑在一起的，因此无论谁满了，都会触发永久代和老年代的垃圾收集。</p></li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610081802767.png" alt="image-20250610081802767"></p><h4 id="JDK7的HotSpot"><a href="#JDK7的HotSpot" class="headerlink" title="JDK7的HotSpot"></a>JDK7的HotSpot</h4><p>这是一个过渡的版本，该版本相对于JDK6来说，变化如下：</p><ol><li>类的静态变量转移到堆中了</li><li>字符串常量池转移到堆中了</li><li>运行时常量池中的符号引用转移到本地内存了</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610081912927.png" alt="image-20250610081912927"></p><h4 id="JDK8及更高版本的HotSpot"><a href="#JDK8及更高版本的HotSpot" class="headerlink" title="JDK8及更高版本的HotSpot"></a>JDK8及更高版本的HotSpot</h4><p>相对于JDK7来说发生了如下变化：</p><ol><li>彻底删除永久代（为了避免OOM错误的发生）</li><li>将方法区的实现转移到本地内存</li><li>将符号引用重新放回运行时常量池</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610081955826.png" alt="image-20250610081955826"></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h3><ul><li>什么是设计模式？</li></ul><p>设计模式（Design Pattern）是一套被广泛接受的、经过试验验证的、可反复使用的基于面向对象的软件设计经验总结，它是软件开发人员在软件设计中，对常见问题的解决方案的总结和抽象。设计模式是针对软件开发中常见问题和模式的通用解决方案</p><ul><li>设计模式有哪些？<ol><li><font color="red">GoF设计模式</font>：《Design Patterns: Elements of Reusable Object-Oriented Software》（即后述《设计模式》一书），由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 合著（Addison-Wesley，1995）。这几位作者常被称为四人组（Gang of Four）。</li><li>架构设计模式（Architectural Pattern）：主要用于软件系统的整体架构设计，包括多层架构、MVC架构、微服务架构、REST架构和大数据架构等。</li><li>企业级设计模式（Enterprise Pattern）：主要用于企业级应用程序设计，包括基于服务的架构（SOA）、企业集成模式（EIP）、业务流程建模（BPM）和企业规则引擎（BRE）等。</li><li>领域驱动设计模式（Domain Driven Design Pattern）：主要用于领域建模和开发，包括聚合、实体、值对象、领域事件和领域服务等。</li><li>并发设计模式（Concurrency Pattern）：主要用于处理并发性问题，包括互斥、线程池、管道、多线程算法和Actor模型等。</li><li>数据访问模式（Data Access Pattern）：主要用于处理数据访问层次结构，包括数据访问对象（DAO）、仓库模式和活动记录模式等。</li></ol></li><li>GoF设计模式的分类？<ol><li>创建型：主要解决对象的创建问题</li><li>结构型：通过设计和构建对象之间的关系，以达到更好的重用性、扩展性和灵活性</li><li>行为型：主要用于处理对象之间的算法和责任分配</li></ol></li></ul><h3 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式（GoF23种设计模式之一，最简单的设计模式：保证某种类型的对象只创建一个）</p><h4 id="饿汉式-类加载时就创建对象。"><a href="#饿汉式-类加载时就创建对象。" class="headerlink" title="饿汉式:类加载时就创建对象。"></a>饿汉式:类加载时就创建对象。</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton(); <span class="hljs-comment">// 在类加载的时候就创建实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>{}  <span class="hljs-comment">// 将构造方法设为私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>{  <span class="hljs-comment">// 提供一个公有的静态方法，以获取实例</span><br>        <span class="hljs-keyword">return</span> instance;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="懒汉式：第一次调用get方法时才会创建对象。"><a href="#懒汉式：第一次调用get方法时才会创建对象。" class="headerlink" title="懒汉式：第一次调用get方法时才会创建对象。"></a>懒汉式：第一次调用get方法时才会创建对象。</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance; <span class="hljs-comment">// 声明一个静态的、私有的该类类型的变量，用于存储该类的实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>{} <span class="hljs-comment">// 将构造方法设为私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">// 提供一个公有的静态方法，以获取实例</span><br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) { <span class="hljs-comment">// 第一次调用该方法时，才真正创建实例</span><br>            instance = <span class="hljs-keyword">new</span> Singleton(); <span class="hljs-comment">// 创建实例</span><br>        }<br>        <span class="hljs-keyword">return</span> instance;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol><li>面向对象三大特征之一：继承</li><li>继承作用？<ul><li>基本作用：代码复用</li><li>重要作用：有了继承，才有了方法覆盖和多态机制。</li></ul></li><li>继承在java中如何实现？<ul><li>[修饰符列表] class 类名 extends 父类名{}</li><li>extends翻译为扩展。表示子类继承父类后，子类是对父类的扩展。</li></ul></li><li>继承相关的术语：当B类继承A类时<ul><li>A类称为：父类、超类、基类、superclass</li><li>B类称为：子类、派生类、subclass</li></ul></li><li>Java只支持单继承，一个类只能直接继承一个类。</li><li>Java不支持多继承，但支持多重继承（多层继承）。</li><li>子类继承父类后，除私有的不支持继承、构造方法不支持继承。其它的全部会继承。</li><li>一个类没有显示继承任何类时，默认继承java.lang.Object类。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616194149481.png" alt="image-20250616194149481"></p><h2 id="方法覆盖-override-方法重写-overwrite"><a href="#方法覆盖-override-方法重写-overwrite" class="headerlink" title="方法覆盖(override)/方法重写(overwrite)"></a>方法覆盖(override)/方法重写(overwrite)</h2><ol><li>什么情况下考虑使用方法覆盖？<ul><li>当从父类中继承过来的方法无法满足当前子类的业务需求时。</li></ul></li><li>发生方法覆盖的条件？<ul><li>具有继承关系的父子类之间</li><li>相同的返回值类型，相同的方法名，相同的形式参数列表</li><li>访问权限不能变低，可以变高。</li><li>抛出异常不能变多，可以变少。</li><li>返回值类型可以是父类方法返回值类型的子类。</li></ul></li><li>方法覆盖的小细节：<ul><li>@Override注解标注的方法会在编译阶段检查该方法是否重写了父类的方法。</li><li>私有方法不能继承，所以不能覆盖。</li><li>构造方法不能继承，所以不能覆盖。</li><li>静态方法不存在方法覆盖，方法覆盖针对的是实例方法。</li><li>方法覆盖说的实例方法，和实例变量无关。</li></ul></li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="多态的基础语法"><a href="#多态的基础语法" class="headerlink" title="多态的基础语法"></a>多态的基础语法</h3><ol><li>什么是向上转型和向下转型？<ul><li>java允许具有继承关系的父子类型之间的类型转换。</li><li>向上转型（upcasting）：子–&gt;父<ul><li>子类型的对象可以赋值给一个父类型的引用。</li></ul></li><li>向下转型（downcasting）：父–&gt;子<ul><li>父类型的引用可以转换为子类型的引用。但是需要加强制类型转换符。</li></ul></li><li>无论是向上转型还是向下转型，前提条件是：两种类型之间必须存在继承关系。这样编译器才能编译通过。</li></ul></li><li>什么是多态？<ul><li>父类型引用指向子类对象。Animal a = new Cat(); a.move();</li><li>程序分为编译阶段和运行阶段：<ul><li>编译阶段：编译器只知道a是Animal类型，因此去Animal类中找move()方法，找到之后，绑定成功，编译通过。这个过程通常被称为静态绑定。</li><li>运行阶段：运行时和JVM堆内存中的真实Java对象有关，所以运行时会自动调用真实对象的move()方法。这个过程通常被称为动态绑定。</li></ul></li><li>多态指的是：多种形态，编译阶段一种形态，运行阶段另一种形态，因此叫做多态。</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616194646187.png" alt="image-20250616194646187"></p><ol start="3"><li>向下转型我们需要注意什么？<ul><li>向下转型时，使用不当，容易发生类型转换异常：ClassCastException。</li><li>在向下转型时，一般建议使用instanceof运算符进行判断来避免ClassCastException的发生。</li></ul></li><li>instanceof运算符的使用<ul><li>语法格式：(引用 instanceof 类型)</li><li>执行结果是true或者false</li><li>例如：(a instanceof Cat)<ul><li>如果结果是true：表示a引用指向的对象是Cat类型的。</li><li>如果结果是false：表示a引用指向的对象不是Cat类型的。</li></ul></li></ul></li></ol><h3 id="软件开发七大原则"><a href="#软件开发七大原则" class="headerlink" title="软件开发七大原则"></a>软件开发七大原则</h3><ol><li>软件开发原则旨在引导软件行业的从业者在代码设计和开发过程中，遵循一些基本原则，以达到高质量、易维护、易扩展、安全性强等目标。软件开发原则与具体的编程语言无关的，属于软件设计方面的知识。</li><li>软件开发七大原则？<ul><li>开闭原则 (Open-Closed Principle，OCP)：一个软件实体应该对扩展开放，对修改关闭。即在不修改原有代码的基础上，通过添加新的代码来扩展功能。（最基本的原则，其它原则都是为这个原则服务的。）</li><li>单一职责原则：一个类只负责单一的职责，也就是一个类只有一个引起它变化的原因。</li><li>里氏替换原则：子类对象可以替换其基类对象出现的任何地方，并且保证原有程序的正确性。</li><li>接口隔离原则：客户端不应该依赖它不需要的接口。</li><li>依赖倒置原则：高层模块不应该依赖底层模块，它们都应该依赖于抽象接口。换言之，面向接口编程。</li><li>迪米特法则：一个对象应该对其它对象保持最少的了解。即一个类应该对自己需要耦合或调用的类知道得最少。</li><li>合成复用原则：尽量使用对象组合和聚合，而不是继承来达到复用的目的。组合和聚合可以在获取外部对象的方法中被调用，是一种运行时关联，而继承则是一种编译时关联。</li></ul></li></ol><h3 id="多态在开发中的作用"><a href="#多态在开发中的作用" class="headerlink" title="多态在开发中的作用"></a>多态在开发中的作用</h3><ol><li>降低程序的耦合度，提高程序的扩展力。</li><li>尽量使用多态，面向抽象编程，不要面向具体编程。</li></ol><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><ol><li>super关键字和this关键字对比来学习。this代表的是当前对象。super代表的是当前对象中的父类型特征。</li><li>super不能使用在静态上下文中。</li><li>“super.”大部分情况下是可以省略的。什么时候不能省略？<ul><li>当父类和子类中定义了相同的属性（实例变量）或者相同方法（实例方法）时，如果需要在子类中访问父类的属性或方法时，super.不能省略。</li></ul></li><li>this可以单独输出，super不能单独输出。</li><li>super(实参); 通过子类的构造方法调用父类的构造方法，目的是为了完成父类型特征的初始化。当一个构造方法第一行没有显示的调用“super(实参);”，也没有显示的调用“this(实参)”，系统会自动调用super()。因此一个类中的无参数构造方法建议显示的定义出来。</li><li>super(实参); 这个语法只能出现在构造方法第一行。</li><li>在Java语言中只要new对象，Object的无参数构造方法一定会执行。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616195155900.png" alt="image-20250616195155900"></p><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ol><li>final修饰的类不能被继承</li><li>final修饰的方法不能被覆盖</li><li>final修饰的变量，一旦赋值不能重新赋值</li><li>final修饰的实例变量必须在对象初始化时手动赋值</li><li>final修饰的实例变量一般和static联合使用：称为常量</li><li>final修饰的引用，一旦指向某个对象后，不能再指向其它对象。但指向的对象内部的数据是可以修改的。</li></ol><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ol><li>什么时候考虑将类定义为抽象类？<ul><li>如果类中有些方法无法实现或者没有意义，可以将方法定义为抽象方法，类定义为抽象类。这样在抽象类中只提供公共代码，具体的实现强行交给子类去做。</li><li>比如一个Person类有一个问候的方法greet()，但是不同国家的人问候的方式不同，因此greet()方法具体实现应该交给子类。再比如主人喂养宠物的例子中的宠物Pet，Pet中的eat()方法的方法体就是没有意义的。</li></ul></li><li>抽象类如何定义？<ul><li>abstract class 类名{}</li></ul></li><li>抽象类有构造方法，但无法实例化。抽象类的构造方法是给子类使用的。</li><li>抽象方法如何定义？<ul><li>abstract 方法返回值类型 方法名(形参);</li></ul></li><li>抽象类中不一定有抽象方法，但如果有抽象方法那么类要求必须是抽象类。</li><li>一个非抽象的类继承抽象类，要求必须将抽象方法进行实现/重写。</li><li>abstract关键字不能和private，final，static关键字共存。</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口的基础语法"><a href="#接口的基础语法" class="headerlink" title="接口的基础语法"></a>接口的基础语法</h3><ol><li>接口（interface）在Java中表示一种规范或契约，它定义了一组抽象方法和常量，用来描述一些实现这个接口的类应该具有哪些行为和属性。接口和类一样，也是一种引用数据类型。</li><li>接口怎么定义？[修饰符列表] interface 接口名{}</li><li>抽象类是半抽象的，接口是完全抽象的。接口没有构造方法，也无法实例化。</li><li>接口中只能定义：常量+抽象方法。接口中的常量的static final可以省略。接口中的抽象方法的abstract可以省略。接口中所有的方法和变量都是public修饰的。</li><li>接口和接口之间可以多继承。</li><li>类和接口的关系我们叫做实现（这里的实现也可以等同看做继承）。使用implements关键字进行接口的实现。</li><li>一个非抽象的类实现接口必须将接口中所有的抽象方法全部实现。</li><li>一个类可以实现多个接口。语法是：class 类 implements 接口A,接口B{}</li><li>Java8之后，接口中允许出现默认方法和静态方法(JDK8新特性)<ul><li>引入默认方式是为了解决接口演变问题：接口可以定义抽象方法，但是不能实现这些方法。所有实现接口的类都必须实现这些抽象方法。这会导致接口升级的问题：当我们向接口添加或删除一个抽象方法时，这会破坏该接口的所有实现，并且所有该接口的用户都必须修改其代码才能适应更改。这就是所谓的”接口演变”问题。</li><li>引入的静态方法只能使用本接口名来访问，无法使用实现类的类名访问。</li></ul></li><li>JDK9之后允许接口中定义私有的实例方法（为默认方法服务的）和私有的静态方法（为静态方法服务的）。</li><li>所有的接口隐式的继承Object。因此接口也可以调用Object类的相关方法。</li></ol><h3 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h3><ol><li><p>面向接口调用的称为：接口调用者</p></li><li><p>面向接口实现的称为：接口实现者</p></li><li><p>调用者和实现者通过接口达到了解耦合。也就是说调用者不需要关心具体的实现者，实现者也不需要关心具体的调用者，双方都遵循规范，面向接口进行开发。</p></li><li><p><font color="red">面向抽象编程，面向接口编程，可以降低程序的耦合度，提高程序的扩展力。</font></p></li><li><p>定义一个Usb接口，提供read()和write()方法，通过read()方法读，通过write()方法写：</p><ul><li><p>定义一个电脑类Computer，它是调用者，面向Usb接口来调用。</p></li><li><p>Usb接口的实现可以有很多，例如：打印机（Printer），硬盘（HardDrive）。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span></span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">conn</span><span class="hljs-params">(Usb usb)</span></span>{<br>        usb.read();<br>        usb.write();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ol><ol start="6"><li>再想想，我们平时去饭店吃饭，这个场景中有没有接口呢？食谱菜单就是接口。顾客是调用者。厨师是实现者。</li></ol><h3 id="接口与抽象类如何选择"><a href="#接口与抽象类如何选择" class="headerlink" title="接口与抽象类如何选择"></a>接口与抽象类如何选择</h3><ol><li>抽象类和接口虽然在代码角度都能达到同样的效果，但适用场景不同：<ul><li>抽象类主要适用于公共代码的提取。当多个类中有共同的属性和方法时，为了达到代码的复用，建议为这几个类提取出来一个父类，在该父类中编写公共的代码。如果有一些方法无法在该类中实现，可以延迟到子类中实现。这样的类就应该使用抽象类。</li><li>接口主要用于功能的扩展。例如有很多类，一些类需要这个方法，另外一些类不需要这个方法时，可以将该方法定义到接口中。需要这个方法的类就去实现这个接口，不需要这个方法的就可以不实现这个接口。接口主要规定的是行为。</li></ul></li></ol><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><ol><li>UML（Unified Modeling Language，统一建模语言）是一种用于面向对象软件开发的图形化的建模语言。它由Grady Booch、James Rumbaugh和Ivar Jacobson等三位著名的软件工程师所开发，并于1997年正式发布。UML提供了一套通用的图形化符号和规范，帮助开发人员以图形化的形式表达软件设计和编写的所有关键方面，从而更好地展示软件系统的设计和实现过程。</li><li>UML是一种图形化的语言，类似于现实生活中建筑工程师画的建筑图纸，图纸上有特定的符号代表特殊的含义。</li><li>UML不是专门为java语言准备的。只要是面向对象的编程语言，开发前的设计，都需要画UML图进行系统设计。（设计模式、软件开发七大原则等同样也不是只为java语言准备的。）</li><li>UML图包括：<ul><li><font color="red">类图（Class Diagram）：描述软件系统中的类、接口、关系和其属性等；</font></li><li><font color="red">用例图（Use Case Diagram）：描述系统的功能需求和用户与系统之间的关系；</font></li><li><font color="red">序列图（Sequence Diagram）：描述对象之间的交互、消息传递和时序约束等；</font></li><li><font color="red">状态图（Statechart Diagram）：描述类或对象的生命周期以及状态之间的转换；</font></li><li>对象图（Object Diagram）：表示特定时间的系统状态，并显示其包含的对象及其属性；</li><li>协作图（Collaboration Diagram）：描述对象之间的协作，表示对象之间相互合作来完成任务的关系；</li><li>活动图（Activity Diagram）：描述系统的动态行为和流程，包括控制流和对象流；</li><li>部署图（Deployment Diagram）：描述软件或系统在不同物理设备上部署的情况，包括计算机、网络、中间件、应用程序等。</li></ul></li><li>常见的UML建模工具有：StarUML，Rational Rose等。</li></ol><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><ol><li>泛化关系（is a）</li><li>实现关系（is like a）</li><li>关联关系（has a）</li><li>聚合关系<ul><li>聚合关系指的是一个类包含、合成或者拥有另一个类的实例，而这个实例是可以独立存在的。</li><li>聚合关系是一种弱关联关系，表示整体与部分之间的关系。</li><li>例如一个教室有多个学生</li></ul></li><li>组合关系（Composition）<ul><li>组合关系是聚合关系的一种特殊情况，表示整体与部分之间的关系更加强烈。</li><li>组合关系指的是一个类包含、合成或者拥有另一个类的实例，而这个实例只能同时存在于一个整体对象中。如果整体对象被销毁，那么部分对象也会被销毁。</li><li>例如一个人对应四个肢体。</li></ul></li><li>依赖关系（Dependency）<ul><li>依赖关系是一种临时性的关系，当一个类使用另一个类的功能时，就会产生依赖关系。</li><li>如果一个类的改变会影响到另一个类的功能，那么这两个类之间就存在依赖关系。</li><li>依赖关系是一种较弱的关系，可以存在多个依赖于同一个类的对象。</li><li>例如A类中使用了B类，但是B类作为A类的方法参数或者局部变量等。</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616200545886.png" alt="image-20250616200545886"></p><h2 id="访问控制权限"><a href="#访问控制权限" class="headerlink" title="访问控制权限"></a>访问控制权限</h2><ol><li><p>private：私有的，只能在本类中访问。</p></li><li><p>缺省：默认的，同一个包下可以访问。</p></li><li><p>protected：受保护的，子类中可以访问。（受保护的通常就是给子孙用的。）</p></li><li><p>public：公共的，在任何位置都可以访问。</p></li></ol><p>   a.  类中的属性和方法访问权限共有四种：private、缺省、protected和public。b. 类的访问权限只有两种：public和 缺省。</p><p>   c. 访问权限控制符不能修饰局部变量。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616200559988.png" alt="image-20250616200559988"></p><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><ol><li>java.lang.Object是所有类的超类。java中所有类都实现了这个类中的方法。</li><li>Object类是我们学习JDK类库的第一个类。通过这个类的学习要求掌握会查阅API帮助文档。</li><li>现阶段Object类中需要掌握的方法：<ul><li>toString：将java对象转换成字符串。</li><li>equals：判断两个对象是否相等。</li></ul></li><li>现阶段Object类中需要了解的方法：<ul><li>hashCode：返回一个对象的哈希值，通常作为在哈希表中查找该对象的键值。Object类的默认实现是根据对象的内存地址生成一个哈希码（即将对象的内存地址转换为整数作为哈希值）。hashCode()方法是为了HashMap、Hashtable、HashSet等集合类进行优化而设置的，以便更快地查找和存储对象。</li><li>finalize：当java对象被回收时，由GC自动调用被回收对象的finalize方法，通常在该方法中完成销毁前的准备。</li><li>clone：对象的拷贝。（浅拷贝，深拷贝）protected修饰的只能在同一个包下或者子类中访问。只有实现了Cloneable接口的对象才能被克隆。</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616201851462.png" alt="image-20250616201851462"></p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ol><li>什么是内部类？<ul><li>定义在一个类中的类。</li></ul></li><li>什么时候使用内部类？<ul><li>一个类用到了另外一个类，而这两个类的联系比较密切，但是如果把这两个类定义为独立的类，不但增加了类的数量，也不利于代码的阅读和维护。</li><li>内部类可以访问外部类的私有成员，这样可以将相关的类和接口隐藏在外部类的内部，从而提高封装性。</li><li>匿名内部类是指没有名字的内部类，通常用于定义一个只使用一次的类，比如在事件处理中。</li></ul></li><li>内部类包括哪几种？<ul><li>静态内部类：和静态变量一个级别<ul><li>静态内部类如何实例化：OuterClass.StaticInnerClass staticInnerClass = new OuterClass.StaticInnerClass();</li><li>无法直接访问外部类中实例变量和实例方法。</li></ul></li><li>实例内部类：和实例变量一个级别<ul><li>实例内部类如何实例化：OuterClass.InnerClass innerClass = new OuterClass().new InnerClass();</li><li>可以直接访问外部类中所有的实例变量，实例方法，静态变量，静态方法。</li></ul></li><li>局部内部类：和局部变量一个级别<ul><li>局部内部类方外类外部的局部变量时，局部变量需要被final修饰。</li><li>从JDK8开始，不需要手动添加final了，但JVM会自动添加。</li></ul></li><li>匿名内部类：特殊的局部内部类，没有名字，只能用一次。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础语法</title>
    <link href="/posts/ea538f2a.html"/>
    <url>/posts/ea538f2a.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p><strong>什么是标识符</strong></p><p>在Java中，程序员有权利自己取名的就是标识符。标识符是用来给变量、方法、类和包等命名的字符序列。</p><p>标识符的长度没有限制，但是建议使用有意义的、简洁的标识符，以提高代码的可读性和可维护性。</p><p><strong>标识符可以标识什么</strong></p><ol><li>变量名</li><li>方法名</li><li>类名、接口名、枚举名、注解名</li><li>包名</li><li>常量名</li><li>其他……</li></ol><p><strong>标识符命名规则</strong></p><ol><li>标识符可以由字母、数字、下划线(_)和美元符号($)组成，不能含有其他符号。（java支持全球所有语言，所以这里的 字母 指的是任何一个国家的文字都可以）</li><li>标识符不能以数字开头。</li><li>标识符不能是Java中的关键字，如public、class、void等。</li><li>标识符是区分大小写的，即Foo和foo是两个不同的标识符。</li><li>标识符的长度没有限制，但是Java建议使用有意义的、简短的标识符。</li></ol><p><strong>标识符命名规范</strong></p><ol><li>见名知意</li><li>驼峰式命名方式</li><li>类名、接口名、枚举、注解：首字母大写，后面每个单词首字母大写。（StudentService，UserService）</li><li>变量名和方法名：首字母小写，后面每个单词首字母大写。（doSome，doOther）</li><li>常量名：全部大写，每个单词用下划线连接。（LOGIN_SUCCESS，SYSTEM_ERROR）</li><li>包名：全部小写</li></ol><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><strong>什么是关键字</strong></p><ol><li><p>Java关键字是Java编程语言中预定义的具有特殊含义的单词，这些单词不能被用作标识符，而是在语法中有特定的用法和限制。</p></li><li><p>Java关键字都是小写的。</p></li></ol><p><strong>Java关键字有哪些</strong></p><ol><li>abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, finally, float, for, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, transient, try, void, volatile, while</li><li>保留字：goto，const</li></ol><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p><strong>什么是字面量</strong></p><ol><li>字面量指的是在程序中直接使用的数据。</li><li>字面量是Java中最基本的表达式，不需要进行计算或转换，直接使用即可。</li></ol><p><strong>Java中有哪些字面量</strong></p><ol><li>整数型：10、-5、0、100</li><li>浮点型：3.14、-0.5、1.0</li><li>布尔型：true、false</li><li>字符型：’a’、’b’、’c’、’1’、’2’、’国’</li><li>字符串型：”Hello”、”World”、”Java”、”你好呀”</li></ol><p><strong>加号运算符 +</strong></p><p>作用1：求和（当加号两边都是数字时进行求和运算）</p><p>作用2：字符串拼接（当加号两边有任意一边是字符串类型时会进行字符串拼接，结果还是一个字符串）</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>什么是变量？</strong></p><ol><li>变量是内存当中的一块空间。是计算机中存储数据最基本的单元。</li><li>变量三要素：<ul><li>数据类型（决定空间大小）【int, double, String】</li><li>变量名（只要是合法的标识符即可）</li><li>变量值（变量中具体存储的数据）</li></ul></li><li>变量的声明、赋值、访问<ul><li>int i; // 声明一个整数型的变量，起名i</li><li>i = 100; // 给变量i赋值100</li><li>System.out.println(i); // 访问i变量：读操作</li><li>i = 200; // 访问i变量：改操作【给变量i重新赋值200】</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609062938704.png" alt="image-20250609062938704"></p><p><strong>变量的作用</strong></p><ol><li>变量的存在会让程序更加便于维护。</li><li>变量的存在可以增强程序的可读性。</li></ol><p><strong>变量的小细节</strong></p><ol><li>变量必须先声明，再赋值，才能访问</li><li>方法体当中的代码遵循自上而下的顺序依次逐行执行，变量先访问，再声明肯定是不行的</li><li>一行代码上可以同时声明多个变量</li><li>在同一个作用域当中，变量名不能重名，可以重新赋值</li><li>变量值的数据类型必须和变量的数据类型一致，这样是不允许的：String name = 100;</li></ol><p><strong>变量的作用域</strong></p><ol><li>作用域就是变量的有效范围。变量的作用域是怎样的呢？用一句大白话就可以概括了：出了大括号就不认识了。</li><li>作用域的不同主要是因为声明在不同位置的变量具有不同的生命周期。所谓的生命周期是：从内存开辟到内存释放。</li><li>Java遵循就近原则</li></ol><p><strong>变量的分类</strong></p><ol><li>局部变量</li><li>成员变量<ul><li>静态变量</li><li>实例变量</li></ul></li></ol><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//二进制字面量是以ob开始的</span><br>System.out.println(<span class="hljs-number">0b10011011</span>);<span class="hljs-comment">//155</span><br><span class="hljs-comment">//八进制字面量是以0开始的</span><br>System.out.println(<span class="hljs-number">0123</span>);<span class="hljs-comment">//83</span><br><span class="hljs-comment">//十六进制字面量是以0x开始的</span><br>System.out.println(<span class="hljs-number">0x1A3F</span>);<span class="hljs-comment">//6719</span><br></code></pre></td></tr></tbody></table></figure><p><strong>二进制概述</strong></p><ol><li>计算机底层只能识别二进制。</li><li>计算机底层只识别二进制是因为计算机内部的电子元件只能识别两种状态，即开和关，或者高电平和低电平。二进制正好可以用两种状态来表示数字和字符，因此成为了计算机最基本的表示方法。</li><li>在计算机内部，所有的数据都被转化为二进制形式进行处理和存储。</li><li>虽然计算机可以通过不同的编程语言和程序来处理不同的数据类型和格式，但最终都需要将其转化为二进制形式才能被计算机底层识别和处理。</li></ol><p><strong>什么是二进制</strong></p><p>十进制：满十进一</p><p>二进制：满二进一</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609063242912.png" alt="image-20250609063242912"></p><p><strong>十进制转换为二进制</strong></p><ol><li>将十进制数除以2，得到商和余数。</li><li>将余数记录下来，然后将商作为新的十进制数，重复步骤1，直到商为0为止。</li><li>将记录的余数从下往上排列，得到的就是对应的二进制数。</li></ol><p><strong>二进制转换为十进制</strong></p><ol><li>将二进制数每一位权值找出来，然后每个权值与对应二进制位相乘，最后将它们相加，即可得到十进制数。</li><li>什么是权值？<ul><li>在二进制中，权值指的是每个位所代表的数值大小，即二进制中每个位的位置所代表的数值大小。</li><li>例如，在二进制数1101中，最高位的权值为8，次高位的权值为4，第三位的权值为2，最低位的权值为1。</li></ul></li><li>二进制数1101转换为十进制数的计算过程如下：<ul><li>1×2³ + 1×2² + 0×2¹ + 1×2⁰ = 8 + 4 + 0 + 1 = 13</li></ul></li></ol><h2 id="八进制与十六进制"><a href="#八进制与十六进制" class="headerlink" title="八进制与十六进制"></a>八进制与十六进制</h2><p>八进制是满8进1</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609063527771.png" alt="image-20250609063527771"></p><p>十六进制是满十六进1</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609063629833.png" alt="image-20250609063629833"></p><p>十进制转为八进制（或十六进制）与二进制相同。</p><p>八进制（或十六进制）转为十进制的原理与二进制相同。</p><p><strong>二进制转为十六进制</strong></p><ol><li>将二进制数从右往左每四位一组，不足四位则在左侧补0，得到若干个四位二进制数。 </li><li>将每个四位二进制数转换为对应的十六进制数</li></ol><p><strong>十六进制转为二进制</strong></p><ol><li>将十六进制中的每个数字转换成4个二进制位</li></ol><h2 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h2><p><strong>byte与bit</strong></p><ol><li>byte（字节）是计算机存储和处理数据的基本单位，通常由8个比特（bit）组成。每个比特（bit）是计算机中最小的存储单位，只能存储0或1两个状态。因此，一个字节（byte）可以存储8个比特（bit）的数据。</li><li>两者之间的关系是，1 byte = 8 bit，即8个比特（bit）组成一个字节（byte）。</li><li>在计算机中，数据通常以字节（byte）为单位进行存储和传输，而比特（bit）则是用来表示数据的最小单位。</li><li>1KB = 1024byte</li><li>1MB = 1024KB</li><li>1GB = 1024MB</li><li>1TB = 1024GB</li></ol><p><strong>原码反码补码</strong></p><ol><li>原码反码补码是计算机二进制的三种表示形式。</li><li>计算机在底层都是采用二进制补码形式表示的。</li><li>二进制位最高位称为符号位，0为正数，1为负数。</li></ol><p><strong>正数的原码反码补码</strong></p><ol><li>正数的原码反码补码是相同的。</li><li>127的原码反码补码分别是多少？都是0111 1111</li></ol><p><strong>负数的原码反码补码</strong></p><ol><li>负数的原码运算规则：将绝对值转换为二进制后，最高位改为1。</li><li>-5的原码：10000101</li><li>-5的反码：11111010（原则是：以原码作为参考，符号位不变，其他位取反。）</li><li>-5的补码：11111011（原则是：以反码作为参考，符号位不变，加1）</li><li>-20的原码反码补码是多少？</li><li>-128的原码反码补码是多少？<ul><li>-128的原码和补码都是1000 0000</li></ul></li></ol><p><strong>已知负数补码怎么得到原码</strong></p><ol><li>虽然计算机底层是采用补码的形式存储的，但最终显示给人类的时候是以原码的形式显示的。</li><li>将负数的补码形式除符号位外的所有位按位取反，再加1即可得到原码。</li><li>已知补码：10000001</li><li>它的原码是：11111111</li><li>结果是：-127</li><li>通过这个可以得出，对于一个字节来说，最大值127，最小值-128。</li></ol><p><strong>计算机底层为什么采用补码</strong></p><ol><li>可以简化电路设计：采用补码形式可以将加减法运算转化为相同的操作，从而简化电路设计。 </li><li>解决了0的正负问题：在原码中，0有两个表示，+0和-0，这样会导致计算结果不唯一，而在补码中，0只有一种表示，即全0，可以避免这个问题。 </li><li>解决了负数溢出问题：在原码中，负数的表示范围比正数少1，这样在进行减法运算时容易出现负数溢出的情况，而在补码中，负数的表示范围与正数相同，可以避免负数溢出的问题。 </li><li>方便计算机进行运算：补码形式可以方便计算机进行加减法运算，而且可以使用相同的电路进行运算，从而提高了计算机的运算效率。 </li><li>可以计算一下 -3 + 2，看看能不能理解。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java开发环境搭建</title>
    <link href="/posts/77a3ba8f.html"/>
    <url>/posts/77a3ba8f.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常用的windows组合键"><a href="#常用的windows组合键" class="headerlink" title="常用的windows组合键"></a>常用的windows组合键</h2><ul><li>win + D<ul><li>回到桌面</li></ul></li><li>win + E<ul><li>打开资源管理器</li></ul></li><li>win + R<ul><li>打开运行窗口</li></ul></li><li>win + L<ul><li>锁屏</li></ul></li><li>alt + tab<ul><li>应用之间的切换</li></ul></li></ul><h2 id="常用的DOS命令"><a href="#常用的DOS命令" class="headerlink" title="常用的DOS命令"></a>常用的DOS命令</h2><ul><li><p>打开DOS命令窗口</p><ul><li>win + R，输入cmd</li><li>cmd是commond单词的缩写。</li></ul></li><li><p>怎么在DOS命令窗口中完成复制和粘贴？</p><ul><li><p>鼠标左键选中要复制的内容，再点击鼠标右键</p></li><li><p>在任意空白处，鼠标右键，即可粘贴</p></li></ul></li><li><p>什么是当前路径？</p><ul><li>假设进入DOS命令窗口时显示的是：C:\Users\Administrator&gt;。那么当前路径就是：C:\Users\Administrator</li></ul></li><li><p>常用DOS命令：</p><ul><li>dir：列出当前路径下所有的文件以及目录。</li><li>cls：clear screen清屏。</li><li>exit：退出DOS命令窗口。</li><li>切换盘符：c: 或者 d: 或者e:</li><li>del：删除一个文件或者多个文件。del Test.java  del *.java</li><li>ipconfig以及ipconfig /all：查看网卡的相关信息，例如ip地址，mac地址等。</li><li>ping命令：查看两台计算机之间是否可以正常通信<ul><li>ping 192.168.137.101</li><li>ping 192.168.137.101 -t</li><li>ping <a href="http://www.baidu.com/">www.baidu.com</a></li><li>ping <a href="http://www.baidu.com/">www.baidu.com</a> -t</li><li>终止DOS命令窗口中某个命令的执行：ctrl + c</li></ul></li><li>mkdir：创建目录<ul><li>mkdir abc，表示在当前目录下新建一个目录：abc</li></ul></li><li>rd：删除目录<ul><li>rd abc，表示删除当前路径下的abc目录</li></ul></li><li>ren：重命名<ul><li>ren abc xyz，表示将当前路径下的abc目录名修改为xyz</li></ul></li><li>cd命令：<ul><li>作用是：切换目录。change directory</li><li>cd命令的用法：cd 路径</li><li>路径包括：<ul><li>相对路径：相对路径一定是相对于当前路径而言的，以当前路径为基准，从当前所在的位置开始找。</li><li>绝对路径：在windows当中，路径开始的时候，是以盘符开始的，都是绝对路径。例如：C:\Users\Administrator\xyz\abc\def</li></ul></li><li>cd .. 回到上级目录 （在windows系统中两个点.. 代表的是一个上级目录。扩展：其实还有一个路径叫做一个点 . 一个点代表的是当前路径。）</li><li>cd / 回到跟目录</li><li>注意：路径在windows当中自动补全：使用tab键。</li></ul></li><li>定时关机：<ul><li>shutdown -s -t 3600 一小时之后自动关机。</li></ul></li></ul></li><li><p>批处理文件</p><ul><li>my.bat文件</li></ul><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-built_in">cd</span> C:\Users\Administrator\xyz\abc\def<br><span class="hljs-function">c:</span><br><span class="hljs-function"><span class="hljs-title">del</span> *.<span class="hljs-title">java</span></span><br></code></pre></td></tr></tbody></table></figure><p>作用：切换到C:\Users\Administrator\xyz\abc\def目录下，删除这个目录中所有的java文件。</p></li></ul><h2 id="通用的文本编辑快捷键"><a href="#通用的文本编辑快捷键" class="headerlink" title="通用的文本编辑快捷键"></a>通用的文本编辑快捷键</h2><p>ctrl+c 复制</p><p>ctrl+v 粘贴</p><p>ctrl+x 剪切</p><p>ctrl+s 保存</p><p>ctrl+z 撤销</p><p>ctrl+y 重做</p><p>ctrl+a 全选</p><p><strong>home 光标回到行首</strong></p><p><strong>end 光标回到行尾</strong></p><p><strong>ctrl + home 光标回到文章开始</strong></p><p><strong>ctrl + end 光标回到文章末尾</strong></p><p><strong>shift + home 或 end 选中一行</strong></p><p>鼠标双击 （选中一个单词）</p><p>ctrl + shift + 右箭头或左箭头 （选中一个单词）</p><p>ctrl + f 查找</p><h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><p><strong>Java SE（Java Standard Edition）是Java的标准版</strong>，它包含了Java语言的核心部分，包括基础类库、虚拟机和开发工具等。Java SE主要用于开发桌面应用程序、控制台程序和小型服务器端应用程序等。</p><p><strong>Java EE（Java Enterprise Edition）是Java的企业版</strong>，它是在Java SE的基础上扩展而来，主要用于开发大型企业级应用程序，如电子商务系统、ERP系统和CRM系统等。Java EE包含了许多企业级技术，如Servlet、JSP、EJB、JMS、JTA等。</p><p><strong>Java ME（Java Micro Edition）是Java的微型版</strong>，它主要用于嵌入式设备和移动设备上的应用程序开发，如手机、平板电脑、数码相机、路由器等。Java ME的特点是体积小、速度快、资源占用少，可以在较小的内存和处理能力的设备上运行。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609055232739.png" alt="image-20250609055232739"></p><h2 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h2><p>简单易学：Java语言的语法和C语言很相似，但是它去掉了C中的复杂的指针和多重继承等特性，使得Java语言更加简单易学。 </p><p>面向对象：Java语言是一种纯面向对象的编程语言，它支持对象的封装、继承和多态等面向对象的特性。 </p><p><font color="red">平台无关性</font>&gt;（跨平台性：一次编译，到处运行）：Java语言的程序可以在不同的操作系统和硬件平台上运行，这是因为Java程序被编译成字节码，而不是机器码，字节码可以在任何支持Java虚拟机的平台上运行。 实现原理：不同的操作系统上安装属于自己的Java虚拟机，而Java虚拟机屏蔽了各个操作系统之间的差异，从而做到跨平台。</p><p>安全性：Java语言具有很高的安全性，它提供了一系列的安全措施来保护程序不受恶意攻击和病毒侵害。 高性能：Java语言具有很高的性能，它采用了一系列优化措施来提高程序的执行速度和内存使用效率。 </p><p>多线程支持：Java语言具有很好的多线程支持，它提供了一系列的线程控制机制，使得程序可以更好地利用计算机的多核处理能力。 </p><p><font color="red">自动垃圾回收机制</font>：Java语言采用的是垃圾回收机制（Garbage Collection，简称GC），也就是自动内存管理机制。在传统的编程语言中，程序员需要手动分配和释放内存，容易出现内存泄漏和悬挂指针等问题。而Java语言采用的垃圾回收机制可以自动分配和释放内存，避免了内存泄漏和悬挂指针等问题。</p><h2 id="JDK的加载与执行原理"><a href="#JDK的加载与执行原理" class="headerlink" title="JDK的加载与执行原理"></a>JDK的加载与执行原理</h2><ol><li>包含两个阶段：编译阶段和运行阶段。Java既是编译型语言，又是解释型语言</li><li>编译阶段和运行阶段可以在不同的操作系统上完成。</li><li>编译后删除java源程序，不会影响程序的执行。</li><li>生成的class文件如果是A.class，则类名为A。如果是Hello.class，则类名为Hello。</li><li>javac是负责编译的命令（检查语法规则），java是负责运行的命令。</li><li>class文件不是机器码，操作系统无法直接执行。只有JVM才能看懂。</li><li>JVM会把class字节码解释为机器码，这样操作系统才能看懂。</li><li>JDK(Java Development Kit)、JRE(Java Runtime Environment)、JVM(Java Virtual Machine)分别是什么？他们的关系是什么？<ul><li>JDK包含JRE，JRE里面有JVM</li><li>JVM其实就是一个规范</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609060047533.png" alt="image-20250609060047533"></p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609060148755.png" alt="image-20250609060148755" style="zoom: 67%;"><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><p>JDK的下载与安装</p><p>环境变量PATH的配置</p><p>JDK的重点目录介绍</p><p>​    bin：该目录主要存放命令</p><p>​    lib：该目录主要存放JDK的类库</p><p>​    lib/src.zip：JDK源码</p><p>第一个Java程序的编写</p><p>第一个Java程序的编译</p><p>​    javac命令的使用：javac 后面可以跟相对路径或者绝对路径（有盘符就是绝对路径）</p><p>第一个Java程序的运行</p><p>​    java命令的使用</p><p>理解环境变量CLASSPATH</p><p>​    类加载器（ClassLoader）</p><p>​    CLASSPATH是给Java的类加载器指路的</p><h2 id="PATH环境变量"><a href="#PATH环境变量" class="headerlink" title="PATH环境变量"></a>PATH环境变量</h2><ul><li>path环境变量不是java的，隶属于windows操作系统</li><li>path环境变量的作用是什么？<ul><li>在path中有很多路径，路径和路径之间采用 分号（;） 隔开</li><li>在DOS命令窗口中输入一个DOS命令之后，windows会先从当前路径下找这个命令，如果找不到，则会去环境变量PATH的路径中查找该命令，找到则执行，找不到，则报错。</li><li>PATH环境变量实际上就是给windows操作系统指路的。</li></ul></li></ul><h2 id="编写第一个Java程序"><a href="#编写第一个Java程序" class="headerlink" title="编写第一个Java程序"></a>编写第一个Java程序</h2><p>在硬盘的任何位置，新建一个java源文件，起名：HelloWorld.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>{<br>        System.out.println(<span class="hljs-string">"Hello World!"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="编译第一个java程序"><a href="#编译第一个java程序" class="headerlink" title="编译第一个java程序"></a>编译第一个java程序</h2><ul><li>使用javac命令来编译。首先确保javac命令能用。</li><li>javac命令怎么用，语法是什么？<ul><li>javac      java源文件的路径</li><li>javac     java源文件的相对路径</li><li>javac     java源文件的绝对路径</li></ul></li></ul><h2 id="运行第一个Java程序"><a href="#运行第一个Java程序" class="headerlink" title="运行第一个Java程序"></a>运行第一个Java程序</h2><ul><li><p>使用java命令来运行程序，首先确保java命令可以用。</p></li><li><p>java命令怎么用？语法格式是什么？</p><ul><li>java 类名（比如：java HelloWorld）</li><li>切记切记切记~！！！！！！！！！ java命令后面跟的<strong>不是文件路径</strong>。java命令后面跟的是<font size="5">类名</font></li></ul></li><li><p>什么是类名？</p><ul><li>A.class，类名是A</li><li>HelloWorld.class，类名是HelloWorld</li><li>Test.class，类名是：Test</li></ul></li><li><p><font color="red">要使用java命令，首先DOS命令窗口中的当前路径必须切换到class文件所在的位置。</font></p></li></ul><h2 id="掌握环境变量CLASSPATH"><a href="#掌握环境变量CLASSPATH" class="headerlink" title="掌握环境变量CLASSPATH"></a>掌握环境变量CLASSPATH</h2><ul><li>classpath环境变量是隶属于Java语言的。不是windows操作系统的。和PATH环境变量完全不同。</li><li>classpath环境变量是给classloader（类加载器）指路的。</li><li>java A。执行后。先启动JVM，JVM启动classloader，classloader去硬盘上通过classpath找A.class文件。找到则执行，找不到则报错。</li><li>如果classpath没有配置的话，默认从当前路径下找class字节码文件。</li><li>如果classpath配置了，例如配置到桌面上了：C:\Users\Administrator\Desktop，那么classloader以后就只会去桌面上找字节码文件了，不再从当前路径下找了。</li><li>注意，如果classpath配置为：classpath=.;C:\Users\Administrator\Desktop 是什么意思呢？<ul><li>先让类加载器从当前路径下找，如果找不到的话，去C:\Users\Administrator\Desktop找。</li></ul></li></ul><h2 id="关于编译时的乱码问题"><a href="#关于编译时的乱码问题" class="headerlink" title="关于编译时的乱码问题"></a>关于编译时的乱码问题</h2><ul><li><p>当java源文件中有中文时，用EditPlus工具写代码，最后会出现中文乱码问题，为什么？</p><ul><li>EditPlus默认是简体中文GBK。</li><li>java21的javac编译器采用的是UTF-8的编码方式进行编译。</li><li>编码不一致，所以乱码了。</li></ul></li><li><p>怎么解决？</p><ul><li><p>第一种方案：编译的时候用特定字符集编译</p><ul><li>javac -encoding GBK HelloWorld2.java</li></ul></li><li><p>第二种方案：</p><ul><li><p>将editplus的字符集修改为UTF-8</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609062007061.png" alt="image-20250609062007061"></p></li></ul></li></ul></li></ul><h2 id="java中的三种注释"><a href="#java中的三种注释" class="headerlink" title="java中的三种注释"></a>java中的三种注释</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单行注释</span><br><span class="hljs-comment">// 单行注释</span><br><span class="hljs-comment">// 单行注释</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* javadoc注释，可以给javadoc命令解析提取并生成帮助文档</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> qingya</span><br><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><p>使用以下命令可以提取生成帮助文档：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">javadoc -d docs -author -version -encoding utf-8 HelloWorld.java<br></code></pre></td></tr></tbody></table></figure><h2 id="public-class与class的区别"><a href="#public-class与class的区别" class="headerlink" title="public class与class的区别"></a>public class与class的区别</h2><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">1. 一个Java源文件中可以定义多个class<br>2. 编译之后，一个class就会对应生成一个class字节码文件<br>3. 如果一个类是public的，类名必须和源文件名保持一致。<br>4. public的类可以没有。如果有的话，也只能有一个。<br>5. 每个类中都可以编写入口main方法。想执行X类的main方法怎么办？java X<br>6. 在实际的开发中，对于一个软件来说，一般入口只有1个。<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/posts/0.html"/>
    <url>/posts/0.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>《疯狂Java讲义》 第一章</p><h1 id="第一个HelloWorld程序"><a href="#第一个HelloWorld程序" class="headerlink" title="第一个HelloWorld程序"></a>第一个HelloWorld程序</h1><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250509082341018.png" alt="image-20250509082341018"></p><p>javac -d . HelloWorld.java(javac -d destdir srcdir) destdir是.的时候表示将字节码生成到java文件所在的路径下。</p><p>java是区分大小写的</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250509082427441.png" alt="image-20250509082427441"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA常用快捷键</title>
    <link href="/posts/566321e7.html"/>
    <url>/posts/566321e7.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h1><ol><li>单行注释：ctrl + /</li><li>多行注释：ctrl + shift + /</li><li>查看源码：按ctrl别松手，鼠标移动到对应的类名下方，出现下划线，点击过去，可以查看类源码。</li><li>多行编辑：按alt别松手，鼠标拖动多行，完成多行编辑。</li><li>怎么快速生成创建对象语句：类名.new.var</li><li>怎么快速生成if语句：布尔类型值.if</li><li>怎么快速生成setter和getter方法：alt + insert，然后选择setter and getter生成。</li><li>怎么快速生成构造方法：alt + insert，然后选择Constructor。</li><li>在IDEA当中如何自动纠错：将光标移动到错误的位置，按atl + enter。会有提示，根据提示进行纠错。</li><li>移动代码到上一行：alt + shift + 上/下方向</li><li>怎么快速重写方法？alt + insert，选择Override….</li><li>怎么快速重写方法？ctrl + o</li><li>快速向下转型，并同时生成变量名：变量名.castvar</li><li>快速查看方法的参数：ctrl + p</li><li>返回上一步：ctrl + alt + 左方向键。 下一步：ctrl + alt + 右方向键。</li><li>代码格式化：ctrl + alt + L</li><li>查看继承结构：ctrl + H</li><li>自动代码包裹：ctrl + alt + t</li><li>快速运行程序 ctrl + shift + F10</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>集合</title>
    <link href="/posts/d366874c.html"/>
    <url>/posts/d366874c.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h1><ol><li>Java集合中存储的是引用，存的不是堆中的对象。堆中的对象的地址存储到了集合中。</li><li>默认情况下，如果不使用泛型，集合中可以存储任何类型的引用。（只要是Object类的子类都可以存储）</li><li>Java集合框架相关的类都在java.util包下。</li><li>Java集合框架分为两部分：<ul><li>Collection结构：元素以单个形式存储。</li><li>Map结构：元素以键值对的映射关系存储。</li></ul></li></ol><h1 id="Collection继承结构"><a href="#Collection继承结构" class="headerlink" title="Collection继承结构"></a>Collection继承结构</h1><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412180840197.png" alt="image-20250412180840197"></p><ol><li><p>上图6个蓝色的实现类中，只有HashSet是无序集合，其他都是有序集合。</p><ul><li><p>有序集合：集合中存储的元素有下标 <strong>或者</strong> 集合中存储的元素是可排序的</p></li><li><p>无序集合： 集合中存储的元素没有下标 <strong>并且</strong> 集合中存储的元素也没有排序</p></li></ul></li><li><p>每个集合实现类对应的数据结构：</p></li></ol><table><thead><tr><th>集合类型</th><th>数据结构</th><th>描述</th></tr></thead><tbody><tr><td>ArrayList</td><td>数组</td><td>一种可以动态增长和缩减的索引序列</td></tr><tr><td>LinkedList</td><td>双向链表（不是队列结构，但是可以用它模拟队列）</td><td>一种可以在任何位置进行高效插入和删除操作的有序序列</td></tr><tr><td>Vector</td><td>数组（线程安全）</td><td></td></tr><tr><td>HashSet</td><td>哈希表</td><td>一种没有重复元素的无序集合</td></tr><tr><td>LinkedHashSet</td><td>双向链表+哈希表</td><td>一种可以记住元素插入次序的集</td></tr><tr><td>TreeSet</td><td>红黑树</td><td>一种有序集</td></tr></tbody></table><ol start="3"><li>List集合中存储的元素可以重复，Set集合中的元素不可重复。</li></ol><h1 id="Collection接口的常用方法"><a href="#Collection接口的常用方法" class="headerlink" title="Collection接口的常用方法"></a>Collection接口的常用方法</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean add(E e);</td><td>向集合中添加元素</td></tr><tr><td>int size();</td><td>获取集合中元素个数</td></tr><tr><td>boolean addAll(Collection c);</td><td>将参数集合中所有元素全部加入当前集合</td></tr><tr><td>boolean contains(Object o);</td><td>判断集合中是否包含对象o</td></tr><tr><td>boolean remove(Object o);</td><td>从集合中删除对象o</td></tr><tr><td>void clear();</td><td>清空集合</td></tr><tr><td>boolean isEmpty();</td><td>判断集合中元素个数是否为0</td></tr><tr><td>Object[] toArray();</td><td>将集合转换成一维数组</td></tr></tbody></table><p>这里有疑问：为什么col.toArray()返回的是地址？？？    </p><h2 id="add-E-e-amp-size-amp-toArray"><a href="#add-E-e-amp-size-amp-toArray" class="headerlink" title="add(E e) &amp; size() &amp; toArray()"></a>add(E e) &amp; size() &amp; toArray()</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection col = <span class="hljs-keyword">new</span> ArrayList();<br><span class="hljs-comment">//add(E e)</span><br>col.add(<span class="hljs-string">"zhangsan"</span>);<br>col.add(<span class="hljs-number">123</span>);<br>col.add(<span class="hljs-keyword">true</span>);<br>System.out.println(col); <span class="hljs-comment">// [zhangsan, 123, true]</span><br>System.out.println(col.toArray());<span class="hljs-comment">// [Ljava.lang.Object;@1b6d3586</span><br><br><span class="hljs-comment">//size()</span><br>System.out.println(col.size());<span class="hljs-comment">// 3</span><br></code></pre></td></tr></tbody></table></figure><h2 id="addAll-Collection-c"><a href="#addAll-Collection-c" class="headerlink" title="addAll(Collection c)"></a>addAll(Collection c)</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//addAll(Collection c)</span><br>Collection col2 = <span class="hljs-keyword">new</span> ArrayList();<br>col2.add(<span class="hljs-string">"好好学习，天天向上"</span>);<br>col2.add(<span class="hljs-string">"you are the best~"</span>);<br>col.addAll(col2); <span class="hljs-comment">// 将col2中的元素添加到col中</span><br>System.out.println(col);<br></code></pre></td></tr></tbody></table></figure><p>遇到问题：控制台中文乱码</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412183545975.png" alt="image-20250412183545975"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//addAll(Collection c)</span><br>Collection col2 = <span class="hljs-keyword">new</span> ArrayList();<br>col2.add(<span class="hljs-string">"hello~"</span>);<br>col.addAll(col2); <span class="hljs-comment">// 将col2中的元素添加到col中</span><br>System.out.println(col);<span class="hljs-comment">// [zhangsan, 123, true, hello~]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="contains-Object-o"><a href="#contains-Object-o" class="headerlink" title="contains(Object o)"></a>contains(Object o)</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//contains(Object o)</span><br>System.out.println(col.contains(<span class="hljs-string">"zhangsan"</span>)); <span class="hljs-comment">// true</span><br>System.out.println(col.contains(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"zhangsan"</span>))); <span class="hljs-comment">// true</span><br></code></pre></td></tr></tbody></table></figure><h2 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(col);<span class="hljs-comment">//[zhangsan, 123, true, hello~]</span><br>col.remove(<span class="hljs-string">"zhangsan"</span>); <span class="hljs-comment">// 删除元素</span><br>System.out.println(col);<span class="hljs-comment">//[123, true, hello~]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="clear-amp-isEmpty"><a href="#clear-amp-isEmpty" class="headerlink" title="clear() &amp; isEmpty()"></a>clear() &amp; isEmpty()</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(col);<span class="hljs-comment">// [123, true, hello~]</span><br>col.clear();<br>System.out.println(col);<span class="hljs-comment">// []</span><br>System.out.println(col.isEmpty()); <span class="hljs-comment">// true</span><br></code></pre></td></tr></tbody></table></figure><h1 id="Collection集合的遍历"><a href="#Collection集合的遍历" class="headerlink" title="Collection集合的遍历"></a>Collection集合的遍历</h1><p>第一步：获取当前集合依赖的迭代器对象</p><p>​    Iterator it = collection.iterator();</p><p>第二步：编写循环，循环条件：当前光标指向的位置是否存在元素。</p><p>​    while(it.hasNext()){}</p><p>第三步：如果有，将光标指向的当前元素返回，并且将光标向下移动一位。</p><p>​    Object obj = it.next();</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412190556190.png" alt="image-20250412190556190"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412190641158.png" alt="image-20250412190641158"></p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><ol><li><p>泛型是Java5的新特性，属于编译阶段的功能。</p></li><li><p>泛型可以让开发者在编写代码时指定集合中存储数据的数据类型。</p></li><li><p>泛型作用：</p><ul><li>类型安全：指定类型后，编译期会在编译阶段进行类型检查。如果尝试将错误的类型加入集合中，则会在编译阶段报错。避免了在运行时出现类型错误的问题。</li><li>代码简洁：使用泛型后可以简化代码，避免了繁琐的类型转换操作。没有泛型的时候，需要使用Object类型来保存集合中的元素，在使用时需要强制类型转换成实际类型。</li></ul></li><li><p>在集合中使用泛型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; strs = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br><span class="hljs-comment">//这就表示该集合只能存储字符串，存储其它类型时编译器报错。并且以上代码使用泛型后，避免了繁琐的类型转换，集合中的元素可以直接调用String类特有的方法。</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>Java7的新特性：钻石表达式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; strs = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="泛型擦除与补偿"><a href="#泛型擦除与补偿" class="headerlink" title="泛型擦除与补偿"></a>泛型擦除与补偿</h2><ol><li><p>泛型的出现提高了编译时的安全性，正因为编译时对添加的数据做了检查，则程序运行时才不会抛出类型转换异常。因此泛型本质上是编译时期的技术，是专门给编译器用的。加载类的时候，会将泛型擦除掉（擦除之后的类型为Object类型），这个称为<strong>泛型擦除</strong>。</p></li><li><p>为什么要有泛型擦除呢？其本质是为了让JDK1.4和JDK1.5能够兼容同一个类加载器。在JDK1.5版本中，程序编译时期会对集合添加的元素进行安全检查，如果检查完是安全的、没有错误的，那么就意味着添加的元素都属于同一种数据类型，则加载类时就可以把这个泛型擦除掉，将泛型擦除后的类型就是Object类，这样擦除之后的代码就与JDK1.4的代码一致。</p></li><li><p>由于加载类的时候，会默认将类中的泛型擦除为Object类型，所以添加的元素就被转化为Object类型，同时取出的元素也默认为Object类型。而我们获得集合中的元素时，按理说取出的元素应该是Object类型，为什么取出的元素却是实际添加的元素类型呢？</p><p>这是因为这里又做了一个默认的操作，我们称之为<strong>泛型的补偿</strong>。在程序运行时，通过获取元素的实际类型进行强转，这就叫做泛型补偿（不必手动实现强制转换）。获得集合中的元素时，虚拟机会根据获得元素的实际类型进行向下转型，也就是会恢复获得元素的实际类型，因此我们就无需手动执行向下转型操作，从本质上避免了抛出类型转换异常。</p></li></ol><h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><h3 id="在类上定义泛型"><a href="#在类上定义泛型" class="headerlink" title="在类上定义泛型"></a>在类上定义泛型</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.javase.collection.Summer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAnimal</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Integer</span>&gt; </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyAnimal</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> java.lang.<span class="hljs-function">String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"MyAnimal{"</span> +<br>                <span class="hljs-string">"name="</span> + name +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这种可以直接调用String或者Integer类特有的方法（因为声明泛型的时候直接指定了泛型类型是String和Object）</span><br>MyAnimal&lt;String, Integer&gt; myAnimal = <span class="hljs-keyword">new</span> MyAnimal&lt;&gt;(<span class="hljs-string">"dog"</span>, <span class="hljs-number">2</span>);<br>System.out.println(myAnimal.getName().charAt(<span class="hljs-number">1</span>));<br><br><span class="hljs-comment">//这种的不能直接调用String或者Integer类特有的方法</span><br>MyAnimal&lt;Object, Object&gt; myAnimal1 = <span class="hljs-keyword">new</span> MyAnimal&lt;&gt;(<span class="hljs-string">"cat"</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//myAnimal1.getName().charAt(1); 调用不了这个方法</span><br></code></pre></td></tr></tbody></table></figure><h3 id="在静态方法上定义泛型"><a href="#在静态方法上定义泛型" class="headerlink" title="在静态方法上定义泛型"></a>在静态方法上定义泛型</h3><ol><li><p>在类上定义的泛型，在静态方法中无法使用。</p></li><li><p>如果在静态方法中使用泛型，则需要在方法返回值类型前面进行泛型的声明。</p><ul><li><strong>语法格式：&lt;泛型1, 泛型2, 泛型3, …&gt; 返回值类型 方法名(形参列表) {}</strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(T[] t)</span> </span>{<br>        <span class="hljs-keyword">for</span> (T t1 : t) {<br>            System.out.println(t1);<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String[] strs = {<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>};<br>        Integer[] ints = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br>        Double[] doubles = {<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>};<br><br>        A.print(strs);<br>        System.out.println(<span class="hljs-string">"=========="</span>);<br>        A.print(ints);<br>        System.out.println(<span class="hljs-string">"=========="</span>);<br>        A.print(doubles);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">a<br>b<br>c<br>==========<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>==========<br><span class="hljs-number">1.1</span><br><span class="hljs-number">2.2</span><br><span class="hljs-number">3.3</span><br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="在接口上定义泛型"><a href="#在接口上定义泛型" class="headerlink" title="在接口上定义泛型"></a>在接口上定义泛型</h3><p><strong>语法格式：interface 接口名&lt;泛型1,泛型2,…&gt; {}</strong></p><ul><li>例如：<code>public interface Flayable &lt;T&gt; {}</code><ul><li>实现接口时，如果知道具体的类型，则：<code>public class MyClass implements Flyable &lt;Bird&gt; {}</code></li><li>实现接口时，如果不知道具体的类型，则：<code>public class MyClass &lt;T&gt; implements Flyable &lt;T&gt; {}</code></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">定义一个泛型接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyFlyable</span>&lt;<span class="hljs-title">T</span>&gt; </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">(T t)</span></span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">B类实现接口时，指定具体类型为Bird</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MyFlyable</span>&lt;<span class="hljs-title">Bird</span>&gt; </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">(Bird bird)</span> </span>{<br>        System.out.println(<span class="hljs-string">"Bird "</span> + bird.getName() + <span class="hljs-string">" is flying."</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>​    </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">C类实现接口时，未指定具体类型</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">MyFlyable</span>&lt;<span class="hljs-title">T</span>&gt; </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">(T t)</span> </span>{<br>        <span class="hljs-keyword">if</span> (t <span class="hljs-keyword">instanceof</span> Bird) {<br>            System.out.println(<span class="hljs-string">"Bird "</span> + ((Bird) t).getName() + <span class="hljs-string">" is flying."</span>);<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t <span class="hljs-keyword">instanceof</span> Dragon) {<br>            System.out.println(<span class="hljs-string">"Dragon "</span> + ((Dragon) t).getName() + <span class="hljs-string">" is flying."</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"Unknown type is flying."</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Bird bird = <span class="hljs-keyword">new</span> Bird(<span class="hljs-string">"xiaohuangli"</span>);<br>        Dragon dragon = <span class="hljs-keyword">new</span> Dragon(<span class="hljs-string">"xiaolongren"</span>);<br><br>        B b = <span class="hljs-keyword">new</span> B();<br>        b.fly(bird);<br>        <span class="hljs-comment">//会报错,因为B类只接受Bird类型的参数</span><br><span class="hljs-comment">//        b.fly(dragon);</span><br><br>        C c = <span class="hljs-keyword">new</span> C();<br>        c.fly(dragon);<br>        c.fly(bird);<br>    }<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Bird xiaohuangli is flying.<br>Dragon xiaolongren is flying.<br>Bird xiaohuangli is flying.<br></code></pre></td></tr></tbody></table></figure><h3 id="泛型通配符-泛型的使用，不属于定义了"><a href="#泛型通配符-泛型的使用，不属于定义了" class="headerlink" title="泛型通配符(泛型的使用，不属于定义了)"></a>泛型通配符(泛型的使用，不属于定义了)</h3><ol><li>无限定通配符，&lt;?&gt;，此处“？”可以为任意引用数据类型。</li><li>上限通配符，&lt;? extends Number&gt;，此处“？”必须为Number及其子类。</li><li>下限通配符，&lt;? super Number&gt;，此处“？”必须为Number及其父类。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//什么类型都可以接收</span><br>        print(<span class="hljs-keyword">new</span> ArrayList&lt;String&gt;());<br>        print(<span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;());<br>        print(<span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;());<br><br>        <span class="hljs-comment">//报错，这里需要的是BB或者BB的子类</span><br>        <span class="hljs-comment">//print2(new ArrayList&lt;AA&gt;());</span><br>        print2(<span class="hljs-keyword">new</span> ArrayList&lt;BB&gt;());<br>        print2(<span class="hljs-keyword">new</span> ArrayList&lt;CC&gt;());<br>        <br>        print3(<span class="hljs-keyword">new</span> ArrayList&lt;AA&gt;());<br>        print3(<span class="hljs-keyword">new</span> ArrayList&lt;BB&gt;());<br>        <span class="hljs-comment">//报错，这里需要的是BB或者BB的父类</span><br>        <span class="hljs-comment">//print3(new ArrayList&lt;CC&gt;());</span><br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(ArrayList&lt;?&gt; list)</span></span>{<br>        System.out.println(list);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print2</span><span class="hljs-params">(ArrayList&lt;? extends BB&gt; list)</span></span>{<br>        System.out.println(list);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print3</span><span class="hljs-params">(ArrayList&lt;? <span class="hljs-keyword">super</span> BB&gt; list)</span></span>{<br>        System.out.println(list);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AA</span></span>{<br><br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AA</span></span>{<br><br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BB</span></span>{<br><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="迭代时删除元素"><a href="#迭代时删除元素" class="headerlink" title="迭代时删除元素"></a>迭代时删除元素</h3><ol><li>迭代集合时删除元素<ul><li>使用“集合对象.remove(元素)”：会出现ConcurrentModificationException异常。</li><li>使用“迭代器对象.remove()”：不会出现异常。</li></ul></li><li>如何解决并发修改问题？答案：fail-fast机制<ul><li>fail-fast机制又被称为“快速失败机制”。只要程序发现对集合进行了并发修改，就会立即让其失败，以防出错。</li></ul></li><li>fail-fast机制是如何实现的？<ul><li>集合中设置了一个modCount属性，用来记录修改次数，使用集合对象执行增，删，改中任意一个操作时，modCount就会自动加1。</li><li>获取迭代器对象的时候，会给迭代器对象初始化一个expectedModCount属性。并且将expectedModCount初始化为modCount，即：int expectedModCount = modCount;</li><li>当使用集合对象删除元素时：modCount会加1。但是迭代器中的expectedModCount不会加1。而当迭代器对象的next()方法执行时，会检测expectedModCount和modCount是否相等，如果不相等，则抛出：ConcurrentModificationException异常。</li><li>当使用迭代器删除元素的时候：modCount会加1，并且expectedModCount也会加1。这样当迭代器对象的next()方法执行时，检测到的expectedModCount和modCount相等，则不会出现ConcurrentModificationException异常。</li></ul></li><li>注意：虽然我们当前写的程序是单线程的程序，并没有使用多线程，但是通过迭代器去遍历的同时使用集合去删除元素，这个行为将被认定为并发修改。</li><li>结论：迭代集合时，删除元素要使用“迭代器对象.remove()”方法来删除，避免使用“集合对象.remove(元素)”。主要是为了避免ConcurrentModificationException异常的发生。<strong>注意：迭代器的remove()方法删除的是next()方法的返回的那个数据。remove()方法调用之前一定是先调用了next()方法，如果不是这样的，就会报错。</strong></li></ol><p>获取迭代器对象的时候，会给迭代器对象初始化一个expectedModCount属性。并且将expectedModCount初始化为modCount，即：int expectedModCount = modCount;</p><p>​    java.util.ArrayList#iterator</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250414204339412.png" alt="image-20250414204339412"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    ArrayList&lt;Integer&gt; integers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    integers.add(<span class="hljs-number">1</span>);<br>    integers.add(<span class="hljs-number">2</span>);<br>    integers.add(<span class="hljs-number">3</span>);<br><br>    Iterator&lt;Integer&gt; iterator = integers.iterator();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>        Integer integer = iterator.next();<br>        <span class="hljs-keyword">if</span>(integer == <span class="hljs-number">2</span>) {<br>            iterator.remove();<br>        }<br>    }<br><br>    <span class="hljs-keyword">for</span> (Integer integer : integers) {<br>        System.out.println(integer);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        ArrayList&lt;Integer&gt; integers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        integers.add(<span class="hljs-number">1</span>);<br>        integers.add(<span class="hljs-number">2</span>);<br>        integers.add(<span class="hljs-number">3</span>);<br><br>        Iterator&lt;Integer&gt; iterator = integers.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            Integer integer = iterator.next();<br>            <span class="hljs-keyword">if</span>(integer == <span class="hljs-number">2</span>) {<br>                integers.remove(integer);<span class="hljs-comment">//没有异常，为什么</span><br>            }<br>        }<br><br>        <span class="hljs-keyword">for</span> (Integer integer : integers) {<br>            System.out.println(integer);<br>        }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h1><h2 id="List接口常用方法"><a href="#List接口常用方法" class="headerlink" title="List接口常用方法"></a>List接口常用方法</h2><ol><li><p>List集合存储的元素特点：有序可重复</p></li><li><p>List接口下的常见实现类：</p><ul><li>ArrayList：数组</li><li>Vector, Stack：数组（且线程安全）</li><li>LinkedList：双向链表</li></ul></li><li><p>List接口特有方法</p></li></ol><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>void add(int index, E element)</td><td>在指定索引处插入元素</td></tr><tr><td>2</td><td>E set(int index, E element)</td><td>修改索引处的元素</td></tr><tr><td>3</td><td>E get(int index)</td><td>根据索引获取元素（因为有这个方法，所以可以根据下标遍历List集合）</td></tr><tr><td>4</td><td>E remove(int index)</td><td>删除索引处的元素</td></tr><tr><td>5</td><td>int indexOf(Object o)</td><td>获取对象o在当前集合中第一次出现时的索引。</td></tr><tr><td>6</td><td>int lastIndexOf(Object o)</td><td>获取对象o在当前集合中最后一次出现时的索引。</td></tr><tr><td>7</td><td>List<e> subList(int fromIndex, int toIndex)</e></td><td>截取子List集合生成一个新集合（对原集合无影响）。[fromIndex, toIndex)</td></tr><tr><td>8</td><td>static List<e> of(E… elements)</e></td><td>静态方法，返回包含任意数量元素的不可修改列表。（获取的集合是只读的，不可修改的。）</td></tr></tbody></table><p>测试1：在指定索引处添加元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListTest02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 创建List集合对象</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 添加元素</span><br>        list.add(<span class="hljs-string">"1"</span>);<br>        list.add(<span class="hljs-string">"2"</span>);<br>        list.add(<span class="hljs-string">"3"</span>);<br>        list.add(<span class="hljs-string">"4"</span>);<br>        list.add(<span class="hljs-string">"5"</span>);<br>        list.add(<span class="hljs-string">"6"</span>);<br><br>        <span class="hljs-comment">// 在指定位置添加元素</span><br>        list.add(<span class="hljs-number">1</span>, <span class="hljs-string">"张三"</span>);<br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            String next = iterator.next();<br>            System.out.println(next);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br>张三<br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br></code></pre></td></tr></tbody></table></figure><p>测试2和3</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListTest02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 创建List集合对象</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 添加元素</span><br>        list.add(<span class="hljs-string">"1"</span>);<br>        list.add(<span class="hljs-string">"2"</span>);<br>        list.add(<span class="hljs-string">"3"</span>);<br>        list.add(<span class="hljs-string">"4"</span>);<br>        list.add(<span class="hljs-string">"5"</span>);<br>        list.add(<span class="hljs-string">"6"</span>);<br><br>        <span class="hljs-comment">//修改索引处的元素</span><br>        list.set(<span class="hljs-number">1</span>, <span class="hljs-string">"李四"</span>);<br>System.out.println(<span class="hljs-string">"下标为2的元素是："</span> + list.get(<span class="hljs-number">2</span>));<br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            String next = iterator.next();<br>            System.out.println(next);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">下标为<span class="hljs-number">2</span>的元素是：<span class="hljs-number">3</span><br><span class="hljs-number">1</span><br>李四<br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br></code></pre></td></tr></tbody></table></figure><p>通过下标遍历List集合</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    ArrayList&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    animals.add(<span class="hljs-string">"Dog"</span>);<br>    animals.add(<span class="hljs-string">"Cat"</span>);<br>    animals.add(<span class="hljs-string">"Bird"</span>);<br>    animals.add(<span class="hljs-string">"Fish"</span>);<br>    animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; animals.size(); i++) {<br>        String animal = animals.get(i);<br>        System.out.println(animal);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Dog<br>Cat<br>Bird<br>Fish<br>Lizard<br></code></pre></td></tr></tbody></table></figure><p>测试subList</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    animals.add(<span class="hljs-string">"Dog"</span>);<br>    animals.add(<span class="hljs-string">"Cat"</span>);<br>    animals.add(<span class="hljs-string">"Bird"</span>);<br>    animals.add(<span class="hljs-string">"Fish"</span>);<br>    animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>    List&lt;String&gt; newAnimals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    newAnimals = animals.subList(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">//实际获取到的是下标2和3的元素</span><br>    ListIterator&lt;String&gt; listIterator = newAnimals.listIterator();<br>    <span class="hljs-keyword">while</span> (listIterator.hasNext()) {<br>        String next = listIterator.next();<br>        System.out.println(next);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Bird<br>Fish<br></code></pre></td></tr></tbody></table></figure><p>测试of(E… elements)</p><p>❓疑问：这里为什么是? extends Serializable，这个代码是我的Idea自动生成的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? extends Serializable&gt; hello = List.of(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">"hello"</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">1.2f</span>);<br><span class="hljs-keyword">for</span> (Serializable s : hello) {<br>    System.out.println(s);<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br>hello<br><span class="hljs-keyword">true</span><br><span class="hljs-number">1.2</span><br></code></pre></td></tr></tbody></table></figure><h2 id="List接口特有迭代器"><a href="#List接口特有迭代器" class="headerlink" title="List接口特有迭代器"></a>List接口特有迭代器</h2><ol><li>特有的迭代方式</li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ListIterator<e> listIterator()</e></td><td>获取List集合特有的迭代器（该迭代器功能更加强大，但只适合于List集合使用）</td></tr><tr><td>ListIterator<e> listIterator(int index)</e></td><td>从列表中的指定位置开始，返回列表中元素的列表迭代器</td></tr></tbody></table><ol start="2"><li>ListIterator接口中常用方法</li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>判断光标当前指向的位置是否存在元素。</td></tr><tr><td>E next()</td><td>将当前光标指向的元素返回，然后将光标向下移动一位。</td></tr><tr><td>void remove()</td><td>删除上一次next()方法返回的那个数据(删除的是集合中的)。remove()方法调用的前提是：先调用next()方法。否则会报错。</td></tr><tr><td>void add(E e)</td><td>添加元素（将元素添加到光标指向的位置，然后光标向下移动一位。）</td></tr><tr><td>boolean hasPrevious()</td><td>判断当前光标指向位置的上一个位置是否存在元素。</td></tr><tr><td>E previous()</td><td>获取上一个元素（<strong>将光标向上移动一位</strong>，然后将光标指向的元素返回）</td></tr><tr><td>int nextIndex()</td><td>获取光标指向的那个位置的下标</td></tr><tr><td>int previousIndex()</td><td>获取光标指向的那个位置的上一个位置的下标</td></tr><tr><td>void set(E e)</td><td>修改的是上一次next()方法返回的那个数据（修改的是集合中的）。set()方法调用的前提是：先调用了next()方法。否则会报错。</td></tr></tbody></table><p>hasNext()：判断光标当前指向的位置是否存在元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>animals.add(<span class="hljs-string">"Dog"</span>);<br>animals.add(<span class="hljs-string">"Cat"</span>);<br>animals.add(<span class="hljs-string">"Bird"</span>);<br>animals.add(<span class="hljs-string">"Fish"</span>);<br>animals.add(<span class="hljs-string">"Lizard"</span>);<br><br><span class="hljs-comment">//测试hasNext()</span><br>ListIterator&lt;String&gt; iterator = animals.listIterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>    String animal = iterator.next();<br>    System.out.println(animal);<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Dog<br>Cat<br>Bird<br>Fish<br>Lizard<br></code></pre></td></tr></tbody></table></figure><p>nextIndex()：获取光标指向的那个位置的下标</p><p>previousIndex()：获取光标指向的那个位置的上一个位置的下标</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>animals.add(<span class="hljs-string">"Dog"</span>);<br>animals.add(<span class="hljs-string">"Cat"</span>);<br>animals.add(<span class="hljs-string">"Bird"</span>);<br>animals.add(<span class="hljs-string">"Fish"</span>);<br>animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>ListIterator&lt;String&gt; iterator = animals.listIterator();<br><br><span class="hljs-comment">//测试nextIndex()</span><br>System.out.println(<span class="hljs-string">"Next index: "</span> + iterator.nextIndex());<span class="hljs-comment">//0</span><br><span class="hljs-comment">//测试previousIndex()</span><br>System.out.println(<span class="hljs-string">"Previous index: "</span> + iterator.previousIndex());<span class="hljs-comment">//-1</span><br></code></pre></td></tr></tbody></table></figure><p>remove()：删除上一次next()方法返回的那个数据(删除的是集合中的)。<strong>remove()方法调用的前提是：你先调用next()方法。不然会报错。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>animals.add(<span class="hljs-string">"Dog"</span>);<br>animals.add(<span class="hljs-string">"Cat"</span>);<br>animals.add(<span class="hljs-string">"Bird"</span>);<br>animals.add(<span class="hljs-string">"Fish"</span>);<br>animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>ListIterator&lt;String&gt; iterator = animals.listIterator();<br><br><span class="hljs-comment">//测试remove()</span><br>iterator.remove();<span class="hljs-comment">//java.lang.IllegalStateException</span><br></code></pre></td></tr></tbody></table></figure><p>add(E e)：将元素添加到光标的位置，然后光标向下移动一位</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>animals.add(<span class="hljs-string">"Dog"</span>);<br>animals.add(<span class="hljs-string">"Cat"</span>);<br>animals.add(<span class="hljs-string">"Bird"</span>);<br>animals.add(<span class="hljs-string">"Fish"</span>);<br>animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>ListIterator&lt;String&gt; iterator = animals.listIterator();<br><br><span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>    String animal = iterator.next();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">"Bird"</span>.equals(animal)){<br>        iterator.remove();<br>    }<br>}<br>System.out.println(animals);<span class="hljs-comment">// [Dog, Cat, Bird, Butterfly, Fish, Lizard]</span><br></code></pre></td></tr></tbody></table></figure><p>set(E e)：修改的是上一次next()方法返回的那个数据（修改的是集合中的）。set()方法调用的前提是：你先调用了next()方法。不然会报错</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>animals.add(<span class="hljs-string">"Dog"</span>);<br>animals.add(<span class="hljs-string">"Cat"</span>);<br>animals.add(<span class="hljs-string">"Bird"</span>);<br>animals.add(<span class="hljs-string">"Fish"</span>);<br>animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>ListIterator&lt;String&gt; iterator = animals.listIterator();<br><br><span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>    String animal = iterator.next();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">"Bird"</span>.equals(animal)){<br>        iterator.set(<span class="hljs-string">"Butterfly"</span>);<br>    }<br>}<br><br>System.out.println(animals);<span class="hljs-comment">// [Dog, Cat, Butterfly, Fish, Lizard]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="List接口使用Comparator排序"><a href="#List接口使用Comparator排序" class="headerlink" title="List接口使用Comparator排序"></a>List接口使用Comparator排序</h2><h3 id="数组中自定义类型是如何排序的"><a href="#数组中自定义类型是如何排序的" class="headerlink" title="数组中自定义类型是如何排序的"></a>数组中自定义类型是如何排序的</h3><p>让自定义类型实现java.lang.Comparable接口，接着重写compareTo方法。在compareTo方法中指定比较规则。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">User</span>&gt; </span>{<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(User user)</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.compareTo(user.name);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"User{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArraySort</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        User jack = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"Jack"</span>);<br>        User tom = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"Tom"</span>);<br>        User lucy = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"Lucy"</span>);<br>        User[] users = <span class="hljs-keyword">new</span> User[]{jack, tom, lucy};<br>        Arrays.sort(users);<br>        <span class="hljs-keyword">for</span> (User user : users) {<br>            System.out.println(user.getName());<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Jack<br>Lucy<br>Tom<br></code></pre></td></tr></tbody></table></figure><h3 id="List集合的排序"><a href="#List集合的排序" class="headerlink" title="List集合的排序"></a>List集合的排序</h3><p>对list集合排序可以调用 <code>default void sort(Comparator&lt;? super E&gt; c)</code></p><p>​    sort方法参数：java.util.Comparator（我们把这个叫比较器，这是一个接口）</p><ol><li>提供一个Comparator的实现类，重写compare方法</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListSort</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Person zhangsan = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhangsan"</span>, <span class="hljs-number">20</span>);<br>        Person lisi = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"lisi"</span>, <span class="hljs-number">25</span>);<br>        Person wangwu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"wangwu"</span>, <span class="hljs-number">30</span>);<br>        Person zhaoliu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhaoliu"</span>, <span class="hljs-number">35</span>);<br><br>        ArrayList&lt;Person&gt; people = <span class="hljs-keyword">new</span> ArrayList&lt;Person&gt;();<br>        people.add(zhangsan);<br>        people.add(lisi);<br>        people.add(wangwu);<br>        people.add(zhaoliu);<br><br>        System.out.println(<span class="hljs-string">"Before sorting:"</span>);<br>        <span class="hljs-keyword">for</span> (Person person : people) {<br>            System.out.println(person.getName() + <span class="hljs-string">" "</span> + person.getAge());<br>        }<br><br>        <span class="hljs-comment">// Sort the list using the custom comparator</span><br>        people.sort(<span class="hljs-keyword">new</span> PersonComparator());<br>        System.out.println(<span class="hljs-string">"\nAfter sorting by name:"</span>);<br>        <span class="hljs-keyword">for</span> (Person person : people) {<br>            System.out.println(person.getName() + <span class="hljs-string">" "</span> + person.getAge());<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>​        </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Before sorting:<br>zhangsan <span class="hljs-number">20</span><br>lisi <span class="hljs-number">25</span><br>wangwu <span class="hljs-number">30</span><br>zhaoliu <span class="hljs-number">35</span><br><br>After sorting by name:<br>lisi <span class="hljs-number">25</span><br>wangwu <span class="hljs-number">30</span><br>zhangsan <span class="hljs-number">20</span><br>zhaoliu <span class="hljs-number">35</span><br></code></pre></td></tr></tbody></table></figure><ol start="2"><li>采用匿名内部类的方式提供Comparator的实现类</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListSort2</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Person zhangsan = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhangsan"</span>, <span class="hljs-number">20</span>);<br>        Person lisi = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"lisi"</span>, <span class="hljs-number">25</span>);<br>        Person wangwu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"wangwu"</span>, <span class="hljs-number">30</span>);<br>        Person zhaoliu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhaoliu"</span>, <span class="hljs-number">35</span>);<br><br>        ArrayList&lt;Person&gt; people = <span class="hljs-keyword">new</span> ArrayList&lt;Person&gt;();<br>        people.add(zhangsan);<br>        people.add(lisi);<br>        people.add(wangwu);<br>        people.add(zhaoliu);<br><br>        System.out.println(<span class="hljs-string">"Before sorting:"</span>);<br>        <span class="hljs-keyword">for</span> (Person person : people) {<br>            System.out.println(person.getName() + <span class="hljs-string">" "</span> + person.getAge());<br>        }<br><br>        <span class="hljs-comment">// Sort the list using an anonymous inner class</span><br>        people.sort(<span class="hljs-keyword">new</span> Comparator&lt;Person&gt;() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Person o1, Person o2)</span> </span>{<br>                <span class="hljs-keyword">return</span> o2.getName().compareTo(o1.getName());<br>            }<br>        });<br><br>        System.out.println(<span class="hljs-string">"\nAfter sorting by name:"</span>);<br>        <span class="hljs-keyword">for</span> (Person person : people) {<br>            System.out.println(person.getName() + <span class="hljs-string">" "</span> + person.getAge());<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><ol><li>底层采用了数组数据结构</li><li>优点：底层是数组，因此根据下标查找元素的时间复杂度是O(1)，检索效率高</li><li>缺点：随机增删元素效率低。注意：只要数组的容量没有满，对末尾元素进行增删时，效率不会受影响</li><li>适用场景：需要频繁检索元素，并且很少进行随机增删元素时建议使用ArrayList</li><li>默认初始化容量：<ul><li>当调用无参构造方法时，初始化容量为0，当第一次调用add方法时，会将ArrayList容量初始化为10个长度</li></ul></li><li>扩容策略<ul><li>底层扩容会创建一个新数组，然后使用数组拷贝。扩容之后的新容量是原容量的1.5倍</li></ul></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object[] grow(<span class="hljs-keyword">int</span> minCapacity) {<br>    <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>    <span class="hljs-keyword">if</span> (oldCapacity &gt; <span class="hljs-number">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {<br>        <span class="hljs-keyword">int</span> newCapacity = ArraysSupport.newLength(oldCapacity,<br>                                                  minCapacity - oldCapacity, <span class="hljs-comment">/* minimum growth */</span><br>                                                  oldCapacity &gt;&gt; <span class="hljs-number">1</span>           <span class="hljs-comment">/* preferred growth */</span>);<br>        <span class="hljs-keyword">return</span> elementData = Arrays.copyOf(elementData, newCapacity);<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">return</span> elementData = <span class="hljs-keyword">new</span> Object[Math.max(DEFAULT_CAPACITY, minCapacity)];<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">newLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> oldLength, <span class="hljs-keyword">int</span> minGrowth, <span class="hljs-keyword">int</span> prefGrowth)</span> </span>{<br>    <span class="hljs-comment">// preconditions not checked because of inlining</span><br>    <span class="hljs-comment">// assert oldLength &gt;= 0</span><br>    <span class="hljs-comment">// assert minGrowth &gt; 0</span><br><br>    <span class="hljs-keyword">int</span> prefLength = oldLength + Math.max(minGrowth, prefGrowth); <span class="hljs-comment">// might overflow</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt; prefLength &amp;&amp; prefLength &lt;= SOFT_MAX_ARRAY_LENGTH) {<br>        <span class="hljs-keyword">return</span> prefLength;<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-comment">// put code cold in a separate method</span><br>        <span class="hljs-keyword">return</span> hugeLength(oldLength, minGrowth);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="8"><li>集合源码分析</li></ol><ul><li><p>属性分析</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//The array buffer into which the elements of the ArrayList are stored. </span><br><span class="hljs-keyword">transient</span> Object[] elementData; <span class="hljs-comment">// non-private to simplify nested class access</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The size of the ArrayList (the number of elements it contains).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@serial</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>构造方法分析（使用ArrayList时，最好预测一下最大数量，给定初始化容量，减少扩容次数）</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250415222113163.png" alt="image-20250415222113163"></p></li><li><p>添加元素</p><p>看上面扩容策略处的代码</p></li><li><p>修改元素: <strong>修改元素时会将修改前的值返回</strong></p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span></span>;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>{<br>    Objects.checkIndex(index, size);<br>    E oldValue = elementData(index);<br>    elementData[index] = element;<br>    <span class="hljs-keyword">return</span> oldValue;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListSort</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Person zhangsan = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhangsan"</span>, <span class="hljs-number">20</span>);<br>        Person lisi = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"lisi"</span>, <span class="hljs-number">25</span>);<br>        Person wangwu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"wangwu"</span>, <span class="hljs-number">30</span>);<br>        Person zhaoliu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhaoliu"</span>, <span class="hljs-number">35</span>);<br><br>        List&lt;Person&gt; people = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        people.add(zhangsan);<br>        people.add(lisi);<br>        people.add(wangwu);<br>        people.add(zhaoliu);<br><br>        System.out.println(people.set(<span class="hljs-number">2</span>, zhaoliu)); <span class="hljs-comment">//Person{name='wangwu', age=30}</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>插入元素</li><li>删除元素</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ol><li>Vector底层也是数组，和ArrayList相同。</li><li>不同的是Vector几乎所有的方法都是同步的（被synchronized修饰：线程排队执行，不能并发），因此Vector是线程安全的，但是因为效率低，所以很少使用。控制线程安全有新的方式，所以这个很少用。</li><li>初始化容量：10</li><li>扩容策略：扩容之后的容量是原容量的2倍。</li></ol><h2 id="链表存储结构"><a href="#链表存储结构" class="headerlink" title="链表存储结构"></a>链表存储结构</h2><ol><li><p>单向链表</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225542715.png" alt="image-20250416225542715"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225623438.png" alt="image-20250416225623438"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225638228.png" alt="image-20250416225638228"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225649156.png" alt="image-20250416225649156"></p></li><li><p>双向链表</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225702308.png" alt="image-20250416225702308"></p></li><li><p>环形链表</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225714227.png" alt="image-20250416225714227"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225726534.png" alt="image-20250416225726534"></p></li><li><p>链表优点</p><p>因为链表节点在空间存储上，内存地址不是连续的。因此删除某个节点时不需要涉及到元素位移的问题。因此随机增删元素效率较高。时间复杂度O(1)</p></li><li><p>链表缺点</p><p>链表中元素在查找时，只能从某个节点开始顺序查找，因为链表节点的内存地址在空间上不是连续的。链表查找元素效率较低，时间复杂度O(n)</p></li><li><p>适用场景</p></li></ol><p>​        需要频繁进行随机增删，但很少的查找的操作时。</p><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><ol><li><p>LinkedList是一个双向链表</p></li><li><p>源码分析</p><ul><li><p>属性分析</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Pointer to first node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; first;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Pointer to last node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; last;<br></code></pre></td></tr></tbody></table></figure></li><li><p>构造方法分析</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250417072257109.png" alt="image-20250417072257109"></p></li><li><p>添加元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>{<br>    checkPositionIndex(index);<br><br>    <span class="hljs-keyword">if</span> (index == size)<br>        linkLast(element);<br>    <span class="hljs-keyword">else</span><br>        linkBefore(element, node(index));<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkLast</span><span class="hljs-params">(E e)</span> </span>{<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(l, e, <span class="hljs-keyword">null</span>);<br>    last = newNode;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-keyword">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Inserts element e before non-null Node succ.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkBefore</span><span class="hljs-params">(E e, Node&lt;E&gt; succ)</span> </span>{<br>    <span class="hljs-comment">// assert succ != null;</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; pred = succ.prev;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(pred, e, succ);<br>    succ.prev = newNode;<br>    <span class="hljs-keyword">if</span> (pred == <span class="hljs-keyword">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        pred.next = newNode;<br>    size++;<br>    modCount++;<br>}<br><br><span class="hljs-function">Node&lt;E&gt; <span class="hljs-title">node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    <span class="hljs-comment">// assert isElementIndex(index);</span><br><br>    <span class="hljs-keyword">if</span> (index &lt; (size &gt;&gt; <span class="hljs-number">1</span>)) {<br>        Node&lt;E&gt; x = first;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++)<br>            x = x.next;<br>        <span class="hljs-keyword">return</span> x;<br>    } <span class="hljs-keyword">else</span> {<br>        Node&lt;E&gt; x = last;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size - <span class="hljs-number">1</span>; i &gt; index; i--)<br>            x = x.prev;<br>        <span class="hljs-keyword">return</span> x;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ol><pre><code class="hljs"> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>{<br>    checkElementIndex(index);<br>    Node&lt;E&gt; x = node(index);<br>    E oldVal = x.item;<br>    x.item = element;<br>    <span class="hljs-keyword">return</span> oldVal;<br>}<br></code></pre></td></tr></tbody></table></figure></code></pre><ul><li><p>修改元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>{<br>    checkElementIndex(index);<br>    Node&lt;E&gt; x = node(index);<br>    E oldVal = x.item;<br>    x.item = element;<br>    <span class="hljs-keyword">return</span> oldVal;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>插入元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>{<br>    checkPositionIndex(index);<br><br>    <span class="hljs-keyword">if</span> (index == size)<br>        linkLast(element);<br>    <span class="hljs-keyword">else</span><br>        linkBefore(element, node(index));<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>删除元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    checkElementIndex(index);<br>    <span class="hljs-keyword">return</span> unlink(node(index));<br>}<br><br><span class="hljs-function">E <span class="hljs-title">unlink</span><span class="hljs-params">(Node&lt;E&gt; x)</span> </span>{<br>    <span class="hljs-comment">// assert x != null;</span><br>    <span class="hljs-keyword">final</span> E element = x.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = x.next;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; prev = x.prev;<br><br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-keyword">null</span>) {<br>        first = next;<br>    } <span class="hljs-keyword">else</span> {<br>        prev.next = next;<br>        x.prev = <span class="hljs-keyword">null</span>;<br>    }<br><br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-keyword">null</span>) {<br>        last = prev;<br>    } <span class="hljs-keyword">else</span> {<br>        next.prev = prev;<br>        x.next = <span class="hljs-keyword">null</span>;<br>    }<br><br>    x.item = <span class="hljs-keyword">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ol start="3"><li>手写单向链表</li></ol>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义的单向链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinked</span>&lt;<span class="hljs-title">E</span>&gt; </span>{<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 元素个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单向链表的头结点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; first;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建一个空链表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyLinked</span><span class="hljs-params">()</span> </span>{<br><br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取集合中元素的个数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> size;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向单向链表的末尾添加一个元素。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(E data)</span> </span>{<br>        <span class="hljs-comment">//如果first是空，表示是一个空链表</span><br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span>) {<br>            first = <span class="hljs-keyword">new</span> Node&lt;&gt;(data, <span class="hljs-keyword">null</span>);<br>            size++;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        Node&lt;E&gt; last = findLast();<br>        Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(data, <span class="hljs-keyword">null</span>);<br>        last.next = newNode;<br>        size++;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 找到单向链表的末尾结点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 末尾结点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Node&lt;E&gt; <span class="hljs-title">findLast</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span>) {<br>            <span class="hljs-comment">//空链表</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        }<br><br>        Node&lt;E&gt; last = first;<br>        <span class="hljs-keyword">while</span> (last.next != <span class="hljs-keyword">null</span>) {<br>            <span class="hljs-comment">//把last.next看做是最后一个结点</span><br>            last = last.next;<br>        }<br>        <span class="hljs-keyword">return</span> last;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将元素添加到指定索引处</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data  数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E data)</span> </span>{<br>        Node&lt;E&gt; oldNode = node(index);<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) {<br>            first = <span class="hljs-keyword">new</span> Node&lt;&gt;(data, first);<br>        } <span class="hljs-keyword">else</span> {<br>            Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(data, oldNode);<br>            Node&lt;E&gt; prev = node(index - <span class="hljs-number">1</span>);<br>            prev.next = newNode;<br>        }<br>        size++;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回索引处的结点对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结点对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Node&lt;E&gt; <span class="hljs-title">node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>        <span class="hljs-comment">//假设头结点是下一个结点</span><br>        Node&lt;E&gt; next = first;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++) {<br>            next = next.next;<br>        }<br>        <span class="hljs-keyword">return</span> next;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除指定索引处的元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) {<br>            first = first.next;<br>        } <span class="hljs-keyword">else</span> {<br>            Node&lt;E&gt; pre = node(index - <span class="hljs-number">1</span>);<br>            Node&lt;E&gt; cur = node(index);<br><br>            pre.next = cur.next;<br><br>            cur.next = <span class="hljs-keyword">null</span>;<br>            cur.item = <span class="hljs-keyword">null</span>;<br><br>        }<br>        size--;<br><br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改指定索引处的数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data  数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E data)</span> </span>{<br>        node(index).item = data;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据下标获取数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>        <span class="hljs-keyword">return</span> node(index).item;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单向链表当中的结点（建议定义为静态内部类。）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt; </span>{<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 数据</span><br><span class="hljs-comment">         */</span><br>        E item;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 下一个结点的内存地址</span><br><span class="hljs-comment">         */</span><br>        Node&lt;E&gt; next;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 构造一个结点对象</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> item 结点中的数据</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> next 下一个结点的内存地址。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(E item, Node&lt;E&gt; next)</span> </span>{<br>            <span class="hljs-keyword">this</span>.item = item;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.javase.collection.Summer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedTest</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        MyLinked&lt;String&gt; myLinked = <span class="hljs-keyword">new</span> MyLinked&lt;&gt;();<br>        myLinked.add(<span class="hljs-string">"hello"</span>);<br>        myLinked.add(<span class="hljs-string">"world"</span>);<br>        myLinked.add(<span class="hljs-string">"java"</span>);<br><br>        <span class="hljs-comment">//遍历</span><br>        traverseCollection(myLinked);<br><br>        <span class="hljs-comment">//删除</span><br>        System.out.println(<span class="hljs-string">"-----------------"</span>);<br>        myLinked.remove(<span class="hljs-number">1</span>);<br>        traverseCollection(myLinked);<br><br>        <span class="hljs-comment">//修改</span><br>        System.out.println(<span class="hljs-string">"-----------------"</span>);<br>        myLinked.set(<span class="hljs-number">0</span>, <span class="hljs-string">"hello~hello~"</span>);<br>        traverseCollection(myLinked);<br><br>        <span class="hljs-comment">//新增</span><br>        System.out.println(<span class="hljs-string">"-----------------"</span>);<br>        myLinked.add(<span class="hljs-number">1</span>, <span class="hljs-string">"world~world~"</span>);<br>        traverseCollection(myLinked);<br><br>        <span class="hljs-comment">//查询</span><br>        System.out.println(<span class="hljs-string">"-----------------"</span>);<br>        String s = myLinked.get(<span class="hljs-number">2</span>);<br>        System.out.println(s);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traverseCollection</span><span class="hljs-params">(MyLinked&lt;String&gt; myLinked)</span> </span>{<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; myLinked.size(); i++) {<br>            String s = myLinked.get(i);<br>            System.out.println(s);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">hello<br>world<br>java<br>-----------------<br>hello<br>java<br>-----------------<br>hello~hello~<br>java<br>-----------------<br>hello~hello~<br>world~world~<br>java<br>-----------------<br>java<br></code></pre></td></tr></tbody></table></figure><h2 id="栈数据结构"><a href="#栈数据结构" class="headerlink" title="栈数据结构"></a>栈数据结构</h2><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250417210230514.png" alt="image-20250417210230514"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250417210230514.png"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250417210258424.png" alt="image-20250417210258424"></p><ol><li>LIFO原则（Last In, First Out）：后进先出</li><li>可以用<strong>数组</strong>实现栈数据结构，也可以用<strong>双向链表</strong>来实现。</li><li>用数组实现栈数据结构的代表有：Stack、ArrayDeque<ul><li>Stack：Vetor的子类，实现了栈数据结构，除了具有Vetor的方法，还扩展了其它方法，完成了栈结构的模拟。不过在JDK1.6（Java6）之后就不建议使用了，因为它是线程安全的，太慢了。Stack中的方法如下：<ul><li>E push(E item)：压栈</li><li>E pop()：弹栈（将栈顶元素删除，并返回被删除的引用）</li><li>int search(Object o)：查找栈中元素（返回值的意思是：以1为开始，从栈顶往下数第几个）</li><li>E peek()：窥视栈顶元素（不会将栈顶元素删除，只是看看栈顶元素是什么。注意：如果栈为空时会报异常。）</li></ul></li><li>ArrayDeque<ul><li>E push(E item)</li><li>E pop()</li></ul></li></ul></li><li>用链表实现的代表是：LinkedList<ul><li>E push(E item)</li><li>E pop()</li></ul></li></ol><h2 id="队列数据结构"><a href="#队列数据结构" class="headerlink" title="队列数据结构"></a>队列数据结构</h2><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250418214107920.png" alt="image-20250418214107920"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，队列是一种操作受限制的线性表。进行插入操作（入口）的端称为队尾，进行删除操作（出口）的端称为队头。</p></li><li><p>队列的插入操作只能在队尾操作，队列的删除操作只能在队头操作，因此队列是一种先进先出（First In First Out）的线性表，简称FIFO表。</p></li><li><p>Queue接口是一种基于FIFO（先进先出）的数据结构，而Deque接口则同时支持FIFO和LIFO（后进先出）两种操作。因此Deque接口也被称为“双端队列”。</p></li><li><p>Java集合框架中队列的实现：</p><ul><li><p>链表实现方式：LinkedList</p></li><li><p>数组实现方式：ArrayDeque</p></li></ul></li></ol><pre><code class="hljs"> ![image-20250418214047976](https://raw.githubusercontent.com/growingbambi/typora/master/image-20250418214047976.png)</code></pre><ol start="5"><li>LinkedList和ArrayDeque都实现了Queue、Deque接口，因此这两个类都具备队列和双端队列的特性。</li><li>LinkedList底层是基于双向链表实现的，因此它天然就是一个双端队列，既支持从队尾入队，从队头出队，也支持从队头入队，从队尾出队。用Deque的实现方式来说，就是它既实现了队列的offer()和poll()方法，也实现了双端队列的offerFirst()、offerLast()、pollFirst()和pollLast()方法等。</li><li>ArrayDeque底层是使用环形数组实现的，也是一个双端队列。它比LinkedList更加高效，因为在数组中随机访问元素的时间复杂度是O(1)，而链表中需要从头或尾部遍历链表寻找元素，时间复杂度是O(N)。循环数组：index = (start + i) % capacity</li></ol><h3 id="Queue接口基于Collection扩展的方法"><a href="#Queue接口基于Collection扩展的方法" class="headerlink" title="Queue接口基于Collection扩展的方法"></a>Queue接口基于Collection扩展的方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean offer(E e);</td><td>入队</td></tr><tr><td>E poll();</td><td>出队，如果队列为空，返回null。</td></tr><tr><td>E remove();</td><td>出队，如果队列为空，抛异常。</td></tr><tr><td>E peek();</td><td>查看队头元素，如果为空则返回null。</td></tr><tr><td>E element();</td><td>查看对头元素，如果为空则抛异常。</td></tr></tbody></table><h3 id="Deque接口基于Queen接口扩展的方法"><a href="#Deque接口基于Queen接口扩展的方法" class="headerlink" title="Deque接口基于Queen接口扩展的方法"></a>Deque接口基于Queen接口扩展的方法</h3><table><thead><tr><th>可以模拟队列的方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean offerLast(E e);</td><td>从队尾入队</td></tr><tr><td>E pollFirst();</td><td>从队头出队</td></tr></tbody></table><table><thead><tr><th>可以模拟双端队列的方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean offerLast(E e);</td><td>从队尾入队</td></tr><tr><td>E pollFirst();</td><td>从队头出队</td></tr><tr><td>boolean offerFirst(E e);</td><td>从队头入队</td></tr><tr><td>E pollLast();</td><td>从队尾出队</td></tr></tbody></table><p>另外offerLast+pollLast或者pollFirst+offerFirst可以模拟栈数据结构。或者也可以直接调用push/pop方法。</p><h1 id="Map继承结构"><a href="#Map继承结构" class="headerlink" title="Map继承结构"></a>Map继承结构</h1><ol><li>Map集合以key和value的键值对形式存储。key和value存储的都是引用。</li><li>Map集合中key起主导作用。value是附属在key上的。</li><li>SequencedMap是Java21新增的。</li><li>LinkedHashMap和TreeMap都是有序集合。（key是有序的）</li><li>HashMap，Hashtable，Properties都是无序集合。（key是无序的）</li><li>Map集合的key都是不可重复的。key重复的话，value会覆盖。</li><li>HashSet集合底层是new了一个HashMap。往HashSet集合中存储元素实际上是将元素存储到HashMap集合的key部分。HashMap集合的key是无序不可重复的，因此HashSet集合就是无序不可重复的。HashMap集合底层是哈希表/散列表数据结构，因此HashSet底层也是哈希表/散列表。</li><li>TreeSet集合底层是new了一个TreeMap。往TreeSet集合中存储元素实际上是将元素存储到TreeMap集合的key部分。TreeMap集合的key是不可重复但可排序的，因此TreeSet集合就是不可重复但可排序的。TreeMap集合底层是红黑树，因此TreeSet底层也是红黑树。它们的排序通过java.lang.Comparable和java.util.Comparator均可实现。</li><li>LinkedHashSet集合底层是new了一个LinkedHashMap。LinkedHashMap集合只是为了保证元素的插入顺序，效率比HashSet低，底层采用的哈希表+双向链表实现。</li><li>根据源码可以看到向Set集合中add时，底层会向Map中put。value只是一个固定不变的常量，只是起到一个占位符的作用。主要是key。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250418213331399.png" alt="image-20250418213331399"></p><h1 id="Map接口的常用方法"><a href="#Map接口的常用方法" class="headerlink" title="Map接口的常用方法"></a>Map接口的常用方法</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>V put(K key, V value);</td><td>添加键值对</td></tr><tr><td>void putAll(Map&lt;? extends K,? extends V&gt; m);</td><td>添加多个键值对</td></tr><tr><td>V get(Object key);</td><td>通过key获取value</td></tr><tr><td>boolean containsKey(Object key);</td><td>是否包含某个key</td></tr><tr><td>boolean containsValue(Object value);</td><td>是否包含某个value</td></tr><tr><td>V remove(Object key);</td><td>通过key删除key-value</td></tr><tr><td>void clear();</td><td>清空Map</td></tr><tr><td>int size();</td><td>键值对个数</td></tr><tr><td>boolean isEmpty();</td><td>判断是否为空Map</td></tr><tr><td>Collection<v> values();</v></td><td>获取所有的value</td></tr><tr><td>Set<k> keySet();</k></td><td>获取所有的key</td></tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet();</td><td>获取所有键值对的Set视图</td></tr><tr><td>static &lt;K,V&gt; Map&lt;K,V&gt; of(K k1, V v1, K k2, V v2, K k3, V v3);</td><td>静态方法，使用key-value构造map</td></tr></tbody></table><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常用类_String类</title>
    <link href="/posts/6dd21eef.html"/>
    <url>/posts/6dd21eef.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="String初识"><a href="#String初识" class="headerlink" title="String初识"></a>String初识</h1><ol><li><p>java.lang.String</p></li><li><p>Java中String属于引用数据类型，代表字符串。</p></li><li><p>Java在堆中为字符串准备了字符串常量池。（是一种缓存技术，提高程序执行效率）</p></li></ol><blockquote><p>​    <strong>注：字符串字面量在编译的时候就已经确定了将其放到字符串常量池中。JVM启动时会立即将程序中带有双引号的字符串字面量全部放入字符串常量池。</strong></p></blockquote><ol start="3"><li>Java8之后字符串常量池存放在堆中，Java8之前字符串常量池在永久代。</li><li>字符串一旦创建是不可变的。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Stable</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] value;<br></code></pre></td></tr></tbody></table></figure><h1 id="String的拼接"><a href="#String的拼接" class="headerlink" title="String的拼接"></a>String的拼接</h1><ol><li>动态拼接后新的字符串不会自动放到字符串常量池。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String str1 = <span class="hljs-string">"abc"</span>; <span class="hljs-comment">//字符串常量池</span><br>String str2 = <span class="hljs-string">"def"</span>; <span class="hljs-comment">//字符串常量池</span><br>String str3 = <span class="hljs-string">"abcdef"</span>; <span class="hljs-comment">//字符串常量池</span><br>String str4 = str1 + str2; <span class="hljs-comment">//运行时才会创建对象, str4在堆内存中</span><br>System.out.println(str3 == str4); <span class="hljs-comment">//false</span><br></code></pre></td></tr></tbody></table></figure><ol start="2"><li>两个字符串字面量拼接会做编译阶段的优化，在编译阶段就会进行字符串的拼接。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在字符串常量池中只有一个abcdef</span><br>String str3 = <span class="hljs-string">"abcdef"</span>; <span class="hljs-comment">//字符串常量池</span><br>String str5 = <span class="hljs-string">"abc"</span> + <span class="hljs-string">"def"</span>; <span class="hljs-comment">//字符串常量池</span><br>System.out.println(str3 == str5); <span class="hljs-comment">//true </span><br></code></pre></td></tr></tbody></table></figure><h1 id="String类的常用构造方法"><a href="#String类的常用构造方法" class="headerlink" title="String类的常用构造方法"></a>String类的常用构造方法</h1><ol><li><p>String(char[] value)：</p><ul><li><p>根据字符数组创建一个新的字符串对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]{<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>};<br>String s = <span class="hljs-keyword">new</span> String(chars);<br>System.out.println(s);<span class="hljs-comment">//abc</span><br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>String(char[] value, int offset, int count)：</p><ul><li><p>根据字符数组的指定部分创建一个新的字符串对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]{<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span>};<br>String s = <span class="hljs-keyword">new</span> String(chars, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>System.out.println(s);<span class="hljs-comment">//bcd</span><br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>String(byte[] bytes)：</p><ul><li>根据字节数组创建一个新的字符串对象，默认使用平台默认的字符集进行解码。</li></ul></li><li><p>String(byte[] bytes, int offset, int length)：</p><ul><li><p>根据字节数组的指定部分创建一个新的字符串对象，默认使用平台默认的字符集进行解码。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]{<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">102</span>};<br>String str = <span class="hljs-keyword">new</span> String(chars, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>System.out.println(str);<span class="hljs-comment">//cde</span><br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>String(byte[] bytes, Charset charset)：根据字节数组和指定的字符集创建一个新的字符串对象。</p><ul><li><p>如果编码和解码用到的字符集不一致，则会出现乱码。</p></li><li><p>new String(bytes, Charset.defaultCharset());</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span>[] bytesArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]{<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">102</span>};<br>String s5 = <span class="hljs-keyword">new</span> String(bytesArr, Charset.defaultCharset());<br>System.out.println(s5);<span class="hljs-comment">//abcdef</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 先将字符串转换成byte[]数组（这个过程是一个编码的过程）</span><br><span class="hljs-keyword">byte</span>[] bytes1 = <span class="hljs-string">"你好旧时光"</span>.getBytes(StandardCharsets.UTF_8);<br><span class="hljs-comment">// 将以上的byte[]数组转换成字符串（这个过程是一个解码的过程）</span><br>String s6 = <span class="hljs-keyword">new</span> String(bytes1, StandardCharsets.UTF_8);<br>System.out.println(s6);<span class="hljs-comment">//你好旧时光</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 乱码的本质：在进行编码和解码的时候没有使用同一个字符编码方式。</span><br><span class="hljs-comment">//如果编码和解码的字符集不一致，就会出现乱码。</span><br><br><span class="hljs-comment">// 先将字符串转换成byte[]数组（这个过程是一个编码的过程）</span><br><span class="hljs-keyword">byte</span>[] bytes1 = <span class="hljs-string">"你好旧时光"</span>.getBytes(StandardCharsets.UTF_8);<br><span class="hljs-comment">// 将以上的byte[]数组转换成字符串（这个过程是一个解码的过程）</span><br>String s6 = <span class="hljs-keyword">new</span> String(bytes1, StandardCharsets.ISO_8859_1);<br>System.out.println(s6);<br></code></pre></td></tr></tbody></table></figure></li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250411085551049.png" alt="image-20250411085551049"></p></li></ol><ol start="6"><li><p>String(byte[] bytes, String charsetName)：根据字节数组和指定的字符集名称创建一个新的字符串对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编码</span><br><span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-string">"淡然"</span>.getBytes(<span class="hljs-string">"GBK"</span>);<br><span class="hljs-comment">// 解码</span><br>String s6 = <span class="hljs-keyword">new</span> String(bytes, <span class="hljs-string">"GBK"</span>);<br>System.out.println(s6);<span class="hljs-comment">//淡然</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>String(String original)：通过复制现有字符串创建一个新的字符串对象。</p><ul><li><p>这个方法被@IntrinsicCandidate标注，这个注解的作用是告诉编译器，该方法或构造函数是一个内在的候选方法,可以被优化和替换为更高效的代码。因此它是不建议使用的。</p></li><li><p>new String(“hello”); 这个代码会让常量池中有一个 “hello”，并且在堆中也有有一个String对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@IntrinsicCandidate</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">(String original)</span> </span>{<br>    <span class="hljs-keyword">this</span>.value = original.value;<br>    <span class="hljs-keyword">this</span>.coder = original.coder;<br>    <span class="hljs-keyword">this</span>.hash = original.hash;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String helloStr = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"hello"</span>);<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ol><h1 id="String类的常用方法"><a href="#String类的常用方法" class="headerlink" title="String类的常用方法"></a>String类的常用方法</h1><ol><li>byte[] getBytes(); 将字符串转换成字节数组。其实就是对字符串进行编码。默认按照系统默认字符集。</li><li>byte[] getBytes(String charsetName); 将字符串按照指定字符集的方式进行编码。</li><li>byte[] getBytes(Charset charset);</li><li>char[] toCharArray(); 将字符串转换字符数组。</li><li>String toLowerCase(); 转小写</li><li>String toUpperCase(); 转大写</li><li>String concat(String str); 进行字符串的拼接操作。和 + 的区别？+ <ul><li>既可以进行求和，也可以进行字符串的拼接，底层拼接时会创建StringBuilder对象进行拼接。+ 拼接null时不会出现空指针异常。</li><li>concat方法参数只能时字符串类型，拼接时不会创建StringBuilder对象，拼接完成后返回一个新的String对象。拼接null会出现空指针异常。</li><li>+使用较多。如果进行大量字符串拼接，这两个都不合适。</li></ul></li><li>String substring(int beginIndex); 从指定下标beginIndex开始截取子字符串</li><li>String substring(int beginIndex, int endIndex);</li><li>String trim(); 去除字符串前后空白（只能去除ASCII码中的空格和制表符）</li><li>String strip(); 去除字符串前后空白（支持所有的编码形式的空白，可以将全角空格去除，\u3000是全角空格，Java11新增）</li><li>String stripLeading(); 去除前空白</li><li>String stripTrailing(); 去除后空白</li><li>String toString();</li><li>String intern(); 获取字符串常量池中的字符串，如果常量池中没有，则将字符串加入常量池并返回。<ul><li>byte[] bytes = {97,98,99,100}; String s = new String(bytes);</li><li>String s2 = s.intern(); // 将字符串 “abcd”放入字符串常量池并返回常量池中的字符串 “abcd”</li></ul></li><li>static String join(CharSequence d, CharSequence… elements); 将多个字符串以某个分隔符连接（Java8新增）</li><li>static String join(CharSequence delimiter, Iterable&lt;? extends CharSequence&gt; elements);</li><li>static String valueOf(boolean b); 以下所有的静态方法valueOf作用是将非字符串类型的数据转换为字符串形式。</li><li>static String valueOf(char c);</li><li>static String valueOf(char[] data);</li><li>static String valueOf(char[] data, int offset, int count);</li><li>static String valueOf(double d);</li><li>static String valueOf(float f);</li><li>static String valueOf(int i);</li><li>static String valueOf(long l);</li><li>static String valueOf(Object obj);</li></ol><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h1 id="String类的面试题"><a href="#String类的面试题" class="headerlink" title="String类的面试题"></a>String类的面试题</h1><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA常用</title>
    <link href="/posts/566321e7.html"/>
    <url>/posts/566321e7.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h1><ol><li>单行注释：ctrl + /</li><li>多行注释：ctrl + shift + /</li><li>查看源码：按ctrl别松手，鼠标移动到对应的类名下方，出现下划线，点击过去，可以查看类源码。</li><li>多行编辑：按alt别松手，鼠标拖动多行，完成多行编辑。</li><li>怎么快速生成创建对象语句：类名.new.var</li><li>怎么快速生成if语句：布尔类型值.if</li><li>怎么快速生成setter和getter方法：alt + insert，然后选择setter and getter生成。</li><li>怎么快速生成构造方法：alt + insert，然后选择Constructor。</li><li>在IDEA当中如何自动纠错：将光标移动到错误的位置，按atl + enter。会有提示，根据提示进行纠错。</li><li>移动代码到上一行：alt + shift + 上/下方向</li><li>怎么快速重写方法？alt + insert，选择Override….</li><li>怎么快速重写方法？ctrl + o</li><li>快速向下转型，并同时生成变量名：变量名.castvar</li><li>快速查看方法的参数：ctrl + p</li><li>返回上一步：ctrl + alt + 左方向键。 下一步：ctrl + alt + 右方向键。</li><li>代码格式化：ctrl + alt + L</li><li>查看继承结构：ctrl + H（或者F4）</li><li>自动代码包裹：ctrl + alt + t</li><li>快速运行程序 ctrl + shift + F10</li></ol><h1 id="IDEA中文乱码"><a href="#IDEA中文乱码" class="headerlink" title="IDEA中文乱码"></a>IDEA中文乱码</h1><ol><li><p>在 IntelliJ IDEA 中，可以通过以下步骤检查和设置文件编码：<br>右键文件 -&gt; File Encoding -&gt; 选择 UTF-8。</p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412184653927.png" alt="image-20250412184653927"></li><li><p>设置 JVM 的字符编码：<br>在运行配置中添加 JVM 参数，强制指定 UTF-8 编码：-Dfile.encoding=UTF-8<br>在 IntelliJ IDEA 中：<br>打开 Run/Debug Configurations。<br>在 VM options 中添加上述参数。</p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412184810062.png" alt="image-20250412184810062"></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常用类_日期</title>
    <link href="/posts/4f0359c2.html"/>
    <url>/posts/4f0359c2.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><h2 id="日期类-java-util-Date"><a href="#日期类-java-util-Date" class="headerlink" title="日期类 java.util.Date"></a>日期类 java.util.Date</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">this</span>(System.currentTimeMillis());<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-keyword">long</span> date)</span> </span>{<br>    fastTime = date;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="日期格式化类-SimpleDateFormat"><a href="#日期格式化类-SimpleDateFormat" class="headerlink" title="日期格式化类 SimpleDateFormat"></a>日期格式化类 SimpleDateFormat</h2><h3 id="日期转字符串"><a href="#日期转字符串" class="headerlink" title="日期转字符串"></a>日期转字符串</h3><h3 id="字符串转日期"><a href="#字符串转日期" class="headerlink" title="字符串转日期"></a>字符串转日期</h3><h2 id="日历类-java-util-Calendar"><a href="#日历类-java-util-Calendar" class="headerlink" title="日历类 java.util.Calendar"></a>日历类 java.util.Calendar</h2><h3 id="获取当前时间的日历对象"><a href="#获取当前时间的日历对象" class="headerlink" title="获取当前时间的日历对象"></a>获取当前时间的日历对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Gets a calendar using the default time zone and locale.</span><br>Calendar instance = Calendar.getInstance();<br>System.out.println(instance);<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.GregorianCalendar[time=<span class="hljs-number">1744207975651</span>,areFieldsSet=<span class="hljs-keyword">true</span>,areAllFieldsSet=<span class="hljs-keyword">true</span>,lenient=<span class="hljs-keyword">true</span>,zone=sun.util.calendar.ZoneInfo[id=<span class="hljs-string">"GMT+08:00"</span>,offset=<span class="hljs-number">28800000</span>,dstSavings=<span class="hljs-number">0</span>,useDaylight=<span class="hljs-keyword">false</span>,transitions=<span class="hljs-number">0</span>,lastRule=<span class="hljs-keyword">null</span>],firstDayOfWeek=<span class="hljs-number">1</span>,minimalDaysInFirstWeek=<span class="hljs-number">1</span>,ERA=<span class="hljs-number">1</span>,YEAR=<span class="hljs-number">2025</span>,MONTH=<span class="hljs-number">3</span>,WEEK_OF_YEAR=<span class="hljs-number">15</span>,WEEK_OF_MONTH=<span class="hljs-number">2</span>,DAY_OF_MONTH=<span class="hljs-number">9</span>,DAY_OF_YEAR=<span class="hljs-number">99</span>,DAY_OF_WEEK=<span class="hljs-number">4</span>,DAY_OF_WEEK_IN_MONTH=<span class="hljs-number">2</span>,AM_PM=<span class="hljs-number">1</span>,HOUR=<span class="hljs-number">10</span>,HOUR_OF_DAY=<span class="hljs-number">22</span>,MINUTE=<span class="hljs-number">12</span>,SECOND=<span class="hljs-number">55</span>,MILLISECOND=<span class="hljs-number">651</span>,ZONE_OFFSET=<span class="hljs-number">28800000</span>,DST_OFFSET=<span class="hljs-number">0</span>]<br></code></pre></td></tr></tbody></table></figure><h3 id="获取日历中某部分（年份-月份-星期等）"><a href="#获取日历中某部分（年份-月份-星期等）" class="headerlink" title="获取日历中某部分（年份/月份/星期等）"></a>获取日历中某部分（年份/月份/星期等）</h3><table><thead><tr><th>类型</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>Calendar.YEAR</td><td>获取年份</td><td></td></tr><tr><td>Calendar.MONTH</td><td>获取月份</td><td>0表示1月，1表示2月，…，11表示12月</td></tr><tr><td>Calendar.DAY_OF_MONTH</td><td>获取本月的第几天</td><td></td></tr><tr><td>Calendar.DAY_OF_YEAR</td><td>获取本年的第几天</td><td></td></tr><tr><td>Calendar.DAY_OF_WEEK</td><td>获取星期几</td><td>1表示星期日，…，7表示星期六</td></tr><tr><td>Calendar.HOUR_OF_DAY</td><td>小时，24小时制</td><td></td></tr><tr><td>Calendar.HOUR</td><td>小时，12小时制</td><td></td></tr><tr><td>Calendar.MINUTE</td><td>获取分钟</td><td></td></tr><tr><td>Calendar.SECOND</td><td>获取秒</td><td></td></tr><tr><td>Calendar.MILLISECOND</td><td>获取毫秒</td><td></td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar instance = Calendar.getInstance();<br>System.out.println(<span class="hljs-string">"year: "</span> + instance.get(Calendar.YEAR));<span class="hljs-comment">//2025</span><br>System.out.println(<span class="hljs-string">"month: "</span> + instance.get(Calendar.MONTH));<span class="hljs-comment">//3: 四月</span><br>System.out.println(<span class="hljs-string">"the day of the month: "</span> + instance.get(Calendar.DAY_OF_MONTH));<span class="hljs-comment">//9</span><br>System.out.println(<span class="hljs-string">"the day number within the current year: "</span> + instance.get(Calendar.DAY_OF_YEAR));<span class="hljs-comment">//99</span><br>System.out.println(<span class="hljs-string">"the day of the week:"</span> + instance.get(Calendar.DAY_OF_WEEK));<span class="hljs-comment">//4: 星期三</span><br><span class="hljs-comment">//the hour of the day. HOUR_OF_DAY is used for the 24-hour clock</span><br>System.out.println(<span class="hljs-string">"the hour of the day. 24-hour clock: "</span> + instance.get(Calendar.HOUR_OF_DAY));<span class="hljs-comment">//22</span><br><span class="hljs-comment">//the hour of the morning or afternoon. HOUR is used for the 12-hour clock (0 - 11). Noon and midnight are represented by 0, not by 12.</span><br>System.out.println(<span class="hljs-string">"the hour of the day. 12-hour clock: "</span> + instance.get(Calendar.HOUR));<span class="hljs-comment">//10</span><br>System.out.println(<span class="hljs-string">"minute: "</span> + instance.get(Calendar.MINUTE));<span class="hljs-comment">//39</span><br>System.out.println(<span class="hljs-string">"second: "</span> + instance.get(Calendar.SECOND));<span class="hljs-comment">//35</span><br>System.out.println(<span class="hljs-string">"millsecond: "</span> + instance.get(Calendar.MILLISECOND));<span class="hljs-comment">//711</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取自1970年1月1日0时0分0秒到系统当前时间的总毫秒数。</span><br>System.out.println(System.currentTimeMillis());<span class="hljs-comment">//1744207198604</span><br></code></pre></td></tr></tbody></table></figure><h3 id="设置日历-set方法"><a href="#设置日历-set方法" class="headerlink" title="设置日历 set方法"></a>设置日历 set方法</h3><h4 id="calendar-set-Calendar-YEAR-2023"><a href="#calendar-set-Calendar-YEAR-2023" class="headerlink" title="calendar.set(Calendar.YEAR, 2023)"></a>calendar.set(Calendar.YEAR, 2023)</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar calendar2 = Calendar.getInstance();<br>calendar2.set(Calendar.YEAR, <span class="hljs-number">2023</span>);<br>System.out.println(calendar2.get(Calendar.YEAR) + <span class="hljs-string">"年"</span> + (calendar2.get(Calendar.MONTH) + <span class="hljs-number">1</span>) + <span class="hljs-string">"月"</span> + calendar2.get(Calendar.DAY_OF_MONTH) + <span class="hljs-string">"日"</span>); <span class="hljs-comment">//2023年4月9日</span><br></code></pre></td></tr></tbody></table></figure><h4 id="calendar-set-2015-Calendar-SEPTEMBER-8"><a href="#calendar-set-2015-Calendar-SEPTEMBER-8" class="headerlink" title="calendar.set(2015, Calendar.SEPTEMBER,8)"></a>calendar.set(2015, Calendar.SEPTEMBER,8)</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar calendar2 = Calendar.getInstance();<br>calendar2.set(<span class="hljs-number">2015</span>, Calendar.JULY, <span class="hljs-number">26</span>, <span class="hljs-number">8</span>, <span class="hljs-number">30</span>, <span class="hljs-number">0</span>);<br>System.out.println(calendar2);<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2015</span>年<span class="hljs-number">7</span>月<span class="hljs-number">26</span>日<br></code></pre></td></tr></tbody></table></figure><p>小点：最好用提供的常量</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250409224631266.png" alt="image-20250409224631266"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250409224610367.png" alt="image-20250409224610367"></p><h3 id="日历中各部分加减-add方法"><a href="#日历中各部分加减-add方法" class="headerlink" title="日历中各部分加减 add方法"></a>日历中各部分加减 add方法</h3><h4 id="calendar-add-Calendar-YEAR-1"><a href="#calendar-add-Calendar-YEAR-1" class="headerlink" title="calendar.add(Calendar.YEAR, 1)"></a>calendar.add(Calendar.YEAR, 1)</h4><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Calendar calendar2 = Calendar.getInstance();<br>calendar2.<span class="hljs-builtin-name">add</span>(Calendar.YEAR, 1);<br>System.out.println(calendar2.<span class="hljs-builtin-name">get</span>(Calendar.YEAR) + <span class="hljs-string">"年"</span> + (calendar2.<span class="hljs-builtin-name">get</span>(Calendar.MONTH) + 1) + <span class="hljs-string">"月"</span> + calendar2.<span class="hljs-builtin-name">get</span>(Calendar.DAY_OF_MONTH) + <span class="hljs-string">"日"</span>);<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2026</span>年<span class="hljs-number">4</span>月<span class="hljs-number">9</span>日<br></code></pre></td></tr></tbody></table></figure><h3 id="让日历关联具体时间-setTime方法"><a href="#让日历关联具体时间-setTime方法" class="headerlink" title="让日历关联具体时间 setTime方法"></a>让日历关联具体时间 setTime方法</h3><h4 id="calendar-setTime-new-Date"><a href="#calendar-setTime-new-Date" class="headerlink" title="calendar.setTime(new Date())"></a>calendar.setTime(new Date())</h4><p><strong><em>//年份偏移： Date 构造方法中的年份参数是基于 1900 的偏移量。例如，传入 2015 实际表示 1900 + 2015 = 3915 年。</em></strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar calendar2 = Calendar.getInstance();<br><br>calendar2.setTime(<span class="hljs-keyword">new</span> Date(<span class="hljs-number">2015</span>, Calendar.JULY, <span class="hljs-number">15</span>));<br>System.out.println(calendar2.get(Calendar.YEAR) + <span class="hljs-string">"年"</span> + (calendar2.get(Calendar.MONTH) + <span class="hljs-number">1</span>) + <span class="hljs-string">"月"</span> + calendar2.get(Calendar.DAY_OF_MONTH) + <span class="hljs-string">"日"</span>); <span class="hljs-comment">//3915年7月15日</span><br></code></pre></td></tr></tbody></table></figure><h3 id="获取日历的具体时间-getTime方法"><a href="#获取日历的具体时间-getTime方法" class="headerlink" title="获取日历的具体时间 getTime方法"></a>获取日历的具体时间 getTime方法</h3><h4 id="Date-time-calendar-getTime"><a href="#Date-time-calendar-getTime" class="headerlink" title="Date time = calendar.getTime();"></a>Date time = calendar.getTime();</h4><p>IDEA小技巧：</p><p>自动提示忽略大小写，取消勾选Match Case checkbox</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250409215455705.png" alt="image-20250409215455705"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/posts/6c92115f.html"/>
    <url>/posts/6c92115f.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过如下代码，来分析几个开发原则（OCP开闭原则和DIP依赖倒置原则）</p><h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241120221417503.png" alt="image-20241120221417503"></p><h2 id="1-Test类"><a href="#1-Test类" class="headerlink" title="1.Test类"></a>1.Test类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.spring6.client;<br><br><span class="hljs-keyword">import</span> com.xu.spring6.web.UserAction;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        UserAction userAction = <span class="hljs-keyword">new</span> UserAction();<br>        userAction.deleteUser();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="2-UserAction类"><a href="#2-UserAction类" class="headerlink" title="2.UserAction类"></a>2.UserAction类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.spring6.web;<br><br><span class="hljs-keyword">import</span> com.xu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> com.xu.spring6.service.impl.UserServiceImpl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserAction</span> </span>{<br>    <span class="hljs-keyword">private</span> UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span></span>{<br>        userService.deleteUser();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="3-UserService接口和UserServiceImpl实现类"><a href="#3-UserService接口和UserServiceImpl实现类" class="headerlink" title="3.UserService接口和UserServiceImpl实现类"></a>3.UserService接口和UserServiceImpl实现类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.spring6.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span></span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.spring6.service.impl;<br><br><span class="hljs-keyword">import</span> com.xu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> com.xu.spring6.dao.impl.UserDaoImplForMySQL;<br><span class="hljs-keyword">import</span> com.xu.spring6.service.UserService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{<br>    <span class="hljs-keyword">private</span> UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImplForMySQL();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span> </span>{<br>        userDao.deleteUser();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="4-UserDao接口和UserDaoImplForMySQL实现类"><a href="#4-UserDao接口和UserDaoImplForMySQL实现类" class="headerlink" title="4.UserDao接口和UserDaoImplForMySQL实现类"></a>4.UserDao接口和UserDaoImplForMySQL实现类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.spring6.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span></span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.spring6.dao.impl;<br><br><span class="hljs-keyword">import</span> com.xu.spring6.dao.UserDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImplForMySQL</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>{<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"正在删除用户信息~"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="分析上述代码存在问题"><a href="#分析上述代码存在问题" class="headerlink" title="分析上述代码存在问题"></a>分析上述代码存在问题</h1><p>UserAction类中用到了private UserService userService = <strong>new UserServiceImpl();</strong></p><p>UserServiceImpl实现类中用到了private UserDao userDao = <strong>new UserDaoImplForMySQL();</strong></p><p>如果现在，我想从MySQL（UserDaoImplForMySQL）切换到Oracle（UserDaoImplForOracle），那么我就必须修改UserServiceImpl类的代码，将声明成员变量userDao的代码改为如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImplForOracle();<br></code></pre></td></tr></tbody></table></figure><p>这个就违反了OCP开闭原则和DIP依赖倒置原则。</p><h1 id="OCP开闭原则"><a href="#OCP开闭原则" class="headerlink" title="OCP开闭原则"></a>OCP开闭原则</h1><p>开闭原则(Open-Closed Principle)：简称OCP，在软件开发过程中应当对扩展开放，对修改关闭。也就是说，如果在进行功能扩展的时候，添加额外的类是没问题的，但因为功能扩展而修改之前运行正常的程序，这是不推荐的。因为一旦修改之前运行正常的程序，就会导致项目整体要进行全方位的重新测试。这是相当繁琐的过程。导致这个问题的主要原因是：代码和代码之间的耦合度太高。如下图所示：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241120223531143.png" alt="image-20241120223531143"></p><p><strong>上层</strong>是依赖<strong>下层</strong>的。UserAction依赖UserServiceImpl，而UserServiceImpl依赖UserDaoImplForMySQL，这样就会导致<strong>下面只要改动</strong>，<strong>上面必然会受牵连（跟着也会改）</strong>，所谓牵一发而动全身。这个也同时违背了另一个开发原则：依赖倒置原则。</p><h1 id="DIP依赖倒置原则"><a href="#DIP依赖倒置原则" class="headerlink" title="DIP依赖倒置原则"></a>DIP依赖倒置原则</h1><p>依赖倒置原则(Dependence Inversion Principle)：简称DIP，主要倡导<strong>面向抽象编程，面向接口编程，不要面向具体编程</strong>，让<strong>上层</strong>不再依赖<strong>下层</strong>，下面改动了，上面的代码不会受到牵连。这样可以大大降低程序的耦合度，耦合度低了，扩展力就强了，同时代码复用性也会增强。（<strong>软件七大开发原则都是在为解耦合服务</strong>）</p><p>前面有问题的代码没有完全实现面向接口编程，因为代码中还是使用了接口的具体实现类。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241120223937975.png" alt="image-20241120223937975"></p><p>下面这种才算是完全的面向接口编程</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241120224101643.png" alt="image-20241120224101643"></p>]]></content>
    
    
    <categories>
      
      <category>Spring6</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Injection</title>
    <link href="/posts/13006ff7.html"/>
    <url>/posts/13006ff7.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-IoC-控制反转"><a href="#1-IoC-控制反转" class="headerlink" title="1 IoC 控制反转"></a>1 IoC 控制反转</h1><ul><li>控制反转是一种思想。</li><li>控制反转，反转的是什么？<ul><li>将对象的创建权交出去，交给第三方容器负责。</li><li>将对象和对象之间关系的维护权交出去，交给第三方容器负责。</li></ul></li><li>控制反转这种思想如何实现呢？<ul><li>DI（Dependency Injection）：依赖注入</li></ul></li></ul><h1 id="2-依赖注入"><a href="#2-依赖注入" class="headerlink" title="2 依赖注入"></a>2 依赖注入</h1><blockquote><p>Spring是通过依赖注入的方式来完成Bean管理的。<br>Bean管理指的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）。</p></blockquote><p>依赖注入：</p><ul><li><strong>依赖</strong>指的是对象和对象之间的关联关系。</li><li><strong>注入</strong>指的是一种数据传递行为，通过注入行为来让对象和对象产生关系。</li></ul><p>依赖注入常见的实现方式包括两种：</p><ul><li>第一种：set注入</li><li>第二种：构造注入</li></ul><h2 id="2-1-set注入"><a href="#2-1-set注入" class="headerlink" title="2.1 set注入"></a>2.1 set注入</h2><p>set注入是基于set方法实现的，底层会通过反射机制调用属性对应的set方法然后给属性赋值。这种方式要求必须对外提供属性的set方法。</p><h3 id="通过一个例子来学习set注入"><a href="#通过一个例子来学习set注入" class="headerlink" title="通过一个例子来学习set注入"></a>通过一个例子来学习set注入</h3><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring6-002-dependency-injection<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring context依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--junit--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--log4j2的依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.20.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.20.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>UserService</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.service;<br><br><span class="hljs-keyword">import</span> com.xu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.xu.dao.VipDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>{<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">private</span> VipDao vipDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>{<br>        userDao.save();<br>        vipDao.save();<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>{<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setVipDao</span><span class="hljs-params">(VipDao vipDao)</span> </span>{<br>        <span class="hljs-keyword">this</span>.vipDao = vipDao;<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p><strong>UserDao</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.dao;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(UserDao.class);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>{<br>        LOGGER.info(<span class="hljs-string">"UserDao正在保存用户信息"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>VipDao</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.dao;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VipDao</span> </span>{<br>    <span class="hljs-keyword">private</span> Logger LOGGER = LoggerFactory.getLogger(VipDao.class);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>{<br>        LOGGER.info(<span class="hljs-string">"VipDao正在保存用户信息"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>log4j2.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"INFO"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"log"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"log"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"SYSTEM_OUT"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">"%d{yyyy-MM-dd HH:mm:ss SSS} [%t] %-3level %logger{1024} - %msg%n"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>spring.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.UserDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vipDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.VipDao"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.service.UserService"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"userDao"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"vipDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"vipDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.test;<br><br><span class="hljs-keyword">import</span> com.xu.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringTest</span> </span>{<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIoC</span><span class="hljs-params">()</span> </span>{<br>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring.xml"</span>);<br>        UserService userService = applicationContext.getBean(<span class="hljs-string">"userService"</span>, UserService.class);<br>        userService.save();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>运行结果：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241125212340528.png" alt="image-20241125212340528"></p><h3 id="原理是什么？"><a href="#原理是什么？" class="headerlink" title="原理是什么？"></a>原理是什么？</h3><p><strong>set注入的核心实现原理：通过反射机制调用set方法来给属性赋值，让两个对象之间产生关系。</strong></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241125214358725.png" alt="image-20241125214358725"></p><p><strong>举例验证</strong>：</p><p>1.将成员属性的属性名改为userhaha和viphaha，然后保持set方法的方法名不变，测试这种情况下，程序应该可以正常运行。不会报错。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.service;<br><br><span class="hljs-keyword">import</span> com.xu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.xu.dao.VipDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>{<br>    <span class="hljs-keyword">private</span> UserDao userhaha;<br>    <span class="hljs-keyword">private</span> VipDao viphaha;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>{<br>        userhaha.save();<br>        viphaha.save();<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>{<br>        <span class="hljs-keyword">this</span>.userhaha = userDao;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setVipDao</span><span class="hljs-params">(VipDao vipDao)</span> </span>{<br>        <span class="hljs-keyword">this</span>.viphaha = vipDao;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.UserDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vipDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.VipDao"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.service.UserService"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"userDao"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"vipDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"vipDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>运行结果：成功</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241125215109108.png" alt="image-20241125215109108"></p><p>2.保持成员属性的属性名不变，将set方法的方法名改为setUserDaoHaHa和setVipDaoHaHa，测试这种情况下，程序应该会报错。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.service;<br><br><span class="hljs-keyword">import</span> com.xu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.xu.dao.VipDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>{<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">private</span> VipDao vipDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>{<br>        userDao.save();<br>        vipDao.save();<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDaoHaHa</span><span class="hljs-params">(UserDao userDao)</span> </span>{<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setVipDaoHaHa</span><span class="hljs-params">(VipDao vipDao)</span> </span>{<br>        <span class="hljs-keyword">this</span>.vipDao = vipDao;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>如果property的name还是传的userDao和vipDao就会报错</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.UserDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vipDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.VipDao"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.service.UserService"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"userDao"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"vipDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"vipDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241125215334833.png" alt="image-20241125215334833"></p><p>将property的name改为userDaoHaHa和vipDaoHaHa就成功了</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.UserDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vipDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.VipDao"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.service.UserService"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"userDaoHaHa"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"userDao"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"vipDaoHaHa"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"vipDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241125215449615.png" alt="image-20241125215449615"></p><h2 id="2-2-构造注入"><a href="#2-2-构造注入" class="headerlink" title="2.2 构造注入"></a>2.2 构造注入</h2><p>原理：通过调用构造方法来给属性赋值。</p><h3 id="使用下标注入"><a href="#使用下标注入" class="headerlink" title="使用下标注入"></a>使用下标注入</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.dao;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderDao</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(OrderDao.class);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">orderService</span><span class="hljs-params">()</span> </span>{<br>        LOGGER.info(<span class="hljs-string">"服务已预约~"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.service;<br><br><span class="hljs-keyword">import</span> com.xu.dao.OrderDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderService</span> </span>{<br>    <span class="hljs-keyword">private</span> OrderDao orderDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrderService</span><span class="hljs-params">(OrderDao orderDao)</span> </span>{<br>        <span class="hljs-keyword">this</span>.orderDao = orderDao;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">order</span><span class="hljs-params">()</span> </span>{<br>        orderDao.orderService();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"orderDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.OrderDao"</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"orderService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.service.OrderService"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--index="0"表示构造方法的第一个参数，将orderDao对象传递给构造方法的第一个参数。--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"orderDao"</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果有多个构造方法参数，则继续加index="1" --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;constructor-arg index="1" ref="orderDao"/&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConstructorDI</span><span class="hljs-params">()</span> </span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring.xml"</span>);<br>    OrderService orderService = applicationContext.getBean(<span class="hljs-string">"orderService"</span>, OrderService.class);<br>    orderService.order();<br>}<br></code></pre></td></tr></tbody></table></figure><p>运行结果如下：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241125220935567.png" alt="image-20241125220935567"></p><h3 id="使用构造方法参数名注入"><a href="#使用构造方法参数名注入" class="headerlink" title="使用构造方法参数名注入"></a>使用构造方法参数名注入</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.service;<br><br><span class="hljs-keyword">import</span> com.xu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.xu.dao.VipDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService2</span> </span>{<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">private</span> VipDao vipDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserService2</span><span class="hljs-params">(UserDao userDao, VipDao vipDao)</span> </span>{<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>        <span class="hljs-keyword">this</span>.vipDao = vipDao;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>{<br>        userDao.save();<br>        vipDao.save();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConstructorDIByName</span><span class="hljs-params">()</span> </span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);<br>    UserService2 userService2 = applicationContext.getBean(<span class="hljs-string">"userService"</span>, UserService2.class);<br>    userService2.save();<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.UserDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vipDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.dao.VipDao"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.service.UserService2"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"userDao"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"vipDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"vipDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241125221827573.png" alt="image-20241125221827573"></p><h3 id="即不指定下标，也不指定参数名，让Spring自行判断"><a href="#即不指定下标，也不指定参数名，让Spring自行判断" class="headerlink" title="即不指定下标，也不指定参数名，让Spring自行判断"></a>即不指定下标，也不指定参数名，让Spring自行判断</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userServiceBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.service.UserService2"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"userDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"vipDao"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConstructorDIWithNothing</span><span class="hljs-params">()</span> </span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);<br>    UserService2 userService = applicationContext.getBean(<span class="hljs-string">"userServiceBean"</span>, UserService2.class);<br>    userService.save();<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241125222149379.png" alt="image-20241125222149379"></p><h1 id="3-set注入专题"><a href="#3-set注入专题" class="headerlink" title="3 set注入专题"></a>3 set注入专题</h1><h2 id="3-1-注入外部Bean"><a href="#3-1-注入外部Bean" class="headerlink" title="3.1 注入外部Bean"></a>3.1 注入外部Bean</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDaoBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.dao.UserDao"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userServiceBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.service.UserService"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"userDaoBean"</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 这个就叫做注入外部bean --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>外部Bean的特点：bean定义在外面，在property标签中使用ref属性进行注入。这种方式比较常用。</p><h2 id="3-2-注入内部Bean"><a href="#3-2-注入内部Bean" class="headerlink" title="3.2 注入内部Bean"></a>3.2 注入内部Bean</h2><p>内部Bean的方式：在bean标签中嵌套bean标签。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userServiceBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.service.UserService"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"userDao"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.dao.UserDao"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="3-3-注入简单类型"><a href="#3-3-注入简单类型" class="headerlink" title="3.3 注入简单类型"></a>3.3 注入简单类型</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"User{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>第二步：编写spring配置文件：spring-simple-di.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.entity.User"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"xu"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"age"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"22"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>第三步：编写测试程序</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSimpleValue</span><span class="hljs-params">()</span> </span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring-simple-di.xml"</span>);<br>    User user = applicationContext.getBean(<span class="hljs-string">"user"</span>, User.class);<br>    System.out.println(user);<br>}<br></code></pre></td></tr></tbody></table></figure><p>第四步：运行测试程序<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241125222754403.png" alt="image-20241125222754403"></p><h2 id="3-4-注入数组"><a href="#3-4-注入数组" class="headerlink" title="3.4 注入数组"></a>3.4 注入数组</h2><p><strong>当数组中的元素是简单类型</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">private</span> String[] favariteFoods;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFavariteFoods</span><span class="hljs-params">(String[] favariteFoods)</span> </span>{<br>        <span class="hljs-keyword">this</span>.favariteFoods = favariteFoods;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person{"</span> +<br>                <span class="hljs-string">"favariteFoods="</span> + Arrays.toString(favariteFoods) +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"person"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.Person"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"favariteFoods"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>酸菜鱼<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>凉皮<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testArraySimple</span><span class="hljs-params">()</span> </span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring.xml"</span>);<br>    Person person = applicationContext.getBean(<span class="hljs-string">"person"</span>, Person.class);<br>    System.out.println(person);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Person{favariteFoods=[酸菜鱼, 凉皮]}<br></code></pre></td></tr></tbody></table></figure><p><strong>当数组中的元素是非简单类型：一个订单中包含多个商品。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Goods</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Goods</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Goods</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Goods{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span> </span>{<br>    <span class="hljs-keyword">private</span> Goods[] goods;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Order</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Order</span><span class="hljs-params">(Goods[] goods)</span> </span>{<br>        <span class="hljs-keyword">this</span>.goods = goods;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGoods</span><span class="hljs-params">(Goods[] goods)</span> </span>{<br>        <span class="hljs-keyword">this</span>.goods = goods;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Order{"</span> +<br>                <span class="hljs-string">"goods="</span> + Arrays.toString(goods) +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"goods1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.Goods"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"西瓜"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"goods2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.Goods"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"苹果"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"order"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.Order"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"goods"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--元素是非简单类型，使用ref标签--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">"goods1"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">"goods2"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>测试程序：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testArray</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring2.xml"</span>);<br>    Order order = applicationContext.getBean(<span class="hljs-string">"order"</span>, Order.class);<br>    System.out.println(order);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Order{goods=[Goods{name=<span class="hljs-string">'西瓜'</span>}, Goods{name=<span class="hljs-string">'苹果'</span>}]}<br></code></pre></td></tr></tbody></table></figure><p><strong>要点：</strong></p><ul><li><strong>如果数组中是简单类型，使用value标签。</strong></li><li><strong>如果数组中是非简单类型，使用ref标签。</strong></li></ul><h2 id="3-5-注入List集合"><a href="#3-5-注入List集合" class="headerlink" title="3.5 注入List集合"></a>3.5 注入List集合</h2><p>List集合：有序可重复</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; names;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNames</span><span class="hljs-params">(List&lt;String&gt; names)</span> </span>{<br>        <span class="hljs-keyword">this</span>.names = names;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"People{"</span> +<br>                <span class="hljs-string">"names="</span> + names +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"peopleBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.People"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"names"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>xu<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hilda<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>halla<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCollection</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring-list.xml"</span>);<br>    People peopleBean = applicationContext.getBean(<span class="hljs-string">"peopleBean"</span>, People.class);<br>    System.out.println(peopleBean);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">People{names=[xu, hilda, halla]}<br></code></pre></td></tr></tbody></table></figure><p><strong>注意：注入List集合的时候使用list标签，如果List集合中是简单类型使用value标签，反之使用ref标签。</strong></p><h2 id="3-7-注入Set集合"><a href="#3-7-注入Set集合" class="headerlink" title="3.7 注入Set集合"></a>3.7 注入Set集合</h2><p>Set集合：无序不可重复</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; names;<br><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; phones;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPhones</span><span class="hljs-params">(Set&lt;String&gt; phones)</span> </span>{<br>        <span class="hljs-keyword">this</span>.phones = phones;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNames</span><span class="hljs-params">(List&lt;String&gt; names)</span> </span>{<br>        <span class="hljs-keyword">this</span>.names = names;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"People{"</span> +<br>                <span class="hljs-string">"names="</span> + names +<br>                <span class="hljs-string">", phones="</span> + phones +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"peopleBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.People"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"names"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>xu<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hilda<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>halla<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"phones"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--非简单类型可以使用ref，简单类型使用value--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1319336***1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1319336***2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1319336***3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSet</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring-set.xml"</span>);<br>    People peopleBean = applicationContext.getBean(<span class="hljs-string">"peopleBean"</span>, People.class);<br>    System.out.println(peopleBean);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">People{names=[xu, hilda, halla], phones=[<span class="hljs-number">1319336</span>***<span class="hljs-number">1</span>, <span class="hljs-number">1319336</span>***<span class="hljs-number">2</span>, <span class="hljs-number">1319336</span>***<span class="hljs-number">3</span>]}<br></code></pre></td></tr></tbody></table></figure><p><strong>要点：</strong></p><ul><li><strong>使用<set>标签</set></strong></li><li><strong>set集合中元素是简单类型的使用value标签，反之使用ref标签。</strong></li></ul><h2 id="3-8-注入Map集合"><a href="#3-8-注入Map集合" class="headerlink" title="3.8 注入Map集合"></a>3.8 注入Map集合</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; names;<br><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; phones;<br><br>    <span class="hljs-keyword">private</span> Map&lt;Integer, String&gt; addrs;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddrs</span><span class="hljs-params">(Map&lt;Integer, String&gt; addrs)</span> </span>{<br>        <span class="hljs-keyword">this</span>.addrs = addrs;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPhones</span><span class="hljs-params">(Set&lt;String&gt; phones)</span> </span>{<br>        <span class="hljs-keyword">this</span>.phones = phones;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNames</span><span class="hljs-params">(List&lt;String&gt; names)</span> </span>{<br>        <span class="hljs-keyword">this</span>.names = names;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"People{"</span> +<br>                <span class="hljs-string">"names="</span> + names +<br>                <span class="hljs-string">", phones="</span> + phones +<br>                <span class="hljs-string">", addrs="</span> + addrs +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"peopleBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.People"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"names"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>xu<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hilda<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>halla<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"phones"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--非简单类型可以使用ref，简单类型使用value--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1319336***1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1319336***2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1319336***3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"addrs"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--如果key不是简单类型，使用 key-ref 属性--&gt;</span><br>                <span class="hljs-comment">&lt;!--如果value不是简单类型，使用 value-ref 属性--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"北京大兴区"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"上海浦东区"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"深圳宝安区"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMap</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring-map.xml"</span>);<br>    People peopleBean = applicationContext.getBean(<span class="hljs-string">"peopleBean"</span>, People.class);<br>    System.out.println(peopleBean);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">People{names=[xu, hilda, halla], phones=[<span class="hljs-number">1319336</span>***<span class="hljs-number">1</span>, <span class="hljs-number">1319336</span>***<span class="hljs-number">2</span>, <span class="hljs-number">1319336</span>***<span class="hljs-number">3</span>], addrs={<span class="hljs-number">1</span>=北京大兴区, <span class="hljs-number">2</span>=上海浦东区, <span class="hljs-number">3</span>=深圳宝安区}}<br></code></pre></td></tr></tbody></table></figure><p><strong>要点：</strong></p><ul><li><strong>使用<map>标签</map></strong></li><li><strong>如果key是简单类型，使用 key 属性，反之使用 key-ref 属性。</strong></li><li><strong>如果value是简单类型，使用 value 属性，反之使用 value-ref 属性。</strong></li></ul><h2 id="3-9-注入Properties"><a href="#3-9-注入Properties" class="headerlink" title="3.9 注入Properties"></a>3.9 注入Properties</h2><p>java.util.Properties继承java.util.Hashtable，所以Properties也是一个Map集合。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; names;<br><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; phones;<br><br>    <span class="hljs-keyword">private</span> Map&lt;Integer, String&gt; addrs;<br><br>    <span class="hljs-keyword">private</span> Properties properties;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>{<br>        <span class="hljs-keyword">this</span>.properties = properties;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddrs</span><span class="hljs-params">(Map&lt;Integer, String&gt; addrs)</span> </span>{<br>        <span class="hljs-keyword">this</span>.addrs = addrs;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPhones</span><span class="hljs-params">(Set&lt;String&gt; phones)</span> </span>{<br>        <span class="hljs-keyword">this</span>.phones = phones;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNames</span><span class="hljs-params">(List&lt;String&gt; names)</span> </span>{<br>        <span class="hljs-keyword">this</span>.names = names;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"People{"</span> +<br>                <span class="hljs-string">"names="</span> + names +<br>                <span class="hljs-string">", phones="</span> + phones +<br>                <span class="hljs-string">", addrs="</span> + addrs +<br>                <span class="hljs-string">", properties="</span> + properties +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"peopleBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.People"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"names"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>xu<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hilda<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>halla<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"phones"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--非简单类型可以使用ref，简单类型使用value--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1319336***1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1319336***2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1319336***3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"addrs"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--如果key不是简单类型，使用 key-ref 属性--&gt;</span><br>                <span class="hljs-comment">&lt;!--如果value不是简单类型，使用 value-ref 属性--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"北京大兴区"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"上海浦东区"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"深圳宝安区"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"properties"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"driver"</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"url"</span>&gt;</span>jdbc:mysql://localhost:3306/spring<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"username"</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"password"</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testProperties</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring-properties.xml"</span>);<br>    People peopleBean = applicationContext.getBean(<span class="hljs-string">"peopleBean"</span>, People.class);<br>    System.out.println(peopleBean);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">People{names=[xu, hilda, halla], phones=[<span class="hljs-number">1319336</span>***<span class="hljs-number">1</span>, <span class="hljs-number">1319336</span>***<span class="hljs-number">2</span>, <span class="hljs-number">1319336</span>***<span class="hljs-number">3</span>], addrs={<span class="hljs-number">1</span>=北京大兴区, <span class="hljs-number">2</span>=上海浦东区, <span class="hljs-number">3</span>=深圳宝安区}, properties={password=<span class="hljs-number">123456</span>, driver=com.mysql.cj.jdbc.Driver, url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/spring, username=root}}</span><br></code></pre></td></tr></tbody></table></figure><p><strong>要点：</strong></p><ul><li><strong>使用<props>标签嵌套<prop>标签完成。</prop></props></strong></li></ul><h2 id="3-10-注入null和空字符串"><a href="#3-10-注入null和空字符串" class="headerlink" title="3.10 注入null和空字符串"></a>3.10 注入null和空字符串</h2><p>注入空字符串使用：<value> 或者 value=””<br>注入null使用：<null> 或者 不为该属性赋值</null></value></p><ul><li>我们先来看一下，怎么注入空字符串。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vip</span> </span>{<br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>{<br>        <span class="hljs-keyword">this</span>.email = email;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Vip{"</span> +<br>                <span class="hljs-string">"email='"</span> + email + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vipBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.Vip"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--空串的第一种方式--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;property name="email" value=""/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--空串的第二种方式--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testNull</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring.xml"</span>);<br>    Vip vipBean = applicationContext.getBean(<span class="hljs-string">"vipBean"</span>, Vip.class);<br>    System.out.println(vipBean);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：</p><p><img src="C:\Users\winner\AppData\Roaming\Typora\typora-user-images\image-20250104194607049.png" alt="image-20250104194607049"></p><ul><li>怎么注入null呢？</li></ul><p>第一种方式：不给属性赋值</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vipBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.Vip"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>执行结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250104195119865.png" alt="image-20250104195119865"></p><p>第二种方式：使用<null></null></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vipBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.Vip"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>执行结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250104195222011.png" alt="image-20250104195222011"></p><h2 id="3-11-注入的值中含有特殊符号"><a href="#3-11-注入的值中含有特殊符号" class="headerlink" title="3.11 注入的值中含有特殊符号"></a>3.11 注入的值中含有特殊符号</h2><p>XML中有5个特殊字符，分别是：&lt;、&gt;、’、”、&amp;<br>以上5个特殊符号在XML中会被特殊对待，会被当做XML语法的一部分进行解析，如果这些特殊符号直接出现在注入的字符串当中，会报错。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250104195330160.png" alt="image-20250104195330160"></p><p>解决方案包括两种：</p><ul><li>第一种：特殊符号使用转义字符代替。</li><li>第二种：将含有特殊符号的字符串放到：<!--[CDATA[]]--> 当中。因为放在CDATA区中的数据不会被XML文件解析器解析。</li></ul><p>5个特殊字符对应的转义字符分别是：</p><table><thead><tr><th><strong>特殊字符</strong></th><th><strong>转义字符</strong></th></tr></thead><tbody><tr><td>&gt;</td><td>&gt;</td></tr><tr><td>&lt;</td><td>&lt;</td></tr><tr><td>‘</td><td>'</td></tr><tr><td>“</td><td>"</td></tr><tr><td>&amp;</td><td>&amp;</td></tr></tbody></table><p>先使用转义字符来代替：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Math</span> </span>{<br>    <span class="hljs-keyword">private</span> String result;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setResult</span><span class="hljs-params">(String result)</span> </span>{<br>        <span class="hljs-keyword">this</span>.result = result;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Math{"</span> +<br>                <span class="hljs-string">"result='"</span> + result + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mathBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.Math"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"result"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2 <span class="hljs-symbol">&amp;lt;</span> 3"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSpecial</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring.xml"</span>);<br>    com.hilda.Math mathBean = applicationContext.getBean(<span class="hljs-string">"mathBean"</span>, Math.class);<br>    System.out.println(mathBean);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250104195719321.png" alt="image-20250104195719321"></p><p>我们再来使用CDATA方式：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mathBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.Math"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;property name="result" value="2 &amp;lt; 3"/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"result"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--只能使用value标签--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[3 &lt; 6]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>注意：使用CDATA时，不能使用value属性，只能使用value标签。</strong><br>执行结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250104195820214.png" alt="image-20250104195820214"></p><h1 id="4-p命名空间注入"><a href="#4-p命名空间注入" class="headerlink" title="4 p命名空间注入"></a>4 p命名空间注入</h1><p>目的：简化配置。<br>使用p命名空间注入的前提条件包括两个：</p><ul><li><p>第一：在XML头部信息中添加p命名空间的配置信息：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:p="http://www.springframework.org/schema/p"<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li>第二：p命名空间注入是基于setter方法的，所以需要对应的属性提供setter方法。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Customer{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">"http://www.springframework.org/schema/p"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"customerBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.Customer"</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">"zhangsan"</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">"20"</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testP</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring.xml"</span>);<br>    Customer customerBean = applicationContext.getBean(<span class="hljs-string">"customerBean"</span>, Customer.class);<br>    System.out.println(customerBean);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665215638858-c5ae8aef-43ec-455d-90a3-ac3f97c92746.png#averageHue=%238d7c66&amp;clientId=ufc7e21e2-2cbb-4&amp;from=paste&amp;height=118&amp;id=u4aeacd2a&amp;originHeight=118&amp;originWidth=473&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11448&amp;status=done&amp;style=shadow&amp;taskId=u08f3e033-d49d-44e1-b717-e751097bdec&amp;title=&amp;width=473" alt="image.png"><br>把setter方法去掉：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665215713205-fcebda06-c4bb-486b-a2d7-6a238088625b.png#averageHue=%23352c2b&amp;clientId=ufc7e21e2-2cbb-4&amp;from=paste&amp;height=220&amp;id=uf42f4afe&amp;originHeight=220&amp;originWidth=1058&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19291&amp;status=done&amp;style=shadow&amp;taskId=u9c7f0649-555f-48d3-816e-a105727b293&amp;title=&amp;width=1058" alt="image.png"><br>所以p命名空间实际上是对set注入的简化。</p><p>如果不引入p命名空间的话，会报错</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250104200112619.png" alt="image-20250104200112619"></p><h2 id="4-1-c命名空间注入"><a href="#4-1-c命名空间注入" class="headerlink" title="4.1 c命名空间注入"></a>4.1 c命名空间注入</h2><p>c命名空间是简化构造方法注入的。<br>使用c命名空间的两个前提条件：<br>第一：需要在xml配置文件头部添加信息：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:c="http://www.springframework.org/schema/c"<br></code></pre></td></tr></tbody></table></figure><p>第二：需要提供构造方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTime</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> year;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> day;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyTime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day)</span> </span>{<br>        <span class="hljs-keyword">this</span>.year = year;<br>        <span class="hljs-keyword">this</span>.month = month;<br>        <span class="hljs-keyword">this</span>.day = day;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"MyTime{"</span> +<br>                <span class="hljs-string">"year="</span> + year +<br>                <span class="hljs-string">", month="</span> + month +<br>                <span class="hljs-string">", day="</span> + day +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">"http://www.springframework.org/schema/c"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--两种方式都可以--&gt;</span><br>    <span class="hljs-comment">&lt;!--    &lt;bean id="myTimeBean" class="com.hilda.MyTime" c:year="1909" c:month="1" c:day="13"/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myTimeBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.MyTime"</span> <span class="hljs-attr">c:_0</span>=<span class="hljs-string">"2008"</span> <span class="hljs-attr">c:_1</span>=<span class="hljs-string">"8"</span> <span class="hljs-attr">c:_2</span>=<span class="hljs-string">"8"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testC</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring-c.xml"</span>);<br>    MyTime myTimeBean = applicationContext.getBean(<span class="hljs-string">"myTimeBean"</span>, MyTime.class);<br>    System.out.println(myTimeBean);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250104200736310.png" alt="image-20250104200736310"></p><p>把构造方法注释掉：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250104200858985.png" alt="image-20250104200858985"></p><p>所以，c命名空间是依靠构造方法的。<br><strong>注意：不管是p命名空间还是c命名空间，注入的时候都可以注入简单类型以及非简单类型。</strong></p><h2 id="4-2-util命名空间"><a href="#4-2-util命名空间" class="headerlink" title="4.2 util命名空间"></a>4.2 util命名空间</h2><p>使用util命名空间可以让<strong>配置复用</strong>。<br>使用util命名空间的前提是：在spring配置文件头部添加配置信息。如下：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250104201540456.png" alt="image-20250104201540456"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDataSource1</span> </span>{<br>    <span class="hljs-keyword">private</span> Properties properties;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>{<br>        <span class="hljs-keyword">this</span>.properties = properties;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"MyDataSource1{"</span> +<br>                <span class="hljs-string">"properties="</span> + properties +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hilda;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDataSource2</span> </span>{<br>    <span class="hljs-keyword">private</span> Properties properties;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>{<br>        <span class="hljs-keyword">this</span>.properties = properties;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"MyDataSource2{"</span> +<br>                <span class="hljs-string">"properties="</span> + properties +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">"http://www.springframework.org/schema/util"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:properties</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"prop"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"driver"</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"url"</span>&gt;</span>jdbc:mysql://localhost:3306/spring<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"username"</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"password"</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.MyDataSource1"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"properties"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"prop"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.hilda.MyDataSource2"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"properties"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"prop"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUtil</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring-util.xml"</span>);<br><br>    MyDataSource1 dataSource1 = applicationContext.getBean(<span class="hljs-string">"dataSource1"</span>, MyDataSource1.class);<br>    System.out.println(dataSource1);<br><br>    MyDataSource2 dataSource2 = applicationContext.getBean(<span class="hljs-string">"dataSource2"</span>, MyDataSource2.class);<br>    System.out.println(dataSource2);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665218430727-c81e399e-294e-4bb5-b98b-2c8875b0884f.png#averageHue=%23968168&amp;clientId=ufc7e21e2-2cbb-4&amp;from=paste&amp;height=140&amp;id=ud2836a05&amp;originHeight=140&amp;originWidth=1518&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29754&amp;status=done&amp;style=shadow&amp;taskId=ubb9d8e9e-3a21-4a14-8fe5-ff81df06522&amp;title=&amp;width=1518" alt="image.png"></p><h2 id="4-3-基于XML的自动装配"><a href="#4-3-基于XML的自动装配" class="headerlink" title="4.3 基于XML的自动装配"></a>4.3 基于XML的自动装配</h2><p>Spring还可以完成自动化的注入，自动化注入又被称为自动装配。它可以根据<strong>名字</strong>进行自动装配，也可以根据<strong>类型</strong>进行自动装配。</p><h3 id="4-3-1-根据名称自动装配"><a href="#4-3-1-根据名称自动装配" class="headerlink" title="4.3.1 根据名称自动装配"></a>4.3.1 根据名称自动装配</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.spring6.dao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 动力节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> UserDao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>{<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span>{<br>        System.out.println(<span class="hljs-string">"正在保存用户数据。"</span>);<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.spring6.service;<br><br><span class="hljs-keyword">import</span> com.powernode.spring6.dao.UserDao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 动力节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> UserService</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>{<br><br>    <span class="hljs-keyword">private</span> UserDao aaa;<br><br>    <span class="hljs-comment">// 这个set方法非常关键</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAaa</span><span class="hljs-params">(UserDao aaa)</span> </span>{<br>        <span class="hljs-keyword">this</span>.aaa = aaa;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>{<br>        aaa.insert();<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>Spring的配置文件这样配置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.service.UserService"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byName"</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"aaa"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.dao.UserDao"</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>这个配置起到关键作用：</p><ul><li>UserService Bean中需要添加autowire=”byName”，表示通过名称进行装配。</li><li>UserService类中有一个UserDao属性，而UserDao属性的名字是aaa，**对应的set方法是setAaa()**，正好和UserDao Bean的id是一样的。这就是根据名称自动装配。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAutowireByName</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring-autowire.xml"</span>);<br>    UserService userService = applicationContext.getBean(<span class="hljs-string">"userService"</span>, UserService.class);<br>    userService.save();<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665535913374-7031648f-fad4-4fa1-a3f1-68dcf2318bef.png#averageHue=%23f5f4f3&amp;clientId=ubfe41891-11ea-4&amp;from=paste&amp;height=116&amp;id=u09b0d555&amp;originHeight=116&amp;originWidth=471&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9778&amp;status=done&amp;style=shadow&amp;taskId=u99de35e6-3c78-4628-b282-8fe94b88194&amp;title=&amp;width=471" alt="image.png"><br>我们来测试一下，byName装配是和属性名有关还是和set方法名有关系：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.spring6.service;<br><br><span class="hljs-keyword">import</span> com.powernode.spring6.dao.UserDao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 动力节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> UserService</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>{<br>    <span class="hljs-comment">// 这里没修改</span><br>    <span class="hljs-keyword">private</span> UserDao aaa;<br><br>    <span class="hljs-comment">/*public void setAaa(UserDao aaa) {</span><br><span class="hljs-comment">        this.aaa = aaa;</span><br><span class="hljs-comment">    }*/</span><br><br>    <span class="hljs-comment">// set方法名变化了</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDao</span><span class="hljs-params">(UserDao aaa)</span></span>{<br>        <span class="hljs-keyword">this</span>.aaa = aaa;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>{<br>        aaa.insert();<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>在执行测试程序：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665536092171-afa2acd5-68c8-4289-95bd-ab8c0f88a66d.png#averageHue=%23faf7f6&amp;clientId=ubfe41891-11ea-4&amp;from=paste&amp;height=246&amp;id=u31a28635&amp;originHeight=246&amp;originWidth=1329&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37747&amp;status=done&amp;style=shadow&amp;taskId=u205c3850-03b9-4bc5-96ea-2dd028afe91&amp;title=&amp;width=1329" alt="image.png"><br>通过测试得知，aaa属性并没有赋值成功。也就是并没有装配成功。<br>我们将spring配置文件修改以下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.service.UserService"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byName"</span>/&gt;</span><br>  <span class="hljs-comment">&lt;!--这个id修改了--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.dao.UserDao"</span>/&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>执行测试程序：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665536194436-6efd0c08-72da-437e-b3ad-143cdb00834d.png#averageHue=%23f4f3f1&amp;clientId=ubfe41891-11ea-4&amp;from=paste&amp;height=112&amp;id=u30228306&amp;originHeight=112&amp;originWidth=462&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9786&amp;status=done&amp;style=shadow&amp;taskId=uda675890-f3bf-4882-807f-6e06230e554&amp;title=&amp;width=462" alt="image.png"><br>这说明，如果根据名称装配(byName)，底层会调用set方法进行注入。<br>例如：setAge() 对应的名字是age，setPassword()对应的名字是password，setEmail()对应的名字是email。</p><h3 id="4-3-2-根据类型自动装配"><a href="#4-3-2-根据类型自动装配" class="headerlink" title="4.3.2 根据类型自动装配"></a>4.3.2 根据类型自动装配</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.spring6.dao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 动力节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> AccountDao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountDao</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span>{<br>        System.out.println(<span class="hljs-string">"正在保存账户信息"</span>);<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.spring6.service;<br><br><span class="hljs-keyword">import</span> com.powernode.spring6.dao.AccountDao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 动力节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> AccountService</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountService</span> </span>{<br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAccountDao</span><span class="hljs-params">(AccountDao accountDao)</span> </span>{<br>        <span class="hljs-keyword">this</span>.accountDao = accountDao;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>{<br>        accountDao.insert();<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--byType表示根据类型自动装配--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"accountService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.service.AccountService"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byType"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.dao.AccountDao"</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAutowireByType</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring-autowire.xml"</span>);<br>    AccountService accountService = applicationContext.getBean(<span class="hljs-string">"accountService"</span>, AccountService.class);<br>    accountService.save();<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665537096983-d3c25b4c-21e1-499f-b348-6f829bc84a48.png#averageHue=%23f4f3f2&amp;clientId=ubfe41891-11ea-4&amp;from=paste&amp;height=109&amp;id=ucf231dcd&amp;originHeight=109&amp;originWidth=514&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9362&amp;status=done&amp;style=shadow&amp;taskId=u73dc5c4e-c505-4247-8652-02ac58e7020&amp;title=&amp;width=514" alt="image.png"><br>我们把UserService中的set方法注释掉，再执行：</p><p>丹丹 todo：</p><p>这里是AccountService，不是UserService</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665537145356-cf979b68-e11b-4b4f-b1b4-7c20649aa199.png#averageHue=%23faf8f7&amp;clientId=ubfe41891-11ea-4&amp;from=paste&amp;height=235&amp;id=uea831f0c&amp;originHeight=235&amp;originWidth=1444&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=38307&amp;status=done&amp;style=shadow&amp;taskId=u74719bf8-872a-4eb2-a90a-10c3f6943b1&amp;title=&amp;width=1444" alt="image.png"><br>可以看到无论是byName还是byType，在装配的时候都是基于set方法的。所以set方法是必须要提供的。提供构造方法是不行的，大家可以测试一下。这里就不再赘述。<br>如果byType，根据类型装配时，如果配置文件中有两个类型一样的bean会出现什么问题呢？</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"accountService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.service.AccountService"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byType"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"x"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.dao.AccountDao"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"y"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.dao.AccountDao"</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>执行测试程序：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665537341888-57af14a1-eeb4-4070-8713-b4368003251d.png#averageHue=%23faf7f6&amp;clientId=ubfe41891-11ea-4&amp;from=paste&amp;height=254&amp;id=uee149cb5&amp;originHeight=254&amp;originWidth=1583&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57785&amp;status=done&amp;style=shadow&amp;taskId=ud9ec74f0-3975-42b6-9535-c4c92b16535&amp;title=&amp;width=1583" alt="image.png"><br>测试结果说明了，当byType进行自动装配的时候，配置文件中某种类型的Bean必须是唯一的，不能出现多个。</p><h2 id="4-4-Spring引入外部属性配置文件"><a href="#4-4-Spring引入外部属性配置文件" class="headerlink" title="4.4 Spring引入外部属性配置文件"></a>4.4 Spring引入外部属性配置文件</h2><p>我们都知道编写数据源的时候是需要连接数据库的信息的，例如：driver url username password等信息。这些信息可以单独写到一个属性配置文件中吗，这样用户修改起来会更加的方便。当然可以。<br>第一步：写一个数据源类，提供相关属性。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.spring6.beans;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.SQLFeatureNotSupportedException;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 动力节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> MyDataSource</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDataSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DataSource</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"MyDataSource{"</span> +<br>                <span class="hljs-string">"driver='"</span> + driver + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", url='"</span> + url + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", username='"</span> + username + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", password='"</span> + password + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDriver</span><span class="hljs-params">(String driver)</span> </span>{<br>        <span class="hljs-keyword">this</span>.driver = driver;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUrl</span><span class="hljs-params">(String url)</span> </span>{<br>        <span class="hljs-keyword">this</span>.url = url;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>{<br>        <span class="hljs-keyword">this</span>.username = username;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>{<br>        <span class="hljs-keyword">this</span>.password = password;<br>    }<br><br>    <span class="hljs-comment">//......</span><br>}<br><br></code></pre></td></tr></tbody></table></figure><p>第二步：在类路径下新建jdbc.properties文件，并配置信息。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/spring</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">root123</span><br></code></pre></td></tr></tbody></table></figure><p>第三步：在spring配置文件中引入context命名空间。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>第四步：在spring中配置使用jdbc.properties文件。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"jdbc.properties"</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.powernode.spring6.beans.MyDataSource"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${driver}"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${url}"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${username}"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${password}"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>测试程序：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testProperties</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"spring-properties.xml"</span>);<br>    MyDataSource dataSource = applicationContext.getBean(<span class="hljs-string">"dataSource"</span>, MyDataSource.class);<br>    System.out.println(dataSource);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行结果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665540422630-223562fd-e97b-40fe-96e7-df2c8744e2c2.png#averageHue=%23f7f6f4&amp;clientId=ubfe41891-11ea-4&amp;from=paste&amp;height=117&amp;id=udb7c7212&amp;originHeight=117&amp;originWidth=1527&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18541&amp;status=done&amp;style=shadow&amp;taskId=u910a7d81-51e6-40d2-ab18-67b9262e8e5&amp;title=&amp;width=1527" alt="image.png"></p><p>丹丹 todo：</p><p>把properties里面的 参数名统一都改为jdbc.url, jdbc.username, jdbc.password等</p><p>上面这个图片usernamme是Administrator，因为  它 是取的windows变量</p>]]></content>
    
    
    <categories>
      
      <category>Spring6</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>First Project</title>
    <link href="/posts/358c4d47.html"/>
    <url>/posts/358c4d47.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241122072335900.png" alt="image-20241122072335900"></p><h3 id="创建Empty-Project"><a href="#创建Empty-Project" class="headerlink" title="创建Empty Project"></a>创建Empty Project</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241122071507639.png" alt="image-20241122071507639"></p><h3 id="修改工程JDK"><a href="#修改工程JDK" class="headerlink" title="修改工程JDK"></a>修改工程JDK</h3><p>创建完spring6的空工程之后，将这里改为JDK17。否则创建的module默认不是JDK17，就会报各种错误。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241122071558858.png" alt="image-20241122071558858"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241122071638137.png" alt="image-20241122071638137"></p><h3 id="在空工程里面创建一个Module"><a href="#在空工程里面创建一个Module" class="headerlink" title="在空工程里面创建一个Module"></a>在空工程里面创建一个Module</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241122071929943.png" alt="image-20241122071929943"></p><h1 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h1><h2 id="User类"><a href="#User类" class="headerlink" title="User类"></a>User类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="beans-xml配置文件"><a href="#beans-xml配置文件" class="headerlink" title="beans.xml配置文件"></a>beans.xml配置文件</h2><p>注意：</p><ol><li>bean的id不能重复， 这个id就相当于是bean的身份证号。</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.entity.User"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="FirstTest测试类"><a href="#FirstTest测试类" class="headerlink" title="FirstTest测试类"></a>FirstTest测试类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.test;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstTest</span> </span>{<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFirst</span><span class="hljs-params">()</span> </span>{<br>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);<br>        Object user = applicationContext.getBean(<span class="hljs-string">"user"</span>);<br>        System.out.println(user); <span class="hljs-comment">//运行结果：com.xu.entity.User@7f0eb4b4</span><br>                                  <span class="hljs-comment">//说明Spring容器帮我们成功创建出来了User对象</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="代码细节剖析"><a href="#代码细节剖析" class="headerlink" title="代码细节剖析"></a>代码细节剖析</h2><p><strong>1. 底层是如何创建的User对象?是通过反射机制调用的无参构造函数吗?</strong></p><p>答:是</p><blockquote><p>如何通过反射机制获取对象?</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xu.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"User类的无参构造方法执行了~"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testReflect</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">try</span> {<br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">"com.xu.entity.User"</span>);<br>        System.out.println(aClass.newInstance());<br>    } <span class="hljs-keyword">catch</span> (Exception e) {<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241122191248720.png" alt="image-20241122191248720"></p><ol start="2"><li><strong>Spring beans.xml里面的class可以配置抽象类吗?</strong></li></ol><p>答:不可以</p><ul><li>如何理解下面这句代码中的abstract=”true”</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"abstractClass"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xu.entity.AbstractClass"</span> <span class="hljs-attr">abstract</span>=<span class="hljs-string">"true"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>在Spring的beans.xml配置文件中，<bean>标签的abstract属性用于定义一个抽象的bean。将abstract属性设置为true表示该bean是抽象的，不能直接实例化。具体含义如下:<br>抽象的bean无法被直接实例化，它只作为其他非抽象bean的父类或模板，它可以提供一些通用的配置或方法，供子类或其他具体的bean继承和使用,抽象bean可以包含一些通用的属性或方法，但它们没有具体的实现，需要子类或具体的bean来提供实现。<br>抽象bean可以被其他非抽象的bean继承，继承后的子类bean可以继承父类bean的属性和方法，并可以覆盖或补充父类的实现。通过定义抽象bean，可以实现代码的重用和封转通用逻辑的目的。它提供了一种模板化的方式，允许其他具体的bean来继承和扩展。<br>在配置文件中，抽象bean的定义通常用于作为其他具体bean的基类或模板，而不能直接实例化为一个独立的bean。因此，抽象bean的abstract属性被设置为true，以标识它是一个抽象的概念, 而不是一个具体的可实例化的bean。</bean></li></ul><ol start="3"><li><strong>代码3.1中，getBean()方法返同的类型是Object。这个时候，如果我想要访问子类的特有属性和方法时，还需要向下转型，有其它办法可以优化这个问题吗?</strong></li></ol><p>代码3.1：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFirst</span><span class="hljs-params">()</span> </span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);<br>    Object user = applicationContext.getBean(<span class="hljs-string">"user"</span>);<br>    System.out.println(user);<br>}<br></code></pre></td></tr></tbody></table></figure><p>答：有，可以调用getBean的另外一种实现方式。请看代码3.2</p><p>代码3.2：</p><p>UserDaoImplForMySQL类中有一个特有的方法getUserList</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImplForMySQL</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>{<br>        System.out.println(<span class="hljs-string">"获取用户列表方法执行了~"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>通过下面这种方式可以直接获取到UserDaoImplForMySQL类型的对象userDao</p><p>通过userDao可以直接访问UserDaoImplForMySQL类的特有方法getUserList</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);<br>    UserDaoImplForMySQL userDao = applicationContext.getBean(<span class="hljs-string">"userDaoBean"</span>, UserDaoImplForMySQL.class);<br>    userDao.getUserList();<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="4"><li><strong>可以一次性读取多个bean的xml文件吗？</strong></li></ol><p>答：可以</p><p>在beans.xml中声明一个id为user的bean，在spring.xml中声明一个id为vip的bean。通过如下代码同时读取两个配置文件。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>, <span class="hljs-string">"spring.xml"</span>);<br>    User user = applicationContext.getBean(<span class="hljs-string">"user"</span>, User.class);<br><br>    Vip vip = applicationContext.getBean(<span class="hljs-string">"vip"</span>, Vip.class);<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241122193905219.png" alt="image-20241122193905219"></p><ol start="5"><li><strong>ClassPathXmlApplicationContext是从类路径中加载配置文件，如果配置文件不在类路径当中，又应该如何加载配置文件呢？</strong></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>{<br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> FileSystemXmlApplicationContext(<span class="hljs-string">"D:\\3_study\\1.coding\\external.xml"</span>);<br>    Object userDaoBean = applicationContext.getBean(<span class="hljs-string">"userDaoBean"</span>, UserDaoImplForMySQL.class);<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241122194619908.png" alt="image-20241122194619908"></p><ol start="6"><li><p><strong>ApplicationContext的超级父接口BeanFactory。</strong></p><p>可以直接用BeanFactory来定义对象</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>{<br>    BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);<br>    Object user = beanFactory.getBean(<span class="hljs-string">"user"</span>);<br>    System.out.println(user); <span class="hljs-comment">//com.xu.entity.User@5c33f1a9</span><br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="启用Log4j2日志框架"><a href="#启用Log4j2日志框架" class="headerlink" title="启用Log4j2日志框架"></a>启用Log4j2日志框架</h1><h2 id="引入Log4j2依赖"><a href="#引入Log4j2依赖" class="headerlink" title="引入Log4j2依赖"></a>引入Log4j2依赖</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--log4j2的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="新建log4j2-xml文件（文件必须放到根路径下，名字固定为log4j2-xml）"><a href="#新建log4j2-xml文件（文件必须放到根路径下，名字固定为log4j2-xml）" class="headerlink" title="新建log4j2.xml文件（文件必须放到根路径下，名字固定为log4j2.xml）"></a>新建log4j2.xml文件（文件必须放到根路径下，名字固定为log4j2.xml）</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            level指定日志级别，从低到高的优先级：</span><br><span class="hljs-comment">                ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"DEBUG"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"spring6log"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出日志信息到控制台--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"spring6log"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"SYSTEM_OUT"</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--控制日志输出的格式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">"%d{yyyy-MM-dd HH:mm:ss SSS} [%t] %-3level %logger{1024} - %msg%n"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="使用日志框架"><a href="#使用日志框架" class="headerlink" title="使用日志框架"></a>使用日志框架</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImplForMySQL</span> </span>{<br>    Logger logger = LoggerFactory.getLogger(UserDaoImplForMySQL.class);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserDaoImplForMySQL</span><span class="hljs-params">()</span> </span>{<br>        logger.info(<span class="hljs-string">"UserDaoImplForMySQL类的无参构造方法执行了~~~"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241122200628741.png" alt="image-20241122200628741"></p>]]></content>
    
    
    <categories>
      
      <category>Spring6</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>控制反转</title>
    <link href="/posts/424232bd.html"/>
    <url>/posts/424232bd.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引入控制反转概念"><a href="#引入控制反转概念" class="headerlink" title="引入控制反转概念"></a>引入控制反转概念</h1><p>将对象的创建权/管理权交出去了，不再使用硬编码的方式了。同时也把对象关系的管理权交出去了，也不再使用硬编码的方式了。像这种把对象的创建权交出去，把对象关系的管理权交出去，被称为控制反转。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241121205740263.png" alt="image-20241121205740263"></p><h1 id="控制反转IoC"><a href="#控制反转IoC" class="headerlink" title="控制反转IoC"></a>控制反转IoC</h1><p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计思想，可以用来降低代码之间的耦合度，符合依赖倒置原则。IoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚，并没有包含在GoF中。（GoF指的是23种设计模式）。Spring框架就是一个实现了IoC思想的框架。</p><p>控制反转思想的核心是：<strong>将对象的创建权交出去，将对象和对象之间关系的管理权交出去，由第三方容器来负责创建与维护</strong>。</p><p>控制反转常见的实现方式：依赖注入（Dependency Injection，简称DI）。通常，依赖注入的实现又包括两种方式：</p><ul><li>set方法注入</li><li>构造方法注入</li></ul><h1 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h1><h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h2><blockquote><p>Spring框架是一个开源的Java应用程序框架，它由Rod Johnson创建。它提供了一系列的模块来简化Java应用程序的开发。<br>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。<br>Spring最初的出现是为了解决EJB臃肿的设计，以及难以测试等问题。<br>Spring为简化开发而生，让程序员只需关注核心业务的实现，尽可能的不再关注非业务逻辑代码（事务控制，安全日志等）。</p></blockquote><h2 id="Spring常用模块"><a href="#Spring常用模块" class="headerlink" title="Spring常用模块"></a>Spring常用模块</h2><p>注：在Spring5中新增了Webflux模块。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20241121081135580.png" alt="image-20241121081135580"></p><ol><li><p>Spring Core:</p><p>这是Spring框架的核心模块，提供了IoC(Inversion of Control)容器的实现。loC容器负责管理和组织应用程序中的对象，通过依赖注入来管理对象之间的依赖关系。</p></li><li><p>Spring MVC</p><p>这是Spring框架的Web开发模块，提供了一个基于MVC(Model-View-Controller)架构的Web应用程序开发框架。它通过DispatcherServlet将请求分发给合适的处理器，并将处理结果返回给客户端。</p></li><li><p>Spring AOP</p><p>这是Spring框架的面向切面编程模块，提供了一种在应用程序中实现模切关注点的方式。通过AOP，可以将与业务逻辑无关的功能(如日志记录、性能监测、事务管理等)模块化并集中管理。（<em>扩展1： Spring AOP通俗解释</em>）  </p></li><li><p>Spring Web</p><p>Spring Web模块提供了基于Servlet技术的Web应用程序开发支持。它包含了Spring MVC框架，用于构建基于MVC架构的Web应用程序。SpringMVC通过DispatcherServlet将请求分发给合适的处理器，并将处理结果返回给客户端。它还提供了一些注解和工具，用于处理URL映射、请求参数绑定、视图解析等。</p></li><li><p>Spring ORM</p><p>它可以与Hiberate、MyBatis等ORM框架集成，简化了数据访问层的开发。Spring ORM提供了一些模板类和注解，用于简化数据库操作、事务管理等操作。</p></li><li><p>Spring Context</p><p>Spring Context模块是Spring框架的核心模块之一，提供了1oC容器的实现。loC容器负责管理和组织应用程序中的对象，通过依赖注入来管理对象之间的依赖关系。Spring Context模块还提供了一些高级特性，如面向切面编程(AOP)、事件传播、国际化支持等。</p></li><li><p>Spring DAO</p><p>Spring DAO模块是Spring框架中的数据访问对象(DAO)支持模块。它提供了一种简化和统一的方式来访问和操作各种数据存储，如关系型数据库、NoSQL数据库、缓存等。Spring DAO模块可以与 ORM框架(如Hibernate.MyBatis)集成，也可以直接使用JDBC进行数据库操作。它提供了一些模板类和注解，用于简化数据库操作、事务管理等。</p></li><li><p>Spring Webflux</p><p>Spring Webflux是Spring框架的响应式编程支持模块。它基于Reactive Streams规范，提供了一种非阻塞的、异步的编程模型，SpringWebflux可以用于构建响应式的Web应用程序和服务。它提供了一些注解和函数式编程的API，用于处理HTTP请求，处理数据流、处理异步操作等。与传统的Servlet容器相比，Spring Webflux可以处理更高的并发请求和更高的吞吐量。</p></li></ol><p>   还有其他几个常用模块，未在上图列出：</p><ol start="9"><li><p>Spring Data</p><p>这是Spring框架的数据访问模块，提供了对各种数据访问技术的集成支持。它简化了数据访问层的开发，提供了一种统一的API来访问和操作各种数据存储(如关系型数据库、NoSQL数据库、缓存等)。 </p></li><li><p>Spring Security</p><p>这是Spring框架的安全模块，提供了身份验证和授权的支持。它可以集成到Spring应用程序中，为应用程序提供安全性保护，如用户认证、授权、密码加密等。</p></li></ol><h2 id="Spring特点"><a href="#Spring特点" class="headerlink" title="Spring特点"></a>Spring特点</h2><ol><li>轻量<ul><li>从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。</li><li>Spring是非侵入式的：Spring应用中的对象不依赖于Spring的特定类。<em>（扩展2：非侵入式编程）</em></li></ul></li><li>控制反转<ul><li>Spring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反—不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。<em>（扩展3：loC和JNDI的区别）</em></li></ul></li><li>面向切面<ul><li>Spring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。</li></ul></li><li>容器<ul><li>Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。</li></ul></li><li>框架<ul><li>Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。</li></ul></li></ol><p>所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码。它们也为Spring中的各种模块提供了基础支持。</p><h3 id="扩展1：-Spring-AOP通俗解释"><a href="#扩展1：-Spring-AOP通俗解释" class="headerlink" title="扩展1： Spring AOP通俗解释"></a>扩展1： Spring AOP通俗解释</h3><p>想象一下你正在画一幅画，画中有很多不同的元素，如人物、树、花等。画画时，你可能会有一些特别的需求，比如想要给画中的每个元素都添加一些相同的颜色或纹理。但是，你不想挨个给每个添加，因为那样会很麻烦。</p><p>这时，Spring AOP就像一个<strong>魔法笔</strong>，它可以帮助你在画画的过程中自动添加你想要的颜色或纹理，而无需手动去做。你只需要告诉魔法笔你想要添加的颜色或纹理，然后它会自动帮你完成。<br><em>在编程中，我们经常需要在一些特定的地方(例如方法调用或特定的代码段)执行一些相同的操作，比如日志记录、性能监测或事务管理。Spring AOP就像这个魔法笔，它可以自动帮助我们在这些特定的地方添加这些通用操作，而无需手动去每个地方都编写相同的代码。</em><br><em>所以，Spring AOP可以让我们更方便地在代码中添加一些通用的功能，而无需重复编写相同的代码。它是一种在编程中帮助我们实现代码重用和维护的魔法笔。</em></p><h3 id="扩展2：非侵入式编程"><a href="#扩展2：非侵入式编程" class="headerlink" title="扩展2：非侵入式编程"></a>扩展2：非侵入式编程</h3><p>非侵入式编程是一种编程范式，它强调在开发应用程序时，不需要对现有代码进行修改或依赖于特定的框架或库。具体来说，非侵入式编程具有以下几个特点:</p><ol><li><p>低依赖性:Spring框架的核心容器是一个轻量级的loC容器，它本身的依赖性非常低。这意味着您可以选择性地使用 Spring框架的各个模块，而不需要将整个应用程序都依赖于Spring。您可以根据需要选择性地引入Spring的功能，而不会对应用程序的其他部分产生强耦合。</p></li><li><p>面向接口编程:Spring框架鼓励使用接口进行编程，通过依赖注入将具体实现类与接口解耦。这种面向接口的编程方式使得应用程序的各个组件之间的耦合度降低，增加了代码的可维护性和可扩展性。</p></li><li><p>配置灵活性:Spring框架使用XML、注解和Java配置等方式来进行配置。这种灵活的配置方式使得您可以根据需要对应用程序进行灵活的配置和调整，而不需要修改应用程序的源代码。这种配置的灵活性使得您可以将Spring框架集成到现有的应用程序中，而不需要对原有代码进行大量的修改。</p></li><li><p>面向切面编程:Spring框架提供了面向切面编程(AOP)的支持，可以将与核心业务逻辑无关的横切关注点(如日志、事务管理)模块化并集中管理。这样可以将这些横切关注点与业务逻辑进行解耦，使得应用程序的代码更加清晰和可维护。</p><p>综上所述，Spring框架是非侵入式的，因为它可以与现有的应用程序进行集成，而不需要对应用程序进行大量的修改。它通过依赖注入、面向接口编程和配置的灵活性，使得应用程序的各个组件之间的耦合度降低，增加了代码的可维护性和可扩展性。</p></li></ol><h3 id="扩展3：loC和JNDI的区别"><a href="#扩展3：loC和JNDI的区别" class="headerlink" title="扩展3：loC和JNDI的区别"></a>扩展3：loC和JNDI的区别</h3><p>loC(Inversion of Control)和JNDI(Java Naming and Directory Interface)是两个不同的概念，它们在思想上有以下区别:</p><ul><li><p>控制反转(loC): </p><ol><li>loC是一种设计模式，也称为依赖注入(Dependency Injection)，它是一种通过外部容器来管理对象的创建和组装的方式。在loC中，应用程序不再负责创建和管理对象的依赖关系，而是将这些责任交给了一个外部的容器。容器根据配置文件或注解的定义，将对象之间的依赖关系注入到相应的对象中。这种方式将控制权反转给了容器，使得应用程序更加灵活、可扩展和易于维护。</li><li>loC是将对象的控制权交给框架，框架主动为用户提供对象，而不需要用户主动去申请。通过配置文件或注解，用户可以告诉框架需要哪些对象以及它们的依赖关系，然后框架负责创建和管理这些对象，并在需要的时候将它们注入到用户代码中。</li></ol></li><li><p>JNDI</p><ol><li>是Java平台提供的一种用于访问命名和目录服务的API。它提供了一种统一的方式来访问各种命名和目录服务，如LDAP(Lightweight DirectoryAccess Protocol)、DNS(Domain Name System)等。通过JNDI,应用程序可以在运行时动态地查找和获取命名和目录服务中的对象。JNDI的主要目的是为了实现应用程序与命名和目录服务的解耦，提供一种统一的访问方式。</li><li>JNDI是用户主动去获取对象的一种方式。用户通过JNDI API来访问命名和目录服务，根据对象的名称或其他标识符来查找和获取相应的对象。这种方式需要用户自己编写代码来处理对象的获取和使用。</li></ol></li></ul><p>综上所述，loC和JNDI在对象获取的方式上存在明显的差异。loC框架通过自动创建和管理对象来实现控制反转，而JNDI则需要用户自己编写代码来主动获取对象。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML5</title>
    <link href="/posts/98f3a6d9.html"/>
    <url>/posts/98f3a6d9.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h1><p><strong>HTML</strong></p><p>Hyper Text Markup Language(超文本标记语言)</p><p>HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。</p><p><strong>W3C</strong></p><p>World Wide Web Consortium(万维网联盟)</p><p>万维网联盟创建于1994年，是Web技术领域最具权威和影响力的国际中立性技术标准机构。W3C已发布了200多项影响深远的Web技术标准及实施指南，如广为业界采用的超文本标记语言HTML（标准通用标记语言下的一个应用）、可扩展标记语言XML（标准通用标记语言下的一个子集）以及帮助残障人士有效获得Web信息的无障碍指南（WCAG）等，有效促进了Web技术的互相兼容，对互联网技术的发展和应用起到了基础性和根本性的支撑作用。</p><h1 id="网页基本信息"><a href="#网页基本信息" class="headerlink" title="网页基本信息"></a>网页基本信息</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- DOCTYPE: 告诉浏览器，我们要使用什么规范 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- head: 代表网页头部 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- meta: 描述性标签，用来描述我们网站的一些信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- title: 网页标题   --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的第一个HTML网页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- body: 代表网页主体 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>你好，bambi<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212201648554.png"></p><h1 id="网页基本标签"><a href="#网页基本标签" class="headerlink" title="网页基本标签"></a>网页基本标签</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--标题标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>h2标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>h2标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>h2标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>h2标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><span class="hljs-comment">&lt;!--段落标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    这是一个段落标签<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--换行标签--&gt;</span><br>这是一个换行<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>标签<br><span class="hljs-comment">&lt;!--水平线标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!--字体样式标签-粗体--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>hope to see you on the top<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-comment">&lt;!--字体样式标签-斜体--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>boun prem<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-comment">&lt;!--特殊符号-空格--&gt;</span><br>你<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>好<br><span class="hljs-comment">&lt;!--特殊符号-大于--&gt;</span><br><span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-comment">&lt;!--特殊符号-小于--&gt;</span><br><span class="hljs-symbol">&amp;lt;</span><br><span class="hljs-comment">&lt;!--特殊符号-版权所有--&gt;</span><br><span class="hljs-symbol">&amp;copy;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212201728159.png"></p><h1 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h1><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212201740835.png"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"resources/image/5.png"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"海绵宝宝"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="超链接标签及其应用"><a href="#超链接标签及其应用" class="headerlink" title="超链接标签及其应用"></a>超链接标签及其应用</h1><h2 id="文本超链接"><a href="#文本超链接" class="headerlink" title="文本超链接"></a>文本超链接</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--href: 必填，表示要跳转到哪一个页面--&gt;</span><br><span class="hljs-comment">&lt;!--target: 表示窗口在哪里打开--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"test01.html"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span>文本超链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="图像超链接"><a href="#图像超链接" class="headerlink" title="图像超链接"></a>图像超链接</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"test01.html"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"resources/image/5.png"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"图片超链接"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bottom"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--锚链接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"test01.html#bottom"</span>&gt;</span>跳转到底部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="功能性链接"><a href="#功能性链接" class="headerlink" title="功能性链接"></a>功能性链接</h2><h3 id="邮件链接"><a href="#邮件链接" class="headerlink" title="邮件链接"></a>邮件链接</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--邮件链接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"mailto:15191434031@163.com"</span>&gt;</span>邮件链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="块元素和行内元素"><a href="#块元素和行内元素" class="headerlink" title="块元素和行内元素"></a>块元素和行内元素</h1><ul><li>块元素<ul><li>无论内容多少，该元素独占一行</li><li>(p, h1-h6)</li></ul></li><li>行内元素<ul><li>内容撑开宽度，左右都是行内元素的可以排在一行</li><li>(a, strong, em)</li></ul></li></ul><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--无序列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212251048593.png"></p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--有序列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>草莓<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212251048879.png"></p><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--自定义列表: 自定义列表一般用在网站底部--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>我的爱好<br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>游泳<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>看书<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>听音乐<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>跑步<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212251048123.png"></p><h1 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表格标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    tr:行</span><br><span class="hljs-comment">    td:列</span><br><span class="hljs-comment">    跨行:rowspan</span><br><span class="hljs-comment">    跨列:colspan</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">"3"</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>33<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271553656.png"></p><h1 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h1><h2 id="视频文件"><a href="#视频文件" class="headerlink" title="视频文件"></a>视频文件</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>媒体元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">controls:控制条</span><br><span class="hljs-comment">autoplay:自动播放</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"resources/video/02.mp4"</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span>测试视频<span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>视频能成功加载并且会自动播放</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271605135.png"></p><h2 id="音频文件"><a href="#音频文件" class="headerlink" title="音频文件"></a>音频文件</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"resources/video/02.mp4"</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271610739.png"></p><h1 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h1><table><thead><tr><th>元素名</th><th>描述</th></tr></thead><tbody><tr><td>header</td><td>标记头部区域的内容（用于页面或页面中的一块区域）</td></tr><tr><td>footer</td><td>标记脚部区域的内容（用于整个页面或者页面的一块区域）</td></tr><tr><td>section</td><td>Web页面中的一块独立区域</td></tr><tr><td>article</td><td>独立的文章内容</td></tr><tr><td>aside</td><td>相关内容或应用（常用于侧边栏）</td></tr><tr><td>nav</td><td>导航类辅助内容</td></tr></tbody></table><h1 id="iframe内联框架"><a href="#iframe内联框架" class="headerlink" title="iframe内联框架"></a>iframe内联框架</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>内联框架<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test03.html"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mainFrame"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271641556.png"></p><h1 id="初识表单post和get提交"><a href="#初识表单post和get提交" class="headerlink" title="初识表单post和get提交"></a>初识表单post和get提交</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>提交表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"test01.html"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"get"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密  码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"重置"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271631106.png"></p><h1 id="文本框和单选框"><a href="#文本框和单选框" class="headerlink" title="文本框和单选框"></a>文本框和单选框</h1><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271633347.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--文本输入框--&gt;</span><br>文本输入框<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--密码框--&gt;</span><br>密码框<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--单选框，默认选中男checked--&gt;</span><br>性别<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"男"</span> <span class="hljs-attr">checked</span>&gt;</span>男<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"女"</span>&gt;</span>女<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271640134.png"></p><h1 id="按钮和多选框"><a href="#按钮和多选框" class="headerlink" title="按钮和多选框"></a>按钮和多选框</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"reading"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span>&gt;</span>阅读<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"running"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span> <span class="hljs-attr">checked</span>&gt;</span>跑步<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"yoga"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span>&gt;</span>瑜伽<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"按钮显示的文字"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"btn1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"image"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"resources/image/5.png"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271647877.png"></p><h1 id="列表框文本域和文件域"><a href="#列表框文本域和文件域" class="headerlink" title="列表框文本域和文件域"></a>列表框文本域和文件域</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>下拉框<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"水果天堂"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"banana"</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"apple"</span> <span class="hljs-attr">selected</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-comment">&lt;!-- 苹果默认会是选中的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"strawberry"</span>&gt;</span>草莓<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>文本域<br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"remark"</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"60"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"10"</span>&gt;</span><br>        在这里写入备注内容<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>文件域<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"上传文件"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"upload"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271655620.png"></p><h1 id="搜索框滑块和简单验证"><a href="#搜索框滑块和简单验证" class="headerlink" title="搜索框滑块和简单验证"></a>搜索框滑块和简单验证</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>邮箱：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>URL：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>滑块：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"range"</span> <span class="hljs-attr">min</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"voice"</span> <span class="hljs-attr">step</span>=<span class="hljs-string">"2"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>搜索：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"search"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"search"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271711969.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271712095.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271713406.png"></p><h1 id="表单的应用"><a href="#表单的应用" class="headerlink" title="表单的应用"></a>表单的应用</h1><ul><li>隐藏域hidden</li><li>只读readonly</li><li>禁用disable</li></ul><h1 id="表单初级验证"><a href="#表单初级验证" class="headerlink" title="表单初级验证"></a>表单初级验证</h1><ul><li>placeholder：提示信息</li><li>required：非空判断</li><li>pattern：正则表达式</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">required</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271719014.png"></p>]]></content>
    
    
    <categories>
      
      <category>HTML5</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java</title>
    <link href="/posts/df2849ec.html"/>
    <url>/posts/df2849ec.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h1><h2 id="如何快速学习一个知识点"><a href="#如何快速学习一个知识点" class="headerlink" title="如何快速学习一个知识点"></a>如何快速学习一个知识点</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231126112.png" alt="image-20230423112646058"></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在控制台，输入 tab 键，可以实现命令补全 </span><br>\t ：一个制表位，实现对齐的功能<br>\n ：换行符<br>\\ ：一个\<br>\<span class="hljs-string">" :一个"</span><br>\<span class="hljs-string">' ：一个'</span> <br>\r :一个回车<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//转义字符练习</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br><br>    <span class="hljs-comment">//编写一个 main 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//\t ：一个制表位，实现对齐的功能</span><br>        System.out.println(<span class="hljs-string">"北京\t天津\t上海"</span>);<br><br>        <span class="hljs-comment">// \n ：换行符</span><br>        System.out.println(<span class="hljs-string">"jack\nsmith\nmary"</span>);<br><br>        <span class="hljs-comment">// \\ ：一个\</span><br>        System.out.println(<span class="hljs-string">"C:\\Windows\\System32\\cmd.exe"</span>);<br><br>        <span class="hljs-comment">// \" :一个"</span><br>        System.out.println(<span class="hljs-string">"你好呀，\"bambi\""</span>);<br><br>        <span class="hljs-comment">// \' ：一个'</span><br>        System.out.println(<span class="hljs-string">"你好呀，\'bambi\'"</span>);<br><br>        <span class="hljs-comment">// \r :一个回车</span><br>        System.out.println(<span class="hljs-string">"你好呀\r明天"</span>);<br>        <span class="hljs-comment">// 解读</span><br>        <span class="hljs-comment">// 1. 输出 你好呀</span><br>        <span class="hljs-comment">// 2. \r 表示回车</span><br>        System.out.println(<span class="hljs-string">"你好呀\r明天"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">d:\desktop&gt;java App<br>北京    天津    上海<br>jack<br>smith<br>mary<br>C:\Windows\System32\cmd.exe<br>你好呀，<span class="hljs-string">"bambi"</span><br>你好呀，<span class="hljs-string">'bambi'</span><br>明天呀<br>明天呀<br></code></pre></td></tr></tbody></table></figure><h2 id="Java代码规范-行尾风格"><a href="#Java代码规范-行尾风格" class="headerlink" title="Java代码规范_行尾风格"></a>Java代码规范_行尾风格</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231210817.png" alt="image-20230423121036762"></p><h2 id="DOS（Disk-Operating-System-磁盘操作系统）命令"><a href="#DOS（Disk-Operating-System-磁盘操作系统）命令" class="headerlink" title="DOS（Disk Operating System 磁盘操作系统）命令"></a>DOS（Disk Operating System 磁盘操作系统）命令</h2><h3 id="DOS介绍"><a href="#DOS介绍" class="headerlink" title="DOS介绍"></a>DOS介绍</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231217021.png" alt="image-20230423121752969"></p><h3 id="相对路径-amp-绝对路径"><a href="#相对路径-amp-绝对路径" class="headerlink" title="相对路径 &amp; 绝对路径"></a>相对路径 &amp; 绝对路径</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231227498.png" alt="image-20230423122746437"></p><h3 id="常用DOC命令"><a href="#常用DOC命令" class="headerlink" title="常用DOC命令"></a>常用DOC命令</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>查看当前目录是有什么内容<br>    dir dir dir d:\abc2\test200<br><span class="hljs-number">2.</span>切换到其他盘下：盘符号<br>    cd : change directory <br>    案例演示：<br>    切换到 c 盘 cd /D c: <br><span class="hljs-number">3.</span>切换到当前盘的其他目录下 (使用相对路径和绝对路径演示), ..\表示上一级目录<br>    案例演示： cd d:\abc2\test200 cd ..\..\abc2\test200        <br><span class="hljs-number">4.</span>切换到上一级： <br>    案例演示： cd .. <br><span class="hljs-number">5.</span>切换到根目录：cd \ <br>    案例演示：cd \<br><span class="hljs-number">6.</span>查看指定的目录下所有的子级目录 tree<br><span class="hljs-number">7.</span>清屏 cls<br><span class="hljs-number">8.</span>退出 DOS exit<br></code></pre></td></tr></tbody></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量使用注意事项"><a href="#变量使用注意事项" class="headerlink" title="变量使用注意事项"></a>变量使用注意事项</h2><p>1.变量表示内存中一块存储区域，不同类型占用的空间不同。</p><p>2.该区域有自己的名称 [变量名] 和类型 [数据类型]</p><p>3.变量三要素，变量=变量名 + 变量值 + 数据类型</p><h2 id="程序中-号的使用"><a href="#程序中-号的使用" class="headerlink" title="程序中+号的使用"></a>程序中+号的使用</h2><p>1.加号左右两边如果都是数字，做加法运算。</p><p>2.加号左右两边有一方为字符串，做拼接运算。</p><p>3.运算顺序，从左到右。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">"hello"</span> + <span class="hljs-number">100</span> + <span class="hljs-number">3</span>);<span class="hljs-comment">//hello1003</span><br></code></pre></td></tr></tbody></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231518681.png" alt="image-20230423151830601"></p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><h3 id="整数类型的分类"><a href="#整数类型的分类" class="headerlink" title="整数类型的分类"></a>整数类型的分类</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231522156.png" alt="image-20230423152242092"></p><h3 id="整数类型使用注意细节"><a href="#整数类型使用注意细节" class="headerlink" title="整数类型使用注意细节"></a>整数类型使用注意细节</h3><p>1.Java的整型默认为int类型，可以加小写l或者大写L将数字变为long类型。</p><p>2.bit，计算机中的最小存储单位。</p><p>​    byte，计算机中的基本存储单元。</p><p>​    1byte = 8bit</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231556192.png" alt="image-20230423155646133"></p><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><h3 id="浮点型的分类"><a href="#浮点型的分类" class="headerlink" title="浮点型的分类"></a>浮点型的分类</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231600429.png" alt="image-20230423160036371"></p><p>说明：</p><p>1.浮点数都是近似值，尾数可能丢失，造成精度损失。</p><p>2.浮点数 = 符号位 + 指数位 + 尾数位</p><h3 id="浮点数类型使用注意细节"><a href="#浮点数类型使用注意细节" class="headerlink" title="浮点数类型使用注意细节"></a>浮点数类型使用注意细节</h3><ol><li><p>浮点数常量默认类型为double类型，尾部加f或者F可以变为float。</p></li><li><p>浮点型常量有两种表现形式：</p><p>十进制形式：1.23, 521.0f, .369</p><p>科学计数法形式：5.21e2<br>$$<br>5.21 * 10^2<br>$$<br>1.23e-2<br>$$<br>1.23/10^2<br>$$</p></li><li><p>通常情况下，应该使用double类型，因为double更精确。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">double</span> n1 = <span class="hljs-number">3.123456789</span>;<br>        <span class="hljs-keyword">float</span> n2 = <span class="hljs-number">3.123456789F</span>;<br>        System.out.println(n1);<br>        System.out.println(n2);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">3.123456789</span><br><span class="hljs-number">3.1234567</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="4"><li><p>浮点数使用陷阱 2.7 和 8.1 / 3 的比较</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">double</span> n1 = <span class="hljs-number">2.7</span>;<br>        <span class="hljs-keyword">double</span> n2 = <span class="hljs-number">8.1</span> / <span class="hljs-number">3</span>;<br>        System.out.println(n1 == n2);<span class="hljs-comment">// false</span><br>        System.out.println(n1);<br>        System.out.println(n2);<br>        <br>        <span class="hljs-comment">//通过Math.abs判断浮点数类型是否相等</span><br>        <span class="hljs-keyword">if</span>(Math.abs(n1 - n2) &lt; <span class="hljs-number">0.00001</span>){<br>            System.out.println(<span class="hljs-string">"这两个double类型的数据相等~"</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">false</span><br><span class="hljs-number">2.7</span><br><span class="hljs-number">2.6999999999999997</span><br>这两个<span class="hljs-keyword">double</span>类型的数据相等~<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="Java-API文档"><a href="#Java-API文档" class="headerlink" title="Java  API文档"></a>Java  API文档</h2><p>API:  Application Programming Interface应用程序编程接口</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231621329.png" alt="image-20230423162139271"></p><h2 id="字符类型（char）"><a href="#字符类型（char）" class="headerlink" title="字符类型（char）"></a>字符类型（char）</h2><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">char</span> c1 = <span class="hljs-string">'a'</span>;<br>        <span class="hljs-keyword">char</span> c2 = <span class="hljs-string">'\t'</span>;<br>        <span class="hljs-keyword">char</span> c3 = <span class="hljs-string">'许'</span>;<br>        <span class="hljs-keyword">char</span> c4 = <span class="hljs-number">97</span>;<br>        System.out.println(c1);<br>        System.out.println(c2);<br>        System.out.println(c3);<br>        System.out.println(c4);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231625818.png" alt="image-20230423162555777"></p><h3 id="字符型使用细节"><a href="#字符型使用细节" class="headerlink" title="字符型使用细节"></a>字符型使用细节</h3><ol><li>在Java中，char的本质是一个整数，默认输出Unicode码对应的字符。<a href="https://tool.chinaz.com/tools/unicode.aspx">https://tool.chinaz.com/tools/unicode.aspx</a></li><li>可以直接给char赋一个整数，输出的时候，会按照对应的Unicode字符输出。（97 ==》 a）</li><li>char支持运算，它相当于一个整数，因为它都有对应的Unicode码。思考：System.out.println(‘a’ + “a”); 程序运行后，会输出什么？ </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 在 java中，char的本质是一个整数，在默认输出时，是 unicode 码对应的字符</span><br>        <span class="hljs-comment">// 要输出对应的数字，可以(int)字符</span><br>        <span class="hljs-keyword">char</span> c1 = <span class="hljs-number">97</span>;<br>        System.out.println(c1); <span class="hljs-comment">// a</span><br><br>        <span class="hljs-keyword">char</span> c2 = <span class="hljs-string">'a'</span>; <span class="hljs-comment">//输出'a' 对应的数字</span><br>        System.out.println((<span class="hljs-keyword">int</span>)c2);<span class="hljs-comment">//97</span><br><br>        <span class="hljs-keyword">char</span> c3 = <span class="hljs-string">'许'</span>;<br>        System.out.println((<span class="hljs-keyword">int</span>)c3);<span class="hljs-comment">//35768</span><br><br>        <span class="hljs-keyword">char</span> c4 = <span class="hljs-number">35768</span>;<br>        System.out.println(c4);<span class="hljs-comment">//许</span><br><br>        <span class="hljs-comment">// char类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码.</span><br>        System.out.println(<span class="hljs-string">'a'</span> + <span class="hljs-number">10</span>);<span class="hljs-comment">//107</span><br><br>        <span class="hljs-comment">// 课堂小测试</span><br>        <span class="hljs-keyword">char</span> c5 = <span class="hljs-string">'b'</span> + <span class="hljs-number">1</span>;<br>        System.out.println((<span class="hljs-keyword">int</span>)c5);<span class="hljs-comment">//99</span><br>        System.out.println(c5);<span class="hljs-comment">//c</span><br>        System.out.println(<span class="hljs-string">'a'</span> + <span class="hljs-string">"a"</span>);<span class="hljs-comment">//aa</span><br>        System.out.println(<span class="hljs-string">'a'</span> + <span class="hljs-number">1</span>);<span class="hljs-comment">//98</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="字符存储细节"><a href="#字符存储细节" class="headerlink" title="字符存储细节"></a>字符存储细节</h3><p>字符型存储到计算机里面，会将字符对应的码值（整数）找出来。比如：</p><p>存储’a’ =&gt; 码值97 =&gt; 二进制（0110 0001） =&gt;存储</p><h3 id="字符编码表"><a href="#字符编码表" class="headerlink" title="字符编码表"></a>字符编码表</h3><ul><li><strong>ASCII编码</strong>，一个字节表示，一共128个字符。实际上一个字节可以表示256个字符，它没有用完，只用了128个。</li><li><strong>Unicode编码</strong>，固定大小的编码，字母和汉字统一都是占用2个字节，浪费空间。</li><li><strong>UTF-8编码</strong>，大小可变的编码表，字母占1个字节，汉字占用3个字节。</li><li>GBK编码，可以表示汉字，而且范围比较广，字母1个字节，汉字2个字节。</li><li>GB2312编码，可以表示汉字。（GB2312 &lt; GBK）</li><li>BIG5码，繁体中文，台湾，香港。</li></ul><h2 id="布尔类型（boolean）"><a href="#布尔类型（boolean）" class="headerlink" title="布尔类型（boolean）"></a>布尔类型（boolean）</h2><p>布尔类型也叫boolean类型，只允许取值true或者false，没有null。</p><p>在Java中，不可以使用非0或者0代替true或false。</p><h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231707718.png" alt="image-20230423170724670"></p><h3 id="自动类型转换细节"><a href="#自动类型转换细节" class="headerlink" title="自动类型转换细节"></a>自动类型转换细节</h3><ol><li><p>多种类型的数据混合运算时，系统会首先自动将所有的数据转换为容量最大的那种数据类型，然后再进行计算。int + double ==&gt; 会转成double</p></li><li><p>（byte，short）和char之间没有类型转换</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当把一个具体的值赋给byte时，会先判断该值是否在byte范围内，如果在，就ok</span><br><span class="hljs-keyword">byte</span> b1 = <span class="hljs-number">10</span>; <span class="hljs-comment">//不报错</span><br><span class="hljs-keyword">char</span> c1 = b1; <span class="hljs-comment">//报错，因为byte不能转换为char</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p>byte，short，char三者运算时，会在计算时转换为int类型</p></li><li><p>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型。</p></li></ol><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>自动类型转换的逆过程，<strong>将容量大的数据类型转换为容量小的数据类型</strong>。有可能会造成精度损失或数据溢出。</p><h3 id="强制类型转换细节"><a href="#强制类型转换细节" class="headerlink" title="强制类型转换细节"></a>强制类型转换细节</h3><ol><li><p>强制符号只针对最近的操作数，可以使用小括号来提升优先级。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> x = (<span class="hljs-keyword">int</span>)(<span class="hljs-number">3</span> * <span class="hljs-number">3.5</span> + <span class="hljs-number">6</span> * <span class="hljs-number">1.5</span>);<br>System.out.println(x);<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>char类型可以保存int的常量值，但是不能保存int的变量值，需要强转。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c1 = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> i1 = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//char c2 = i1;//错误</span><br><span class="hljs-keyword">char</span> c2 = (<span class="hljs-keyword">char</span>)i1;<br>System.out.println(c2);<span class="hljs-comment">//100对应的字符d</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li>byte和short，char类型在进行运算时，会被当做int类型处理。</li></ol><h2 id="基本数据类型和String类型的转换"><a href="#基本数据类型和String类型的转换" class="headerlink" title="基本数据类型和String类型的转换"></a>基本数据类型和String类型的转换</h2><p>1、基本数据类型转String类型<br>    基本数据类型的值 + “ “</p><p>2、String类型转基本数据类型<br>    基本类型包装类.parse**()</p><p>3、字符串转为字符。str.charAt(0);</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String s = <span class="hljs-string">"123"</span>;<br>        <span class="hljs-keyword">int</span> i = Integer.parseInt(s);<br>        System.out.println(i);<span class="hljs-comment">//123</span><br><br>        <span class="hljs-keyword">double</span> v = Double.parseDouble(s);<br>        System.out.println(v);<br><br>        <span class="hljs-keyword">byte</span> b = Byte.parseByte(s);<br>        System.out.println(b);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">123</span><br><span class="hljs-number">123.0</span><br><span class="hljs-number">123</span><br></code></pre></td></tr></tbody></table></figure><h2 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h2><ol><li><p>程序阅读题，看看输出什么？</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231818375.png" alt="image-20230423181833303"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">30</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>使用char类型，分别保存\n \t \r \ 1等字符，并且打印输出</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//分别保存\n \t \r \\ 1 等字符</span><br>        <span class="hljs-keyword">char</span> c1 = <span class="hljs-string">'\n'</span>;<br>        <span class="hljs-keyword">char</span> c2 = <span class="hljs-string">'\t'</span>;<br>        <span class="hljs-keyword">char</span> c3 = <span class="hljs-string">'\r'</span>;<br>        <span class="hljs-keyword">char</span> c4 = <span class="hljs-string">'\\'</span>;<br>        <span class="hljs-keyword">char</span> c5 = <span class="hljs-string">'1'</span>;<br>        System.out.println(c1);<br>        System.out.println(c2);<br>        System.out.println(c3);<br>        System.out.println(c4);<br>        System.out.println(c5);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><p>   <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231822946.png" alt="image-20230423182217892"></p><ol start="3"><li><p>保存两本书名，用+拼接，看效果。</p><p>保存两个性别，用+拼接，看效果。</p><p>保存两本书价格，用+拼接，看效果。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String s1 = <span class="hljs-string">"向前一步"</span>;<br>        String s2 = <span class="hljs-string">"你当像鸟飞往你的山"</span>;<br>        System.out.println(s1 + s2);<br><br>        <span class="hljs-keyword">char</span> c1 = <span class="hljs-string">'男'</span>;<br>        <span class="hljs-keyword">char</span> c2 = <span class="hljs-string">'女'</span>;<br>        System.out.println(c1 + c2);<br><br>        <span class="hljs-keyword">double</span> d1 = <span class="hljs-number">32.2</span>;<br>        <span class="hljs-keyword">double</span> d2 = <span class="hljs-number">31.1</span>;<br>        System.out.println(d1 + d2);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">向前一步你当像鸟飞往你的山<br><span class="hljs-number">52906</span><br><span class="hljs-number">63.300000000000004</span><br></code></pre></td></tr></tbody></table></figure></li></ol><p>   <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231826230.png" alt="image-20230423182612169"></p><ol start="4"><li>编程实现如下效果</li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231827982.png" alt="image-20230423182723923"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String name = <span class="hljs-string">"bambi"</span>;<br>        <span class="hljs-keyword">int</span> age = <span class="hljs-number">13</span>;<br>        <span class="hljs-keyword">char</span> gender = <span class="hljs-string">'女'</span>;<br>        <span class="hljs-keyword">int</span> score = <span class="hljs-number">99</span>;<br>        String hobby = <span class="hljs-string">"climbing"</span>;<br><br>        System.out.println(<span class="hljs-string">"姓名"</span> + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"年龄"</span> + <span class="hljs-string">"\t"</span>  + <span class="hljs-string">"性别"</span> + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"成绩"</span> +<br>                <span class="hljs-string">"\t"</span> + <span class="hljs-string">"爱好"</span> + <span class="hljs-string">"\n"</span> + name + <span class="hljs-string">"\t"</span> + age + <span class="hljs-string">"\t"</span> + gender + <span class="hljs-string">"\t"</span> + score + <span class="hljs-string">"\t"</span> + hobby);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>用IDEA执行代码输出结果为：</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231837386.png" alt="image-20230423183732333"></p><p>用CMD执行代码输出结果为：</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231840160.png" alt="image-20230423184019110"></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="运算符介绍"><a href="#运算符介绍" class="headerlink" title="运算符介绍"></a>运算符介绍</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231844045.png" alt="image-20230423184411984"></p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><h3 id="算术运算符一览"><a href="#算术运算符一览" class="headerlink" title="算术运算符一览"></a>算术运算符一览</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304230743900.png" alt="image-20230423074305547"></p><h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><p>*<em>对一个数取模，等价于a%b = a-a/b</em>b。**</p><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><h4 id="假如还有-59-天放假，问：合-xx-个星期零-xx-天"><a href="#假如还有-59-天放假，问：合-xx-个星期零-xx-天" class="headerlink" title="假如还有 59 天放假，问：合 xx 个星期零 xx 天"></a>假如还有 59 天放假，问：合 xx 个星期零 xx 天</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span> days = <span class="hljs-number">258</span>;<br>        <span class="hljs-keyword">int</span> weeks = days/<span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">int</span> leftDays = days%<span class="hljs-number">7</span>;<br>        System.out.println(days + <span class="hljs-string">"天,"</span> + <span class="hljs-string">"合"</span> + weeks + <span class="hljs-string">"星期零"</span> + leftDays + <span class="hljs-string">"天"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">258</span>天,合<span class="hljs-number">36</span>星期零<span class="hljs-number">6</span>天<br></code></pre></td></tr></tbody></table></figure><h4 id="定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5-9-华氏温度-100-请求出华氏温度对应的摄氏温度。-234-5"><a href="#定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5-9-华氏温度-100-请求出华氏温度对应的摄氏温度。-234-5" class="headerlink" title="定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度。[234.5]"></a>定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度。[234.5]</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br><span class="hljs-comment">//        定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度。[234.5]</span><br>        <span class="hljs-keyword">double</span> fahrenheit = <span class="hljs-number">60.8</span>;<br>        <span class="hljs-keyword">double</span> centigrade = <span class="hljs-number">5.0</span> / <span class="hljs-number">9</span> * (fahrenheit - <span class="hljs-number">100</span>);<br>        System.out.println(centigrade);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">21.77777777777778</span><br></code></pre></td></tr></tbody></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li>关系运算符的结果都是布尔（boolean）类型，要么是true，要么是false。</li><li>关系运算符组成的表达式称为关系表达式。</li></ol><h3 id="关系运算符一览"><a href="#关系运算符一览" class="headerlink" title="关系运算符一览"></a>关系运算符一览</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304240936791.png" alt="image-20230424093615612"></p><h1 id="程序控制结构"><a href="#程序控制结构" class="headerlink" title="程序控制结构"></a>程序控制结构</h1><h2 id="程序流程控制介绍"><a href="#程序流程控制介绍" class="headerlink" title="程序流程控制介绍"></a>程序流程控制介绍</h2><h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><h2 id="分支控制-if-else"><a href="#分支控制-if-else" class="headerlink" title="分支控制 if-else"></a>分支控制 if-else</h2><h2 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h2><h2 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h2><h2 id="switch-分支结构"><a href="#switch-分支结构" class="headerlink" title="switch 分支结构"></a>switch 分支结构</h2><h2 id="for-循环控制"><a href="#for-循环控制" class="headerlink" title="for 循环控制(!!!)"></a>for 循环控制(!!!)</h2><h2 id="while-循环控制"><a href="#while-循环控制" class="headerlink" title="while 循环控制"></a>while 循环控制</h2><h2 id="do-while-循环控制"><a href="#do-while-循环控制" class="headerlink" title="do..while 循环控制"></a>do..while 循环控制</h2><h2 id="多重循环控制-难点-重点"><a href="#多重循环控制-难点-重点" class="headerlink" title="多重循环控制(难点! 重点!)"></a>多重循环控制(难点! 重点!)</h2><h2 id="跳转控制语句-break"><a href="#跳转控制语句-break" class="headerlink" title="跳转控制语句-break"></a>跳转控制语句-break</h2><h2 id="跳转控制语句-continue"><a href="#跳转控制语句-continue" class="headerlink" title="跳转控制语句-continue"></a>跳转控制语句-continue</h2><h2 id="跳转控制语句-return"><a href="#跳转控制语句-return" class="headerlink" title="跳转控制语句-return"></a>跳转控制语句-return</h2><h2 id="本章作业-1"><a href="#本章作业-1" class="headerlink" title="本章作业"></a>本章作业</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230905070920129.png" alt="image-20230905070920129"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230905070943434.png" alt="image-20230905070943434"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter5.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework03</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span> </span>{<br>        <span class="hljs-keyword">if</span> ((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &amp;&amp; (year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) {<br>            System.out.println(year + <span class="hljs-string">"年是闰年"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(year + <span class="hljs-string">"年不是闰年"</span>);<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Homework03 homework03 = <span class="hljs-keyword">new</span> Homework03();<br>        homework03.test(<span class="hljs-number">2005</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906070301161.png" alt="image-20230906070301161"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906070348491.png" alt="image-20230906070348491"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230905070953038.png" alt="image-20230905070953038"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230905070959349.png" alt="image-20230905070959349"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter5.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework06</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span>) {<br>                count++;<br>                System.out.print(i + <span class="hljs-string">"\t"</span>);<br>                <span class="hljs-keyword">if</span> (count % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) {<br>                    System.out.print(<span class="hljs-string">"\n"</span>);<br>                }<br>            }<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Homework06 homework06 = <span class="hljs-keyword">new</span> Homework06();<br>        homework06.test();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906070820646.png" alt="image-20230906070820646"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter5.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework07</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> i = <span class="hljs-string">'a'</span>; i &lt;= <span class="hljs-string">'z'</span>; i++) {<br>            System.out.print(i + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.println();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> i = <span class="hljs-string">'Z'</span>; i &gt;= <span class="hljs-string">'A'</span>; i--) {<br>            System.out.print(i + <span class="hljs-string">" "</span>);<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Homework07 homework = <span class="hljs-keyword">new</span> Homework07();<br>        homework.test();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906071137511.png" alt="image-20230906071137511"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter5.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework08</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {<br>                sum -= <span class="hljs-number">1.0</span> / i;<br>            } <span class="hljs-keyword">else</span> {<br>                sum += <span class="hljs-number">1.0</span> / i;<br>            }<br>        }<br>        System.out.println(<span class="hljs-string">"结果为: "</span> + sum);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Homework08 homework = <span class="hljs-keyword">new</span> Homework08();<br>        homework.test();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906071900131.png" alt="image-20230906071900131"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter5.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework09</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) {<br>                sum += j;<br>            }<br>        }<br>        System.out.println(<span class="hljs-string">"总和为："</span> + sum);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Homework09 homework = <span class="hljs-keyword">new</span> Homework09();<br>        homework.test();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906072141816.png" alt="image-20230906072141816"></p><h1 id="数组、排序和查找"><a href="#数组、排序和查找" class="headerlink" title="数组、排序和查找"></a>数组、排序和查找</h1><h2 id="为什么需要数组"><a href="#为什么需要数组" class="headerlink" title="为什么需要数组"></a>为什么需要数组</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230914062217.jpg"></p><h3 id="数组介绍"><a href="#数组介绍" class="headerlink" title="数组介绍"></a>数组介绍</h3><p>数组可以存放多个同一类型的数据。数组也是一种数据类型，为引用类型。</p><p>即：数组就是一组数据</p><h3 id="数组快速入门"><a href="#数组快速入门" class="headerlink" title="数组快速入门"></a>数组快速入门</h3><p>用数组来解决上面的问题。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230914062208.jpg"></p><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>使用方式1：动态初始化</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数据类型[] 数组名 = new 数据类型[大小]；</p><p>int [] arr=new int[5];</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>数组名[下标]</p><p>arr[2] 代表要访问arr数组的第三个元素。（数组下标是从0开始的）</p><h4 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h4><p>循环输入5个成绩，保存到double数组并输出。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Array02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">double</span>[] scores = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">5</span>];<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) {<br>            System.out.println(<span class="hljs-string">"请输入第"</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">"个成绩"</span>);<br>            scores[i] = scanner.nextDouble();<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; scores.length; i++) {<br>            System.out.print(scores[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">请输入第<span class="hljs-number">1</span>个成绩<br><span class="hljs-number">90</span><br>请输入第<span class="hljs-number">2</span>个成绩<br><span class="hljs-number">89</span><br>请输入第<span class="hljs-number">3</span>个成绩<br><span class="hljs-number">30</span><br>请输入第<span class="hljs-number">4</span>个成绩<br><span class="hljs-number">100</span><br>请输入第<span class="hljs-number">5</span>个成绩<br><span class="hljs-number">85</span><br><span class="hljs-number">90.0</span><span class="hljs-number">89.0</span><span class="hljs-number">30.0</span><span class="hljs-number">100.0</span><span class="hljs-number">85.0</span><br></code></pre></td></tr></tbody></table></figure><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><h2 id="数组使用注意事项和细节"><a href="#数组使用注意事项和细节" class="headerlink" title="数组使用注意事项和细节"></a>数组使用注意事项和细节</h2><ol><li><p>数组是多个相同类型数据的组合，实现对这些数据的统一管理</p></li><li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。</p></li><li><p>数组创建后，如果没有赋值，有默认值<br>int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null</p></li><li><p>使用数组的步骤1. 声明数组并开辟空间2. 给数组各个元素赋值3. 使用数组</p></li><li><p>数组的<strong>下标是从0 开始</strong>的。</p></li><li><p>数组下标必须在指定范围内使用，否则报：下标越界异常，比如：</p><p>int [] arr=new int[5]; 则有效下标为0-4</p></li><li><p>数组属引用类型，数组型数据是对象(object)</p></li></ol><h2 id="数组应用案例"><a href="#数组应用案例" class="headerlink" title="数组应用案例"></a>数组应用案例</h2><p>创建一个char 类型的26 个元素的数组，分别放置’A’-‘Z’。使用for 循环访问所有元素并打印出来。提示：char 类型数据运算’A’+2 -&gt; ‘C’</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">char</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            arr[i] = (<span class="hljs-keyword">char</span>) (<span class="hljs-string">'A'</span> + i);<br>        }<br><br>        System.out.println(<span class="hljs-string">"正序输出====&gt;"</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.println();<br><br>        System.out.println(<span class="hljs-string">"倒序输出====&gt;"</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {<br>            System.out.print(arr[i] + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">正序输出====&gt;<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z <br>倒序输出====&gt;<br>Z Y X W V U T S R Q P O N M L K J I H G F E D C B A <br></code></pre></td></tr></tbody></table></figure><p>请求出一个数组int[]的最大值{4,-1,9, 10,23}，并得到对应的下标</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">4</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">23</span>};<br>        <span class="hljs-keyword">int</span> maxValue = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">int</span> maxIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; maxValue) {<br>                maxValue = arr[i];<br>                maxIndex = i;<br>            }<br>        }<br>        System.out.println(<span class="hljs-string">"最大值："</span> + maxValue + <span class="hljs-string">"，对应的下标为："</span> + maxIndex);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">最大值：<span class="hljs-number">23</span>，对应的下标为：<span class="hljs-number">4</span><br></code></pre></td></tr></tbody></table></figure><h2 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h2><p>基本数据类型赋值，这个值就使具体的数据。且互不影响。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> n1=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> n2=n1;<br></code></pre></td></tr></tbody></table></figure><p>数组是引用传递，赋的值是地址。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230914214532.jpg"></p><h2 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h2><p>将int[] arr1 = {10,20,30}; 拷贝到arr2 数组, 要求数据空间是独立的.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr1 = {<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>};<br>        <span class="hljs-keyword">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr1.length];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) {<br>            arr2[i] = arr1[i];<br>        }<br>        System.out.println(<span class="hljs-string">"arr1数组为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) {<br>            System.out.print(arr1[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">"arr2数组为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr2.length; i++) {<br>            System.out.print(arr2[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">arr1数组为：<br><span class="hljs-number">10</span><span class="hljs-number">20</span><span class="hljs-number">30</span><br>arr2数组为：<br><span class="hljs-number">10</span><span class="hljs-number">20</span><span class="hljs-number">30</span><br></code></pre></td></tr></tbody></table></figure><h2 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h2><p>要求：把数组{11,22,33,44,55,66}的元素内容反转{66, 55,44,33,22,11}。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>};<br>        <span class="hljs-keyword">int</span>[] arrNew = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = arrNew.length - <span class="hljs-number">1</span>; i &lt; arr.length; i++, j--) {<br>            arrNew[j] = arr[i];<br>        }<br>        System.out.println(<span class="hljs-string">"原数组为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">"反转之后的数组为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) {<br>            System.out.print(arrNew[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">原数组为：<br><span class="hljs-number">11</span><span class="hljs-number">22</span><span class="hljs-number">33</span><span class="hljs-number">44</span><span class="hljs-number">55</span><span class="hljs-number">66</span><br>反转之后的数组为：<br><span class="hljs-number">66</span><span class="hljs-number">55</span><span class="hljs-number">44</span><span class="hljs-number">33</span><span class="hljs-number">22</span><span class="hljs-number">11</span><br></code></pre></td></tr></tbody></table></figure><h2 id="数组添加-扩容"><a href="#数组添加-扩容" class="headerlink" title="数组添加/扩容"></a>数组添加/扩容</h2><p>要求：实现动态的给数组添加元素效果，实现对数组扩容。</p><ol><li>原始数组使用静态分配int[] arr = {1,2,3}</li><li>用户可以决定是否继续添加，添加成功，是否继续？y/n</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br>        <span class="hljs-keyword">int</span>[] arrNew;<br>        <span class="hljs-keyword">int</span> number;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) {<br>            System.out.println(<span class="hljs-string">"请输入是否需要插入元素，y/n"</span>);<br>            <span class="hljs-keyword">char</span> c = scanner.next().charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">'y'</span>) {<br>                arrNew = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length + <span class="hljs-number">1</span>];<br>                System.out.println(<span class="hljs-string">"请输入要插入的元素："</span>);<br>                number = scanner.nextInt();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>                    arrNew[i] = arr[i];<br>                }<br>                arrNew[arrNew.length - <span class="hljs-number">1</span>] = number;<br>                arr = arrNew;<br>            } <span class="hljs-keyword">else</span> {<br>                System.out.println(<span class="hljs-string">"用户主动选择退出~"</span>);<br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br><br>        System.out.println(<span class="hljs-string">"最终的数组结果为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">请输入是否需要插入元素，y/n<br>y<br>请输入要插入的元素：<br><span class="hljs-number">4</span><br>请输入是否需要插入元素，y/n<br>y<br>请输入要插入的元素：<br><span class="hljs-number">5</span><br>请输入是否需要插入元素，y/n<br>n<br>用户主动选择退出~<br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">4</span><span class="hljs-number">5</span><br></code></pre></td></tr></tbody></table></figure><p>有一个数组{1， 2， 3， 4， 5}， 可以将该数组进行缩减，提示用户是否继续缩减，每次缩减最后那个元素。当只剩<br>下最后一个元素，提示，不能再缩减。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>};<br>        <span class="hljs-keyword">int</span>[] arrNew;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) {<br>            System.out.println(<span class="hljs-string">"请输入是否需要删除元素，y/n"</span>);<br>            <span class="hljs-keyword">char</span> c = scanner.next().charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (arr.length == <span class="hljs-number">1</span>) {<br>                System.out.println(<span class="hljs-string">"当前数组只剩余一个元素，不能再操作，直接退出~"</span>);<br>                showArray(arr);<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">'y'</span>) {<br>                arrNew = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) {<br>                    arrNew[i] = arr[i];<br>                }<br>                arr = arrNew;<br>                showArray(arr);<br>            } <span class="hljs-keyword">else</span> {<br>                System.out.println(<span class="hljs-string">"用户主动选择退出~"</span>);<br>                showArray(arr);<br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>{<br>        System.out.println(<span class="hljs-string">"当前数组结果为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">请输入是否需要删除元素，y/n<br>y<br>当前数组结果为：<br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">4</span><br>请输入是否需要删除元素，y/n<br>y<br>当前数组结果为：<br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><br>请输入是否需要删除元素，y/n<br>y<br>当前数组结果为：<br><span class="hljs-number">1</span><span class="hljs-number">2</span><br>请输入是否需要删除元素，y/n<br>y<br>当前数组结果为：<br><span class="hljs-number">1</span><br>请输入是否需要删除元素，y/n<br>y<br>当前数组只剩余一个元素，不能再操作，直接退出~<br>当前数组结果为：<br><span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h2 id="排序的介绍"><a href="#排序的介绍" class="headerlink" title="排序的介绍"></a>排序的介绍</h2><p>排序是将多个数据，依指定的顺序进行排列的过程。</p><h3 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h3><p>指将需要处理的所有数据都加载到内部存储器中进行排序。包括(交换式排序法、选择<br>式排序法和插入式排序法)；</p><h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3><p>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法和直接合并排序法)。</p><h2 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h2><p>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从后向前（从下标较大的元素开始），依次比较相邻元素<br>的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230914214824612.png" alt="image-20230914214824612"></p><p>下面我们举一个具体的案例来说明冒泡法。我们将五个无序：24,69,80,57,13 使用冒泡排序法将其排成一个从小到大的有<br>序数列。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">24</span>, <span class="hljs-number">69</span>, <span class="hljs-number">80</span>, <span class="hljs-number">57</span>, <span class="hljs-number">13</span>};<br>        System.out.println(<span class="hljs-string">"原数组为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>        <br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) {<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) {<br>                    temp = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = arr[j];<br>                    arr[j] = temp;<br>                }<br>            }<br>        }<br>        System.out.println(<span class="hljs-string">"冒泡排序输出的结果为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">原数组为：<br><span class="hljs-number">24</span><span class="hljs-number">69</span><span class="hljs-number">80</span><span class="hljs-number">57</span><span class="hljs-number">13</span><br>冒泡排序输出的结果为：<br><span class="hljs-number">13</span><span class="hljs-number">24</span><span class="hljs-number">57</span><span class="hljs-number">69</span><span class="hljs-number">80</span><br></code></pre></td></tr></tbody></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>在java 中，我们常用的查找有两种:</p><ol><li>顺序查找SeqSearch.java</li><li>二分查找【二分法，我们放在算法讲解】</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>有一个数列：白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王猜数游戏：从键盘中任意输入一个名称，判断数列中是否包含此名称【顺序查找】要求: 如果找到了，就提示找到，并给出下标值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String[] arr = {<span class="hljs-string">"白眉鹰王"</span>, <span class="hljs-string">"金毛狮王"</span>, <span class="hljs-string">"紫衫龙王"</span>, <span class="hljs-string">"青翼蝠王"</span>};<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">"请输入你要查找的名字："</span>);<br>        String findName = scanner.next();<br>        <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">if</span> (arr[i].equals(findName)) {<br>                index = i;<br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) {<br>            System.out.println(<span class="hljs-string">"没有找到你要查找的名字。"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"你要查找的名字："</span> + findName + <span class="hljs-string">"，已找到，其对应的数组下标为： "</span> + index);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">请输入你要查找的名字：<br>金毛狮王<br>你要查找的名字：金毛狮王，已找到，其对应的数组下标为： <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h2 id="多维数组-二维数组"><a href="#多维数组-二维数组" class="headerlink" title="多维数组-二维数组"></a>多维数组-二维数组</h2><h2 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h2><h3 id="快速入门案例-1"><a href="#快速入门案例-1" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><p>二维数组的每个元素是一维数组。</p><h3 id="使用方式1：动态初始化"><a href="#使用方式1：动态初始化" class="headerlink" title="使用方式1：动态初始化"></a>使用方式1：动态初始化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">语法：类型[][] 数组名 = <span class="hljs-keyword">new</span> 类型[大小][大小];<br>例子：<span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br></code></pre></td></tr></tbody></table></figure><p>二维数组的内存存在形式</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230915062237689.png" alt="image-20230915062237689"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/20230915070326.jpg"></p><h3 id="使用方式2：动态初始化"><a href="#使用方式2：动态初始化" class="headerlink" title="使用方式2：动态初始化"></a>使用方式2：动态初始化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">先声明：类型数组名[][]; TwoDimensionalArray02.java<br>再定义(开辟空间) 数组名= <span class="hljs-keyword">new</span> 类型[大小][大小]<br>赋值(有默认值，比如<span class="hljs-keyword">int</span> 类型的就是<span class="hljs-number">0</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="使用方式3：动态初始化（列数不确定）"><a href="#使用方式3：动态初始化（列数不确定）" class="headerlink" title="使用方式3：动态初始化（列数不确定）"></a>使用方式3：动态初始化（列数不确定）</h3><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230915062427603.png" alt="image-20230915062427603" style="zoom:50%;"><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/20230915070313.jpg"></p><h3 id="使用方式4：静态初始化"><a href="#使用方式4：静态初始化" class="headerlink" title="使用方式4：静态初始化"></a>使用方式4：静态初始化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">定义: 类型 数组名[][] = { {值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>.}, {值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>.}, {值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>.} }<br>例子: <span class="hljs-keyword">int</span>[][] arr = {{<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>}, {<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>}, {<span class="hljs-number">100</span>}};<br>解读：<br>    定义了一个二维数组arr<br>    arr 有三个元素(每个元素都是一维数组)<br>    第一个一维数组有<span class="hljs-number">3</span> 个元素, 第二个一维数组有<span class="hljs-number">3</span> 个元素, 第三个一维数组有<span class="hljs-number">1</span> 个元素<br></code></pre></td></tr></tbody></table></figure><h2 id="二维数组应用案例"><a href="#二维数组应用案例" class="headerlink" title="二维数组应用案例"></a>二维数组应用案例</h2><p>使用二维数组打印一个10 行杨辉三角。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[i + <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) {<br><br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || j == arr[i].length - <span class="hljs-number">1</span>) {<br>                    arr[i][j] = <span class="hljs-number">1</span>;<br>                } <span class="hljs-keyword">else</span> {<br>                    arr[i][j] = arr[i - <span class="hljs-number">1</span>][j] + arr[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                }<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) {<br>                System.out.print(arr[i][j] + <span class="hljs-string">" "</span>);<br>            }<br>            System.out.println();<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">15</span> <span class="hljs-number">20</span> <span class="hljs-number">15</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">21</span> <span class="hljs-number">35</span> <span class="hljs-number">35</span> <span class="hljs-number">21</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">28</span> <span class="hljs-number">56</span> <span class="hljs-number">70</span> <span class="hljs-number">56</span> <span class="hljs-number">28</span> <span class="hljs-number">8</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">9</span> <span class="hljs-number">36</span> <span class="hljs-number">84</span> <span class="hljs-number">126</span> <span class="hljs-number">126</span> <span class="hljs-number">84</span> <span class="hljs-number">36</span> <span class="hljs-number">9</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></tbody></table></figure><h2 id="二维数组使用细节和注意事项"><a href="#二维数组使用细节和注意事项" class="headerlink" title="二维数组使用细节和注意事项"></a>二维数组使用细节和注意事项</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>) 一维数组的声明方式有:<br><span class="hljs-keyword">int</span>[] x 或者<span class="hljs-keyword">int</span> x[]<br>    <br><span class="hljs-number">2</span>) 二维数组的声明方式有:<br><span class="hljs-keyword">int</span>[][] y 或者<span class="hljs-keyword">int</span>[] y[] 或者<span class="hljs-keyword">int</span> y[][]<br>    <br><span class="hljs-number">3</span>) 二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同。比如： map[][] 是一个二维数组。<span class="hljs-keyword">int</span> map [][] = {{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>},{<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>}}<br>由map[<span class="hljs-number">0</span>] 是一个含有两个元素的一维数组，map[<span class="hljs-number">1</span>] 是一个含有三个元素的一维数组构成，我们也称为列数不等<br>的二维数组<br></code></pre></td></tr></tbody></table></figure><h2 id="二维数组课堂练习"><a href="#二维数组课堂练习" class="headerlink" title="二维数组课堂练习"></a>二维数组课堂练习</h2><h2 id="本章作业-2"><a href="#本章作业-2" class="headerlink" title="本章作业"></a>本章作业</h2><p>已知有一个升序数组，要求插入一个元素之后，该数组仍然为升序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">90</span>};<br>        <span class="hljs-keyword">int</span>[] arrNew = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">23</span>;<br>        <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">if</span> (arr[i] &gt;= num) {<br>                index = i;<br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) {<span class="hljs-comment">//说明数据应该插入最后一位</span><br>            index = arr.length;<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) {<br>            <span class="hljs-keyword">if</span> (index == i) {<br>                arrNew[i] = num;<br>            } <span class="hljs-keyword">else</span> {<br>                arrNew[i] = arr[j];<br>                j++;<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) {<br>            System.out.print(arrNew[i] + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">10</span> <span class="hljs-number">12</span> <span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">90</span> <br></code></pre></td></tr></tbody></table></figure><p>随机生成10个整数（1-100）范围内，保存到数组中。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">int</span> num = random.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>            arr[i] = num;<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">84</span> <span class="hljs-number">53</span> <span class="hljs-number">23</span> <span class="hljs-number">19</span> <span class="hljs-number">43</span> <span class="hljs-number">98</span> <span class="hljs-number">68</span> <span class="hljs-number">26</span> <span class="hljs-number">79</span> <span class="hljs-number">3</span> <br></code></pre></td></tr></tbody></table></figure><h1 id="面向对象编程（基础部分）"><a href="#面向对象编程（基础部分）" class="headerlink" title="面向对象编程（基础部分）"></a>面向对象编程（基础部分）</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="养猫猫问题"><a href="#养猫猫问题" class="headerlink" title="养猫猫问题"></a>养猫猫问题</h3><p>张老太养了两只猫猫:一只名字叫小白,今年 3 岁,白色。还有一只叫小花,今年 100 岁,花色。请编写一个程序，当用户输入小猫的名字时，就显示该猫的名字，年龄，颜色。如果用户输入的小猫名错误，则显示张老太没有这只猫猫。</p><h3 id="使用现有技术解决上述问题"><a href="#使用现有技术解决上述问题" class="headerlink" title="使用现有技术解决上述问题"></a>使用现有技术解决上述问题</h3><ol><li><p>单独定义变量解决</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第 1 只猫信息</span><br>String cat1Name = <span class="hljs-string">"小白"</span>;<br><span class="hljs-keyword">int</span> cat1Age = <span class="hljs-number">3</span>;<br>String cat1Color = <span class="hljs-string">"白色"</span>;<br><br><span class="hljs-comment">//第 2 只猫信息</span><br>String cat2Name = <span class="hljs-string">"小花"</span>;<br><span class="hljs-keyword">int</span> cat2Age = <span class="hljs-number">100</span>;<br>String cat2Color = <span class="hljs-string">"花色"</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>使用数组</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.数据类型体现不出来</span><br><span class="hljs-comment">//2.只能通过[下标]获取信息，造成变量名字和内容的对应关系不明确</span><br><span class="hljs-comment">//3.不能体现猫的行为</span><br>String[] cat1 = {<span class="hljs-string">"小白"</span>, <span class="hljs-string">"3"</span>, <span class="hljs-string">"白色"</span>};<br>String[] cat2 = {<span class="hljs-string">"小花"</span>, <span class="hljs-string">"100"</span>, <span class="hljs-string">"花色"</span>};<br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="现有技术缺点分析"><a href="#现有技术缺点分析" class="headerlink" title="现有技术缺点分析"></a>现有技术缺点分析</h3><ul><li>不利于数据管理</li><li>效率低下</li></ul><h3 id="引入类与对象（OOP）"><a href="#引入类与对象（OOP）" class="headerlink" title="引入类与对象（OOP）"></a>引入类与对象（OOP）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Cat cat1 = <span class="hljs-keyword">new</span> Cat();<br>cat1.name = <span class="hljs-string">"小白"</span>;<br>cat1.age = <span class="hljs-number">3</span>;<br>cat1.color = <span class="hljs-string">"白色"</span>;<br>cat1.weight = <span class="hljs-number">10</span>;<br><br>Cat cat2 = <span class="hljs-keyword">new</span> Cat();<br>cat2.name = <span class="hljs-string">"小花"</span>;<br>cat2.age = <span class="hljs-number">100</span>;<br>cat2.color = <span class="hljs-string">"花色"</span>;<br>cat2.weight = <span class="hljs-number">20</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="类和对象的内存分配机制（重点！！！）"><a href="#类和对象的内存分配机制（重点！！！）" class="headerlink" title="类和对象的内存分配机制（重点！！！）"></a>类和对象的内存分配机制（重点！！！）</h3><h4 id="Java内存结构分析"><a href="#Java内存结构分析" class="headerlink" title="Java内存结构分析"></a>Java内存结构分析</h4><ol><li>栈：基本数据类型</li><li>堆：存放对象（Cat cat，数组等）</li><li>方法区：常量池（常量，字符串），类加载信息</li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304241358645.png" alt="image-20230424135822547"></p><h4 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h4><p>分析下列代码的内存结构：</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304241706409.png" alt="image-20230424170641328"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304241727144.png" alt="image-20230424172718050"></p><h3 id="重载介绍"><a href="#重载介绍" class="headerlink" title="重载介绍"></a>重载介绍</h3><p>同一个类里面，可以有多个同名的方法。但是方法的形参列表不能一样。</p><h3 id="可变参数使用"><a href="#可变参数使用" class="headerlink" title="可变参数使用"></a>可变参数使用</h3><p>可以通过可变参数，将同一个类中同方法名，同功能但是不同参数的方法封装成一个方法。</p><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><p>修饰符 返回值类型 方法名(参数类型… 形参名) {</p><p>}</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>求2个整数，3个整数，5个整数的和。</p><p><strong>使用传统技术解决问题</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        SumNum sumNum = <span class="hljs-keyword">new</span> SumNum();<br>        System.out.println(sumNum.sum2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>        System.out.println(sumNum.sum3(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>        System.out.println(sumNum.sum5(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SumNum</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n1, <span class="hljs-keyword">int</span> n2)</span></span>{<br>        <span class="hljs-keyword">return</span> n1 + n2;<br>    }<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n1, <span class="hljs-keyword">int</span> n2, <span class="hljs-keyword">int</span> n3)</span></span>{<br>        <span class="hljs-keyword">return</span> n1 + n2 + n3;<br>    }<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum5</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n1, <span class="hljs-keyword">int</span> n2, <span class="hljs-keyword">int</span> n3, <span class="hljs-keyword">int</span> n4, <span class="hljs-keyword">int</span> n5)</span></span>{<br>        <span class="hljs-keyword">return</span> n1 + n2 + n3 + n4 + n5;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">3</span><br><span class="hljs-number">6</span><br><span class="hljs-number">15</span><br></code></pre></td></tr></tbody></table></figure><p><strong>使用可变参数解决问题</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        SumNum sumNum = <span class="hljs-keyword">new</span> SumNum();<br>        System.out.println(sumNum.sums(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>        System.out.println(sumNum.sums(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>        System.out.println(sumNum.sums(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SumNum</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sums</span><span class="hljs-params">(<span class="hljs-keyword">int</span>... n)</span></span>{<br>        <span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n.length; i++) {<br>            total += n[i];<br>        }<br>        <span class="hljs-keyword">return</span> total;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">3</span><br><span class="hljs-number">6</span><br><span class="hljs-number">15</span><br></code></pre></td></tr></tbody></table></figure><h3 id="对象创建流程分析（包含构造器）"><a href="#对象创建流程分析（包含构造器）" class="headerlink" title="对象创建流程分析（包含构造器）"></a>对象创建流程分析（包含构造器）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">5</span>, <span class="hljs-string">"闹闹"</span>);<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">int</span> age = <span class="hljs-number">10</span>;<br>    String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304241747184.png" alt="image-20230424174731976"></p><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>在某些情况下，我们要需要定义成员方法(简称方法)。比如人类:除了有一些属性外( 年龄，姓名..),我们人类还有一些行为比如:可以说话、跑步..,通过学习，还可以做算术题。这时就要用成员方法才能完成。</p><h3 id="成员方法快速入门"><a href="#成员方法快速入门" class="headerlink" title="成员方法快速入门"></a>成员方法快速入门</h3><p>笔记本28页图片</p><h3 id="方法的调用机制原理"><a href="#方法的调用机制原理" class="headerlink" title="方法的调用机制原理"></a>方法的调用机制原理</h3><p>笔记本29页图片</p><h3 id="为什么需要成员方法"><a href="#为什么需要成员方法" class="headerlink" title="为什么需要成员方法"></a>为什么需要成员方法</h3><p>笔记本29页图片</p><h3 id="成员方法的好处"><a href="#成员方法的好处" class="headerlink" title="成员方法的好处"></a>成员方法的好处</h3><p>提高代码的复用性</p><p>可以将实现的细节封装起来，然后供其他用户来调用即可</p><h3 id="成员方法的定义"><a href="#成员方法的定义" class="headerlink" title="成员方法的定义"></a>成员方法的定义</h3><p>笔记本30页</p><h3 id="注意事项和使用细节"><a href="#注意事项和使用细节" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><p><strong>访问修饰符(作用是控制方法使用的范围)</strong><br>如果不写默认访问，[有四种: public, protected, 默认, private], 具体在后面说</p><p><strong>返回数据类型</strong></p><ol><li>一个方法最多有一个返回值[思考，如何返回多个结果返回数组]</li><li>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</li><li>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为return 值; 而且要求返回值类型必须和return 的<br> 值类型一致或兼容</li><li>如果方法是void，则方法体中可以没有return 语句，或者只写return ;</li></ol><p><strong>方法名</strong><br>遵循驼峰命名法，最好见名知义，表达出该功能的意思即可, 比如得到两个数的和getSum, 开发中按照规范</p><p><strong>形参列表</strong></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230926055700474.png" alt="image-20230926055700474"></p><h3 id="类定义的完善"><a href="#类定义的完善" class="headerlink" title="类定义的完善"></a>类定义的完善</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20231001063620877.png" alt="image-20231001063620877"></p><h3 id="课堂练习题"><a href="#课堂练习题" class="headerlink" title="课堂练习题"></a>课堂练习题</h3><p>1.编写类AA ，有一个方法：判断一个数是奇数odd 还是偶数, 返回boolean</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        AA aa = <span class="hljs-keyword">new</span> AA();<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">if</span> (aa.isOdd(num)) {<br>            System.out.println(<span class="hljs-string">"数字"</span> + num + <span class="hljs-string">"是奇数"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"数字"</span> + num + <span class="hljs-string">"是偶数"</span>);<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AA</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOdd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>{<br>        <span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? <span class="hljs-keyword">false</span> : <span class="hljs-keyword">true</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数字<span class="hljs-number">4</span>是偶数<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数字<span class="hljs-number">9</span>是奇数<br></code></pre></td></tr></tbody></table></figure><p>2.根据行、列、字符打印对应行数和列数的字符，比如：行：3，列：2，字符 #, 则打印相应的效果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String[][] arr = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) {<br>                arr[i][j] = <span class="hljs-string">"#"</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) {<br>                System.out.print(arr[i][j] + <span class="hljs-string">"\t"</span>);<br>            }<br>            System.out.println();<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">##<br>##<br>##<br></code></pre></td></tr></tbody></table></figure><h2 id="成员方法传参机制-非常非常重要"><a href="#成员方法传参机制-非常非常重要" class="headerlink" title="成员方法传参机制(非常非常重要)"></a>成员方法传参机制(非常非常重要)</h2><h3 id="基本数据类型的传参机制"><a href="#基本数据类型的传参机制" class="headerlink" title="基本数据类型的传参机制"></a>基本数据类型的传参机制</h3><p>基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参。</p><h3 id="引用数据类型的传参机制"><a href="#引用数据类型的传参机制" class="headerlink" title="引用数据类型的传参机制"></a>引用数据类型的传参机制</h3><p>引用类型可以通过形参来影响实参。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001070833.jpg"></p><h3 id="成员方法返回类型是引用类型应用实例"><a href="#成员方法返回类型是引用类型应用实例" class="headerlink" title="成员方法返回类型是引用类型应用实例"></a>成员方法返回类型是引用类型应用实例</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001070934.jpg"></p><h2 id="方法递归调用-非常非常重要，比较难"><a href="#方法递归调用-非常非常重要，比较难" class="headerlink" title="方法递归调用(非常非常重要，比较难)"></a>方法递归调用(非常非常重要，比较难)</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>递归就是方法自己调用自己。</p><h3 id="递归能解决什么问题"><a href="#递归能解决什么问题" class="headerlink" title="递归能解决什么问题?"></a>递归能解决什么问题?</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001071209.jpg"></p><h3 id="递归举例"><a href="#递归举例" class="headerlink" title="递归举例"></a>递归举例</h3><p>打印问题</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001071559.jpg"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Recursion01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        T t = <span class="hljs-keyword">new</span> T();<br>        t.test(<span class="hljs-number">4</span>);<span class="hljs-comment">//调用方法后输出结果是？</span><br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>{<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">2</span>) {<br>            test(n - <span class="hljs-number">1</span>);<br>        }<br>        System.out.println(<span class="hljs-string">"n="</span> + n);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">n=<span class="hljs-number">2</span><br>n=<span class="hljs-number">3</span><br>n=<span class="hljs-number">4</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001073459.jpg"></p><p>阶乘问题</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001071609.jpg"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">```<br><br><br><br>### 递归重要规则<br><br>![image-<span class="hljs-number">20230920060433456</span>](https:<span class="hljs-comment">//raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230920060433456.png)</span><br><br>### 课堂练习<br><br>![image-<span class="hljs-number">20230920052744709</span>](https:<span class="hljs-comment">//raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230920052744709.png)</span><br><br>请使用递归的方式求出斐波那契数<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13.</span>..给你一个整数n，求出它的斐波那契值是多少。<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecursionExercise01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        T t = <span class="hljs-keyword">new</span> T();<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">int</span> fibonacciNum = t.fibonacci(n);<br>        <span class="hljs-keyword">if</span> (fibonacciNum != -<span class="hljs-number">1</span>) {<br>            System.out.println(<span class="hljs-string">"数字 "</span> + n + <span class="hljs-string">" 的斐波那契值为 "</span> + fibonacciNum);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"数据不合法"</span>);<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>{<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) {<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">return</span> fibonacci(n - <span class="hljs-number">1</span>) + fibonacci(n - <span class="hljs-number">2</span>);<br>            }<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"数据不合法，输入的n为："</span> + n);<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数字 <span class="hljs-number">7</span> 的斐波那契值为 <span class="hljs-number">13</span><br></code></pre></td></tr></tbody></table></figure><p>猴子吃桃子问题：有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个！以后每天猴子都吃其中的一半，然后再多吃一个。当到第10 天时，想再吃时（即还没吃），发现只有1个桃子了。问题：最初共多少个桃子？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter07;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecursionExercise01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        T t = <span class="hljs-keyword">new</span> T();<br>        <span class="hljs-keyword">int</span> peach = t.peach(<span class="hljs-number">1</span>);<br>        System.out.println(peach);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peach</span><span class="hljs-params">(<span class="hljs-keyword">int</span> day)</span> </span>{<br>        <span class="hljs-keyword">if</span> (day == <span class="hljs-number">10</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">9</span>) {<br>            <span class="hljs-keyword">return</span> (peach(day + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="递归调用应用实例-迷宫问题"><a href="#递归调用应用实例-迷宫问题" class="headerlink" title="递归调用应用实例-迷宫问题"></a>递归调用应用实例-迷宫问题</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230920054444242.png" alt="image-20230920054444242"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGong</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        MiGongTest miGongTest = <span class="hljs-keyword">new</span> MiGongTest();<br>        <span class="hljs-keyword">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; map[i].length; j++) {<br>                map[i][j] = <span class="hljs-number">0</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            map[i][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) {<br>            map[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>            map[<span class="hljs-number">7</span>][j] = <span class="hljs-number">1</span>;<br>        }<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        miGongTest.findWay(map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; map[i].length; j++) {<br>                System.out.print(map[i][j] + <span class="hljs-string">" "</span>);<br>            }<br>            System.out.println();<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGongTest</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findWay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] map, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>{<br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) {<br>                map[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (findWay(map, i + <span class="hljs-number">1</span>, j)) {<span class="hljs-comment">//下</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i, j + <span class="hljs-number">1</span>)) {<span class="hljs-comment">//右</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i - <span class="hljs-number">1</span>, j)) {<span class="hljs-comment">//上</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i, j - <span class="hljs-number">1</span>)) {<span class="hljs-comment">//左</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> {<br>                    map[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                }<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></tbody></table></figure><p>测试回溯法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGong</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        MiGongTest miGongTest = <span class="hljs-keyword">new</span> MiGongTest();<br>        <span class="hljs-keyword">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; map[i].length; j++) {<br>                map[i][j] = <span class="hljs-number">0</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            map[i][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) {<br>            map[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>            map[<span class="hljs-number">7</span>][j] = <span class="hljs-number">1</span>;<br>        }<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<span class="hljs-comment">//测试回溯法</span><br>        miGongTest.findWay(map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; map[i].length; j++) {<br>                System.out.print(map[i][j] + <span class="hljs-string">" "</span>);<br>            }<br>            System.out.println();<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGongTest</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findWay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] map, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>{<br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) {<br>                map[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (findWay(map, i + <span class="hljs-number">1</span>, j)) {<span class="hljs-comment">//下</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i, j + <span class="hljs-number">1</span>)) {<span class="hljs-comment">//右</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i - <span class="hljs-number">1</span>, j)) {<span class="hljs-comment">//上</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i, j - <span class="hljs-number">1</span>)) {<span class="hljs-comment">//左</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> {<br>                    map[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                }<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></tbody></table></figure><h3 id="递归调用应用实例-汉诺塔"><a href="#递归调用应用实例-汉诺塔" class="headerlink" title="递归调用应用实例-汉诺塔"></a>递归调用应用实例-汉诺塔</h3><h3 id="递归调用应用实例-八皇后问题-同学们先尝试做，后面老师评讲"><a href="#递归调用应用实例-八皇后问题-同学们先尝试做，后面老师评讲" class="headerlink" title="递归调用应用实例-八皇后问题[同学们先尝试做，后面老师评讲.]"></a>递归调用应用实例-八皇后问题[同学们先尝试做，后面老师评讲.]</h3><h2 id="方法重载-OverLoad"><a href="#方法重载-OverLoad" class="headerlink" title="方法重载(OverLoad)"></a>方法重载(OverLoad)</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>同一个类中，拥有<strong>相同方法名</strong>，且<strong>形参列表不一样</strong>。（返回类型无要求）</p><h3 id="重载的好处"><a href="#重载的好处" class="headerlink" title="重载的好处"></a>重载的好处</h3><p>减轻了起名和记名的麻烦。</p><h3 id="快速入门案例-2"><a href="#快速入门案例-2" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20231007092829954.png" alt="image-20231007092829954"></p><h3 id="注意事项和使用细节-1"><a href="#注意事项和使用细节-1" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><h3 id="课堂练习题-1"><a href="#课堂练习题-1" class="headerlink" title="课堂练习题"></a>课堂练习题</h3><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><h3 id="深入理解this"><a href="#深入理解this" class="headerlink" title="深入理解this"></a>深入理解this</h3><h4 id="什么是this？"><a href="#什么是this？" class="headerlink" title="什么是this？"></a>什么是this？</h4><p>Java虚拟机给每个对象都分配了一个this，代表当前对象。</p><h4 id="this本质"><a href="#this本质" class="headerlink" title="this本质"></a>this本质</h4><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504070603522.png" alt="image-20230504070603522"></p><h4 id="this小结"><a href="#this小结" class="headerlink" title="this小结"></a>this小结</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">dog1.info();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">()</span></span>{<br>    System.out.println(<span class="hljs-keyword">this</span>.hashCode());<span class="hljs-comment">//此时，输出的就是dog1的hashCode值。哪个对象调用，this就是哪个对象。</span><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="this的注意事项和使用细节"><a href="#this的注意事项和使用细节" class="headerlink" title="this的注意事项和使用细节"></a>this的注意事项和使用细节</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504063923225.png" alt="image-20230504063923225"></p><h3 id="本章作业-3"><a href="#本章作业-3" class="headerlink" title="本章作业"></a>本章作业</h3><ol><li><p>定义方法max，实现求某个double数组的最大值，并返回</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        A01 a01 = <span class="hljs-keyword">new</span> A01();<br>        <span class="hljs-keyword">double</span>[] array = {<span class="hljs-number">10.01</span>, <span class="hljs-number">80.25</span>, <span class="hljs-number">20.15</span>, <span class="hljs-number">30.71</span>, <span class="hljs-number">12.56</span>};<br>        System.out.println(a01.max(array));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A01</span> </span>{<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">double</span>[] array)</span> </span>{<br>        <span class="hljs-keyword">double</span> ans = <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) {<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) {<br>                ans = array[i];<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">if</span> (ans &lt; array[i]) {<br>                    ans = array[i];<br>                }<br>            }<br><br>        }<br>        <span class="hljs-keyword">return</span> ans;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="2"><li><p>定义方法find，实现查找某字符串是否在字符串数组中，并返回索引，如果找不到，则返回-1</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        A02 a02 = <span class="hljs-keyword">new</span> A02();<br>        String[] array = {<span class="hljs-string">"bambi"</span>, <span class="hljs-string">"eazin"</span>, <span class="hljs-string">"stefen"</span>};<br>        System.out.println(a02.find(<span class="hljs-string">"summer"</span>, array));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(String s, String[] array)</span> </span>{<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) {<br>            <span class="hljs-keyword">if</span> (s.equals(array[i])) {<br>                <span class="hljs-keyword">return</span> i;<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p>编写类Book，定义方法updatePrice，实现更改某本书的价格，具体：如果价格大于150，则更改为150；如果价格大于100，则更改为100；否则不变。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A03</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Book book = <span class="hljs-keyword">new</span> Book();<br>        System.out.println(book.updatePrice(<span class="hljs-number">200.55</span>));<br>        System.out.println(book.updatePrice(<span class="hljs-number">130.91</span>));<br>        System.out.println(book.updatePrice(<span class="hljs-number">50.21</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>{<br>    <span class="hljs-comment">//编写类Book，定义方法updatePrice，实现更改某本书的价格，具体：如果价格大于150，则更改为150；如果价格大于100，则更改为100；否则不变。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">updatePrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> price)</span></span>{<br>        <span class="hljs-keyword">if</span>(price &gt; <span class="hljs-number">150</span>){<br>            price = <span class="hljs-number">150</span>;<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (price &gt; <span class="hljs-number">100</span>) {<br>            price = <span class="hljs-number">100</span>;<br>        }<br>        <span class="hljs-keyword">return</span> price;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">150.0</span><br><span class="hljs-number">100.0</span><br><span class="hljs-number">50.21</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写类，实现数组的复制功能copyArr，输入旧数组，返回新数组。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A03</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        A04 a04 = <span class="hljs-keyword">new</span> A04();<br>        <span class="hljs-keyword">int</span>[] ints = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>};<br>        <span class="hljs-keyword">int</span>[] afterArr = a04.copyArr(ints);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : afterArr) {<br>            System.out.println(num);<br>        }<br>    }<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A04</span> </span>{<br>    <span class="hljs-comment">//定义一个类，实现数组的复制功能copyArr。输入旧数组，返回一个新数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] copyArr(<span class="hljs-keyword">int</span>[] array) {<br>        <span class="hljs-keyword">int</span>[] newArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array.length];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) {<br>            newArr[i] = array[i];<br>        }<br>        <span class="hljs-keyword">return</span> newArr;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504072459076.png" alt="image-20230504072459076"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504072517694.png" alt="image-20230504072517694"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504072532803.png" alt="image-20230504072532803"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504072549638.png" alt="image-20230504072549638"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504072611368.png" alt="image-20230504072611368"></p><h1 id="面向对象编程（中级部分）"><a href="#面向对象编程（中级部分）" class="headerlink" title="面向对象编程（中级部分）"></a>面向对象编程（中级部分）</h1><h2 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h2><ol><li>删除当前行, 默认是ctrl + d </li><li>复制当前行, 自己配置 ctrl + alt + 向下光标 </li><li>补全代码 alt + / </li><li>添加注释和取消注释 ctrl + / 【第一次是添加注释，第二次是取消注释】 </li><li>导入该行需要的类 先配置 auto import , 然后使用 alt+enter 即可<br><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230519065918032.png" alt="image-20230519065918032"></li><li>快速格式化代码 ctrl + alt + L </li><li>快速运行程序 自己定义 alt + R </li><li>生成构造器等 alt + insert [提高开发效率] </li><li>查看一个类的层级关系F4<br><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230519070517309.png" alt="image-20230519070517309"></li><li>将光标放在一个方法上，输入 ctrl + B , 可以定位到方法 [学继承后，非常有用] —–这个在我电脑上不生效，再试试</li><li>自动的分配变量名 , 通过 在后面假 .var [老师最喜欢的]</li></ol><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象编程（基础部分）</title>
    <link href="/posts/dfc0bd6b.html"/>
    <url>/posts/dfc0bd6b.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="养猫猫问题"><a href="#养猫猫问题" class="headerlink" title="养猫猫问题"></a>养猫猫问题</h3><p>张老太养了两只猫猫:一只名字叫小白,今年 3 岁,白色。还有一只叫小花,今年 100 岁,花色。请编写一个程序，当用户输入小猫的名字时，就显示该猫的名字，年龄，颜色。如果用户输入的小猫名错误，则显示张老太没有这只猫猫。</p><h3 id="使用现有技术解决上述问题"><a href="#使用现有技术解决上述问题" class="headerlink" title="使用现有技术解决上述问题"></a>使用现有技术解决上述问题</h3><ol><li><p>单独定义变量解决</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第 1 只猫信息</span><br>String cat1Name = <span class="hljs-string">"小白"</span>;<br><span class="hljs-keyword">int</span> cat1Age = <span class="hljs-number">3</span>;<br>String cat1Color = <span class="hljs-string">"白色"</span>;<br><br><span class="hljs-comment">//第 2 只猫信息</span><br>String cat2Name = <span class="hljs-string">"小花"</span>;<br><span class="hljs-keyword">int</span> cat2Age = <span class="hljs-number">100</span>;<br>String cat2Color = <span class="hljs-string">"花色"</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>使用数组</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.数据类型体现不出来</span><br><span class="hljs-comment">//2.只能通过[下标]获取信息，造成变量名字和内容的对应关系不明确</span><br><span class="hljs-comment">//3.不能体现猫的行为</span><br>String[] cat1 = {<span class="hljs-string">"小白"</span>, <span class="hljs-string">"3"</span>, <span class="hljs-string">"白色"</span>};<br>String[] cat2 = {<span class="hljs-string">"小花"</span>, <span class="hljs-string">"100"</span>, <span class="hljs-string">"花色"</span>};<br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="现有技术缺点分析"><a href="#现有技术缺点分析" class="headerlink" title="现有技术缺点分析"></a>现有技术缺点分析</h3><ul><li>不利于数据管理</li><li>效率低下</li></ul><h3 id="引入类与对象（OOP）"><a href="#引入类与对象（OOP）" class="headerlink" title="引入类与对象（OOP）"></a>引入类与对象（OOP）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Cat cat1 = <span class="hljs-keyword">new</span> Cat();<br>cat1.name = <span class="hljs-string">"小白"</span>;<br>cat1.age = <span class="hljs-number">3</span>;<br>cat1.color = <span class="hljs-string">"白色"</span>;<br>cat1.weight = <span class="hljs-number">10</span>;<br><br>Cat cat2 = <span class="hljs-keyword">new</span> Cat();<br>cat2.name = <span class="hljs-string">"小花"</span>;<br>cat2.age = <span class="hljs-number">100</span>;<br>cat2.color = <span class="hljs-string">"花色"</span>;<br>cat2.weight = <span class="hljs-number">20</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="类和对象的内存分配机制（重点！！！）"><a href="#类和对象的内存分配机制（重点！！！）" class="headerlink" title="类和对象的内存分配机制（重点！！！）"></a>类和对象的内存分配机制（重点！！！）</h3><h4 id="Java内存结构分析"><a href="#Java内存结构分析" class="headerlink" title="Java内存结构分析"></a>Java内存结构分析</h4><ol><li>栈：基本数据类型</li><li>堆：存放对象（Cat cat，数组等）</li><li>方法区：常量池（常量，字符串），类加载信息</li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304241358645.png" alt="image-20230424135822547"></p><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p>分析下列代码的内存结构：</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304241706409.png" alt="image-20230424170641328"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304241727144.png" alt="image-20230424172718050"></p><h3 id="重载介绍"><a href="#重载介绍" class="headerlink" title="重载介绍"></a>重载介绍</h3><p>同一个类里面，可以有多个同名的方法。但是方法的形参列表不能一样。</p><h3 id="可变参数使用"><a href="#可变参数使用" class="headerlink" title="可变参数使用"></a>可变参数使用</h3><p>可以通过可变参数，将同一个类中同方法名，同功能但是不同参数的方法封装成一个方法。</p><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><p>修饰符 返回值类型 方法名(参数类型… 形参名) {</p><p>}</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>求2个整数，3个整数，5个整数的和。</p><p><strong>使用传统技术解决问题</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        SumNum sumNum = <span class="hljs-keyword">new</span> SumNum();<br>        System.out.println(sumNum.sum2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>        System.out.println(sumNum.sum3(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>        System.out.println(sumNum.sum5(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SumNum</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n1, <span class="hljs-keyword">int</span> n2)</span></span>{<br>        <span class="hljs-keyword">return</span> n1 + n2;<br>    }<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n1, <span class="hljs-keyword">int</span> n2, <span class="hljs-keyword">int</span> n3)</span></span>{<br>        <span class="hljs-keyword">return</span> n1 + n2 + n3;<br>    }<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum5</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n1, <span class="hljs-keyword">int</span> n2, <span class="hljs-keyword">int</span> n3, <span class="hljs-keyword">int</span> n4, <span class="hljs-keyword">int</span> n5)</span></span>{<br>        <span class="hljs-keyword">return</span> n1 + n2 + n3 + n4 + n5;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">3</span><br><span class="hljs-number">6</span><br><span class="hljs-number">15</span><br></code></pre></td></tr></tbody></table></figure><p><strong>使用可变参数解决问题</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        SumNum sumNum = <span class="hljs-keyword">new</span> SumNum();<br>        System.out.println(sumNum.sums(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>        System.out.println(sumNum.sums(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>        System.out.println(sumNum.sums(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SumNum</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sums</span><span class="hljs-params">(<span class="hljs-keyword">int</span>... n)</span></span>{<br>        <span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n.length; i++) {<br>            total += n[i];<br>        }<br>        <span class="hljs-keyword">return</span> total;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">3</span><br><span class="hljs-number">6</span><br><span class="hljs-number">15</span><br></code></pre></td></tr></tbody></table></figure><h3 id="对象创建流程分析（包含构造器）"><a href="#对象创建流程分析（包含构造器）" class="headerlink" title="对象创建流程分析（包含构造器）"></a>对象创建流程分析（包含构造器）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">5</span>, <span class="hljs-string">"闹闹"</span>);<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">int</span> age = <span class="hljs-number">10</span>;<br>    String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304241747184.png" alt="image-20230424174731976"></p><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>在某些情况下，我们要需要定义成员方法(简称方法)。比如人类:除了有一些属性外( 年龄，姓名..),我们人类还有一些行为比如:可以说话、跑步..,通过学习，还可以做算术题。这时就要用成员方法才能完成。</p><h3 id="成员方法快速入门"><a href="#成员方法快速入门" class="headerlink" title="成员方法快速入门"></a>成员方法快速入门</h3><p>笔记本28页图片</p><h3 id="方法的调用机制原理"><a href="#方法的调用机制原理" class="headerlink" title="方法的调用机制原理"></a>方法的调用机制原理</h3><p>笔记本29页图片</p><h3 id="为什么需要成员方法"><a href="#为什么需要成员方法" class="headerlink" title="为什么需要成员方法"></a>为什么需要成员方法</h3><p>笔记本29页图片</p><h3 id="成员方法的好处"><a href="#成员方法的好处" class="headerlink" title="成员方法的好处"></a>成员方法的好处</h3><p>提高代码的复用性</p><p>可以将实现的细节封装起来，然后供其他用户来调用即可</p><h3 id="成员方法的定义"><a href="#成员方法的定义" class="headerlink" title="成员方法的定义"></a>成员方法的定义</h3><p>笔记本30页</p><h3 id="注意事项和使用细节"><a href="#注意事项和使用细节" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><p><strong>访问修饰符(作用是控制方法使用的范围)</strong><br>如果不写默认访问，[有四种: public, protected, 默认, private], 具体在后面说</p><p><strong>返回数据类型</strong></p><ol><li>一个方法最多有一个返回值[思考，如何返回多个结果返回数组]</li><li>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</li><li>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为return 值; 而且要求返回值类型必须和return 的<br> 值类型一致或兼容</li><li>如果方法是void，则方法体中可以没有return 语句，或者只写return ;</li></ol><p><strong>方法名</strong><br>遵循驼峰命名法，最好见名知义，表达出该功能的意思即可, 比如得到两个数的和getSum, 开发中按照规范</p><p><strong>形参列表</strong></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230926055700474.png" alt="image-20230926055700474"></p><h3 id="类定义的完善"><a href="#类定义的完善" class="headerlink" title="类定义的完善"></a>类定义的完善</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20231001063620877.png" alt="image-20231001063620877"></p><h3 id="课堂练习题"><a href="#课堂练习题" class="headerlink" title="课堂练习题"></a>课堂练习题</h3><p>1.编写类AA ，有一个方法：判断一个数是奇数odd 还是偶数, 返回boolean</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        AA aa = <span class="hljs-keyword">new</span> AA();<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">if</span> (aa.isOdd(num)) {<br>            System.out.println(<span class="hljs-string">"数字"</span> + num + <span class="hljs-string">"是奇数"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"数字"</span> + num + <span class="hljs-string">"是偶数"</span>);<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AA</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOdd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>{<br>        <span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? <span class="hljs-keyword">false</span> : <span class="hljs-keyword">true</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数字<span class="hljs-number">4</span>是偶数<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数字<span class="hljs-number">9</span>是奇数<br></code></pre></td></tr></tbody></table></figure><p>2.根据行、列、字符打印对应行数和列数的字符，比如：行：3，列：2，字符 #, 则打印相应的效果</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String[][] arr = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) {<br>                arr[i][j] = <span class="hljs-string">"#"</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) {<br>                System.out.print(arr[i][j] + <span class="hljs-string">"\t"</span>);<br>            }<br>            System.out.println();<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">##<br>##<br>##<br></code></pre></td></tr></tbody></table></figure><h2 id="成员方法传参机制-非常非常重要"><a href="#成员方法传参机制-非常非常重要" class="headerlink" title="成员方法传参机制(非常非常重要)"></a>成员方法传参机制(非常非常重要)</h2><h3 id="基本数据类型的传参机制"><a href="#基本数据类型的传参机制" class="headerlink" title="基本数据类型的传参机制"></a>基本数据类型的传参机制</h3><p>基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参。</p><h3 id="引用数据类型的传参机制"><a href="#引用数据类型的传参机制" class="headerlink" title="引用数据类型的传参机制"></a>引用数据类型的传参机制</h3><p>引用类型可以通过形参来影响实参。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001070833.jpg"></p><h3 id="成员方法返回类型是引用类型应用实例"><a href="#成员方法返回类型是引用类型应用实例" class="headerlink" title="成员方法返回类型是引用类型应用实例"></a>成员方法返回类型是引用类型应用实例</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001070934.jpg"></p><h2 id="方法递归调用-非常非常重要，比较难"><a href="#方法递归调用-非常非常重要，比较难" class="headerlink" title="方法递归调用(非常非常重要，比较难)"></a>方法递归调用(非常非常重要，比较难)</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>递归就是方法自己调用自己。</p><h3 id="递归能解决什么问题"><a href="#递归能解决什么问题" class="headerlink" title="递归能解决什么问题?"></a>递归能解决什么问题?</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001071209.jpg"></p><h3 id="递归举例"><a href="#递归举例" class="headerlink" title="递归举例"></a>递归举例</h3><p>打印问题</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001071559.jpg"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Recursion01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        T t = <span class="hljs-keyword">new</span> T();<br>        t.test(<span class="hljs-number">4</span>);<span class="hljs-comment">//调用方法后输出结果是？</span><br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>{<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">2</span>) {<br>            test(n - <span class="hljs-number">1</span>);<br>        }<br>        System.out.println(<span class="hljs-string">"n="</span> + n);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">n=<span class="hljs-number">2</span><br>n=<span class="hljs-number">3</span><br>n=<span class="hljs-number">4</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001073459.jpg"></p><p>阶乘问题</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231001071609.jpg"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">```<br><br><br><br>### 递归重要规则<br><br>![image-<span class="hljs-number">20230920060433456</span>](https:<span class="hljs-comment">//raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230920060433456.png)</span><br><br>### 课堂练习<br><br>![image-<span class="hljs-number">20230920052744709</span>](https:<span class="hljs-comment">//raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230920052744709.png)</span><br><br>请使用递归的方式求出斐波那契数<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13.</span>..给你一个整数n，求出它的斐波那契值是多少。<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecursionExercise01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        T t = <span class="hljs-keyword">new</span> T();<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">int</span> fibonacciNum = t.fibonacci(n);<br>        <span class="hljs-keyword">if</span> (fibonacciNum != -<span class="hljs-number">1</span>) {<br>            System.out.println(<span class="hljs-string">"数字 "</span> + n + <span class="hljs-string">" 的斐波那契值为 "</span> + fibonacciNum);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"数据不合法"</span>);<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>{<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) {<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">return</span> fibonacci(n - <span class="hljs-number">1</span>) + fibonacci(n - <span class="hljs-number">2</span>);<br>            }<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"数据不合法，输入的n为："</span> + n);<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数字 <span class="hljs-number">7</span> 的斐波那契值为 <span class="hljs-number">13</span><br></code></pre></td></tr></tbody></table></figure><p>猴子吃桃子问题：有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个！以后每天猴子都吃其中的一半，然后再多吃一个。当到第10 天时，想再吃时（即还没吃），发现只有1个桃子了。问题：最初共多少个桃子？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter07;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecursionExercise01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        T t = <span class="hljs-keyword">new</span> T();<br>        <span class="hljs-keyword">int</span> peach = t.peach(<span class="hljs-number">1</span>);<br>        System.out.println(peach);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peach</span><span class="hljs-params">(<span class="hljs-keyword">int</span> day)</span> </span>{<br>        <span class="hljs-keyword">if</span> (day == <span class="hljs-number">10</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">9</span>) {<br>            <span class="hljs-keyword">return</span> (peach(day + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="递归调用应用实例-迷宫问题"><a href="#递归调用应用实例-迷宫问题" class="headerlink" title="递归调用应用实例-迷宫问题"></a>递归调用应用实例-迷宫问题</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230920054444242.png" alt="image-20230920054444242"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGong</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        MiGongTest miGongTest = <span class="hljs-keyword">new</span> MiGongTest();<br>        <span class="hljs-keyword">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; map[i].length; j++) {<br>                map[i][j] = <span class="hljs-number">0</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            map[i][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) {<br>            map[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>            map[<span class="hljs-number">7</span>][j] = <span class="hljs-number">1</span>;<br>        }<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        miGongTest.findWay(map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; map[i].length; j++) {<br>                System.out.print(map[i][j] + <span class="hljs-string">" "</span>);<br>            }<br>            System.out.println();<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGongTest</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findWay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] map, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>{<br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) {<br>                map[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (findWay(map, i + <span class="hljs-number">1</span>, j)) {<span class="hljs-comment">//下</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i, j + <span class="hljs-number">1</span>)) {<span class="hljs-comment">//右</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i - <span class="hljs-number">1</span>, j)) {<span class="hljs-comment">//上</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i, j - <span class="hljs-number">1</span>)) {<span class="hljs-comment">//左</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> {<br>                    map[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                }<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></tbody></table></figure><p>测试回溯法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGong</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        MiGongTest miGongTest = <span class="hljs-keyword">new</span> MiGongTest();<br>        <span class="hljs-keyword">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; map[i].length; j++) {<br>                map[i][j] = <span class="hljs-number">0</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            map[i][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) {<br>            map[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>            map[<span class="hljs-number">7</span>][j] = <span class="hljs-number">1</span>;<br>        }<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<span class="hljs-comment">//测试回溯法</span><br>        miGongTest.findWay(map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; map[i].length; j++) {<br>                System.out.print(map[i][j] + <span class="hljs-string">" "</span>);<br>            }<br>            System.out.println();<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGongTest</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findWay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] map, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>{<br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) {<br>                map[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (findWay(map, i + <span class="hljs-number">1</span>, j)) {<span class="hljs-comment">//下</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i, j + <span class="hljs-number">1</span>)) {<span class="hljs-comment">//右</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i - <span class="hljs-number">1</span>, j)) {<span class="hljs-comment">//上</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i, j - <span class="hljs-number">1</span>)) {<span class="hljs-comment">//左</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                } <span class="hljs-keyword">else</span> {<br>                    map[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                }<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></tbody></table></figure><h3 id="递归调用应用实例-汉诺塔"><a href="#递归调用应用实例-汉诺塔" class="headerlink" title="递归调用应用实例-汉诺塔"></a>递归调用应用实例-汉诺塔</h3><h3 id="递归调用应用实例-八皇后问题-同学们先尝试做，后面老师评讲"><a href="#递归调用应用实例-八皇后问题-同学们先尝试做，后面老师评讲" class="headerlink" title="递归调用应用实例-八皇后问题[同学们先尝试做，后面老师评讲.]"></a>递归调用应用实例-八皇后问题[同学们先尝试做，后面老师评讲.]</h3><h2 id="方法重载-OverLoad"><a href="#方法重载-OverLoad" class="headerlink" title="方法重载(OverLoad)"></a>方法重载(OverLoad)</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>同一个类中，拥有<strong>相同方法名</strong>，且<strong>形参列表不一样</strong>。（返回类型无要求）</p><h3 id="重载的好处"><a href="#重载的好处" class="headerlink" title="重载的好处"></a>重载的好处</h3><p>减轻了起名和记名的麻烦。</p><h3 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20231007092829954.png" alt="image-20231007092829954"></p><h3 id="注意事项和使用细节-1"><a href="#注意事项和使用细节-1" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><h3 id="课堂练习题-1"><a href="#课堂练习题-1" class="headerlink" title="课堂练习题"></a>课堂练习题</h3><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><h3 id="深入理解this"><a href="#深入理解this" class="headerlink" title="深入理解this"></a>深入理解this</h3><h4 id="什么是this？"><a href="#什么是this？" class="headerlink" title="什么是this？"></a>什么是this？</h4><p>Java虚拟机给每个对象都分配了一个this，代表当前对象。</p><h4 id="this本质"><a href="#this本质" class="headerlink" title="this本质"></a>this本质</h4><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504070603522.png" alt="image-20230504070603522"></p><h4 id="this小结"><a href="#this小结" class="headerlink" title="this小结"></a>this小结</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">dog1.info();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">()</span></span>{<br>    System.out.println(<span class="hljs-keyword">this</span>.hashCode());<span class="hljs-comment">//此时，输出的就是dog1的hashCode值。哪个对象调用，this就是哪个对象。</span><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="this的注意事项和使用细节"><a href="#this的注意事项和使用细节" class="headerlink" title="this的注意事项和使用细节"></a>this的注意事项和使用细节</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504063923225.png" alt="image-20230504063923225"></p><h3 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h3><ol><li><p>定义方法max，实现求某个double数组的最大值，并返回</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        A01 a01 = <span class="hljs-keyword">new</span> A01();<br>        <span class="hljs-keyword">double</span>[] array = {<span class="hljs-number">10.01</span>, <span class="hljs-number">80.25</span>, <span class="hljs-number">20.15</span>, <span class="hljs-number">30.71</span>, <span class="hljs-number">12.56</span>};<br>        System.out.println(a01.max(array));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A01</span> </span>{<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">double</span>[] array)</span> </span>{<br>        <span class="hljs-keyword">double</span> ans = <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) {<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) {<br>                ans = array[i];<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">if</span> (ans &lt; array[i]) {<br>                    ans = array[i];<br>                }<br>            }<br><br>        }<br>        <span class="hljs-keyword">return</span> ans;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="2"><li><p>定义方法find，实现查找某字符串是否在字符串数组中，并返回索引，如果找不到，则返回-1</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        A02 a02 = <span class="hljs-keyword">new</span> A02();<br>        String[] array = {<span class="hljs-string">"bambi"</span>, <span class="hljs-string">"eazin"</span>, <span class="hljs-string">"stefen"</span>};<br>        System.out.println(a02.find(<span class="hljs-string">"summer"</span>, array));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(String s, String[] array)</span> </span>{<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) {<br>            <span class="hljs-keyword">if</span> (s.equals(array[i])) {<br>                <span class="hljs-keyword">return</span> i;<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p>编写类Book，定义方法updatePrice，实现更改某本书的价格，具体：如果价格大于150，则更改为150；如果价格大于100，则更改为100；否则不变。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A03</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Book book = <span class="hljs-keyword">new</span> Book();<br>        System.out.println(book.updatePrice(<span class="hljs-number">200.55</span>));<br>        System.out.println(book.updatePrice(<span class="hljs-number">130.91</span>));<br>        System.out.println(book.updatePrice(<span class="hljs-number">50.21</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>{<br>    <span class="hljs-comment">//编写类Book，定义方法updatePrice，实现更改某本书的价格，具体：如果价格大于150，则更改为150；如果价格大于100，则更改为100；否则不变。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">updatePrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> price)</span></span>{<br>        <span class="hljs-keyword">if</span>(price &gt; <span class="hljs-number">150</span>){<br>            price = <span class="hljs-number">150</span>;<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (price &gt; <span class="hljs-number">100</span>) {<br>            price = <span class="hljs-number">100</span>;<br>        }<br>        <span class="hljs-keyword">return</span> price;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">150.0</span><br><span class="hljs-number">100.0</span><br><span class="hljs-number">50.21</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写类，实现数组的复制功能copyArr，输入旧数组，返回新数组。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A03</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        A04 a04 = <span class="hljs-keyword">new</span> A04();<br>        <span class="hljs-keyword">int</span>[] ints = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>};<br>        <span class="hljs-keyword">int</span>[] afterArr = a04.copyArr(ints);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : afterArr) {<br>            System.out.println(num);<br>        }<br>    }<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A04</span> </span>{<br>    <span class="hljs-comment">//定义一个类，实现数组的复制功能copyArr。输入旧数组，返回一个新数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] copyArr(<span class="hljs-keyword">int</span>[] array) {<br>        <span class="hljs-keyword">int</span>[] newArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array.length];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) {<br>            newArr[i] = array[i];<br>        }<br>        <span class="hljs-keyword">return</span> newArr;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504072459076.png" alt="image-20230504072459076"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504072517694.png" alt="image-20230504072517694"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504072532803.png" alt="image-20230504072532803"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504072549638.png" alt="image-20230504072549638"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230504072611368.png" alt="image-20230504072611368"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数组、排序和查找</title>
    <link href="/posts/c2bc67b6.html"/>
    <url>/posts/c2bc67b6.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h2 id="为什么需要数组"><a href="#为什么需要数组" class="headerlink" title="为什么需要数组"></a>为什么需要数组</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230914062217.jpg"></p><h3 id="数组介绍"><a href="#数组介绍" class="headerlink" title="数组介绍"></a>数组介绍</h3><p>数组可以存放多个同一类型的数据。数组也是一种数据类型，为引用类型。</p><p>即：数组就是一组数据</p><h3 id="数组快速入门"><a href="#数组快速入门" class="headerlink" title="数组快速入门"></a>数组快速入门</h3><p>用数组来解决上面的问题。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230914062208.jpg"></p><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>使用方式1：动态初始化</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数据类型[] 数组名 = new 数据类型[大小]；</p><p>int [] arr=new int[5];</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>数组名[下标]</p><p>arr[2] 代表要访问arr数组的第三个元素。（数组下标是从0开始的）</p><h4 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h4><p>循环输入5个成绩，保存到double数组并输出。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Array02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">double</span>[] scores = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">5</span>];<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) {<br>            System.out.println(<span class="hljs-string">"请输入第"</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">"个成绩"</span>);<br>            scores[i] = scanner.nextDouble();<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; scores.length; i++) {<br>            System.out.print(scores[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">请输入第<span class="hljs-number">1</span>个成绩<br><span class="hljs-number">90</span><br>请输入第<span class="hljs-number">2</span>个成绩<br><span class="hljs-number">89</span><br>请输入第<span class="hljs-number">3</span>个成绩<br><span class="hljs-number">30</span><br>请输入第<span class="hljs-number">4</span>个成绩<br><span class="hljs-number">100</span><br>请输入第<span class="hljs-number">5</span>个成绩<br><span class="hljs-number">85</span><br><span class="hljs-number">90.0</span><span class="hljs-number">89.0</span><span class="hljs-number">30.0</span><span class="hljs-number">100.0</span><span class="hljs-number">85.0</span><br></code></pre></td></tr></tbody></table></figure><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><h2 id="数组使用注意事项和细节"><a href="#数组使用注意事项和细节" class="headerlink" title="数组使用注意事项和细节"></a>数组使用注意事项和细节</h2><ol><li><p>数组是多个相同类型数据的组合，实现对这些数据的统一管理</p></li><li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。</p></li><li><p>数组创建后，如果没有赋值，有默认值<br>int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null</p></li><li><p>使用数组的步骤1. 声明数组并开辟空间2. 给数组各个元素赋值3. 使用数组</p></li><li><p>数组的<strong>下标是从0 开始</strong>的。</p></li><li><p>数组下标必须在指定范围内使用，否则报：下标越界异常，比如：</p><p>int [] arr=new int[5]; 则有效下标为0-4</p></li><li><p>数组属引用类型，数组型数据是对象(object)</p></li></ol><h2 id="数组应用案例"><a href="#数组应用案例" class="headerlink" title="数组应用案例"></a>数组应用案例</h2><p>创建一个char 类型的26 个元素的数组，分别放置’A’-‘Z’。使用for 循环访问所有元素并打印出来。提示：char 类型数据运算’A’+2 -&gt; ‘C’</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">char</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            arr[i] = (<span class="hljs-keyword">char</span>) (<span class="hljs-string">'A'</span> + i);<br>        }<br><br>        System.out.println(<span class="hljs-string">"正序输出====&gt;"</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.println();<br><br>        System.out.println(<span class="hljs-string">"倒序输出====&gt;"</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {<br>            System.out.print(arr[i] + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">正序输出====&gt;<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z <br>倒序输出====&gt;<br>Z Y X W V U T S R Q P O N M L K J I H G F E D C B A <br></code></pre></td></tr></tbody></table></figure><p>请求出一个数组int[]的最大值{4,-1,9, 10,23}，并得到对应的下标</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">4</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">23</span>};<br>        <span class="hljs-keyword">int</span> maxValue = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">int</span> maxIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; maxValue) {<br>                maxValue = arr[i];<br>                maxIndex = i;<br>            }<br>        }<br>        System.out.println(<span class="hljs-string">"最大值："</span> + maxValue + <span class="hljs-string">"，对应的下标为："</span> + maxIndex);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">最大值：<span class="hljs-number">23</span>，对应的下标为：<span class="hljs-number">4</span><br></code></pre></td></tr></tbody></table></figure><h2 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h2><p>基本数据类型赋值，这个值就使具体的数据。且互不影响。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> n1=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> n2=n1;<br></code></pre></td></tr></tbody></table></figure><p>数组是引用传递，赋的值是地址。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230914214532.jpg"></p><h2 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h2><p>将int[] arr1 = {10,20,30}; 拷贝到arr2 数组, 要求数据空间是独立的.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr1 = {<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>};<br>        <span class="hljs-keyword">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr1.length];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) {<br>            arr2[i] = arr1[i];<br>        }<br>        System.out.println(<span class="hljs-string">"arr1数组为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) {<br>            System.out.print(arr1[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">"arr2数组为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr2.length; i++) {<br>            System.out.print(arr2[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">arr1数组为：<br><span class="hljs-number">10</span><span class="hljs-number">20</span><span class="hljs-number">30</span><br>arr2数组为：<br><span class="hljs-number">10</span><span class="hljs-number">20</span><span class="hljs-number">30</span><br></code></pre></td></tr></tbody></table></figure><h2 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h2><p>要求：把数组{11,22,33,44,55,66}的元素内容反转{66, 55,44,33,22,11}。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>};<br>        <span class="hljs-keyword">int</span>[] arrNew = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = arrNew.length - <span class="hljs-number">1</span>; i &lt; arr.length; i++, j--) {<br>            arrNew[j] = arr[i];<br>        }<br>        System.out.println(<span class="hljs-string">"原数组为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">"反转之后的数组为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) {<br>            System.out.print(arrNew[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">原数组为：<br><span class="hljs-number">11</span><span class="hljs-number">22</span><span class="hljs-number">33</span><span class="hljs-number">44</span><span class="hljs-number">55</span><span class="hljs-number">66</span><br>反转之后的数组为：<br><span class="hljs-number">66</span><span class="hljs-number">55</span><span class="hljs-number">44</span><span class="hljs-number">33</span><span class="hljs-number">22</span><span class="hljs-number">11</span><br></code></pre></td></tr></tbody></table></figure><h2 id="数组添加-扩容"><a href="#数组添加-扩容" class="headerlink" title="数组添加/扩容"></a>数组添加/扩容</h2><p>要求：实现动态的给数组添加元素效果，实现对数组扩容。</p><ol><li>原始数组使用静态分配int[] arr = {1,2,3}</li><li>用户可以决定是否继续添加，添加成功，是否继续？y/n</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br>        <span class="hljs-keyword">int</span>[] arrNew;<br>        <span class="hljs-keyword">int</span> number;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) {<br>            System.out.println(<span class="hljs-string">"请输入是否需要插入元素，y/n"</span>);<br>            <span class="hljs-keyword">char</span> c = scanner.next().charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">'y'</span>) {<br>                arrNew = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length + <span class="hljs-number">1</span>];<br>                System.out.println(<span class="hljs-string">"请输入要插入的元素："</span>);<br>                number = scanner.nextInt();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>                    arrNew[i] = arr[i];<br>                }<br>                arrNew[arrNew.length - <span class="hljs-number">1</span>] = number;<br>                arr = arrNew;<br>            } <span class="hljs-keyword">else</span> {<br>                System.out.println(<span class="hljs-string">"用户主动选择退出~"</span>);<br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br><br>        System.out.println(<span class="hljs-string">"最终的数组结果为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">请输入是否需要插入元素，y/n<br>y<br>请输入要插入的元素：<br><span class="hljs-number">4</span><br>请输入是否需要插入元素，y/n<br>y<br>请输入要插入的元素：<br><span class="hljs-number">5</span><br>请输入是否需要插入元素，y/n<br>n<br>用户主动选择退出~<br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">4</span><span class="hljs-number">5</span><br></code></pre></td></tr></tbody></table></figure><p>有一个数组{1， 2， 3， 4， 5}， 可以将该数组进行缩减，提示用户是否继续缩减，每次缩减最后那个元素。当只剩<br>下最后一个元素，提示，不能再缩减。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>};<br>        <span class="hljs-keyword">int</span>[] arrNew;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) {<br>            System.out.println(<span class="hljs-string">"请输入是否需要删除元素，y/n"</span>);<br>            <span class="hljs-keyword">char</span> c = scanner.next().charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (arr.length == <span class="hljs-number">1</span>) {<br>                System.out.println(<span class="hljs-string">"当前数组只剩余一个元素，不能再操作，直接退出~"</span>);<br>                showArray(arr);<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">'y'</span>) {<br>                arrNew = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) {<br>                    arrNew[i] = arr[i];<br>                }<br>                arr = arrNew;<br>                showArray(arr);<br>            } <span class="hljs-keyword">else</span> {<br>                System.out.println(<span class="hljs-string">"用户主动选择退出~"</span>);<br>                showArray(arr);<br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>{<br>        System.out.println(<span class="hljs-string">"当前数组结果为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">请输入是否需要删除元素，y/n<br>y<br>当前数组结果为：<br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">4</span><br>请输入是否需要删除元素，y/n<br>y<br>当前数组结果为：<br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><br>请输入是否需要删除元素，y/n<br>y<br>当前数组结果为：<br><span class="hljs-number">1</span><span class="hljs-number">2</span><br>请输入是否需要删除元素，y/n<br>y<br>当前数组结果为：<br><span class="hljs-number">1</span><br>请输入是否需要删除元素，y/n<br>y<br>当前数组只剩余一个元素，不能再操作，直接退出~<br>当前数组结果为：<br><span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h2 id="排序的介绍"><a href="#排序的介绍" class="headerlink" title="排序的介绍"></a>排序的介绍</h2><p>排序是将多个数据，依指定的顺序进行排列的过程。</p><h3 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h3><p>指将需要处理的所有数据都加载到内部存储器中进行排序。包括(交换式排序法、选择<br>式排序法和插入式排序法)；</p><h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3><p>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法和直接合并排序法)。</p><h2 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h2><p>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从后向前（从下标较大的元素开始），依次比较相邻元素<br>的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230914214824612.png" alt="image-20230914214824612"></p><p>下面我们举一个具体的案例来说明冒泡法。我们将五个无序：24,69,80,57,13 使用冒泡排序法将其排成一个从小到大的有<br>序数列。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">24</span>, <span class="hljs-number">69</span>, <span class="hljs-number">80</span>, <span class="hljs-number">57</span>, <span class="hljs-number">13</span>};<br>        System.out.println(<span class="hljs-string">"原数组为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>        <br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) {<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) {<br>                    temp = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = arr[j];<br>                    arr[j] = temp;<br>                }<br>            }<br>        }<br>        System.out.println(<span class="hljs-string">"冒泡排序输出的结果为："</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">"\t"</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">原数组为：<br><span class="hljs-number">24</span><span class="hljs-number">69</span><span class="hljs-number">80</span><span class="hljs-number">57</span><span class="hljs-number">13</span><br>冒泡排序输出的结果为：<br><span class="hljs-number">13</span><span class="hljs-number">24</span><span class="hljs-number">57</span><span class="hljs-number">69</span><span class="hljs-number">80</span><br></code></pre></td></tr></tbody></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在java 中，我们常用的查找有两种:</p><ol><li>顺序查找SeqSearch.java</li><li>二分查找【二分法，我们放在算法讲解】</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>有一个数列：白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王猜数游戏：从键盘中任意输入一个名称，判断数列中是否包含此名称【顺序查找】要求: 如果找到了，就提示找到，并给出下标值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String[] arr = {<span class="hljs-string">"白眉鹰王"</span>, <span class="hljs-string">"金毛狮王"</span>, <span class="hljs-string">"紫衫龙王"</span>, <span class="hljs-string">"青翼蝠王"</span>};<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">"请输入你要查找的名字："</span>);<br>        String findName = scanner.next();<br>        <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">if</span> (arr[i].equals(findName)) {<br>                index = i;<br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) {<br>            System.out.println(<span class="hljs-string">"没有找到你要查找的名字。"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"你要查找的名字："</span> + findName + <span class="hljs-string">"，已找到，其对应的数组下标为： "</span> + index);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">请输入你要查找的名字：<br>金毛狮王<br>你要查找的名字：金毛狮王，已找到，其对应的数组下标为： <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h2 id="多维数组-二维数组"><a href="#多维数组-二维数组" class="headerlink" title="多维数组-二维数组"></a>多维数组-二维数组</h2><h2 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h2><h3 id="快速入门案例-1"><a href="#快速入门案例-1" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><p>二维数组的每个元素是一维数组。</p><h3 id="使用方式1：动态初始化"><a href="#使用方式1：动态初始化" class="headerlink" title="使用方式1：动态初始化"></a>使用方式1：动态初始化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">语法：类型[][] 数组名 = <span class="hljs-keyword">new</span> 类型[大小][大小];<br>例子：<span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br></code></pre></td></tr></tbody></table></figure><p>二维数组的内存存在形式</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230915062237689.png" alt="image-20230915062237689"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/20230915070326.jpg"></p><h3 id="使用方式2：动态初始化"><a href="#使用方式2：动态初始化" class="headerlink" title="使用方式2：动态初始化"></a>使用方式2：动态初始化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">先声明：类型数组名[][]; TwoDimensionalArray02.java<br>再定义(开辟空间) 数组名= <span class="hljs-keyword">new</span> 类型[大小][大小]<br>赋值(有默认值，比如<span class="hljs-keyword">int</span> 类型的就是<span class="hljs-number">0</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="使用方式3：动态初始化（列数不确定）"><a href="#使用方式3：动态初始化（列数不确定）" class="headerlink" title="使用方式3：动态初始化（列数不确定）"></a>使用方式3：动态初始化（列数不确定）</h3><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230915062427603.png" alt="image-20230915062427603" style="zoom:50%;"><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/20230915070313.jpg"></p><h3 id="使用方式4：静态初始化"><a href="#使用方式4：静态初始化" class="headerlink" title="使用方式4：静态初始化"></a>使用方式4：静态初始化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">定义: 类型 数组名[][] = { {值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>.}, {值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>.}, {值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>.} }<br>例子: <span class="hljs-keyword">int</span>[][] arr = {{<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>}, {<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>}, {<span class="hljs-number">100</span>}};<br>解读：<br>    定义了一个二维数组arr<br>    arr 有三个元素(每个元素都是一维数组)<br>    第一个一维数组有<span class="hljs-number">3</span> 个元素, 第二个一维数组有<span class="hljs-number">3</span> 个元素, 第三个一维数组有<span class="hljs-number">1</span> 个元素<br></code></pre></td></tr></tbody></table></figure><h2 id="二维数组应用案例"><a href="#二维数组应用案例" class="headerlink" title="二维数组应用案例"></a>二维数组应用案例</h2><p>使用二维数组打印一个10 行杨辉三角。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[i + <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) {<br><br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || j == arr[i].length - <span class="hljs-number">1</span>) {<br>                    arr[i][j] = <span class="hljs-number">1</span>;<br>                } <span class="hljs-keyword">else</span> {<br>                    arr[i][j] = arr[i - <span class="hljs-number">1</span>][j] + arr[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                }<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) {<br>                System.out.print(arr[i][j] + <span class="hljs-string">" "</span>);<br>            }<br>            System.out.println();<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">15</span> <span class="hljs-number">20</span> <span class="hljs-number">15</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">21</span> <span class="hljs-number">35</span> <span class="hljs-number">35</span> <span class="hljs-number">21</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">28</span> <span class="hljs-number">56</span> <span class="hljs-number">70</span> <span class="hljs-number">56</span> <span class="hljs-number">28</span> <span class="hljs-number">8</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">9</span> <span class="hljs-number">36</span> <span class="hljs-number">84</span> <span class="hljs-number">126</span> <span class="hljs-number">126</span> <span class="hljs-number">84</span> <span class="hljs-number">36</span> <span class="hljs-number">9</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></tbody></table></figure><h2 id="二维数组使用细节和注意事项"><a href="#二维数组使用细节和注意事项" class="headerlink" title="二维数组使用细节和注意事项"></a>二维数组使用细节和注意事项</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>) 一维数组的声明方式有:<br><span class="hljs-keyword">int</span>[] x 或者<span class="hljs-keyword">int</span> x[]<br>    <br><span class="hljs-number">2</span>) 二维数组的声明方式有:<br><span class="hljs-keyword">int</span>[][] y 或者<span class="hljs-keyword">int</span>[] y[] 或者<span class="hljs-keyword">int</span> y[][]<br>    <br><span class="hljs-number">3</span>) 二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同。比如： map[][] 是一个二维数组。<span class="hljs-keyword">int</span> map [][] = {{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>},{<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>}}<br>由map[<span class="hljs-number">0</span>] 是一个含有两个元素的一维数组，map[<span class="hljs-number">1</span>] 是一个含有三个元素的一维数组构成，我们也称为列数不等<br>的二维数组<br></code></pre></td></tr></tbody></table></figure><h2 id="二维数组课堂练习"><a href="#二维数组课堂练习" class="headerlink" title="二维数组课堂练习"></a>二维数组课堂练习</h2><h2 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h2><p>已知有一个升序数组，要求插入一个元素之后，该数组仍然为升序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">90</span>};<br>        <span class="hljs-keyword">int</span>[] arrNew = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">23</span>;<br>        <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">if</span> (arr[i] &gt;= num) {<br>                index = i;<br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) {<span class="hljs-comment">//说明数据应该插入最后一位</span><br>            index = arr.length;<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) {<br>            <span class="hljs-keyword">if</span> (index == i) {<br>                arrNew[i] = num;<br>            } <span class="hljs-keyword">else</span> {<br>                arrNew[i] = arr[j];<br>                j++;<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) {<br>            System.out.print(arrNew[i] + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">10</span> <span class="hljs-number">12</span> <span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">90</span> <br></code></pre></td></tr></tbody></table></figure><p>随机生成10个整数（1-100）范围内，保存到数组中。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            <span class="hljs-keyword">int</span> num = random.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>            arr[i] = num;<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.println();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">84</span> <span class="hljs-number">53</span> <span class="hljs-number">23</span> <span class="hljs-number">19</span> <span class="hljs-number">43</span> <span class="hljs-number">98</span> <span class="hljs-number">68</span> <span class="hljs-number">26</span> <span class="hljs-number">79</span> <span class="hljs-number">3</span> <br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>程序控制结构</title>
    <link href="/posts/e88088a3.html"/>
    <url>/posts/e88088a3.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="程序流程控制介绍"><a href="#程序流程控制介绍" class="headerlink" title="程序流程控制介绍"></a>程序流程控制介绍</h1><h1 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h1><h1 id="分支控制-if-else"><a href="#分支控制-if-else" class="headerlink" title="分支控制 if-else"></a>分支控制 if-else</h1><h1 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h1><h1 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h1><h1 id="switch-分支结构"><a href="#switch-分支结构" class="headerlink" title="switch 分支结构"></a>switch 分支结构</h1><h1 id="for-循环控制"><a href="#for-循环控制" class="headerlink" title="for 循环控制(!!!)"></a>for 循环控制(!!!)</h1><h1 id="while-循环控制"><a href="#while-循环控制" class="headerlink" title="while 循环控制"></a>while 循环控制</h1><h1 id="do-while-循环控制"><a href="#do-while-循环控制" class="headerlink" title="do..while 循环控制"></a>do..while 循环控制</h1><h1 id="多重循环控制-难点-重点"><a href="#多重循环控制-难点-重点" class="headerlink" title="多重循环控制(难点! 重点!)"></a>多重循环控制(难点! 重点!)</h1><h1 id="跳转控制语句-break"><a href="#跳转控制语句-break" class="headerlink" title="跳转控制语句-break"></a>跳转控制语句-break</h1><h1 id="跳转控制语句-continue"><a href="#跳转控制语句-continue" class="headerlink" title="跳转控制语句-continue"></a>跳转控制语句-continue</h1><h1 id="跳转控制语句-return"><a href="#跳转控制语句-return" class="headerlink" title="跳转控制语句-return"></a>跳转控制语句-return</h1><h1 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h1><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230905070920129.png" alt="image-20230905070920129"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230905070943434.png" alt="image-20230905070943434"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter5.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework03</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span> </span>{<br>        <span class="hljs-keyword">if</span> ((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &amp;&amp; (year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) {<br>            System.out.println(year + <span class="hljs-string">"年是闰年"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(year + <span class="hljs-string">"年不是闰年"</span>);<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Homework03 homework03 = <span class="hljs-keyword">new</span> Homework03();<br>        homework03.test(<span class="hljs-number">2005</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906070301161.png" alt="image-20230906070301161"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906070348491.png" alt="image-20230906070348491"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230905070953038.png" alt="image-20230905070953038"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230905070959349.png" alt="image-20230905070959349"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter5.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework06</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span>) {<br>                count++;<br>                System.out.print(i + <span class="hljs-string">"\t"</span>);<br>                <span class="hljs-keyword">if</span> (count % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) {<br>                    System.out.print(<span class="hljs-string">"\n"</span>);<br>                }<br>            }<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Homework06 homework06 = <span class="hljs-keyword">new</span> Homework06();<br>        homework06.test();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906070820646.png" alt="image-20230906070820646"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter5.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework07</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> i = <span class="hljs-string">'a'</span>; i &lt;= <span class="hljs-string">'z'</span>; i++) {<br>            System.out.print(i + <span class="hljs-string">" "</span>);<br>        }<br>        System.out.println();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> i = <span class="hljs-string">'Z'</span>; i &gt;= <span class="hljs-string">'A'</span>; i--) {<br>            System.out.print(i + <span class="hljs-string">" "</span>);<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Homework07 homework = <span class="hljs-keyword">new</span> Homework07();<br>        homework.test();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906071137511.png" alt="image-20230906071137511"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter5.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework08</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {<br>                sum -= <span class="hljs-number">1.0</span> / i;<br>            } <span class="hljs-keyword">else</span> {<br>                sum += <span class="hljs-number">1.0</span> / i;<br>            }<br>        }<br>        System.out.println(<span class="hljs-string">"结果为: "</span> + sum);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Homework08 homework = <span class="hljs-keyword">new</span> Homework08();<br>        homework.test();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906071900131.png" alt="image-20230906071900131"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapter5.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework09</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) {<br>                sum += j;<br>            }<br>        }<br>        System.out.println(<span class="hljs-string">"总和为："</span> + sum);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Homework09 homework = <span class="hljs-keyword">new</span> Homework09();<br>        homework.test();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20230906072141816.png" alt="image-20230906072141816"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>运算符</title>
    <link href="/posts/f29265a7.html"/>
    <url>/posts/f29265a7.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="运算符介绍"><a href="#运算符介绍" class="headerlink" title="运算符介绍"></a>运算符介绍</h1><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231844045.png" alt="image-20230423184411984"></p><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><h2 id="算术运算符一览"><a href="#算术运算符一览" class="headerlink" title="算术运算符一览"></a>算术运算符一览</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304230743900.png" alt="image-20230423074305547"></p><h2 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h2><p>*<em>对一个数取模，等价于a%b = a-a/b</em>b。**</p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><h3 id="假如还有-59-天放假，问：合-xx-个星期零-xx-天"><a href="#假如还有-59-天放假，问：合-xx-个星期零-xx-天" class="headerlink" title="假如还有 59 天放假，问：合 xx 个星期零 xx 天"></a>假如还有 59 天放假，问：合 xx 个星期零 xx 天</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">int</span> days = <span class="hljs-number">258</span>;<br>        <span class="hljs-keyword">int</span> weeks = days/<span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">int</span> leftDays = days%<span class="hljs-number">7</span>;<br>        System.out.println(days + <span class="hljs-string">"天,"</span> + <span class="hljs-string">"合"</span> + weeks + <span class="hljs-string">"星期零"</span> + leftDays + <span class="hljs-string">"天"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">258</span>天,合<span class="hljs-number">36</span>星期零<span class="hljs-number">6</span>天<br></code></pre></td></tr></tbody></table></figure><h3 id="定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5-9-华氏温度-100-请求出华氏温度对应的摄氏温度。-234-5"><a href="#定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5-9-华氏温度-100-请求出华氏温度对应的摄氏温度。-234-5" class="headerlink" title="定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度。[234.5]"></a>定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度。[234.5]</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br><span class="hljs-comment">//        定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度。[234.5]</span><br>        <span class="hljs-keyword">double</span> fahrenheit = <span class="hljs-number">60.8</span>;<br>        <span class="hljs-keyword">double</span> centigrade = <span class="hljs-number">5.0</span> / <span class="hljs-number">9</span> * (fahrenheit - <span class="hljs-number">100</span>);<br>        System.out.println(centigrade);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">21.77777777777778</span><br></code></pre></td></tr></tbody></table></figure><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol><li>关系运算符的结果都是布尔（boolean）类型，要么是true，要么是false。</li><li>关系运算符组成的表达式称为关系表达式。</li></ol><h2 id="关系运算符一览"><a href="#关系运算符一览" class="headerlink" title="关系运算符一览"></a>关系运算符一览</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304240936791.png" alt="image-20230424093615612"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>变量</title>
    <link href="/posts/13ffbe88.html"/>
    <url>/posts/13ffbe88.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="变量使用注意事项"><a href="#变量使用注意事项" class="headerlink" title="变量使用注意事项"></a>变量使用注意事项</h1><p>1.变量表示内存中一块存储区域，不同类型占用的空间不同。</p><p>2.该区域有自己的名称 [变量名] 和类型 [数据类型]</p><p>3.变量三要素，变量=变量名 + 变量值 + 数据类型</p><h1 id="程序中-号的使用"><a href="#程序中-号的使用" class="headerlink" title="程序中+号的使用"></a>程序中+号的使用</h1><p>1.加号左右两边如果都是数字，做加法运算。</p><p>2.加号左右两边有一方为字符串，做拼接运算。</p><p>3.运算顺序，从左到右。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">"hello"</span> + <span class="hljs-number">100</span> + <span class="hljs-number">3</span>);<span class="hljs-comment">//hello1003</span><br></code></pre></td></tr></tbody></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231518681.png" alt="image-20230423151830601"></p><h1 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h1><h2 id="整数类型的分类"><a href="#整数类型的分类" class="headerlink" title="整数类型的分类"></a>整数类型的分类</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231522156.png" alt="image-20230423152242092"></p><h2 id="整数类型使用注意细节"><a href="#整数类型使用注意细节" class="headerlink" title="整数类型使用注意细节"></a>整数类型使用注意细节</h2><p>1.Java的整型默认为int类型，可以加小写l或者大写L将数字变为long类型。</p><p>2.bit，计算机中的最小存储单位。</p><p>​    byte，计算机中的基本存储单元。</p><p>​    1byte = 8bit</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231556192.png" alt="image-20230423155646133"></p><h1 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h1><h2 id="浮点型的分类"><a href="#浮点型的分类" class="headerlink" title="浮点型的分类"></a>浮点型的分类</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231600429.png" alt="image-20230423160036371"></p><p>说明：</p><p>1.浮点数都是近似值，尾数可能丢失，造成精度损失。</p><p>2.浮点数 = 符号位 + 指数位 + 尾数位</p><h2 id="浮点数类型使用注意细节"><a href="#浮点数类型使用注意细节" class="headerlink" title="浮点数类型使用注意细节"></a>浮点数类型使用注意细节</h2><ol><li><p>浮点数常量默认类型为double类型，尾部加f或者F可以变为float。</p></li><li><p>浮点型常量有两种表现形式：</p><p>十进制形式：1.23, 521.0f, .369</p><p>科学计数法形式：5.21e2<br>$$<br>5.21 * 10^2<br>$$<br>1.23e-2<br>$$<br>1.23/10^2<br>$$</p></li><li><p>通常情况下，应该使用double类型，因为double更精确。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">double</span> n1 = <span class="hljs-number">3.123456789</span>;<br>        <span class="hljs-keyword">float</span> n2 = <span class="hljs-number">3.123456789F</span>;<br>        System.out.println(n1);<br>        System.out.println(n2);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">3.123456789</span><br><span class="hljs-number">3.1234567</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="4"><li><p>浮点数使用陷阱 2.7 和 8.1 / 3 的比较</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">double</span> n1 = <span class="hljs-number">2.7</span>;<br>        <span class="hljs-keyword">double</span> n2 = <span class="hljs-number">8.1</span> / <span class="hljs-number">3</span>;<br>        System.out.println(n1 == n2);<span class="hljs-comment">// false</span><br>        System.out.println(n1);<br>        System.out.println(n2);<br>        <br>        <span class="hljs-comment">//通过Math.abs判断浮点数类型是否相等</span><br>        <span class="hljs-keyword">if</span>(Math.abs(n1 - n2) &lt; <span class="hljs-number">0.00001</span>){<br>            System.out.println(<span class="hljs-string">"这两个double类型的数据相等~"</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">false</span><br><span class="hljs-number">2.7</span><br><span class="hljs-number">2.6999999999999997</span><br>这两个<span class="hljs-keyword">double</span>类型的数据相等~<br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="Java-API文档"><a href="#Java-API文档" class="headerlink" title="Java  API文档"></a>Java  API文档</h1><p>API:  Application Programming Interface应用程序编程接口</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231621329.png" alt="image-20230423162139271"></p><h1 id="字符类型（char）"><a href="#字符类型（char）" class="headerlink" title="字符类型（char）"></a>字符类型（char）</h1><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">char</span> c1 = <span class="hljs-string">'a'</span>;<br>        <span class="hljs-keyword">char</span> c2 = <span class="hljs-string">'\t'</span>;<br>        <span class="hljs-keyword">char</span> c3 = <span class="hljs-string">'许'</span>;<br>        <span class="hljs-keyword">char</span> c4 = <span class="hljs-number">97</span>;<br>        System.out.println(c1);<br>        System.out.println(c2);<br>        System.out.println(c3);<br>        System.out.println(c4);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231625818.png" alt="image-20230423162555777"></p><h2 id="字符型使用细节"><a href="#字符型使用细节" class="headerlink" title="字符型使用细节"></a>字符型使用细节</h2><ol><li>在Java中，char的本质是一个整数，默认输出Unicode码对应的字符。<a href="https://tool.chinaz.com/tools/unicode.aspx">https://tool.chinaz.com/tools/unicode.aspx</a></li><li>可以直接给char赋一个整数，输出的时候，会按照对应的Unicode字符输出。（97 ==》 a）</li><li>char支持运算，它相当于一个整数，因为它都有对应的Unicode码。思考：System.out.println(‘a’ + “a”); 程序运行后，会输出什么？ </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 在 java中，char的本质是一个整数，在默认输出时，是 unicode 码对应的字符</span><br>        <span class="hljs-comment">// 要输出对应的数字，可以(int)字符</span><br>        <span class="hljs-keyword">char</span> c1 = <span class="hljs-number">97</span>;<br>        System.out.println(c1); <span class="hljs-comment">// a</span><br><br>        <span class="hljs-keyword">char</span> c2 = <span class="hljs-string">'a'</span>; <span class="hljs-comment">//输出'a' 对应的数字</span><br>        System.out.println((<span class="hljs-keyword">int</span>)c2);<span class="hljs-comment">//97</span><br><br>        <span class="hljs-keyword">char</span> c3 = <span class="hljs-string">'许'</span>;<br>        System.out.println((<span class="hljs-keyword">int</span>)c3);<span class="hljs-comment">//35768</span><br><br>        <span class="hljs-keyword">char</span> c4 = <span class="hljs-number">35768</span>;<br>        System.out.println(c4);<span class="hljs-comment">//许</span><br><br>        <span class="hljs-comment">// char类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码.</span><br>        System.out.println(<span class="hljs-string">'a'</span> + <span class="hljs-number">10</span>);<span class="hljs-comment">//107</span><br><br>        <span class="hljs-comment">// 课堂小测试</span><br>        <span class="hljs-keyword">char</span> c5 = <span class="hljs-string">'b'</span> + <span class="hljs-number">1</span>;<br>        System.out.println((<span class="hljs-keyword">int</span>)c5);<span class="hljs-comment">//99</span><br>        System.out.println(c5);<span class="hljs-comment">//c</span><br>        System.out.println(<span class="hljs-string">'a'</span> + <span class="hljs-string">"a"</span>);<span class="hljs-comment">//aa</span><br>        System.out.println(<span class="hljs-string">'a'</span> + <span class="hljs-number">1</span>);<span class="hljs-comment">//98</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="字符存储细节"><a href="#字符存储细节" class="headerlink" title="字符存储细节"></a>字符存储细节</h2><p>字符型存储到计算机里面，会将字符对应的码值（整数）找出来。比如：</p><p>存储’a’ =&gt; 码值97 =&gt; 二进制（0110 0001） =&gt;存储</p><h2 id="字符编码表"><a href="#字符编码表" class="headerlink" title="字符编码表"></a>字符编码表</h2><ul><li><strong>ASCII编码</strong>，一个字节表示，一共128个字符。实际上一个字节可以表示256个字符，它没有用完，只用了128个。</li><li><strong>Unicode编码</strong>，固定大小的编码，字母和汉字统一都是占用2个字节，浪费空间。</li><li><strong>UTF-8编码</strong>，大小可变的编码表，字母占1个字节，汉字占用3个字节。</li><li>GBK编码，可以表示汉字，而且范围比较广，字母1个字节，汉字2个字节。</li><li>GB2312编码，可以表示汉字。（GB2312 &lt; GBK）</li><li>BIG5码，繁体中文，台湾，香港。</li></ul><h1 id="布尔类型（boolean）"><a href="#布尔类型（boolean）" class="headerlink" title="布尔类型（boolean）"></a>布尔类型（boolean）</h1><p>布尔类型也叫boolean类型，只允许取值true或者false，没有null。</p><p>在Java中，不可以使用非0或者0代替true或false。</p><h1 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h1><h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231707718.png" alt="image-20230423170724670"></p><h2 id="自动类型转换细节"><a href="#自动类型转换细节" class="headerlink" title="自动类型转换细节"></a>自动类型转换细节</h2><ol><li><p>多种类型的数据混合运算时，系统会首先自动将所有的数据转换为容量最大的那种数据类型，然后再进行计算。int + double ==&gt; 会转成double</p></li><li><p>（byte，short）和char之间没有类型转换</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当把一个具体的值赋给byte时，会先判断该值是否在byte范围内，如果在，就ok</span><br><span class="hljs-keyword">byte</span> b1 = <span class="hljs-number">10</span>; <span class="hljs-comment">//不报错</span><br><span class="hljs-keyword">char</span> c1 = b1; <span class="hljs-comment">//报错，因为byte不能转换为char</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p>byte，short，char三者运算时，会在计算时转换为int类型</p></li><li><p>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型。</p></li></ol><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>自动类型转换的逆过程，<strong>将容量大的数据类型转换为容量小的数据类型</strong>。有可能会造成精度损失或数据溢出。</p><h2 id="强制类型转换细节"><a href="#强制类型转换细节" class="headerlink" title="强制类型转换细节"></a>强制类型转换细节</h2><ol><li><p>强制符号只针对最近的操作数，可以使用小括号来提升优先级。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> x = (<span class="hljs-keyword">int</span>)(<span class="hljs-number">3</span> * <span class="hljs-number">3.5</span> + <span class="hljs-number">6</span> * <span class="hljs-number">1.5</span>);<br>System.out.println(x);<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>char类型可以保存int的常量值，但是不能保存int的变量值，需要强转。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c1 = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> i1 = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//char c2 = i1;//错误</span><br><span class="hljs-keyword">char</span> c2 = (<span class="hljs-keyword">char</span>)i1;<br>System.out.println(c2);<span class="hljs-comment">//100对应的字符d</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li>byte和short，char类型在进行运算时，会被当做int类型处理。</li></ol><h1 id="基本数据类型和String类型的转换"><a href="#基本数据类型和String类型的转换" class="headerlink" title="基本数据类型和String类型的转换"></a>基本数据类型和String类型的转换</h1><p>1、基本数据类型转String类型<br>    基本数据类型的值 + “ “</p><p>2、String类型转基本数据类型<br>    基本类型包装类.parse**()</p><p>3、字符串转为字符。str.charAt(0);</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String s = <span class="hljs-string">"123"</span>;<br>        <span class="hljs-keyword">int</span> i = Integer.parseInt(s);<br>        System.out.println(i);<span class="hljs-comment">//123</span><br><br>        <span class="hljs-keyword">double</span> v = Double.parseDouble(s);<br>        System.out.println(v);<br><br>        <span class="hljs-keyword">byte</span> b = Byte.parseByte(s);<br>        System.out.println(b);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">123</span><br><span class="hljs-number">123.0</span><br><span class="hljs-number">123</span><br></code></pre></td></tr></tbody></table></figure><h1 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h1><ol><li><p>程序阅读题，看看输出什么？</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231818375.png" alt="image-20230423181833303"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">30</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>使用char类型，分别保存\n \t \r \ 1等字符，并且打印输出</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//分别保存\n \t \r \\ 1 等字符</span><br>        <span class="hljs-keyword">char</span> c1 = <span class="hljs-string">'\n'</span>;<br>        <span class="hljs-keyword">char</span> c2 = <span class="hljs-string">'\t'</span>;<br>        <span class="hljs-keyword">char</span> c3 = <span class="hljs-string">'\r'</span>;<br>        <span class="hljs-keyword">char</span> c4 = <span class="hljs-string">'\\'</span>;<br>        <span class="hljs-keyword">char</span> c5 = <span class="hljs-string">'1'</span>;<br>        System.out.println(c1);<br>        System.out.println(c2);<br>        System.out.println(c3);<br>        System.out.println(c4);<br>        System.out.println(c5);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><p>   <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231822946.png" alt="image-20230423182217892"></p><ol start="3"><li><p>保存两本书名，用+拼接，看效果。</p><p>保存两个性别，用+拼接，看效果。</p><p>保存两本书价格，用+拼接，看效果。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String s1 = <span class="hljs-string">"向前一步"</span>;<br>        String s2 = <span class="hljs-string">"你当像鸟飞往你的山"</span>;<br>        System.out.println(s1 + s2);<br><br>        <span class="hljs-keyword">char</span> c1 = <span class="hljs-string">'男'</span>;<br>        <span class="hljs-keyword">char</span> c2 = <span class="hljs-string">'女'</span>;<br>        System.out.println(c1 + c2);<br><br>        <span class="hljs-keyword">double</span> d1 = <span class="hljs-number">32.2</span>;<br>        <span class="hljs-keyword">double</span> d2 = <span class="hljs-number">31.1</span>;<br>        System.out.println(d1 + d2);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">向前一步你当像鸟飞往你的山<br><span class="hljs-number">52906</span><br><span class="hljs-number">63.300000000000004</span><br></code></pre></td></tr></tbody></table></figure></li></ol><p>   <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231826230.png" alt="image-20230423182612169"></p><ol start="4"><li>编程实现如下效果</li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231827982.png" alt="image-20230423182723923"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String name = <span class="hljs-string">"bambi"</span>;<br>        <span class="hljs-keyword">int</span> age = <span class="hljs-number">13</span>;<br>        <span class="hljs-keyword">char</span> gender = <span class="hljs-string">'女'</span>;<br>        <span class="hljs-keyword">int</span> score = <span class="hljs-number">99</span>;<br>        String hobby = <span class="hljs-string">"climbing"</span>;<br><br>        System.out.println(<span class="hljs-string">"姓名"</span> + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"年龄"</span> + <span class="hljs-string">"\t"</span>  + <span class="hljs-string">"性别"</span> + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"成绩"</span> +<br>                <span class="hljs-string">"\t"</span> + <span class="hljs-string">"爱好"</span> + <span class="hljs-string">"\n"</span> + name + <span class="hljs-string">"\t"</span> + age + <span class="hljs-string">"\t"</span> + gender + <span class="hljs-string">"\t"</span> + score + <span class="hljs-string">"\t"</span> + hobby);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>用IDEA执行代码输出结果为：</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231837386.png" alt="image-20230423183732333"></p><p>用CMD执行代码输出结果为：</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231840160.png" alt="image-20230423184019110"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FreeMarker</title>
    <link href="/posts/db5fbd34.html"/>
    <url>/posts/db5fbd34.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><p>代码：<a href="https://gitee.com/hhgs_admin/freemarkerdemo">https://gitee.com/hhgs_admin/freemarkerdemo</a></p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220113258424.png"></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="FreeMarker概念："><a href="#FreeMarker概念：" class="headerlink" title="FreeMarker概念："></a>FreeMarker概念：</h3><p>FreeMarker是一个模板引擎，一个基于模板生成文本输出的通用工具，使用纯Java编写。<br> FreeMarker被设计用来生成HTML Web页面，特别是基于MVC模式的应用程序<br> 虽然FreeMarker具有一些编程的能力，但通常由Java程序准备要显示的数据，由FreeMarker生成页面，通过模板显示准备的数据：</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220112938384.png"></p><p>FreeMarker不是一个Web应用框架，而适合作为Web应用框架一个组件。<br> FreeMarker与容器无关，因为它并不知道HTTP或Servlet；FreeMarker同样可以应用于非Web应用程序环境。<br> FreeMarker更适合作为Model2框架（如Struts）的视图组件，你也可以在模板中使用JSP标记库。<br> FreeMarker是免费的。</p><h3 id="FreeMarker特性"><a href="#FreeMarker特性" class="headerlink" title="FreeMarker特性"></a>FreeMarker特性</h3><h4 id="通用目标"><a href="#通用目标" class="headerlink" title="通用目标"></a>通用目标</h4><p>能够生成各种文本：HTML、XML、RTF、Java源代码等等</p><p>易于嵌入到你的产品中：轻量级；不需要Servlet环境</p><p>插件式模板载入器：可以从任何源载入模板，如本地文件、数据库等等</p><p>你可以按你所需生成文本：保存到本地文件；作为Email发送；从Web应用程序发送它返回给Web浏览器</p><h4 id="强大的模板语言"><a href="#强大的模板语言" class="headerlink" title="强大的模板语言"></a>强大的模板语言</h4><p>所有常用的指令：include、if/elseif/else、循环结构</p><p>在模板中创建和改变变量</p><p>几乎在任何地方都可以使用复杂表达式来指定值</p><p>命名的宏，可以具有位置参数和嵌套内容</p><p>名字空间有助于建立和维护可重用的宏库，或者将一个大工程分成模块，而不必担心名字冲突</p><p>输出转换块：在嵌套模板片段生成输出时，转换HTML转义、压缩、语法高亮等等；你可以定义自己的转换</p><h4 id="通用数据模型"><a href="#通用数据模型" class="headerlink" title="通用数据模型"></a>通用数据模型</h4><p>FreeMarker不是直接反射到Java对象，Java对象通过插件式对象封装，以变量方式在模板中显示</p><p>你可以使用抽象（接口）方式表示对象（JavaBean、XML文档、SQL查询结果集等等），告诉模板开发者使用方法，使其不受技术细节的打扰</p><h4 id="为Web准备"><a href="#为Web准备" class="headerlink" title="为Web准备"></a>为Web准备</h4><p>在模板语言中内建处理典型Web相关任务（如HTML转义）的结构</p><p>能够集成到Model2 Web应用框架中作为JSP的替代</p><p>支持JSP标记库</p><p>为MVC模式设计：分离可视化设计和应用程序逻辑；分离页面设计员和程序员</p><h4 id="智能的国际化和本地化"><a href="#智能的国际化和本地化" class="headerlink" title="智能的国际化和本地化"></a>智能的国际化和本地化</h4><p>字符集智能化（内部使用UNICODE）</p><p>数字格式本地化敏感</p><p>日期和时间格式本地化敏感</p><p>非US字符集可以用作标识（如变量名）</p><p>多种不同语言的相同模板</p><h4 id="强大的XML处理能力"><a href="#强大的XML处理能力" class="headerlink" title="强大的XML处理能力"></a>强大的XML处理能力</h4><p>&lt;#recurse&gt; 和&lt;#visit&gt;指令（2.3版本）用于递归遍历XML树。在模板中清楚和直觉的访问XML对象模型。开源论坛 <a href="https://links.jianshu.com/go?to=http://www.oschina.net/p/jforum">JForum</a>  就是使用了 FreeMarker 做为页面模板。</p><h3 id="FreeMarker环境搭建"><a href="#FreeMarker环境搭建" class="headerlink" title="FreeMarker环境搭建"></a>FreeMarker环境搭建</h3><h4 id="新建Maven-Web项目"><a href="#新建Maven-Web项目" class="headerlink" title="新建Maven Web项目"></a>新建Maven Web项目</h4><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220115027425.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220115100050.png"></p><p><img src="C:\Users\winner\Desktop\Freemarker_readme-master\images\image-20221220115121387.png"></p><h4 id="配置坐标依赖和部署插件"><a href="#配置坐标依赖和部署插件" class="headerlink" title="配置坐标依赖和部署插件"></a>配置坐标依赖和部署插件</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarkerdemo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>freemarkerdemo Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project's website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    freemarker 的坐标--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    servlet-api 的依赖--&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>freemarkerdemo<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置Tomcat插件 ,用于启动项目 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--如果不设置，则默认为猫的自定义端口，项目路径为http://localhost:默认端口/项目名  --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--如果端口号改为8081：那么访问的时候路径的端口就要写成8081，否则404  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8080<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 如果设置为/，则项目了路径为http://localhost:端口号 /--&gt;</span><br>            <span class="hljs-comment">&lt;!-- 如果设置为/123，则项目了路径为http://localhost:端口号/123 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/123<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><h4 id="修改配置文君web-xml"><a href="#修改配置文君web-xml" class="headerlink" title="修改配置文君web.xml"></a>修改配置文君web.xml</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">web-app</span> <span class="hljs-meta-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="hljs-meta"> <span class="hljs-meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>freemarker.ext.servlet.FreemarkerServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--      模板路径--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>TemplatePath<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--      默认在webapp 目录下查找对应的模板文件--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--      模板默认的编码--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>default_encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--  处理所有的以.ftl结尾的文件；ftl是freemarker默认的文件后缀--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.ftl<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><h4 id="编写Servlet文件"><a href="#编写Servlet文件" class="headerlink" title="编写Servlet文件"></a>编写Servlet文件</h4><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220133846118.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet("/f01")</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FreeMarker01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br><span class="hljs-comment">//        给模板的数据</span><br>        req.setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"hello word"</span>);<br><span class="hljs-comment">//        请求转发到指定的页面，</span><br>        req.getRequestDispatcher(<span class="hljs-string">"template/f01.ftl"</span>).forward(req,resp);<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="新建模板文件ftl"><a href="#新建模板文件ftl" class="headerlink" title="新建模板文件ftl"></a>新建模板文件ftl</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs freemarker">&lt;!--<br>html注释<br>    在浏览器中可以看到的注释<br>--&gt;<br>&lt;#--<br>freemarker注释<br>    在浏览器中不能看到的注释<br>freemarker的语法<br>    1，html所有的标签都适用<br>    2，js与css的使用，与html中语法一致<br>--&gt;<br>&lt;#-- 获取数据--&gt;<br>${msg}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220133900337.png"></p><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220134022464.png"></p><h4 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h4><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220135551509.png"></p><h2 id="FreeMarker数据类型"><a href="#FreeMarker数据类型" class="headerlink" title="FreeMarker数据类型"></a>FreeMarker数据类型</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220140217641.png"></p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>1.在Servlet中设置布尔类型的数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//布尔类型</span><br>request.setAttribute(<span class="hljs-string">"flag"</span>,<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></tbody></table></figure><p>2.获取数据</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--<br>数据类型：布尔类型<br>在freemarker中布尔类型不能直接输出；如果输出要先转成字符串<br>方式一：?c<br>方式二：?string 或 ?string("true时的文本","false时的文本")--&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>布尔类型<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>${flag?c} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>${flag?string} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>${flag?string("yes","no")} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220140958106.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220140924570.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/image-20221220140941250.png"></p><p><img src="C:\Users\winner\Desktop\Freemarker_readme-master\images\image-20221220140941250.png"></p><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><p>1.在Servlet中设置日期类型的数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//日期类型</span><br>request.setAttribute(<span class="hljs-string">"createDate"</span>,<span class="hljs-keyword">new</span> Date());<br></code></pre></td></tr></tbody></table></figure><p>2.获取数据</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><br>&lt;#--<br>数据类型：日期类型<br>在freemarker中日期类型不能直接输出；如果输出要先转成日期型或字符串<br>1，年月日 ?date<br>2,时分秒 ?time<br>3,年月日时分秒 ?datetime<br>4,制定格式 ?string("自定义格式") y:年 M:月 d:日 H:时 m:分 s:秒 --&gt;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>日期类型<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>&lt;#--输出日期格式 --&gt;<br>${createDate?date} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;#--输出时间格式 --&gt;<br>${createDate?time} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;#--输出日期时间格式 --&gt;<br>${createDate?datetime} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;#--输出格式化日期格式 --&gt;<br>${createDate?string("yyyy年MM月dd日 HH:mm:ss")} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>1.在Servlet中设置数值类型的数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数值类型</span><br>request.setAttribute(<span class="hljs-string">"age"</span>,<span class="hljs-number">18</span>);<span class="hljs-comment">//数值类型</span><br>request.setAttribute(<span class="hljs-string">"salary"</span>,<span class="hljs-number">100000</span>);<span class="hljs-comment">//数值类型</span><br>request.setAttribute(<span class="hljs-string">"avg"</span>,<span class="hljs-number">0.545</span>);<span class="hljs-comment">//浮点类型</span><br></code></pre></td></tr></tbody></table></figure><p>2.获取数据</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--<br>数据类型：数值类型<br>在freemarker中数值类型可以直接输出；<br>1，转字符串<br>普通字符串  ?c<br>货币字符串  ?string.currency<br>百分比型字符串 ?string.percent<br>2，保留浮点型数值指定小数位（#表示一个小数位）<br>?string["0.##"]--&gt;<br>&lt;#-- 直接输出数值类型--&gt;<br>${age}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>${salary}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;#-- 将数值转换成字符串输出--&gt;<br>${salary?c}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;#--将数值转换成货币类型的字符串输出 --&gt;<br>${salary?string.currency}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--将数值转换为百分比的字符串--&gt;<br>${avg?string.percent}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--将浮点型数值保留指定小数位输出（##表示保留两位小数）--&gt;<br>${avg?string["0.##"]} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>1.在Servlet中设置字符串类型的数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字符串类型</span><br>request.setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"hello"</span>);<br>request.setAttribute(<span class="hljs-string">"msg2"</span>,<span class="hljs-string">"freemarker "</span>);<br></code></pre></td></tr></tbody></table></figure><p>2.获取数据</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>&lt;#--<br>数据类型：字符串类型<br>在freemarker中字符串类型可以直接输出；<br>1，截取字符串（坐闭右开）?substring(start,end)<br>2,首字母小写输出   ?uncap_first<br>3，首字母大写输出  ?cap_first<br>4，字母转小写输出  ?lower_case<br>5，字母转大写输出 ?upper_case<br>6，获取字符串长度  ?length<br>7，是否以指定字符串开头(boolean类型)     ?starts_with("xx")?string<br>8，是否以指定字符结尾(boolean类型)?ends_with("xx")?string<br>9，获取指定字符的索引 ?index_of("xx")<br>10，去除字符串前后空格  ?trim<br>11，替换指定字符串   ?replace("xx","xx")<br><br>--&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>字符串类型<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>${msg}--------${msg2}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>${msg?string}--------${msg2?string}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#-- 1.截取字符串（坐闭右开）?substring(start,end) --&gt;<br>${msg?substring(0,2)}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#-- 2,首字母小写输出   ?uncap_first --&gt;<br>${msg?uncap_first}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--3，首字母大写输出  ?cap_first --&gt;<br>${msg?cap_first}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--4，字母转小写输出  ?lower_case --&gt;<br>${msg?lower_case}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--5，字母转大写输出 ?upper_case --&gt;<br>${msg?upper_case}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--6，获取字符串长度  ?length --&gt;<br>${msg?length}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--7，是否以指定字符串开头(boolean类型)     ?starts_with("xx")?string --&gt;<br>${msg?starts_with("a")?string}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--8，是否以指定字符结尾(boolean类型)?ends_with("xx")?string --&gt;<br>${msg?ends_with("o")?string}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--9，获取指定字符的索引 ?index_of("xx") --&gt;<br>${msg2?index_of("m")}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--10，去除字符串前后空格  ?trim --&gt;<br>${msg2?trim}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--11，替换指定字符串   ?replace("xx","xx") --&gt;<br>${msg?replace("he","we")}  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><br><br></code></pre></td></tr></tbody></table></figure><p>字符串空值清空处理</p><p>​    FreeMarker的变量必须赋值，否则就会抛出异常。而对FreeMarker来说，null值和不存在的变量是完全一样的，因为FreeMarker无法理解null值。</p><p>​    FreeMarker提供两个运算符来避免空值：</p><p>​    1 !：指定确实变量的默认值</p><p>​        ${value！}：如果value值为空，则默认值是空字符串</p><p>​        ${value! “默认值”}： 如果value值为空，则默认值是字符串“默认值”</p><p>  2 ??： 判断变量是否存在</p><p>​      如果变量存在，返回true，否则返回false</p><p>​     ${(value??)?string}</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//空数据</span><br>request.setAttribute(<span class="hljs-string">"str1"</span>,<span class="hljs-keyword">null</span>);<br>request.setAttribute(<span class="hljs-string">"str2"</span>,<span class="hljs-string">""</span>);<br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>&lt;#-- 如果值不存在，直接输出就会报错--&gt;<br>&lt;#--${a}--&gt;<br><br>&lt;#--值为null的数据也直接报错--&gt;<br>&lt;#--${str1}--&gt;<br><br>&lt;#--值为空字符串的不会报错--&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>空值处理<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>空字符串：${str2}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;#-- 使用!,当值不存在时，默认显示空字符串 --&gt;<br>感叹号：${str1!}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;#-- 使用!"xx",当值不存在时，默认显示指定字符串--&gt;<br>${str1! "str1的数不存在"}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;#-- 使用??,判断字符串是否为空；返回布尔类型。如果想要输出，需要将布尔类型转换成字符串--&gt;<br>${(str1??)?c}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>${(str1??)?string}<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="sequence类型"><a href="#sequence类型" class="headerlink" title="sequence类型"></a>sequence类型</h3><p>1.在Servlet中设置序列类型的数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 序列类型 （数组、List、Set）</span><br><span class="hljs-comment">// 数组操作</span><br>String[] stars = <span class="hljs-keyword">new</span> String[]{<span class="hljs-string">"周杰伦"</span>,<span class="hljs-string">"林俊杰"</span>,<span class="hljs-string">"陈奕迅"</span>,<span class="hljs-string">"五月天"</span>};<br>request.setAttribute(<span class="hljs-string">"stars"</span>,stars);<br><span class="hljs-comment">// List操作</span><br>List&lt;String&gt; citys = Arrays.asList(<span class="hljs-string">"上海"</span>,<span class="hljs-string">"北京"</span>,<span class="hljs-string">"杭州"</span>,<span class="hljs-string">"深圳"</span>);<br>request.setAttribute(<span class="hljs-string">"cityList"</span>,citys);<br><span class="hljs-comment">// JavaBean集合</span><br>List&lt;User&gt; userList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>,<span class="hljs-string">"zhangsan"</span>,<span class="hljs-number">22</span>));<br>userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>,<span class="hljs-string">"lisi"</span>,<span class="hljs-number">18</span>));<br>userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>,<span class="hljs-string">"wangwu"</span>,<span class="hljs-number">20</span>));<br>request.setAttribute(<span class="hljs-string">"userList"</span>,userList);<br></code></pre></td></tr></tbody></table></figure><p>2.获取数据</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--<br>    FreeMarker 数据类型<br>        序列类型（数组、List、Set）<br>            通过list指令输出序列<br>            &lt;#list 序列名 as 元素名&gt;<br>                ${元素名}<br>            &lt;/#list&gt;<br><br>            获取序列的长度        ${序列名?size}<br>            获取序列元素的下标     ${元素名?index}<br>            获取第一个元素        ${序列名?first}<br>            获取最后一个元素      ${序列名?last}<br><br>            倒序输出         序列名?reverse<br>            升序输出         序列名?sort<br>            降序输出         序列名?sort?reverse<br>            指定字段名排序    序列名?sort_by("字段名")<br>                注：一般是JavaBean集合，对应的字段名需要提供get方法<br><br>--&gt;<br>&lt;#-- 数组操作 --&gt;<br>&lt;#list stars as star&gt;<br>  下标：${star?index} - 姓名：${star} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;/#list&gt;<br>获取序列的长度：${stars?size} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>获取第一个元素：${stars?first} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>获取最后一个元素： ${stars?last} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>&lt;#-- List操作 --&gt;<br>&lt;#list cityList as city&gt;<br>    ${city}<br>&lt;/#list&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--倒序输出         序列名?reverse--&gt;<br>&lt;#list cityList?reverse as city&gt;<br>    ${city}<br>&lt;/#list&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--升序输出         序列名?sort--&gt;<br>&lt;#list cityList?sort as city&gt;<br>    ${city}<br>&lt;/#list&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--降序输出         序列名?sort?reverse--&gt;<br>&lt;#list cityList?sort?reverse as city&gt;<br>    ${city}<br>&lt;/#list&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>&lt;#list userList as user &gt;<br>    编号：${user.userId} &nbsp; 姓名：${user.uname} &nbsp; ${user.uage} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;/#list&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#list userList?sort_by("uage") as user &gt;<br>编号：${user.userId} &nbsp; 姓名：${user.uname} &nbsp; ${user.uage} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;/#list&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h3><p>1.在Servlet中设置hash类型的数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Map操作</span><br>Map&lt;String,String&gt; cityMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>cityMap.put(<span class="hljs-string">"sh"</span>,<span class="hljs-string">"上海"</span>);<br>cityMap.put(<span class="hljs-string">"bj"</span>,<span class="hljs-string">"北京"</span>);<br>cityMap.put(<span class="hljs-string">"sz"</span>,<span class="hljs-string">"深圳"</span>);<br>request.setAttribute(<span class="hljs-string">"cityMap"</span>,cityMap);<br></code></pre></td></tr></tbody></table></figure><p>2.获取数据</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--<br> &nbsp; &nbsp;数据类型：hash类型<br> &nbsp; &nbsp; &nbsp; &nbsp; key遍历输出<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;#list hash?keys as key&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ${key} -- ${hash[key]}<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/#list&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; value遍历输出<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;#list hash?values as value&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ${value}<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/#list&gt;<br>--&gt;<br>&lt;#-- key遍历输出 --&gt;<br>&lt;#list cityMap?keys as key&gt;<br> &nbsp; ${key} -- ${cityMap[key]} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <br>&lt;/#list&gt; <br>&lt;#-- value遍历输出 --&gt;<br>&lt;#list cityMap?values as value&gt;<br> &nbsp; ${value} | <br>&lt;/#list&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="FreeMarker常见指令"><a href="#FreeMarker常见指令" class="headerlink" title="FreeMarker常见指令"></a>FreeMarker常见指令</h2><h3 id="assign-自定义变量指令"><a href="#assign-自定义变量指令" class="headerlink" title="assign 自定义变量指令"></a>assign 自定义变量指令</h3><p>使用 assign 指令你可以创建一个新的变量， 或者替换一个已经存在的变量。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--<br>    assign 自定义变量指令<br>        语法：<br>            &lt;#assign 变量名=值&gt;<br>            &lt;#assign 变量名=值 变量名=值&gt; （定义多个变量）<br>--&gt;<br>&lt;#assign str="hello"&gt;<br>${str} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <br>&lt;#assign num=1 names=["zhangsan","lisi","wangwu"] &gt;<br>${num} -- ${names?join(",")}<br></code></pre></td></tr></tbody></table></figure><h3 id="if-elseif-else-逻辑判断指令"><a href="#if-elseif-else-逻辑判断指令" class="headerlink" title="if elseif else 逻辑判断指令"></a>if elseif else 逻辑判断指令</h3><p>可以使用 if ， elseif 和 else 指令来条件判断是否满足某些条件。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span> 2. if, else, elseif 逻辑判断指令<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>&lt;#assign score = 60&gt;<br>&lt;#if score lt 60 &gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>你个小渣渣！<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>    &lt;#elseif score == 80&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>分不在高，及格就行！<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>    &lt;#elseif score gt 60 &amp;&amp; score lt 80 &gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>革命尚未成功，同志仍需努力！<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>    &lt;#else &gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>哎哟不错哦！<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>&lt;/#if&gt;<br>&lt;#--判断数据是否存在--&gt;<br>&lt;#assign list=""&gt;<br>&lt;#if list??&gt;<br>    数据存在<br>    &lt;#else &gt;<br>        数据不存在<br>&lt;/#if&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#if list2??&gt;<br>    数据存在<br>&lt;#else &gt;<br>    数据不存在<br>&lt;/#if&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="list-遍历指令"><a href="#list-遍历指令" class="headerlink" title="list 遍历指令"></a>list 遍历指令</h3><p>可以使用 list 指令来对序列进行遍历。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>3. list指令<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>&lt;#assign users = ["张三","李四","王五"]&gt;<br>&lt;#list users as user&gt;<br>    ${user} |<br>&lt;/#list&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#--判断数据不为空，再执行遍历 （如果序列不存在，直接遍历会报错）--&gt;<br>&lt;#if users2??&gt;<br>    &lt;#list users2 as user&gt;<br>        ${user}<br>    &lt;/#list&gt;<br>&lt;/#if&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;#-- 当序列没有数据项时，使用默认信息 --&gt;<br>&lt;#assign users3 = []&gt;<br>&lt;#list users3 as user&gt;<br>    ${user} |<br>    &lt;#else &gt;<br>        用户数据不存在！<br>&lt;/#list&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="macro-自定义指令"><a href="#macro-自定义指令" class="headerlink" title="macro 自定义指令"></a>macro 自定义指令</h3><p>可以使用 macro 指令来自定义一些自定义指令。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--<br>    macro 自定义指令 （宏）<br>        1. 基本使用<br>            格式：<br>                &lt;#macro 指令名&gt;<br>                    指令内容<br>                &lt;/#macro&gt;<br>            使用：<br>                &lt;@指令名&gt;&lt;/@指令名&gt;<br>        2. 有参数的自定义指令<br>            格式：<br>                 &lt;#macro 指令名 参数名1 参数名2&gt;<br>                    指令内容<br>                &lt;/#macro&gt;<br>            使用：<br>                &lt;@指令名 参数名1=参数值1 参数名2=参数值2&gt;&lt;/@指令名&gt;<br>        注：<br>            1. 指令可以被多次使用。<br>            2. 自定义指令中可以包含字符串，也可包含内置指令<br>--&gt;<br>&lt;#-- 定义基本的自定义指令 --&gt;<br>&lt;#macro address&gt;<br>    © 1999–2015 The FreeMarker Project. All rights reserved. <br>&lt;/#macro&gt; <br>&lt;#-- 使用指令 --&gt;<br>&lt;@address&gt;&lt;/@address&gt; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <br>&lt;@address&gt;&lt;/@address&gt; <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span> <br>&lt;#-- 定义有参数的自定义指令 --&gt;<br>&lt;#macro queryUserByName uname&gt;<br>    通过用户名查询用户信息 - ${uname} <br>&lt;/#macro&gt; <br>&lt;#-- 使用指令，并传递参数 --&gt;<br>&lt;@queryUserByName uname="admin"&gt;&lt;/@queryUserByName&gt; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <br>&lt;#-- 定义有多个参数的自定义指令 --&gt;<br>&lt;#macro queryUserByParams uname uage&gt;<br>    通过多个餐宿查询用户信息 - ${uname} - ${uage} &lt;/#macro&gt; <br>&lt;#-- 使用指令，并传递多个参数 --&gt;<br>&lt;@queryUserByParams uname="admin" uage=18&gt;&lt;/@queryUserByParams&gt; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#-- 自定义指令中包含内置指令 --&gt;<br>&lt;#macro cfb&gt;<br>    &lt;#list 1..9 as i&gt;<br>        &lt;#list 1..i as j&gt;<br>           ${j}*${i}=${j*i}<span class="hljs-symbol">&amp;nbsp;</span><br>        &lt;/#list&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &lt;/#list&gt; <br>&lt;/#macro&gt; <br>&lt;@cfb&gt;&lt;/@cfb&gt; <br>&lt;@cfb&gt;&lt;/@cfb&gt; <br>&lt;#-- 动态数据 --&gt;<br>&lt;#macro cfb2 num&gt;<br>    &lt;#list 1..num as i&gt;<br>        &lt;#list 1..i as j&gt;<br>           ${j}*${i}=${j*i}<span class="hljs-symbol">&amp;nbsp;</span><br>        &lt;/#list&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &lt;/#list&gt; <br>&lt;/#macro&gt; <br>&lt;@cfb2 num=5&gt;&lt;/@cfb2&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="nested-占位指令"><a href="#nested-占位指令" class="headerlink" title="nested 占位指令"></a>nested 占位指令</h3><p>nested 指令执行自定义指令开始和结束标签中间的模板片段。嵌套的片段可以包含模板中任意合法的内容。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--<br>    nested 占位指令<br>        nested 相当于占位符,一般结合macro指令一起使用。<br>        可以将自定义指令中的内容通过nested指令占位，当使用自定义指令时，会将占位内容显示。<br>--&gt;<br>&lt;#macro test&gt;<br>    这是一段文本！<br>    &lt;#nested&gt;<br>    &lt;#nested&gt; <br>&lt;/#macro&gt; <br>&lt;@test&gt;<span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>这是文本后面的内容！<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>&lt;/@test&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="import-导入指令"><a href="#import-导入指令" class="headerlink" title="import 导入指令"></a>import 导入指令</h3><p>import 指令可以引入一个库。也就是说，它创建一个新的命名空间， 然后在那个命名空间中执行给定路径的模</p><p>板。可以使用引入的空间中的指令。</p><h4 id="创建commons-ftl文件"><a href="#创建commons-ftl文件" class="headerlink" title="创建commons.ftl文件"></a>创建commons.ftl文件</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#macro cfb&gt;<br>    &lt;#list 1..9 as i&gt;<br>        &lt;#list 1..i as j&gt;<br>           ${j}*${i}=${j*i}<span class="hljs-symbol">&amp;nbsp;</span><br>        &lt;/#list&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &lt;/#list&gt; <br>&lt;/#macro&gt;<br></code></pre></td></tr></tbody></table></figure><p>在其他ftl页面中通过import导入commons.ftl的命名空间，使用该命名空间中的指令</p><h4 id="创建test-ftl文件"><a href="#创建test-ftl文件" class="headerlink" title="创建test.ftl文件"></a>创建test.ftl文件</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#-- 导入命名空间 --&gt;<br>&lt;#import "commons.ftl" as common&gt; <br>&lt;#-- 使用命名空间中的指令 --&gt;<br>&lt;@common.cfb&gt;&lt;/@common.cfb&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="创建Controller"><a href="#创建Controller" class="headerlink" title="创建Controller"></a>创建Controller</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> liyonghui</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> Freemarker常用指令</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/12/20 14:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet("/f04")</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FreeMarker04</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br><br><br><span class="hljs-comment">//        请求转发到指定的页面，</span><br>        req.getRequestDispatcher(<span class="hljs-string">"template/test.ftl"</span>).forward(req, resp);<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="include-包含指令"><a href="#include-包含指令" class="headerlink" title="include 包含指令"></a>include 包含指令</h3><p>可以使用 include 指令在你的模板中插入另外一个 FreeMarker 模板文件 。 被包含模板的输出格式是在 include</p><p>标签出现的位置插入的。 被包含的文件和包含它的模板共享变量，就像是被复制粘贴进去的一样。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--包含指令(引入其他页面文件) include--&gt;<br>&lt;#--html文件--&gt;<br>&lt;#include "test.html"&gt; <br>&lt;#--freemarker文件--&gt;<br>&lt;#include "test.ftl"&gt; <br>&lt;#--text文件--&gt;<br>&lt;#include "test.txt"&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="FreeMarker页面静态化"><a href="#FreeMarker页面静态化" class="headerlink" title="FreeMarker页面静态化"></a>FreeMarker页面静态化</h2><p>通过上述介绍可知 Freemarker 是一种基于模板的、用来生成输出文本的通用工具,所以 我们必须要定制符合自己业务的模板，然后生成自己的 html 页面。Freemarker 是通过 freemarker.template.Confifiguration 这个对象对模板进行加载的（它也处理创建和缓存预 解析模板的工作），然后我们通过 getTemplate 方法获得你想要的模板，有一点要记住 freemarker.template.Confifiguration 在你整个应用必须保证唯一实例。</p><h3 id="定义模板"><a href="#定义模板" class="headerlink" title="定义模板"></a>定义模板</h3><p>创建news.ftl模板文件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        &lt;#-- freemaeker模板中设置编码格式，否则中文可能乱码 --&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"content-type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        &lt;#-- 新闻标题 --&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span>${title}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        &lt;#-- 新闻来源  和 发布时间 --&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span><br>            新闻来源：${source} <span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br>            发布时间：${pubTime}<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        &lt;#-- 新闻内容 --&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-indent: 2em"</span>&gt;</span><br>            ${content}<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="加载模板"><a href="#加载模板" class="headerlink" title="加载模板"></a>加载模板</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxxx.servlet;<br><br><span class="hljs-keyword">import</span> freemarker.template.Configuration;<br><span class="hljs-keyword">import</span> freemarker.template.Template;<br><span class="hljs-keyword">import</span> freemarker.template.TemplateException;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@WebServlet("/news")</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewsServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        <span class="hljs-comment">// 实例化模板对象</span><br>        Configuration configuration = <span class="hljs-keyword">new</span> Configuration();<br>        <span class="hljs-comment">// 设置加载模板的上下文 以及加载模板的路径 （模板存放路径）</span><br>        configuration.setServletContextForTemplateLoading(getServletContext(),<span class="hljs-string">"/template"</span>);<br>        <span class="hljs-comment">// 设置模板的编码格式</span><br>        configuration.setDefaultEncoding(<span class="hljs-string">"UTF-8"</span>);<br>        <span class="hljs-comment">// 加载模板文件 获取模板对象</span><br>        Template template = configuration.getTemplate(<span class="hljs-string">"news.ftl"</span>);<br><br>        <span class="hljs-comment">// 设置数据模型</span><br>        Map&lt;String,Object&gt;  map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">"title"</span>,<span class="hljs-string">"【战“疫”说理】良好的公民素养和国民心态是“硬核”力量"</span>);<br>        map.put(<span class="hljs-string">"source"</span>,<span class="hljs-string">"经济日报-中国经济网"</span>);<br>        map.put(<span class="hljs-string">"pubTime"</span>,<span class="hljs-string">"2020年03月16日 10:00"</span>);<br>        map.put(<span class="hljs-string">"content"</span>,<span class="hljs-string">"公共性的社会大事件，是检验和透视公民素养和国民心态的一个重要窗口。"</span> +<br>                <span class="hljs-string">"在突袭而至的新冠肺炎疫情面前，一方面，抗击疫情的过程就是淬炼公民素养和国民心态的熔炉；另一方面，良好的公民素养和国民心态也是疫情防控的“硬核”力量，更是推动战“疫”积极向好态势不断拓展的精神之盾。\n"</span> +<br>                <span class="hljs-string">"\n疫情防控，既是大战，也是大考。涵养良好的公民素养和国民心态，是疫情期间摆在我们面前的考题，同时也是提升国家治理能力过程中需要面对的课题。\n"</span> +<br>                <span class="hljs-string">"\n着眼三个方面 提升科学素养\n\n疫情面前，每个人都是防控链条中的重要一环。做好自我保护，既是对自己、家人负责，也是对社会负责。有效做好科学防控，每个人都应具备必要的科学素养。"</span>);<br><br>        <span class="hljs-comment">// 获取项目的根目录</span><br>        String basePath = req.getServletContext().getRealPath(<span class="hljs-string">"/"</span>);<br>        <span class="hljs-comment">// 设置html的存放路径</span><br>        File htmlFile = <span class="hljs-keyword">new</span> File(basePath + <span class="hljs-string">"/html"</span>);<br>        <span class="hljs-comment">// 判断文件（目录）是否存在</span><br>        <span class="hljs-keyword">if</span> (!htmlFile.exists()) {<br>            <span class="hljs-comment">// 如果文件目录不存在，则新建文件目录</span><br>            htmlFile.mkdir();<br>        }<br>        <span class="hljs-comment">// 得到生成的文件名 （生成随机不重复的文件名）</span><br>        String fileName = System.currentTimeMillis() + <span class="hljs-string">".html"</span>;<br>        <span class="hljs-comment">// 创建html文件</span><br>        File file = <span class="hljs-keyword">new</span> File(htmlFile,fileName);<br>        <span class="hljs-comment">// 获取文件输出流</span><br>        FileWriter writer = <span class="hljs-keyword">new</span> FileWriter(file);<br><br><br>        <span class="hljs-comment">// 生成html （将数据模型填充到模板中）</span><br>        <span class="hljs-keyword">try</span> {<br>            template.process(map,writer);<br>        } <span class="hljs-keyword">catch</span> (TemplateException e) {<br>            e.printStackTrace();<br>        } <span class="hljs-keyword">finally</span> {<br>            <span class="hljs-comment">// 关闭资源</span><br>            writer.flush();<br>            writer.close();<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="生成对应的html文件"><a href="#生成对应的html文件" class="headerlink" title="生成对应的html文件"></a>生成对应的html文件</h2><p>浏览器地址栏输入：</p><p><a href="http://localhost:8989/news">http://localhost:8989/news</a></p><p>生成的文件存放在当前项目的webapp目录下的html目录中。</p><h2 id="FreeMarker运算符"><a href="#FreeMarker运算符" class="headerlink" title="FreeMarker运算符"></a>FreeMarker运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    算术运算</span><br><span class="hljs-comment">        +、-、*、/、%</span><br><span class="hljs-comment">--&gt;</span><br>&lt;#assign a1 = 8 a2 = 2 &gt;<br>${a1} + ${a2} = ${a1 + a2} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>${a1} - ${a2} = ${a1 - a2} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>${a1} * ${a2} = ${a1 * a2} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>${a1} / ${a2} = ${a1 / a2} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>${a1} % ${a2} = ${a1 % a2} <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-comment">&lt;!--字符串运算--&gt;</span><br>${"hello" + "," + "freemarker"}<br></code></pre></td></tr></tbody></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--<br>    逻辑运算符<br>     &amp;&amp;、||、!<br>--&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--<br>    比较运算符<br>        &gt; (gt): 大于号，推荐使用 gt<br>        &lt; (lt)： 小于号，推荐使用 lt<br>        &gt;= (gte): 大于等于， 推荐是用 gte<br>        &lt;= (lte): 小于等于，推荐使用 lte<br>        == ： 等于<br>        != : 不等于<br>--&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="空值运算符"><a href="#空值运算符" class="headerlink" title="空值运算符"></a>空值运算符</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#--<br>    空值运算符<br>     1. ??:判断是否为空，返回布尔类型<br>        如果不为空返回 false， 如果为空返回 true，不能直接输出<br>       ${(name??)?string}<br>     2. !: 设置默认值，如果为空，则设置默认值<br>         1. 设置默认为空字符串：<br>         ${name!}<br>         2. 设置指定默认值<br>         ${name!'zhangsan'}<br>--&gt;<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>新技术FreeMarker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java概述</title>
    <link href="/posts/1113d944.html"/>
    <url>/posts/1113d944.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="如何快速学习一个知识点"><a href="#如何快速学习一个知识点" class="headerlink" title="如何快速学习一个知识点"></a>如何快速学习一个知识点</h1><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231126112.png" alt="image-20230423112646058"></p><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在控制台，输入 tab 键，可以实现命令补全 </span><br>\t ：一个制表位，实现对齐的功能<br>\n ：换行符<br>\\ ：一个\<br>\<span class="hljs-string">" :一个"</span><br>\<span class="hljs-string">' ：一个'</span> <br>\r :一个回车<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//转义字符练习</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>{<br><br>    <span class="hljs-comment">//编写一个 main 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//\t ：一个制表位，实现对齐的功能</span><br>        System.out.println(<span class="hljs-string">"北京\t天津\t上海"</span>);<br><br>        <span class="hljs-comment">// \n ：换行符</span><br>        System.out.println(<span class="hljs-string">"jack\nsmith\nmary"</span>);<br><br>        <span class="hljs-comment">// \\ ：一个\</span><br>        System.out.println(<span class="hljs-string">"C:\\Windows\\System32\\cmd.exe"</span>);<br><br>        <span class="hljs-comment">// \" :一个"</span><br>        System.out.println(<span class="hljs-string">"你好呀，\"bambi\""</span>);<br><br>        <span class="hljs-comment">// \' ：一个'</span><br>        System.out.println(<span class="hljs-string">"你好呀，\'bambi\'"</span>);<br><br>        <span class="hljs-comment">// \r :一个回车</span><br>        System.out.println(<span class="hljs-string">"你好呀\r明天"</span>);<br>        <span class="hljs-comment">// 解读</span><br>        <span class="hljs-comment">// 1. 输出 你好呀</span><br>        <span class="hljs-comment">// 2. \r 表示回车</span><br>        System.out.println(<span class="hljs-string">"你好呀\r明天"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">d:\desktop&gt;java App<br>北京    天津    上海<br>jack<br>smith<br>mary<br>C:\Windows\System32\cmd.exe<br>你好呀，<span class="hljs-string">"bambi"</span><br>你好呀，<span class="hljs-string">'bambi'</span><br>明天呀<br>明天呀<br></code></pre></td></tr></tbody></table></figure><h1 id="Java代码规范-行尾风格"><a href="#Java代码规范-行尾风格" class="headerlink" title="Java代码规范_行尾风格"></a>Java代码规范_行尾风格</h1><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231210817.png" alt="image-20230423121036762"></p><h1 id="DOS（Disk-Operating-System-磁盘操作系统）命令"><a href="#DOS（Disk-Operating-System-磁盘操作系统）命令" class="headerlink" title="DOS（Disk Operating System 磁盘操作系统）命令"></a>DOS（Disk Operating System 磁盘操作系统）命令</h1><h2 id="DOS介绍"><a href="#DOS介绍" class="headerlink" title="DOS介绍"></a>DOS介绍</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231217021.png" alt="image-20230423121752969"></p><h2 id="相对路径-amp-绝对路径"><a href="#相对路径-amp-绝对路径" class="headerlink" title="相对路径 &amp; 绝对路径"></a>相对路径 &amp; 绝对路径</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304231227498.png" alt="image-20230423122746437"></p><h2 id="常用DOC命令"><a href="#常用DOC命令" class="headerlink" title="常用DOC命令"></a>常用DOC命令</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>查看当前目录是有什么内容<br>    dir dir dir d:\abc2\test200<br><span class="hljs-number">2.</span>切换到其他盘下：盘符号<br>    cd : change directory <br>    案例演示：<br>    切换到 c 盘 cd /D c: <br><span class="hljs-number">3.</span>切换到当前盘的其他目录下 (使用相对路径和绝对路径演示), ..\表示上一级目录<br>    案例演示： cd d:\abc2\test200 cd ..\..\abc2\test200        <br><span class="hljs-number">4.</span>切换到上一级： <br>    案例演示： cd .. <br><span class="hljs-number">5.</span>切换到根目录：cd \ <br>    案例演示：cd \<br><span class="hljs-number">6.</span>查看指定的目录下所有的子级目录 tree<br><span class="hljs-number">7.</span>清屏 cls<br><span class="hljs-number">8.</span>退出 DOS exit<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>重要信息记录</title>
    <link href="/posts/e179e6d6.html"/>
    <url>/posts/e179e6d6.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="重要学习网站"><a href="#重要学习网站" class="headerlink" title="重要学习网站"></a>重要学习网站</h1><p><a href="https://pdai.tech/md/about/me/about-me.html">https://pdai.tech/md/about/me/about-me.html</a></p><p>需要学习的知识</p><p>Javascript</p><p>Java</p><p>Spring Boot</p><p>HTML</p><p>数据库</p><p>集合</p><p>并发</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面试题总结</title>
    <link href="/posts/5c3dbcbd.html"/>
    <url>/posts/5c3dbcbd.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><h3 id="String、StringBuffer与StringBuilder的区别？"><a href="#String、StringBuffer与StringBuilder的区别？" class="headerlink" title="String、StringBuffer与StringBuilder的区别？"></a>String、StringBuffer与StringBuilder的区别？</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>final修饰的，不可变，每次操作都会产生一个新的String对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span></span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;, <span class="hljs-title">CharSequence</span></span><br></code></pre></td></tr></tbody></table></figure><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p>线程安全的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBuffer</span></span><br><span class="hljs-class">   <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractStringBuilder</span></span><br><span class="hljs-class">   <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">CharSequence</span></span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> StringBuffer <span class="hljs-title">append</span><span class="hljs-params">(Object obj)</span> </span>{<br>    toStringCache = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">super</span>.append(String.valueOf(obj));<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> StringBuffer <span class="hljs-title">append</span><span class="hljs-params">(String str)</span> </span>{<br>    toStringCache = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">super</span>.append(str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> StringBuffer <span class="hljs-title">append</span><span class="hljs-params">(StringBuffer sb)</span> </span>{<br>    toStringCache = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">super</span>.append(sb);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p>线程不安全的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBuilder</span></span><br><span class="hljs-class">    <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractStringBuilder</span></span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">CharSequence</span></span><br></code></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>性能：StringBuilder &gt; StringBuffer &gt; String</p><ol><li>如果经常需要改变字符串的内容，需要使用除String之外的两个类。<ol><li>平时工作中，优先使用StringBuilder，如果是多线程环境，并且这个变量是共享变量时，使用StringBuffer。</li></ol></li></ol><h1 id="开发框架和中间件"><a href="#开发框架和中间件" class="headerlink" title="开发框架和中间件"></a>开发框架和中间件</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="什么是Spring框架？"><a href="#什么是Spring框架？" class="headerlink" title="什么是Spring框架？"></a>什么是Spring框架？</h3><h3 id="列举一些重要的Spring模块？"><a href="#列举一些重要的Spring模块？" class="headerlink" title="列举一些重要的Spring模块？"></a>列举一些重要的Spring模块？</h3><h3 id="什么是IOC-如何实现的？"><a href="#什么是IOC-如何实现的？" class="headerlink" title="什么是IOC? 如何实现的？"></a>什么是IOC? 如何实现的？</h3><h3 id="什么是AOP-有哪些AOP的概念？"><a href="#什么是AOP-有哪些AOP的概念？" class="headerlink" title="什么是AOP? 有哪些AOP的概念？"></a>什么是AOP? 有哪些AOP的概念？</h3><h3 id="AOP-有哪些应用场景？"><a href="#AOP-有哪些应用场景？" class="headerlink" title="AOP 有哪些应用场景？"></a>AOP 有哪些应用场景？</h3><h3 id="有哪些AOP-Advice通知的类型？"><a href="#有哪些AOP-Advice通知的类型？" class="headerlink" title="有哪些AOP Advice通知的类型？"></a>有哪些AOP Advice通知的类型？</h3><h3 id="AOP-有哪些实现方式？"><a href="#AOP-有哪些实现方式？" class="headerlink" title="AOP 有哪些实现方式？"></a>AOP 有哪些实现方式？</h3><h3 id="谈谈你对CGLib的理解？"><a href="#谈谈你对CGLib的理解？" class="headerlink" title="谈谈你对CGLib的理解？"></a>谈谈你对CGLib的理解？</h3><h3 id="Spring-AOP和AspectJ-AOP有什么区别？"><a href="#Spring-AOP和AspectJ-AOP有什么区别？" class="headerlink" title="Spring AOP和AspectJ AOP有什么区别？"></a>Spring AOP和AspectJ AOP有什么区别？</h3><h3 id="Spring中的bean的作用域有哪些？"><a href="#Spring中的bean的作用域有哪些？" class="headerlink" title="Spring中的bean的作用域有哪些？"></a>Spring中的bean的作用域有哪些？</h3><h3 id="Spring中的单例bean的线程安全问题了解吗？"><a href="#Spring中的单例bean的线程安全问题了解吗？" class="headerlink" title="Spring中的单例bean的线程安全问题了解吗？"></a>Spring中的单例bean的线程安全问题了解吗？</h3><h3 id="Spring中的bean生命周期？"><a href="#Spring中的bean生命周期？" class="headerlink" title="Spring中的bean生命周期？"></a>Spring中的bean生命周期？</h3><h3 id="说说自己对于Spring-MVC的了解？"><a href="#说说自己对于Spring-MVC的了解？" class="headerlink" title="说说自己对于Spring MVC的了解？"></a>说说自己对于Spring MVC的了解？</h3><h3 id="Spring-MVC的工作原理了解嘛？"><a href="#Spring-MVC的工作原理了解嘛？" class="headerlink" title="Spring MVC的工作原理了解嘛？"></a>Spring MVC的工作原理了解嘛？</h3><h3 id="Spring框架中用到了哪些设计模式？"><a href="#Spring框架中用到了哪些设计模式？" class="headerlink" title="Spring框架中用到了哪些设计模式？"></a>Spring框架中用到了哪些设计模式？</h3><h3 id="Component和-Bean的区别是什么？"><a href="#Component和-Bean的区别是什么？" class="headerlink" title="@Component和@Bean的区别是什么？"></a>@Component和@Bean的区别是什么？</h3><h3 id="将一个类声明为Spring的bean的注解有哪些？"><a href="#将一个类声明为Spring的bean的注解有哪些？" class="headerlink" title="将一个类声明为Spring的bean的注解有哪些？"></a>将一个类声明为Spring的bean的注解有哪些？</h3><h3 id="Spring事务管理的方式有几种？"><a href="#Spring事务管理的方式有几种？" class="headerlink" title="Spring事务管理的方式有几种？"></a>Spring事务管理的方式有几种？</h3><h3 id="Spring事务中的隔离级别有哪几种？"><a href="#Spring事务中的隔离级别有哪几种？" class="headerlink" title="Spring事务中的隔离级别有哪几种？"></a>Spring事务中的隔离级别有哪几种？</h3><h3 id="Spring事务中有哪几种事务传播行为？"><a href="#Spring事务中有哪几种事务传播行为？" class="headerlink" title="Spring事务中有哪几种事务传播行为？"></a>Spring事务中有哪几种事务传播行为？</h3><h3 id="Bean-Factory和ApplicationContext有什么区别？"><a href="#Bean-Factory和ApplicationContext有什么区别？" class="headerlink" title="Bean Factory和ApplicationContext有什么区别？"></a>Bean Factory和ApplicationContext有什么区别？</h3><h3 id="如何定义bean的范围？"><a href="#如何定义bean的范围？" class="headerlink" title="如何定义bean的范围？"></a>如何定义bean的范围？</h3><h3 id="可以通过多少种方式完成依赖注入？"><a href="#可以通过多少种方式完成依赖注入？" class="headerlink" title="可以通过多少种方式完成依赖注入？"></a>可以通过多少种方式完成依赖注入？</h3><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><h3 id="什么是SpringBoot？"><a href="#什么是SpringBoot？" class="headerlink" title="什么是SpringBoot？"></a>什么是SpringBoot？</h3><h3 id="为什么使用SpringBoot？"><a href="#为什么使用SpringBoot？" class="headerlink" title="为什么使用SpringBoot？"></a>为什么使用SpringBoot？</h3><h3 id="Spring、Spring-MVC和SpringBoot有什么区别？"><a href="#Spring、Spring-MVC和SpringBoot有什么区别？" class="headerlink" title="Spring、Spring MVC和SpringBoot有什么区别？"></a>Spring、Spring MVC和SpringBoot有什么区别？</h3><h3 id="SpringBoot自动配置的原理"><a href="#SpringBoot自动配置的原理" class="headerlink" title="SpringBoot自动配置的原理?"></a>SpringBoot自动配置的原理?</h3><h3 id="Spring-Boot的核心注解是哪些？他主由哪几个注解组成的？"><a href="#Spring-Boot的核心注解是哪些？他主由哪几个注解组成的？" class="headerlink" title="Spring Boot的核心注解是哪些？他主由哪几个注解组成的？"></a>Spring Boot的核心注解是哪些？他主由哪几个注解组成的？</h3><h3 id="SpringBoot的核心配置文件有哪几个？他们的区别是什么？"><a href="#SpringBoot的核心配置文件有哪几个？他们的区别是什么？" class="headerlink" title="SpringBoot的核心配置文件有哪几个？他们的区别是什么？"></a>SpringBoot的核心配置文件有哪几个？他们的区别是什么？</h3><h3 id="什么是Spring-Boot-Starter？有哪些常用的？"><a href="#什么是Spring-Boot-Starter？有哪些常用的？" class="headerlink" title="什么是Spring Boot Starter？有哪些常用的？"></a>什么是Spring Boot Starter？有哪些常用的？</h3><h3 id="spring-boot-starter-parent有什么作用？"><a href="#spring-boot-starter-parent有什么作用？" class="headerlink" title="spring-boot-starter-parent有什么作用？"></a>spring-boot-starter-parent有什么作用？</h3><h3 id="如何自定义Spring-Boot-Starter？"><a href="#如何自定义Spring-Boot-Starter？" class="headerlink" title="如何自定义Spring Boot Starter？"></a>如何自定义Spring Boot Starter？</h3><h3 id="为什么需要spring-boot-maven-plugin？"><a href="#为什么需要spring-boot-maven-plugin？" class="headerlink" title="为什么需要spring-boot-maven-plugin？"></a>为什么需要spring-boot-maven-plugin？</h3><h3 id="SpringBoot-打成jar和普通的jar有什么区别？"><a href="#SpringBoot-打成jar和普通的jar有什么区别？" class="headerlink" title="SpringBoot 打成jar和普通的jar有什么区别？"></a>SpringBoot 打成jar和普通的jar有什么区别？</h3><h3 id="如何使用Spring-Boot实现异常处理？"><a href="#如何使用Spring-Boot实现异常处理？" class="headerlink" title="如何使用Spring Boot实现异常处理？"></a>如何使用Spring Boot实现异常处理？</h3><h3 id="SpringBoot-实现热部署有哪几种方式？"><a href="#SpringBoot-实现热部署有哪几种方式？" class="headerlink" title="SpringBoot 实现热部署有哪几种方式？"></a>SpringBoot 实现热部署有哪几种方式？</h3><h3 id="Spring-Boot中的监视器是什么？"><a href="#Spring-Boot中的监视器是什么？" class="headerlink" title="Spring Boot中的监视器是什么？"></a>Spring Boot中的监视器是什么？</h3><h3 id="Spring-Boot-可以兼容老-Spring-项目吗？"><a href="#Spring-Boot-可以兼容老-Spring-项目吗？" class="headerlink" title="Spring Boot 可以兼容老 Spring 项目吗？"></a>Spring Boot 可以兼容老 Spring 项目吗？</h3><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2>]]></content>
    
    
    <categories>
      
      <category>八股文</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>马士兵</title>
    <link href="/posts/fc27ae96.html"/>
    <url>/posts/fc27ae96.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="Java是什么类型的语言？"><a href="#Java是什么类型的语言？" class="headerlink" title="Java是什么类型的语言？"></a>Java是什么类型的语言？</h2><h2 id="简单说说Java中对象如何拷贝？"><a href="#简单说说Java中对象如何拷贝？" class="headerlink" title="简单说说Java中对象如何拷贝？"></a>简单说说Java中对象如何拷贝？</h2><h2 id="伪代码快速实现深拷贝？"><a href="#伪代码快速实现深拷贝？" class="headerlink" title="伪代码快速实现深拷贝？"></a>伪代码快速实现深拷贝？</h2><h2 id="什么是Object？有哪些常用的方法？怎么创建对象？"><a href="#什么是Object？有哪些常用的方法？怎么创建对象？" class="headerlink" title="什么是Object？有哪些常用的方法？怎么创建对象？"></a>什么是Object？有哪些常用的方法？怎么创建对象？</h2><h3 id="notify方法"><a href="#notify方法" class="headerlink" title="notify方法"></a>notify方法</h3><h3 id="为什么唤醒线程的方法是在object里面？不是应该在线程Thread里面吗？"><a href="#为什么唤醒线程的方法是在object里面？不是应该在线程Thread里面吗？" class="headerlink" title="为什么唤醒线程的方法是在object里面？不是应该在线程Thread里面吗？"></a>为什么唤醒线程的方法是在object里面？不是应该在线程Thread里面吗？</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304050808543.png" alt="image-20230405080755353"></p><h2 id="多态，面向接口编程-聊聊你的认知"><a href="#多态，面向接口编程-聊聊你的认知" class="headerlink" title="多态，面向接口编程?聊聊你的认知"></a>多态，面向接口编程?聊聊你的认知</h2><ul><li>制定标准</li><li>提高可扩展性</li></ul><p>让你设计一个接口，你会考虑到什么点？</p><p>最小隔离</p><p>接口和抽象类的区别？</p><h2 id="什么是内部类，说说你的理解以及实战场景"><a href="#什么是内部类，说说你的理解以及实战场景" class="headerlink" title="什么是内部类，说说你的理解以及实战场景"></a>什么是内部类，说说你的理解以及实战场景</h2><p>HashMap里面有大量的内部类，匿名内部类，局部内部类等等，下来自己看一下</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304050827088.png" alt="image-20230405082700035"></p><h2 id="说说static和final在Java中的意义"><a href="#说说static和final在Java中的意义" class="headerlink" title="说说static和final在Java中的意义"></a>说说static和final在Java中的意义</h2><p>static不能修饰局部变量，static字段和static代码块谁先加载</p><p>如果子类里面有static，那么先加载子类还是先加载父类</p><h2 id="Java中的基本数据类型占多少个字节，不同的操作系统一样吗？"><a href="#Java中的基本数据类型占多少个字节，不同的操作系统一样吗？" class="headerlink" title="Java中的基本数据类型占多少个字节，不同的操作系统一样吗？"></a>Java中的基本数据类型占多少个字节，不同的操作系统一样吗？</h2><p>这个是JVM来决定的。不同操作系统占的字节一样，只不过占的空间不一样</p><h2 id="int和Integer有什么关联？为什么需要Integer？装箱拆箱"><a href="#int和Integer有什么关联？为什么需要Integer？装箱拆箱" class="headerlink" title="int和Integer有什么关联？为什么需要Integer？装箱拆箱"></a>int和Integer有什么关联？为什么需要Integer？装箱拆箱</h2><h2 id="为什么需要8种包装类型？"><a href="#为什么需要8种包装类型？" class="headerlink" title="为什么需要8种包装类型？"></a>为什么需要8种包装类型？</h2><p>因为java是面向对象的语言</p><h2 id="String-StringBuffer-StringBuilder的区别，以及String的常用方法？"><a href="#String-StringBuffer-StringBuilder的区别，以及String的常用方法？" class="headerlink" title="String, StringBuffer,StringBuilder的区别，以及String的常用方法？"></a>String, StringBuffer,StringBuilder的区别，以及String的常用方法？</h2><h2 id="什么是序列化，反序列化，说说运用场景？"><a href="#什么是序列化，反序列化，说说运用场景？" class="headerlink" title="什么是序列化，反序列化，说说运用场景？"></a>什么是序列化，反序列化，说说运用场景？</h2><p>反序列化的不安全问题如何解决？</p><p>应用场景：</p><p>dubbo</p><p>RTC手写自己的rpc框架里面</p><h2 id="数组有length-方法吗？"><a href="#数组有length-方法吗？" class="headerlink" title="数组有length()方法吗？"></a>数组有length()方法吗？</h2><h2 id="构造器是否可以被重写？构造器"><a href="#构造器是否可以被重写？构造器" class="headerlink" title="构造器是否可以被重写？构造器"></a>构造器是否可以被重写？构造器</h2><p>不可以</p><h2 id="char是否可以存储一个汉字"><a href="#char是否可以存储一个汉字" class="headerlink" title="char是否可以存储一个汉字"></a>char是否可以存储一个汉字</h2><p>可以</p><p>字符集和字符编码，解决乱码必学</p><h2 id="集合原理系列"><a href="#集合原理系列" class="headerlink" title="集合原理系列"></a>集合原理系列</h2><p>ArrayList</p><p>LinkedList： queue Deque</p><p>为什么现在舍弃Vector？</p><p>HashSet TreeSet</p><p>HashMap TreeMap LinkedMap（有序）</p><p>queue 阻塞队列</p><p>add remove element offer poll peek take</p><h2 id="Enumeration接口和Iterator接口的区别有哪些？"><a href="#Enumeration接口和Iterator接口的区别有哪些？" class="headerlink" title="Enumeration接口和Iterator接口的区别有哪些？"></a>Enumeration接口和Iterator接口的区别有哪些？</h2><p>Enumeration速度是迭代器的两倍，但是遍历的时候不能改里面的东西</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常是用来干嘛的？也是一种代码分支的实现方式</p><h2 id="什么是事务？为什么需要事务？如何实现事务？事务隔离级别？"><a href="#什么是事务？为什么需要事务？如何实现事务？事务隔离级别？" class="headerlink" title="什么是事务？为什么需要事务？如何实现事务？事务隔离级别？"></a>什么是事务？为什么需要事务？如何实现事务？事务隔离级别？</h2><p>java事务类型有几种？</p><p>jdbc事务 jta事务 容器事务</p><h2 id="java修饰符以及各自的作用范围"><a href="#java修饰符以及各自的作用范围" class="headerlink" title="java修饰符以及各自的作用范围"></a>java修饰符以及各自的作用范围</h2><p>public protect 缺省 private</p><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>什么是linux？如何安装使用linux</p><p>说说你常用的linux查看文件和文件夹的命令</p><p>如何递归删除文件夹和所有文件</p><p>如何拷贝，移动一个文件</p><p>如何查找一个文件</p><p>你还使用过哪些常用的linux命令</p><p>grep是什么命令？man是什么命令？</p><p>chmod是什么命令？如何使用？r,w,x/u,g,o/+,-/1,2,4各自代表什么含义？？</p><p>VI，VIM是什么？说说你常用的VI命令和按键</p><p>netstat命令的作用？如何使用？</p><p>kill命令如何使用？</p><p>ps和grep各自作用是什么？如何使用？</p><p>如何部署自己的项目到linux服务器？</p><p>什么是编辑视图，预览视图？</p><h1 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h1><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202304051013681.png" alt="image-20230405101324628"></p>]]></content>
    
    
    <categories>
      
      <category>八股文</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java网络编程</title>
    <link href="/posts/81e7b834.html"/>
    <url>/posts/81e7b834.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>计算机网络：计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</li><li>网络编程的目的：传播交流信息，数据交换</li><li>想要实现网络编程需要什么？：IP和端口号</li></ul><h3 id="网络编程-1"><a href="#网络编程-1" class="headerlink" title="网络编程"></a>网络编程</h3><p>C/S 最新类的机器人</p><h3 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h3><p>B/S</p><h2 id="网络通信的要素"><a href="#网络通信的要素" class="headerlink" title="网络通信的要素"></a>网络通信的要素</h2><ul><li>如何实现网络通信？<ul><li>地址<ul><li>IP</li><li>端口号</li></ul></li><li>规则：网络通信的协议</li></ul></li></ul><p>小结：</p><ol><li>网络编程中的两个主要问题<ul><li>如何准确定位到网络上的一台或者多台主机</li><li>找到主机之后如何进行通信</li></ul></li><li>网络编程中的要素：<ul><li>IP和端口号</li><li>网络通信协议UDP/TCP</li></ul></li><li>万物皆对象</li></ol><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><ul><li>唯一定位一台网络上的计算机</li><li>127.0.0.1： 本机localhost</li><li>ip地址的分类<ul><li>IPV4/IPV6<ul><li>IPV4：127.0.0.1，4个字节组成，每一个字节0~255，全球总共42亿个，30亿在北美，亚洲只有4亿。2011年用尽了。</li><li>IPV6：128位，8个无符号整数</li></ul></li><li>公网（互联网）/ 私网（局域网）<ul><li>ABCD类地址</li></ul></li></ul></li><li>域名</li></ul><h3 id="练习：测试InetAddress的常用方法"><a href="#练习：测试InetAddress的常用方法" class="headerlink" title="练习：测试InetAddress的常用方法"></a>练习：测试InetAddress的常用方法</h3><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口表示计算机上的一个程序的进程</p><ul><li><p>不同的进程有不同的端口号，用来区分软件</p></li><li><p>0~65535</p><ul><li>TCP/UDP: 65535*2。tcp:80 udp:80  单个协议下，端口号不能冲突</li></ul></li><li><p>分类</p><ul><li>公有端口： 0~1023<ul><li>HTTP: 80</li><li>HTTPS: 443</li><li>FTP: 21</li><li>Telent: 23</li></ul></li><li>程序注册端口：1024~49151，分配用户或者程序<ul><li>Tomcat: 8080</li><li>MySQL: 3306</li><li>Oracle: 1521</li></ul></li><li>动态/私有：49152~65535</li></ul></li><li><p>小技巧</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看所有的端口</span><br>netstat -ano<br><br><span class="hljs-comment">#查看指定端口</span><br>netstat -ano|findStr <span class="hljs-string">"7890"</span><br><br><span class="hljs-comment">#查看指定端口的进程</span><br>tasklist|findStr <span class="hljs-string">"3972"</span><br><br><span class="hljs-comment">#打开任务管理器的快捷键 Ctrl + Shift + Esc</span><br></code></pre></td></tr></tbody></table></figure></li></ul><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211191729112.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211191730674.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211191730885.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211191730548.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211191730878.png"></p><ul><li><p>端口映射</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211191736292.png"></p></li></ul><h3 id="练习：学习InetSocketAddress常用方法"><a href="#练习：学习InetSocketAddress常用方法" class="headerlink" title="练习：学习InetSocketAddress常用方法"></a>练习：学习InetSocketAddress常用方法</h3><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p>协议就是一种约定</p><h3 id="TCP-IP协议簇"><a href="#TCP-IP协议簇" class="headerlink" title="TCP/IP协议簇"></a>TCP/IP协议簇</h3><p>重要：</p><p>TCP：用户传输协议</p><p>UDP：用户数据报协议</p><p>有名的协议：</p><p>TCP：</p><p>IP：网络互连协议</p><h3 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211191741115.png"></p><h3 id="TCP-UDP对比"><a href="#TCP-UDP对比" class="headerlink" title="TCP/UDP对比"></a>TCP/UDP对比</h3><ul><li><p>TCP：打电话</p><ul><li><p>连接，稳定</p></li><li><p>三次握手，四次挥手</p><figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">最少需要三次，保证稳定连接<br><span class="hljs-symbol">A:</span>你瞅啥？<br><span class="hljs-symbol">B:</span>瞅你咋地？<br><span class="hljs-symbol">A:</span>干一场<br><br><span class="hljs-symbol">A:</span>我要走了<br><span class="hljs-symbol">B:</span>你真的要走了吗？<br><span class="hljs-symbol">B:</span>你真的真的要走了吗？<br><span class="hljs-symbol">A:</span>我真的要走了<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211191750706.png"></p></li></ul></li></ul><p>  <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211191751731.png"></p><ul><li><p>客户端，服务端</p></li><li><p>传输完成，释放连接，效率低</p></li><li><p>UDP：发短信</p><ul><li>不连接，不稳定</li><li>客户端，服务端：没有明确的界限</li><li>不管有没有准备好，都可以发给你</li><li>导弹</li><li>DDOS：洪水攻击（饱和攻击）</li></ul></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>注解和反射</title>
    <link href="/posts/a974f5b0.html"/>
    <url>/posts/a974f5b0.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="注解入门"><a href="#注解入门" class="headerlink" title="注解入门"></a>注解入门</h1><h2 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h2><ul><li>Annotation是从JDK5.0开始引入的新技术。</li><li>Annotation的作用<ul><li>不是程序本身，可以对程序作出解释（这一点和注释没有什么区别）</li><li>可以被其他程序（比如：编译器）读取</li></ul></li></ul><h2 id="Annotation的格式"><a href="#Annotation的格式" class="headerlink" title="Annotation的格式"></a>Annotation的格式</h2><ul><li>“@注释名”，还可以有一些参数。例如@SuppressWarnings(value = “all”)</li></ul><h2 id="Annotation可以在哪些地方使用？"><a href="#Annotation可以在哪些地方使用？" class="headerlink" title="Annotation可以在哪些地方使用？"></a>Annotation可以在哪些地方使用？</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})</span><br></code></pre></td></tr></tbody></table></figure><h1 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h1><h2 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h2><p>这个只适用于修饰方法，表示一个方法打算重写超类中的另一个方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override {<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h2><p>这个可以用于修饰构造函数，方法，属性，包等，表示不推荐使用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Deprecated {<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SuppressWarnings {<br>    String[] value();<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><ul><li><p>元注解的作用就是负责注解其他注解，Java定义了4个标准的meta-annotation。可以在java.lang.annotation包中找到它们。</p></li><li><p>@Target</p><p>用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Target {<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns an array of the kinds of elements an annotation type</span><br><span class="hljs-comment">     * can be applied to.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an array of the kinds of elements an annotation type</span><br><span class="hljs-comment">     * can be applied to</span><br><span class="hljs-comment">     */</span><br>    ElementType[] value();<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>@Retention</p><p>表示需要在什么级别保存该注释信息，用于描述注解的生命周期</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Retention {<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the retention policy.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the retention policy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">RetentionPolicy <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>@Documented</p><p>说明该注解将被包含在Javadoc中，Source &lt; Class &lt; Runtime</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Documented {<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>@Inherited</p><p>说明子类可以继承父类中的该注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Inherited {<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p><strong>使用@interface自定义注解的时候，会自动继承java.lang.Annotation接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.annotation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>{<br>    <span class="hljs-meta">@myAnnotation(value = {"你好","明天"})</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br><br>    }<br>}<br><br><span class="hljs-comment">//格式：public @interface 注解名 {自定义内容}</span><br><span class="hljs-meta">@interface</span> myAnnotation{<br>    <span class="hljs-comment">//每一个方法实际上是声明了一个配置参数。</span><br>    <span class="hljs-comment">//方法的名称就是参数的名称。</span><br>    <span class="hljs-comment">//返回值类型就是参数的类型（返回值只能是基本类型，Class，String， Enum）</span><br>    <span class="hljs-comment">//如果只有一个参数成员，一般会将参数名命名为value</span><br>    String[] value();<br><br>    <span class="hljs-comment">//可以通过default来声明参数的默认值</span><br>    <span class="hljs-comment">//常使用空字符串，0作为默认值</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 0</span>;<br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> ""</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="Java反射机制概述"><a href="#Java反射机制概述" class="headerlink" title="Java反射机制概述"></a>Java反射机制概述</h1><h2 id="动态语言-vs-静态语言"><a href="#动态语言-vs-静态语言" class="headerlink" title="动态语言 vs 静态语言"></a>动态语言 vs 静态语言</h2><p><strong>动态语言</strong></p><ul><li>是一类在运行时可以改变其结构的语言：例如新的函数，对象，甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说：就是在运行时代码可以根据某些条件改变自身结构。</li><li>主要的动态语言：Object-C, C#, JavaScript, PHP, Python</li></ul><p><strong>静态语言</strong></p><ul><li>运行时结构不可以改变的语言。Java， C，C++</li><li>Java不是动态语言，但是Java可以称为“准动态语言”。即Java具有一定的动态性，可以利用反射机制获得类似动态语言的特性。</li></ul><h2 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class c = Class.forName(<span class="hljs-string">"java.lang.String"</span>)<br></code></pre></td></tr></tbody></table></figure><p>加载完类之后，在堆内存的方法区就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212081108606.png" alt="1"></p><h2 id="Java反射机制提供的功能"><a href="#Java反射机制提供的功能" class="headerlink" title="Java反射机制提供的功能"></a>Java反射机制提供的功能</h2><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>处理注解</li><li>生成动态代理</li></ol><h2 id="Java反射的优点和缺点"><a href="#Java反射的优点和缺点" class="headerlink" title="Java反射的优点和缺点"></a>Java反射的优点和缺点</h2><p><strong>优点</strong></p><p>可以动态创建对象和编译，体现出很大的灵活性</p><p><strong>缺点</strong></p><p>对性能有影响。使用反射基本上是一个解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作。</p><h1 id="理解Class类并获取Class实例"><a href="#理解Class类并获取Class实例" class="headerlink" title="理解Class类并获取Class实例"></a>理解Class类并获取Class实例</h1><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>在Object类中定义了以下方法，此方法将被所有子类继承。此方法的返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射：从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; getClass();<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212081122923.png"></p><p>Class类是Reflection的根源，针对任何你想动态加载，运行的类，唯有先获取相应的Class对象。</p><h2 id="获取Class类的实例"><a href="#获取Class类的实例" class="headerlink" title="获取Class类的实例"></a>获取Class类的实例</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.annotation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>{<br>        Person person = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">"嘻嘻"</span>,<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//获取Class类的几种方式</span><br>        <span class="hljs-comment">//1.通过对象获取</span><br>        Class c1 = person.getClass();<br>        System.out.println(c1.hashCode());<br><br>        <span class="hljs-comment">//2.通过forName获取</span><br>        Class&lt;?&gt; c2 = Class.forName(<span class="hljs-string">"com.cutiebambi.annotation.Student"</span>);<br>        System.out.println(c2.hashCode());<br><br>        <span class="hljs-comment">//3.通过类名.class获取</span><br>        Class&lt;Student&gt; c3 = Student.class;<br>        System.out.println(c3.hashCode());<br><br>        <span class="hljs-comment">//4.基本内置类型的包装类都有一个TYPE属性，可以用来获取对应的Class类</span><br>        Class&lt;Integer&gt; c4 = Integer.TYPE;<br><br>        <span class="hljs-comment">//5.获取父类类型 c1.getSuperClass</span><br>        Class c5 = c1.getSuperclass();<br>        System.out.println(c5.hashCode());<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">super</span>(name, age);<br>        System.out.println(<span class="hljs-string">"学生"</span>);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">super</span>(name, age);<br>        System.out.println(<span class="hljs-string">"老师"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="哪些类型可以有Class对象"><a href="#哪些类型可以有Class对象" class="headerlink" title="哪些类型可以有Class对象"></a>哪些类型可以有Class对象</h2><table><thead><tr><th>Key</th><th>Info</th></tr></thead><tbody><tr><td>class</td><td>外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>[]</td><td>数组</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>annotation</td><td>注解@interface</td></tr><tr><td>primitive type</td><td>基本数据类型</td></tr><tr><td>void</td><td></td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.annotation;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//所有类型的class</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test03</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Class c1 = Object.class;<br>        Class c2 = Class.class;<br>        Class c3 = ArrayIndexOutOfBoundsException.class;<br>        Class c4 = Map.class;<br>        Class c5 = <span class="hljs-keyword">int</span>[].class;<br>        Class c6 = <span class="hljs-keyword">int</span>[][].class;<br>        Class c7 = Enum.class;<br>        Class c8 = Override.class;<br>        Class c9 = <span class="hljs-keyword">double</span>.class;<br>        Class c10 = <span class="hljs-keyword">void</span>.class;<br><br>        System.out.println(<span class="hljs-string">"c1===&gt;"</span> + c1);<br>        System.out.println(<span class="hljs-string">"c2===&gt;"</span> + c2);<br>        System.out.println(<span class="hljs-string">"c3===&gt;"</span> + c3);<br>        System.out.println(<span class="hljs-string">"c4===&gt;"</span> + c4);<br>        System.out.println(<span class="hljs-string">"c5===&gt;"</span> + c5);<br>        System.out.println(<span class="hljs-string">"c6===&gt;"</span> + c6);<br>        System.out.println(<span class="hljs-string">"c7===&gt;"</span> + c7);<br>        System.out.println(<span class="hljs-string">"c8===&gt;"</span> + c8);<br>        System.out.println(<span class="hljs-string">"c9===&gt;"</span> + c9);<br>        System.out.println(<span class="hljs-string">"c10==&gt;"</span> + c10);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">c1===&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Object</span></span><br><span class="hljs-class"><span class="hljs-title">c2</span></span>===&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Class</span></span><br><span class="hljs-class"><span class="hljs-title">c3</span></span>===&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">ArrayIndexOutOfBoundsException</span></span><br><span class="hljs-class"><span class="hljs-title">c4</span></span>===&gt;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">java</span>.<span class="hljs-title">util</span>.<span class="hljs-title">Map</span></span><br>c5===&gt;class [I<br>c6===&gt;class [[I<br>c7===&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Enum</span></span><br><span class="hljs-class"><span class="hljs-title">c8</span></span>===&gt;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Override</span></span><br><span class="hljs-class"><span class="hljs-title">c9</span></span>===&gt;<span class="hljs-keyword">double</span><br>c10==&gt;<span class="hljs-keyword">void</span><br></code></pre></td></tr></tbody></table></figure><h2 id="测试类什么时候会初始化"><a href="#测试类什么时候会初始化" class="headerlink" title="测试类什么时候会初始化"></a>测试类什么时候会初始化</h2><h3 id="主动引用（一定会发生类的初始化）"><a href="#主动引用（一定会发生类的初始化）" class="headerlink" title="主动引用（一定会发生类的初始化）"></a>主动引用（一定会发生类的初始化）</h3><ul><li>new一个类的对象</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>调用类的静态成员（除了final方法）和静态方法</li><li>当虚拟机启动，先初始化main方法所在的类</li><li>当初始化一个类，如果其父类没有初始化，则先会初始化它的父类</li></ul><h3 id="被动引用（不会发生类的初始化）"><a href="#被动引用（不会发生类的初始化）" class="headerlink" title="被动引用（不会发生类的初始化）"></a>被动引用（不会发生类的初始化）</h3><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.annotation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test04</span> </span>{<br>    <span class="hljs-keyword">static</span>{<br>        <span class="hljs-comment">//当虚拟机启动，先初始化main方法所在的类</span><br>        System.out.println(<span class="hljs-string">"Main方法所在的类初始化"</span>);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>{<br>        <span class="hljs-comment">//主动引用1：new一个类的对象</span><br>        <span class="hljs-comment">//Cat cat = new Cat();</span><br><br>        <span class="hljs-comment">//主动引用2：使用java.lang.reflect包的方法对类进行反射调用</span><br>        <span class="hljs-comment">//Class.forName("com.cutiebambi.annotation.Cat");</span><br><br>        <span class="hljs-comment">//主动引用3：调用类的静态成员（除了final方法）和静态方法</span><br>        <span class="hljs-comment">//String boun = Cat.BOUN;</span><br><br>        <span class="hljs-comment">//被动引用1：当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化</span><br>        <span class="hljs-comment">//String prem = Cat.PREM;</span><br><br>        <span class="hljs-comment">//被动引用2：通过数组定义类引用，不会触发此类的初始化</span><br>        <span class="hljs-comment">//Cat[] cats = new Cat[10];</span><br><br>        <span class="hljs-comment">//被动引用3：引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</span><br>        String finalstr = Cat.FINALSTR;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String PREM = <span class="hljs-string">"prem"</span>;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-keyword">static</span>{<br>        <span class="hljs-comment">//当初始化一个类，如果其父类没有初始化，则先会初始化它的父类</span><br>        System.out.println(<span class="hljs-string">"Animal类初始化"</span>);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String BOUN = <span class="hljs-string">"boun"</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String FINALSTR = <span class="hljs-string">"eazin"</span>;<br><br>    <span class="hljs-keyword">static</span>{<br>        System.out.println(<span class="hljs-string">"Cat类初始化"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//主动引用1：new一个类的对象</span><br><span class="hljs-comment">//主动引用2：使用java.lang.reflect包的方法对类进行反射调用</span><br><span class="hljs-comment">//主动引用3：调用类的静态成员（除了final方法）和静态方法</span><br>Main方法所在的类初始化<br>Animal类初始化<br>Cat类初始化<br><br><span class="hljs-comment">//被动引用1：当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化</span><br>Main方法所在的类初始化<br>Animal类初始化<br><br><span class="hljs-comment">//被动引用2：通过数组定义类引用，不会触发此类的初始化</span><br><span class="hljs-comment">//被动引用3：引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</span><br>Main方法所在的类初始化<br></code></pre></td></tr></tbody></table></figure><h1 id="类的加载与ClassLoader"><a href="#类的加载与ClassLoader" class="headerlink" title="类的加载与ClassLoader"></a>类的加载与ClassLoader</h1><h2 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h2><p>类加载的作用：将class文件字节码内容加载到内存，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212171743319.png"></p><p>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</p><p>类加载器分为哪几种类型？</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212171745600.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.annotation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test05</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>{<br>        <span class="hljs-comment">//获取系统类的加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<span class="hljs-comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><br>        <span class="hljs-comment">//获取系统类的父类加载器-扩展类加载器</span><br>        ClassLoader parent = systemClassLoader.getParent();<br>        System.out.println(parent);<span class="hljs-comment">//sun.misc.Launcher$ExtClassLoader@85ede7b</span><br><br>        <span class="hljs-comment">//获取扩展类加载器的父类加载器-根加载器</span><br>        ClassLoader parent1 = parent.getParent();<br>        System.out.println(parent1);<span class="hljs-comment">//null</span><br><br>        <span class="hljs-comment">//测试当前类是由哪个类加载器加载的</span><br>        Class aClass = Class.forName(<span class="hljs-string">"com.cutiebambi.annotation.Test05"</span>);<br>        ClassLoader classLoader = aClass.getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class="hljs-comment">//测试JDK内部类是由哪个类加载器加载的</span><br>        Class&lt;?&gt; aClass1 = Class.forName(<span class="hljs-string">"java.lang.Object"</span>);<br>        ClassLoader classLoader1 = aClass1.getClassLoader();<br>        System.out.println(classLoader1);<br><br>        <span class="hljs-comment">//如何获取系统类加载器可以加载的路径信息</span><br>        String property = System.getProperty(<span class="hljs-string">"java.class.path"</span>);<br>        System.out.println(property);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java">sun.misc.Launcher$AppClassLoader@18b4aac2<br>sun.misc.Launcher$ExtClassLoader@85ede7b<br><span class="hljs-keyword">null</span><br>sun.misc.Launcher$AppClassLoader@18b4aac2<br><span class="hljs-keyword">null</span><br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\charsets.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\deploy.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\access-bridge-<span class="hljs-number">64.</span>jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\cldrdata.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\dnsns.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\jaccess.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\jfxrt.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\localedata.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\nashorn.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\sunec.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\sunjce_provider.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\sunmscapi.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\sunpkcs11.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\ext\zipfs.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\javaws.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\jce.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\jfr.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\jfxswt.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\jsse.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\management-agent.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\plugin.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\resources.jar;<br>D:\Tools\Java\jdk\jdk1<span class="hljs-number">.8</span>\jre\lib\rt.jar;<br>D:\xudan\summergoon\202209_springboot\springboot-<span class="hljs-number">03</span>-web\target\classes;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\boot\spring-boot-starter-web\<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>\spring-boot-starter-web-<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\boot\spring-boot-starter\<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>\spring-boot-starter-<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\boot\spring-boot\<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>\spring-boot-<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>\spring-boot-autoconfigure-<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\boot\spring-boot-starter-logging\<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>\spring-boot-starter-logging-<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\ch\qos\logback\logback-classic\<span class="hljs-number">1.2</span><span class="hljs-number">.11</span>\logback-classic-<span class="hljs-number">1.2</span><span class="hljs-number">.11</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\ch\qos\logback\logback-core\<span class="hljs-number">1.2</span><span class="hljs-number">.11</span>\logback-core-<span class="hljs-number">1.2</span><span class="hljs-number">.11</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\<span class="hljs-number">2.17</span><span class="hljs-number">.2</span>\log4j-to-slf4j-<span class="hljs-number">2.17</span><span class="hljs-number">.2</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\apache\logging\log4j\log4j-api\<span class="hljs-number">2.17</span><span class="hljs-number">.2</span>\log4j-api-<span class="hljs-number">2.17</span><span class="hljs-number">.2</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\slf4j\jul-to-slf4j\<span class="hljs-number">1.7</span><span class="hljs-number">.36</span>\jul-to-slf4j-<span class="hljs-number">1.7</span><span class="hljs-number">.36</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\jakarta\annotation\jakarta.annotation-api\<span class="hljs-number">1.3</span><span class="hljs-number">.5</span>\jakarta.annotation-api-<span class="hljs-number">1.3</span><span class="hljs-number">.5</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\yaml\snakeyaml\<span class="hljs-number">1.30</span>\snakeyaml-<span class="hljs-number">1.30</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\boot\spring-boot-starter-json\<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>\spring-boot-starter-json-<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\com\fasterxml\jackson\core\jackson-databind\<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>\jackson-databind-<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>\jackson-annotations-<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\com\fasterxml\jackson\core\jackson-core\<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>\jackson-core-<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>\jackson-datatype-jdk8-<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>\jackson-datatype-jsr310-<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\com\fasterxml\jackson\<span class="hljs-keyword">module</span>\jackson-<span class="hljs-keyword">module</span>-parameter-names\<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>\jackson-<span class="hljs-keyword">module</span>-parameter-names-<span class="hljs-number">2.13</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>\spring-boot-starter-tomcat-<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\<span class="hljs-number">9.0</span><span class="hljs-number">.65</span>\tomcat-embed-core-<span class="hljs-number">9.0</span><span class="hljs-number">.65</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\<span class="hljs-number">9.0</span><span class="hljs-number">.65</span>\tomcat-embed-el-<span class="hljs-number">9.0</span><span class="hljs-number">.65</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\<span class="hljs-number">9.0</span><span class="hljs-number">.65</span>\tomcat-embed-websocket-<span class="hljs-number">9.0</span><span class="hljs-number">.65</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\spring-web\<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>\spring-web-<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\spring-beans\<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>\spring-beans-<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\spring-webmvc\<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>\spring-webmvc-<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\spring-aop\<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>\spring-aop-<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\spring-context\<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>\spring-context-<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\spring-expression\<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>\spring-expression-<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\boot\spring-boot-starter-thymeleaf\<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>\spring-boot-starter-thymeleaf-<span class="hljs-number">2.7</span><span class="hljs-number">.4</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\thymeleaf\thymeleaf-spring5\<span class="hljs-number">3.0</span><span class="hljs-number">.15</span>.RELEASE\thymeleaf-spring5-<span class="hljs-number">3.0</span><span class="hljs-number">.15</span>.RELEASE.jar;<br>C:\Users\cutiebambi\.m2\repository\org\thymeleaf\thymeleaf\<span class="hljs-number">3.0</span><span class="hljs-number">.15</span>.RELEASE\thymeleaf-<span class="hljs-number">3.0</span><span class="hljs-number">.15</span>.RELEASE.jar;<br>C:\Users\cutiebambi\.m2\repository\org\attoparser\attoparser\<span class="hljs-number">2.0</span><span class="hljs-number">.5</span>.RELEASE\attoparser-<span class="hljs-number">2.0</span><span class="hljs-number">.5</span>.RELEASE.jar;<br>C:\Users\cutiebambi\.m2\repository\org\unbescape\unbescape\<span class="hljs-number">1.1</span><span class="hljs-number">.6</span>.RELEASE\unbescape-<span class="hljs-number">1.1</span><span class="hljs-number">.6</span>.RELEASE.jar;<br>C:\Users\cutiebambi\.m2\repository\org\slf4j\slf4j-api\<span class="hljs-number">1.7</span><span class="hljs-number">.36</span>\slf4j-api-<span class="hljs-number">1.7</span><span class="hljs-number">.36</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\thymeleaf\extras\thymeleaf-extras-java8time\<span class="hljs-number">3.0</span><span class="hljs-number">.4</span>.RELEASE\thymeleaf-extras-java8time-<span class="hljs-number">3.0</span><span class="hljs-number">.4</span>.RELEASE.jar;<br>C:\Users\cutiebambi\.m2\repository\org\projectlombok\lombok\<span class="hljs-number">1.18</span><span class="hljs-number">.24</span>\lombok-<span class="hljs-number">1.18</span><span class="hljs-number">.24</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\spring-core\<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>\spring-core-<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>.jar;<br>C:\Users\cutiebambi\.m2\repository\org\springframework\spring-jcl\<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>\spring-jcl-<span class="hljs-number">5.3</span><span class="hljs-number">.23</span>.jar;<br>D:\Tools\IntelliJ IDEA <span class="hljs-number">2022.1</span>\lib\idea_rt.jar<br></code></pre></td></tr></tbody></table></figure><h1 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h1><h1 id="获取运行时类的完整结构"><a href="#获取运行时类的完整结构" class="headerlink" title="获取运行时类的完整结构"></a>获取运行时类的完整结构</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.annotation;<br><br><span class="hljs-keyword">import</span> com.cutiebambi.pojo.Department;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test06</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>{<br>        <span class="hljs-comment">//获取类的信息</span><br><br>        <span class="hljs-comment">//获取类的名字</span><br>        Class c1 = Class.forName(<span class="hljs-string">"com.cutiebambi.pojo.Employee"</span>);<br>        System.out.println(c1.getName());<span class="hljs-comment">//包名+类名</span><br>        System.out.println(c1.getSimpleName());<span class="hljs-comment">//类名</span><br><br>        <span class="hljs-comment">//获取类的属性</span><br>        Field[] fields = c1.getFields();<span class="hljs-comment">//获取类的公共属性</span><br>        <span class="hljs-keyword">for</span> (Field field: fields) {<br>            System.out.println(<span class="hljs-string">"c1.getFields()====&gt;"</span> + field);<br>        }<br><br>        fields = c1.getDeclaredFields();<span class="hljs-comment">//获取类的所有属性</span><br>        <span class="hljs-keyword">for</span> (Field field: fields) {<br>            System.out.println(<span class="hljs-string">"c1.getDeclaredFields()====&gt;"</span> + field);<br>        }<br><br>        <span class="hljs-comment">//获取指定名字的属性的值</span><br>        <span class="hljs-comment">//System.out.println(c1.getField("lastName"));//获取public属性</span><br>        System.out.println(c1.getDeclaredField(<span class="hljs-string">"lastName"</span>));<span class="hljs-comment">//获取指定的公共属性</span><br><br>        <span class="hljs-comment">//获取类的方法</span><br>        Method[] methods = c1.getMethods();<span class="hljs-comment">//获取本类和父类的public方法</span><br>        <span class="hljs-keyword">for</span> (Method method: methods) {<br>            System.out.println(<span class="hljs-string">"c1.getMethods()====&gt;"</span> + method);<br>        }<br><br>        methods = c1.getDeclaredMethods();<span class="hljs-comment">//获取本类的所有方法</span><br>        <span class="hljs-keyword">for</span> (Method method: methods) {<br>            System.out.println(<span class="hljs-string">"c1.getDeclaredMethods()====&gt;"</span> + method);<br>        }<br><br>        <span class="hljs-comment">//获取指定方法</span><br>        System.out.println(c1.getMethod(<span class="hljs-string">"getLastName"</span>));<br><br>        <span class="hljs-comment">//获取构造器</span><br>        Constructor[] constructors = c1.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor: constructors) {<br>            System.out.println(<span class="hljs-string">"c1.getConstructors()====&gt;"</span> + constructor);<br>        }<br><br>        constructors = c1.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor: constructors) {<br>            System.out.println(<span class="hljs-string">"c1.getDeclaredConstructors()====&gt;"</span> + constructor);<br>        }<br><br>        <span class="hljs-comment">//获取指定构造器</span><br>        System.out.println(c1.getConstructor(Integer.class,String.class, String.class, Integer.class, Department.class));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java">com.cutiebambi.pojo.Employee<br>Employee<br>c1.getDeclaredFields()====&gt;<span class="hljs-keyword">private</span> java.lang.Integer com.cutiebambi.pojo.Employee.id<br>c1.getDeclaredFields()====&gt;<span class="hljs-keyword">private</span> java.lang.String com.cutiebambi.pojo.Employee.lastName<br>c1.getDeclaredFields()====&gt;<span class="hljs-keyword">private</span> java.lang.String com.cutiebambi.pojo.Employee.email<br>c1.getDeclaredFields()====&gt;<span class="hljs-keyword">private</span> java.lang.Integer com.cutiebambi.pojo.Employee.gender<br>c1.getDeclaredFields()====&gt;<span class="hljs-keyword">private</span> com.cutiebambi.pojo.Department com.cutiebambi.pojo.Employee.department<br>c1.getDeclaredFields()====&gt;<span class="hljs-keyword">private</span> java.util.Date com.cutiebambi.pojo.Employee.birth<br><span class="hljs-keyword">private</span> java.lang.String com.cutiebambi.pojo.Employee.lastName<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> java.lang.Integer com.cutiebambi.pojo.Employee.getId()<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setId(java.lang.Integer)<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setLastName(java.lang.String)<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> java.lang.String com.cutiebambi.pojo.Employee.getLastName()<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> java.lang.String com.cutiebambi.pojo.Employee.getEmail()<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setGender(java.lang.Integer)<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setDepartment(com.cutiebambi.pojo.Department)<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> java.lang.Integer com.cutiebambi.pojo.Employee.getGender()<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setBirth(java.util.Date)<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setEmail(java.lang.String)<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> java.util.Date com.cutiebambi.pojo.Employee.getBirth()<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> com.cutiebambi.pojo.Department com.cutiebambi.pojo.Employee.getDepartment()<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.Object.wait() <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.Object.wait(<span class="hljs-keyword">long</span>,<span class="hljs-keyword">int</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.Object.wait(<span class="hljs-keyword">long</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> java.lang.Object.equals(java.lang.Object)<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> java.lang.String java.lang.Object.toString()<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">int</span> java.lang.Object.hashCode()<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> java.lang.Class java.lang.Object.getClass()<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.Object.notify()<br>c1.getMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.Object.notifyAll()<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> java.lang.Integer com.cutiebambi.pojo.Employee.getId()<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setId(java.lang.Integer)<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setLastName(java.lang.String)<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> java.lang.String com.cutiebambi.pojo.Employee.getLastName()<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> java.lang.String com.cutiebambi.pojo.Employee.getEmail()<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setGender(java.lang.Integer)<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setDepartment(com.cutiebambi.pojo.Department)<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> java.lang.Integer com.cutiebambi.pojo.Employee.getGender()<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setBirth(java.util.Date)<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.cutiebambi.pojo.Employee.setEmail(java.lang.String)<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> java.util.Date com.cutiebambi.pojo.Employee.getBirth()<br>c1.getDeclaredMethods()====&gt;<span class="hljs-keyword">public</span> com.cutiebambi.pojo.Department com.cutiebambi.pojo.Employee.getDepartment()<br><span class="hljs-keyword">public</span> java.lang.String com.cutiebambi.pojo.Employee.getLastName()<br>c1.getConstructors()====&gt;<span class="hljs-keyword">public</span> com.cutiebambi.pojo.Employee()<br>c1.getConstructors()====&gt;<span class="hljs-keyword">public</span> com.cutiebambi.pojo.Employee(java.lang.Integer,java.lang.String,java.lang.String,java.lang.Integer,com.cutiebambi.pojo.Department)<br>c1.getDeclaredConstructors()====&gt;<span class="hljs-keyword">public</span> com.cutiebambi.pojo.Employee()<br>c1.getDeclaredConstructors()====&gt;<span class="hljs-keyword">public</span> com.cutiebambi.pojo.Employee(java.lang.Integer,java.lang.String,java.lang.String,java.lang.Integer,com.cutiebambi.pojo.Department)<br><span class="hljs-keyword">public</span> com.cutiebambi.pojo.Employee(java.lang.Integer,java.lang.String,java.lang.String,java.lang.Integer,com.cutiebambi.pojo.Department)<br></code></pre></td></tr></tbody></table></figure><h1 id="调用运行时类的指定结构"><a href="#调用运行时类的指定结构" class="headerlink" title="调用运行时类的指定结构"></a>调用运行时类的指定结构</h1><h1 id="动态创建对象执行方法"><a href="#动态创建对象执行方法" class="headerlink" title="动态创建对象执行方法"></a>动态创建对象执行方法</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.reflection;<br><br><span class="hljs-keyword">import</span> com.cutiebambi.pojo.Department;<br><span class="hljs-keyword">import</span> com.cutiebambi.pojo.Employee;<br><span class="hljs-keyword">import</span> com.cutiebambi.pojo.User;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test07</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>{<br>        <span class="hljs-comment">//通过反射获取Class对象，然后再生成一个对象</span><br>        Class c1 = Class.forName(<span class="hljs-string">"com.cutiebambi.pojo.User"</span>);<br>        Object o = c1.newInstance();<br>        System.out.println(o.toString());<br><br>        <span class="hljs-comment">//通过构造器创建对象</span><br>        Constructor declaredConstructor = c1.getDeclaredConstructor(<span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class, String.class);<br>        Object o1 = declaredConstructor.newInstance(<span class="hljs-number">1001</span>, <span class="hljs-number">18</span>, <span class="hljs-string">"bambi"</span>);<br>        System.out.println(o1.toString());<br><br>        <span class="hljs-comment">//通过反射调用普通方法</span><br>        User user = (User)c1.newInstance();<br>        Method setName = c1.getDeclaredMethod(<span class="hljs-string">"setName"</span>, String.class);<br>        setName.invoke(user, <span class="hljs-string">"boun"</span>);<span class="hljs-comment">//invoke(对象, 传入的参数值) 激活某个对象的方法，并且传入对应的参数值</span><br>        System.out.println(user.getName());<br><br>        <span class="hljs-comment">//通过反射操作普通属性</span><br>        Field name = c1.getDeclaredField(<span class="hljs-string">"name"</span>);<br>        <span class="hljs-comment">//关闭安全检测</span><br>        name.setAccessible(<span class="hljs-keyword">true</span>);<br>        name.set(user, <span class="hljs-string">"prem"</span>);<br>        System.out.println(user.getName());<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">User{id=<span class="hljs-number">0</span>, age=<span class="hljs-number">0</span>, name=<span class="hljs-string">'null'</span>}<br>User{id=<span class="hljs-number">1001</span>, age=<span class="hljs-number">18</span>, name=<span class="hljs-string">'bambi'</span>}<br>boun<br>prem<br></code></pre></td></tr></tbody></table></figure><h1 id="性能问题分析"><a href="#性能问题分析" class="headerlink" title="性能问题分析"></a>性能问题分析</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.reflection;<br><br><span class="hljs-keyword">import</span> com.cutiebambi.pojo.User;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.sql.Timestamp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test08</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>{<br>        <span class="hljs-comment">//性能问题分析</span><br>        Class c1 = Class.forName(<span class="hljs-string">"com.cutiebambi.pojo.User"</span>);<br><br>        <span class="hljs-comment">//普通方式调用方法</span><br>        User user = <span class="hljs-keyword">new</span> User();<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) {<br>            user.getName();<br>        }<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">"普通方式调用方法： "</span> + (end-start) + <span class="hljs-string">"ms"</span>);<br><br>        <span class="hljs-comment">//反射方式调用方法</span><br>        user = (User)c1.newInstance();<br>        Method getName = c1.getDeclaredMethod(<span class="hljs-string">"getName"</span>);<br>        start = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) {<br>            getName.invoke(user, <span class="hljs-keyword">null</span>);<br>        }<br>        end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">"反射方式调用方法： "</span> + (end-start) + <span class="hljs-string">"ms"</span>);<br><br>        <span class="hljs-comment">//关闭检测后的反射方式调用方法</span><br>        user = (User)c1.newInstance();<br>        getName = c1.getDeclaredMethod(<span class="hljs-string">"getName"</span>);<br>        getName.setAccessible(<span class="hljs-keyword">true</span>);<br>        start = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) {<br>            getName.invoke(user, <span class="hljs-keyword">null</span>);<br>        }<br>        end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">"关闭检测后的反射方式调用方法： "</span> + (end-start) + <span class="hljs-string">"ms"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">普通方式调用方法： 3ms<br>反射方式调用方法： 1605ms<br>关闭检测后的反射方式调用方法： 1575ms<br></code></pre></td></tr></tbody></table></figure><h1 id="获取泛型信息"><a href="#获取泛型信息" class="headerlink" title="获取泛型信息"></a>获取泛型信息</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.reflection;<br><br><span class="hljs-keyword">import</span> com.cutiebambi.pojo.User;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test09</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{<br>        Class c1 = Class.forName(<span class="hljs-string">"com.cutiebambi.reflection.Test09"</span>);<br>        Type[] types = c1.getDeclaredMethod(<span class="hljs-string">"method1"</span>, Map.class, List.class).getGenericParameterTypes();<br>        <span class="hljs-keyword">for</span> (Type type : types) {<br>            <span class="hljs-keyword">if</span>(type <span class="hljs-keyword">instanceof</span> ParameterizedType){<br>                Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();<br>                <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) {<br><br>                    System.out.println(actualTypeArgument);<br>                }<br>            }<br>        }<br>        System.out.println(<span class="hljs-string">"========================"</span>);<br><br><br>        Type returnType = c1.getDeclaredMethod(<span class="hljs-string">"method2"</span>).getGenericReturnType();<br>        <span class="hljs-keyword">if</span>(returnType <span class="hljs-keyword">instanceof</span> ParameterizedType){<br>            Type[] actualTypeArguments = ((ParameterizedType) returnType).getActualTypeArguments();<br>            <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) {<br>                System.out.println(actualTypeArgument);<br>            }<br>        }<br>    }<br><br>    <span class="hljs-comment">//泛型作为参数类型</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">(Map&lt;String, Object&gt; map, List&lt;User&gt; user)</span></span>{<br><br>    }<br><br>    <span class="hljs-comment">//泛型作为返回值类型</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title">method2</span><span class="hljs-params">()</span></span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">String</span></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Object</span></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">com</span>.<span class="hljs-title">cutiebambi</span>.<span class="hljs-title">pojo</span>.<span class="hljs-title">User</span></span><br><span class="hljs-class"></span>========================<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">String</span></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Object</span></span><br></code></pre></td></tr></tbody></table></figure><h1 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test10</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>{<br>        <span class="hljs-comment">//获取注解信息</span><br>        Class c1 = Class.forName(<span class="hljs-string">"com.cutiebambi.reflection.User"</span>);<br>        Annotation[] annotations = c1.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) {<br>            System.out.println(annotation);<span class="hljs-comment">//@com.cutiebambi.reflection.TableBambi(value=db_user)</span><br><br>            TableBambi tableAnno = (TableBambi)c1.getAnnotation(TableBambi.class);<br>            System.out.println(tableAnno.value());<span class="hljs-comment">//db_user</span><br>        }<br><br>        <span class="hljs-comment">//获取类指定的注解</span><br>        Field name = c1.getDeclaredField(<span class="hljs-string">"age"</span>);<br>        FieldBambi fieldBambi = name.getAnnotation(FieldBambi.class);<br>        System.out.println(fieldBambi.columnName());<br>        System.out.println(fieldBambi.type());<br>        System.out.println(fieldBambi.length());<br>    }<br>}<br><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> TableBambi {<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>}<br><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> FieldBambi {<br>    <span class="hljs-function">String <span class="hljs-title">columnName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">type</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>;<br>}<br><br><span class="hljs-meta">@TableBambi("db_user")</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br>    <span class="hljs-meta">@FieldBambi(columnName = "db_id", type = "int", length = 5)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-meta">@FieldBambi(columnName = "db_age", type = "int", length = 3)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-meta">@FieldBambi(columnName = "db_name", type = "varchar", length = 4)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> age, String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> id;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<br>        <span class="hljs-keyword">this</span>.id = id;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"User{"</span> +<br>                <span class="hljs-string">"id="</span> + id +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@com</span>.cutiebambi.reflection.TableBambi(value=db_user)<br>db_user<br>db_age<br><span class="hljs-keyword">int</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot</title>
    <link href="/posts/a541262a.html"/>
    <url>/posts/a541262a.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="Spring-Boot简介"><a href="#Spring-Boot简介" class="headerlink" title="Spring Boot简介"></a>Spring Boot简介</h1><h2 id="回顾什么是Spring"><a href="#回顾什么是Spring" class="headerlink" title="回顾什么是Spring"></a>回顾什么是Spring</h2><p>Spring是一个开源框架，解决企业级应用开发的复杂性而创建的，简化开发。</p><p><strong>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。</strong></p><h2 id="Spring是如何简化Java开发的"><a href="#Spring是如何简化Java开发的" class="headerlink" title="Spring是如何简化Java开发的"></a>Spring是如何简化Java开发的</h2><p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：</p><p>1、基于POJO的轻量级和最小侵入性编程，所有东西都是bean；</p><p>2、通过IOC，依赖注入（DI）和面向接口实现松耦合；</p><p>3、基于切面（AOP）和惯例进行声明式编程；</p><p>4、通过切面和模版减少样式代码，RedisTemplate，xxxTemplate；</p><h2 id="什么是Spring-Boot"><a href="#什么是Spring-Boot" class="headerlink" title="什么是Spring Boot"></a>什么是Spring Boot</h2><p>学过Java Web的同学就知道，开发一个web应用，从最初开始接触Servlet结合Tomcat, 跑出一个Hello Wolrld程序，是要经历特别多的步骤；后来就用了框架Struts，再后来是Spring MVC，到了现在的Spring Boot，过一两年又会有其他web框架出现；你们有经历过框架不断的演进，然后自己开发项目所有的技术也在不断的变化、改造吗？建议都可以去经历一遍；</p><p>言归正传，什么是Spring Boot呢，就是一个javaweb的开发框架，和Spring MVC类似，对比其他Java Web框架的好处，<strong>官方说是简化开发，约定大于配置（越是简化的东西，越是需要严格的规定）， you can “just run”</strong>，能迅速的开发web应用，几行代码开发一个http接口。</p><p>所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生 一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡“约定大于配置”，进而衍生出一些一站式的解决方案。</p><p>是的，这就是Java企业级应用-&gt;J2EE-&gt;Spring-&gt;Spring Boot的过程。</p><p>随着Spring不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用Spring 、更容易的集成各种常用的中间件、开源软件；</p><p>Spring Boot 基于Spring开发，Spirng Boot 本身并不提供Spring框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于Spring框架的应用程序。也就是说，它并不是用来替代Spring的解决方案，而是和Spring框架紧密结合用于提升Spring开发者体验的工具。<strong>Spring Boot 以约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数Spring Boot应用只需要很少的Spring配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、JPA、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p><p>简单来说就是Spring Boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，Spring Boot整合了所有的框架 。</p><p>Spring Boot 出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善，Spring Boot已经当之无愧成为Java领域最热门的技术。</p><p><strong>Spring Boot的主要优点：</strong></p><ul><li>为所有Spring开发者更快的入门</li><li>开箱即用，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><ul><li>微服务是一种架构风格，它要求我们在开发一个应用的时候，这个应用必须构建成一系列小服务的组合;可以通过http的方式进行互通。要说微服务架构，先得说说过去我们的单体应用架构。</li></ul><h2 id="单体应用架构"><a href="#单体应用架构" class="headerlink" title="单体应用架构"></a>单体应用架构</h2><ul><li>所谓单体应用架构(all in one)是指，我们将一个应用的中的所有应用服务都封装在一个应用中。</li><li>无论是ERP、CRM或是其他什么系统，你都把数据库访问，web访问, 等等各个功能放到一个war包内。（目前我们写的项目就是如此，将一个系统整体打包成war包）</li><li>这样做的好处是，易于开发和测试；也十分方便部署；当需要扩展时，只需要将war复制多份，然后放到多个服务器上，再做个负载均衡就可以了。</li><li>单体应用架构的缺点是，哪怕我要修改一个非常小的地方，我都需要停掉整个服务，重新打包、部署这个应用war包。特别是对于一个大型应用，我们不可能把所有内容都放在一个应用里面，我们如何维护、如何分工合作都是问题。</li></ul><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><ul><li>all in one的架构方式，我们把所有的功能单元放在一个应用里面。然后我们把整个应用部署到服务器上。如果负载能力不行，我们将整个应用进行水平复制，进行扩展，然后在负载均衡。</li><li>所谓微服务架构，就是打破之前all in one的架构方式，把每个功能元素独立出来。把独立出来的功能元素的动态组合，需要的功能元素才去拿来组合，需要多一些时，可以整合多个功能元素。<strong>所以微服务架构是对功能元素进行复制，而没有对整个应用进行复制。</strong></li><li>这样做的好处是:<ul><li>节省了调用资源。</li><li>每个功能元素的服务都是一个可替换的、可独立升级的软件代码。</li></ul></li></ul><p><img src="https://s2.loli.net/2022/09/25/SXEDxseJFpdowr6.png"></p><ul><li>Martin Flower于2014年3月25日写的《Microservices》 ，详细的阐述了什么是微服务。<ul><li>原文地址: <a href="http://martinfowler.com/articles/microservices.html">http://martinfowler.com/articles/microservices.html</a></li><li>翻译: <a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></li></ul></li></ul><h2 id="如何构建微服务"><a href="#如何构建微服务" class="headerlink" title="如何构建微服务"></a>如何构建微服务</h2><ul><li><p>一个大型系统的微服务架构，就像一个复杂交织的神经网络，每-个神经元就是一个功能元素， 它们各自完成自己的功能，然后通过http相互请求调用。比如一个电商系统，查缓存、连数据库、浏览页面、结账、支付等服务都是一个个独立的功能服务,都被微化了，它们作为一个个微服务共同构建了一个庞大的系统。如果修改其中的一个功能，只需要更新升级其中一个功能服务单元即可。</p></li><li><p>但是这种庞大的系统架构给部署和运维带来很大的难度。于是，spring为我们带来了构建大型分布式微服务的全套、全程产品:</p><ul><li>构建一个个功能独立的微服务应用单元，可以使用springboot, 可以帮我们快速构建一个应用；</li><li>大型分布式网络服务的调用，这部分由spring cloud来完成，实现分布式；</li><li>在分布式中间,进行流式数据计算、批处理，我们有spring cloud data flow。</li><li>spring为我们想清楚了整个从开始构建应用到大型分布式应用全流程方案。</li></ul><p><img src="https://s2.loli.net/2022/09/25/ZGEVRJv8qHnFYQz.png"></p></li></ul><h1 id="第一个SpringBoot程序"><a href="#第一个SpringBoot程序" class="headerlink" title="第一个SpringBoot程序"></a>第一个SpringBoot程序</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们将学习如何快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。</p><p>我的环境准备：</p><ul><li>java version 1.8</li><li>Maven-3.6.1</li><li>SpringBoot 2.x 最新版</li></ul><p>开发工具：</p><ul><li>IDEA</li></ul><h2 id="创建基础项目说明"><a href="#创建基础项目说明" class="headerlink" title="创建基础项目说明"></a>创建基础项目说明</h2><p>Spring官方提供了非常方便的工具让我们快速构建应用（提供了一个快速生成的网站）</p><p>Spring Initializer：<a href="https://start.spring.io/">https://start.spring.io/</a></p><p><strong>项目创建方式一：</strong> 使用Spring Initializer 的 Web页面创建项目</p><p>1、打开 <a href="https://start.spring.io/">https://start.spring.io/</a></p><p>2、填写项目信息</p><p>3、点击”Generate Project“按钮生成项目；下载此项目</p><p>4、解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p><p>5、如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。</p><p><strong>项目创建方式二：</strong> 使用 IDEA 直接创建项目（idea继承了上面说的那个网站）</p><p>1、创建一个新项目</p><p>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p><p>3、填写项目信息</p><p>4、选择初始化的组件（初学勾选 Web 即可）</p><p>5、填写项目路径</p><p>6、等待项目构建成功</p><p><strong>项目结构分析：</strong></p><p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p><p>1、程序的主启动类</p><p>2、一个 application.properties 配置文件</p><p>3、一个 测试类</p><p>4、一个 pom.xml</p><h2 id="pom-xml-分析"><a href="#pom-xml-分析" class="headerlink" title="pom.xml 分析"></a>pom.xml 分析</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 有一个父项目 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- gav坐标 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hellospringboot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hellospringboot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>hellospringboot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- web依赖：集成tomcat, dispatcherServlet, xml...... --&gt;</span><br>        <span class="hljs-comment">&lt;!-- spring boot所有的依赖都是以spring-boot-starter为前缀的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 单元测试 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 打jar包插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><p>如上所示，pom文件主要有四个部分:</p><ul><li><p>项目元数据信息：创建时候输入的Project Metadata部分，也就是Maven项目的基本元素，包括: groupld、 artifactld、 version、 name、 description等</p></li><li><p>parent：继承spring- boot -starter-parent的依赖管理，控制版本与打包等内容</p></li><li><p>dependencies： 项目具体依赖，这里包含了spring-boot-starter -web用于实现HTTP接口(该依赖中包含了Spring MVC)，官网对它的描述是:使用Spring MVC构建Web (包括RESTful)应用程序的入门者，使用Tomcat作为默认嵌入式容器。spring-boot-starter-test用于编写单元测试的依赖包。更多功能模块的使用我们将在后面逐步展开。</p></li><li><p>build: 构建配置部分。默认使用了spring-boot-maven-plugin,配合spring-boot-starter-parent就可以把Spring Boot应用打包成JAR来直接运行。</p><p><img src="https://s2.loli.net/2022/09/25/GPRiysJIupvK4Zr.png"></p><p><img src="https://s2.loli.net/2022/09/25/RidLrFC6oq82GBV.png"></p></li></ul><h2 id="编写一个http接口"><a href="#编写一个http接口" class="headerlink" title="编写一个http接口"></a>编写一个http接口</h2><ol><li><p>在主程序的同级目录下，新建一个controller包，一定要在同级目录下，否则识别不到。</p></li><li><p>在包中新建一个HelloController类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>{<br>    <span class="hljs-meta">@RequestMapping("/hello")</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello bambi"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p>编写完毕后，从主程序启动项目，浏览器发起请求，看页面返回；</p><p><img src="https://s2.loli.net/2022/09/25/svwmTKpEH1NjkUL.png"></p></li></ol><h2 id="点击-maven的-package-将项目打成jar包"><a href="#点击-maven的-package-将项目打成jar包" class="headerlink" title="点击 maven的 package, 将项目打成jar包"></a>点击 maven的 package, 将项目打成jar包</h2><ul><li><p>如果打包成功，则会在target目录下生成一个 jar 包</p><p><img src="https://s2.loli.net/2022/09/25/6AxpMGfjri7CDRe.png"></p></li><li><p>打成了jar包后，就可以在任何地方运行了。</p><p><img src="https://s2.loli.net/2022/09/25/EOoKq6Yr2GxJn3l.png"></p></li></ul><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul><li><p>更改tomcat端口号 ( resources 目录下的application.properties 文件)</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#更改项目端口号</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8089</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/09/25/7ivz5DPw8xJs6aK.png"></p></li><li><p>更改启动时显示的字符拼成的字母：到项目下的 resources 目录下新建一个banner.txt 即可，将图案放在这个文件即可。</p></li></ul><h1 id="SpringBoo原理初探【重点】"><a href="#SpringBoo原理初探【重点】" class="headerlink" title="SpringBoo原理初探【重点】"></a>SpringBoo原理初探【重点】</h1><h2 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h2><h3 id="父依赖"><a href="#父依赖" class="headerlink" title="父依赖"></a>父依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 有一个父项目 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>点进spring-boot-starter-parent，它还有一个parent</p><p><artifactid>spring-boot-dependencies</artifactid>这个是核心依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>以后我们导入依赖默认是不需要写版本（因为有这些版本仓库）；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</strong></p><h3 id="启动器-spring-boot-starter"><a href="#启动器-spring-boot-starter" class="headerlink" title="启动器 spring-boot-starter"></a>启动器 spring-boot-starter</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>springboot-boot-starter-xxx：就是spring-boot的场景启动器</li><li>spring-boot-starter-web：帮我们导入了web模块正常运行所依赖的组件；</li><li>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），如果我们想要使用什么样的功能，只需要在项目中引入相关的（启动器）starter即可，所有相关的依赖都会导入进来 ， 我们未来也可以自己自定义 starter；</li></ul><h2 id="主启动类-（看注解）"><a href="#主启动类-（看注解）" class="headerlink" title="主启动类 （看注解）"></a>主启动类 （看注解）</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">//自动装配：启动类本身就是Spring的一个组件。</span><br><span class="hljs-comment">//SpringBootApplication标注这个类是一个spring boot的应用。启动类下的所有的资源被导入：EnableAutoConfiguration</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HellospringbootApplication</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        SpringApplication.run(HellospringbootApplication.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>@SpringBootApplication: 说明这个类是Spring Boot的主配置类。</p><h3 id="SpringBootConfiguration-Spring-Boot的配置类"><a href="#SpringBootConfiguration-Spring-Boot的配置类" class="headerlink" title="@SpringBootConfiguration: Spring Boot的配置类"></a>@SpringBootConfiguration: Spring Boot的配置类</h3><p>​    @Configuration: 配置类，对应的是Spring 的xml文件。</p><p>​        @Component</p><h3 id="EnableAutoConfiguration-开启自动配置功能"><a href="#EnableAutoConfiguration-开启自动配置功能" class="headerlink" title="@EnableAutoConfiguration: 开启自动配置功能"></a>@EnableAutoConfiguration: 开启自动配置功能</h3><p>​    @AutoConfigurationPackage: 自动配置包</p><p>​        @Import(AutoConfigurationPackages.Registrar.class): 自动配置包注册</p><p>​            @Import：Spring底层注解，给容器中导入一个组件。</p><p>​            Registrar.class: 将主启动类所在包及包下面所有子包里面的所有组件扫描到Spring容器。</p><p>​    @Import(AutoConfigurationImportSelector.class): 给容器中导入组件</p><p>​        AutoConfigurationImportSelector: 自动配置导入选择器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>{<br>    List&lt;String&gt; configurations = <span class="hljs-keyword">new</span> ArrayList(SpringFactoriesLoader.loadFactoryNames(<span class="hljs-keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="hljs-keyword">this</span>.getBeanClassLoader()));<br>    ImportCandidates.load(AutoConfiguration.class, <span class="hljs-keyword">this</span>.getBeanClassLoader()).forEach(configurations::add);<br>    Assert.notEmpty(configurations, <span class="hljs-string">"No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you are using a custom packaging, make sure that file is correct."</span>);<br>    <span class="hljs-keyword">return</span> configurations;<br>}<br></code></pre></td></tr></tbody></table></figure><p>上面的方法会调用下面这个方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">loadFactoryNames</span><span class="hljs-params">(Class&lt;?&gt; factoryType, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> </span>{<br>    ClassLoader classLoaderToUse = classLoader;<br>    <span class="hljs-keyword">if</span> (classLoader ** <span class="hljs-keyword">null</span>) {<br>        classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();<br>    }<br><br>    String factoryTypeName = factoryType.getName();<br>    <span class="hljs-keyword">return</span> (List)loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());<br>}<br></code></pre></td></tr></tbody></table></figure><p>接着这个方法又会调用下面这个方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(ClassLoader classLoader) {<br>    Map&lt;String, List&lt;String&gt;&gt; result = (Map)cache.get(classLoader);<br>    <span class="hljs-keyword">if</span> (result != <span class="hljs-keyword">null</span>) {<br>        <span class="hljs-keyword">return</span> result;<br>    } <span class="hljs-keyword">else</span> {<br>        Map&lt;String, List&lt;String&gt;&gt; result = <span class="hljs-keyword">new</span> HashMap();<br><br>        <span class="hljs-keyword">try</span> {<br>            <span class="hljs-comment">//spring.factories这个是自动配置的核心文件</span><br>            <span class="hljs-comment">//自动配置真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。小结：SpringBoot所有自动配置都是在启动的时候扫描并加载：spring.factories配置文件 ，所有的自动配置类都在这里面，但是不一定生效，要判断条件是否成立，而所谓的条件就是只要导入了对应的strater，就有对应的启动器了，有了启动器，条件成立，自动配置就生效，然后就配置成功！</span><br>            Enumeration&lt;URL&gt; urls = classLoader.getResources(<span class="hljs-string">"META-INF/spring.factories"</span>);<br><br>            <span class="hljs-keyword">while</span>(urls.hasMoreElements()) {<br>                URL url = (URL)urls.nextElement();<br>                UrlResource resource = <span class="hljs-keyword">new</span> UrlResource(url);<br>                Properties properties = PropertiesLoaderUtils.loadProperties(resource);<br>                Iterator var6 = properties.entrySet().iterator();<br><br>                <span class="hljs-keyword">while</span>(var6.hasNext()) {<br>                    Map.Entry&lt;?, ?&gt; entry = (Map.Entry)var6.next();<br>                    String factoryTypeName = ((String)entry.getKey()).trim();<br>                    String[] factoryImplementationNames = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());<br>                    String[] var10 = factoryImplementationNames;<br>                    <span class="hljs-keyword">int</span> var11 = factoryImplementationNames.length;<br><br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var12 = <span class="hljs-number">0</span>; var12 &lt; var11; ++var12) {<br>                        String factoryImplementationName = var10[var12];<br>                        ((List)result.computeIfAbsent(factoryTypeName, (key) -&gt; {<br>                            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList();<br>                        })).add(factoryImplementationName.trim());<br>                    }<br>                }<br>            }<br><br>            result.replaceAll((factoryType, implementations) -&gt; {<br>                <span class="hljs-keyword">return</span> (List)implementations.stream().distinct().collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));<br>            });<br>            cache.put(classLoader, result);<br>            <span class="hljs-keyword">return</span> result;<br>        } <span class="hljs-keyword">catch</span> (IOException var14) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Unable to load factories from location [META-INF/spring.factories]"</span>, var14);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值将这些值作为自动配置类导入容器 ， 自动配置类就生效 ，以前我们需要自己配置的东西，现在SpringBoot 帮我们进行自动配置工作；整个J2EE的整体解决方案和自动配置都在spring-boot-autoconfigure的jar包中，他会把所有需要导入的组件，以类名（全限定名）的方式返回，这些类名对应的组件就会被添加到容器里；容器中有很多的xxxAutoConfiguration的文件（@Bean）, 就是这些类给容器中导入这个场景需要的所有组件 ， 并自动配置，@Configuration ；有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</p><h1 id="yaml语法学习"><a href="#yaml语法学习" class="headerlink" title="yaml语法学习"></a>yaml语法学习</h1><h2 id="Spring-Boot的全局配置文件"><a href="#Spring-Boot的全局配置文件" class="headerlink" title="Spring Boot的全局配置文件"></a>Spring Boot的全局配置文件</h2><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的。</p><ul><li><p>可以是application.properties</p><ul><li>语法结构：key=value</li></ul></li><li><p>也可以是application.yaml（官方推荐使用这个）</p><ul><li>语法结构: key: value（key和value之间的空格必须存在）</li></ul></li></ul><p><strong>配置文件的作用</strong>：修改Spring Boot自动配置的默认值。</p><h2 id="yaml概述"><a href="#yaml概述" class="headerlink" title="yaml概述"></a>yaml概述</h2><p>YAML是 “YAML Ain’t a Markup Language”</p><p><strong>这种语言以数据作为中心，而不是以标记语言为重点！</strong></p><p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p><p>传统xml配置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8081<span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>yaml配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <br> <span class="hljs-attr">prot:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></tbody></table></figure><h2 id="yaml基础语法"><a href="#yaml基础语法" class="headerlink" title="yaml基础语法"></a>yaml基础语法</h2><ul><li><p>说明：语法要求严格！</p><ul><li>空格不能省略</li><li>以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</li><li>属性和值的大小写都是十分敏感的。</li></ul></li></ul><h3 id="字面量：普通的值-数字，布尔值，字符串"><a href="#字面量：普通的值-数字，布尔值，字符串" class="headerlink" title="字面量：普通的值 [ 数字，布尔值，字符串 ]"></a>字面量：普通的值 [ 数字，布尔值，字符串 ]</h3><ul><li>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#yaml格式（注意空格）</span><br><span class="hljs-attr">k:</span> <span class="hljs-string">v</span><br></code></pre></td></tr></tbody></table></figure><ul><li><p>注意：</p><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；比如 ：name: “kuang \n shen” 输出 ：kuang 换行 shen<br>’ ’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出比如 ：name: ‘kuang \n shen’ 输出 ：kuang \n shen</p></li></ul><h3 id="对象、Map（键值对"><a href="#对象、Map（键值对" class="headerlink" title="对象、Map（键值对)"></a>对象、Map（键值对)</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#对象、Map格式</span><br><span class="hljs-attr">k:</span><br> <span class="hljs-attr">v1:</span>    <br> <span class="hljs-attr">v2:</span><br></code></pre></td></tr></tbody></table></figure><ul><li><p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">student:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang</span>    <br> <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>行内写法</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">student:</span> {<span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">3</span>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="数组（-List、set-）"><a href="#数组（-List、set-）" class="headerlink" title="数组（ List、set ）"></a>数组（ List、set ）</h3><ul><li><p>用 - 值表示数组中的一个元素,比如：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span> <br> <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span> <br> <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span> <br> <span class="hljs-bullet">-</span> <span class="hljs-string">pig</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>行内写法</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span> [<span class="hljs-string">cat</span>,<span class="hljs-string">dog</span>,<span class="hljs-string">pig</span>]<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#yaml文件可以存储的东西，重点对于空格的要求很严格</span><br><span class="hljs-comment"># 普通的键值对</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">mengyuanshishabi</span><br><br><span class="hljs-comment"># 对象</span><br><span class="hljs-attr">student:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mengyuan</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br><span class="hljs-comment">#行内表示</span><br><span class="hljs-attr">user:</span> {<span class="hljs-attr">name:</span> <span class="hljs-string">mengyuan</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">3</span>}<br><br><span class="hljs-comment"># 数组</span><br><span class="hljs-attr">pets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pig</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span><br><span class="hljs-comment"># 行内表示</span><br><span class="hljs-attr">pet:</span> [<span class="hljs-string">cat</span>,<span class="hljs-string">dog</span>,<span class="hljs-string">pig</span>]<br><br><span class="hljs-comment"># 而properties只能存键值对 key=value</span><br><span class="hljs-comment"># yaml格式文件的另一个强大之处，在于可以注入到我们的配置类中，下面会说。</span><br></code></pre></td></tr></tbody></table></figure><h2 id="注入配置文件"><a href="#注入配置文件" class="headerlink" title="注入配置文件"></a>注入配置文件</h2><h3 id="yaml注入配置文件"><a href="#yaml注入配置文件" class="headerlink" title="yaml注入配置文件"></a>yaml注入配置文件</h3><ol><li><p>在springboot项目中的resources目录下新建一个文件 application.yaml</p></li><li><p>编写一个实体类 Dog；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//添加到spring 的组件里，注解生成&lt;bean&gt; ,在之前的开发中，也用注解来注入属性值</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Dog{"</span> +<br>            <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>            <span class="hljs-string">", age="</span> + age +<br>            <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p>思考，我们原来是如何给bean注入属性值的！@Value，给狗狗类测试一下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>{<br>    <span class="hljs-meta">@Value("旺财")</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value("3")</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="4"><li><p>在SpringBoot的测试类下注入狗狗输出一下；</p><p><img src="https://s2.loli.net/2022/10/05/oLGNlFb1s7AXvi9.png"></p></li><li><p>我们在编写一个复杂一点的实体类：Person 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">getHappy</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> happy;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHappy</span><span class="hljs-params">(Boolean happy)</span> </span>{<br>        <span class="hljs-keyword">this</span>.happy = happy;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirth</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> birth;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirth</span><span class="hljs-params">(Date birth)</span> </span>{<br>        <span class="hljs-keyword">this</span>.birth = birth;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getMaps</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> maps;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaps</span><span class="hljs-params">(Map&lt;String, Object&gt; maps)</span> </span>{<br>        <span class="hljs-keyword">this</span>.maps = maps;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">getLists</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> lists;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLists</span><span class="hljs-params">(List&lt;Object&gt; lists)</span> </span>{<br>        <span class="hljs-keyword">this</span>.lists = lists;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">getDog</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> dog;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDog</span><span class="hljs-params">(Dog dog)</span> </span>{<br>        <span class="hljs-keyword">this</span>.dog = dog;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">", happy="</span> + happy +<br>                <span class="hljs-string">", birth="</span> + birth +<br>                <span class="hljs-string">", maps="</span> + maps +<br>                <span class="hljs-string">", lists="</span> + lists +<br>                <span class="hljs-string">", dog="</span> + dog +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="6"><li><p>我们来使用yaml配置的方式进行注入，大家写的时候注意区别和优势，我们编写一个yaml配置！</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bambi</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">9</span><br>  <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2022</span><span class="hljs-string">/02/12</span><br>  <span class="hljs-attr">maps:</span> {<span class="hljs-attr">key1:</span> <span class="hljs-string">value1</span>, <span class="hljs-attr">key2:</span> <span class="hljs-string">value2</span>}<br>  <span class="hljs-attr">lists:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">climbing</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">swimming</span><br>  <span class="hljs-attr">dog:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">旺财</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="7"><li><p>我们刚才已经把person这个对象的所有值都写好了，我们现在来注入到我们的类中！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">@ConfigurationProperties作用：</span><br><span class="hljs-comment">将配置文件中配置的每一个属性的值，映射到这个组件中；</span><br><span class="hljs-comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span><br><span class="hljs-comment">参数 prefix = “person” : 将配置文件中的person下面的所有属性和组件一一对应</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = "person")</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="8"><li><p>IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖！</p><p><img src="https://s2.loli.net/2022/10/05/dHGIlJ9jpOV7Dmt.png"></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="9"><li><p>确认以上配置都OK之后，我们去测试类中测试一下：</p><p>结果：所有值全部注入成功！</p><p><img src="https://s2.loli.net/2022/10/05/84jAb7cyzPlf2DZ.png"></p></li></ol><h3 id="加载指定的配置文件"><a href="#加载指定的配置文件" class="headerlink" title="加载指定的配置文件"></a>加载指定的配置文件</h3><p><strong>@PropertySource ：</strong> 加载指定的配置文件；</p><p><strong>@configurationProperties</strong>：默认从全局配置文件中获取值；</p><p>1、我们去在resources目录下新建一个<strong>person.properties</strong>文件</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">bambi</span><br></code></pre></td></tr></tbody></table></figure><p>2、然后在我们的代码中指定加载teacher.properties文件properties</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@PropertySource(value = "classpath:teacher.properties")</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>{<br>    <span class="hljs-meta">@Value("${name}")</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Teacher{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>3、再次输出测试一下：指定配置文件绑定成功！</p><p><img src="https://s2.loli.net/2022/10/05/25AIasoyvKgGhnF.png"></p><h3 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bambi${random.uuid}</span> <span class="hljs-comment"># 随机uuid</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-string">${random.int}</span>  <span class="hljs-comment"># 随机int</span><br>  <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2022</span><span class="hljs-string">/02/12</span><br>  <span class="hljs-attr">maps:</span> {<span class="hljs-attr">key1:</span> <span class="hljs-string">value1</span>, <span class="hljs-attr">key2:</span> <span class="hljs-string">value2</span>}<br>  <span class="hljs-attr">lists:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">climbing</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">swimming</span><br>  <span class="hljs-attr">dog:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">旺财</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/10/05/ukLd7EbSTDaGHv2.png"></p><h3 id="对比小结"><a href="#对比小结" class="headerlink" title="对比小结"></a>对比小结</h3><p>配置yaml和配置properties都可以获取到值 ， 强烈推荐 yaml；</p><p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</p><p>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</p><h2 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">@ConfigurationProperties作用：</span><br><span class="hljs-comment">将配置文件中配置的每一个属性的值，映射到这个组件中；</span><br><span class="hljs-comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span><br><span class="hljs-comment">参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = "person")</span><br><span class="hljs-meta">@Validated</span>  <span class="hljs-comment">//数据校验</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-keyword">private</span> String name;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/10/05/fWuKNUy9kMHwPmI.png"></p><h1 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h1><ul><li>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；</li></ul><h2 id="多配置文件"><a href="#多配置文件" class="headerlink" title="多配置文件"></a>多配置文件</h2><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yaml , 用来指定多个环境版本；</p><p>例如：</p><p>application-test.properties 代表测试环境配置</p><p>application-dev.properties 代表开发环境配置</p><p>但是Springboot并不会直接启动这些配置文件，它默认使用application.properties主配置文件；</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span><br><span class="hljs-comment">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span><br><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">dev</span><br></code></pre></td></tr></tbody></table></figure><h2 id="yaml的多文档块"><a href="#yaml的多文档块" class="headerlink" title="yaml的多文档块"></a>yaml的多文档块</h2><p>和properties配置文件中一样，但是使用<a href="https://so.csdn.net/so/search?q=yaml&amp;spm=1001.2101.3001.7020">yaml</a>去实现不需要创建多个配置文件，更加方便了 !</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-comment">#选择要激活那个环境块</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#配置环境的名称</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8084</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span>  <span class="hljs-comment">#配置环境的名称</span><br></code></pre></td></tr></tbody></table></figure><p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p><h2 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h2><p>官方文档说明：</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.external-config.files">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.external-config.files</a></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210061853136.png"></p><p>Spring Boot will automatically find and load <code>application.properties</code> and <code>application.yaml</code> files from the following locations when your application starts:</p><ol><li>From the classpath（类路径就是src/main/resource或者src/main/java，一般会把配置文件放在resource下。）<ol><li>The classpath root     优先级最低</li><li>The classpath <code>/config</code> package</li></ol></li><li>From the current directory<ol><li>The current directory</li><li>The <code>config/</code> subdirectory in the current directory</li><li>Immediate child directories of the <code>config/</code> subdirectory    优先级最高</li></ol></li></ol><h2 id="拓展，运维小技巧"><a href="#拓展，运维小技巧" class="headerlink" title="拓展，运维小技巧"></a>拓展，运维小技巧</h2><p>指定位置加载配置文件</p><p>我们还可以通过spring.config.location来改变默认的配置文件位置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -jar spring-boot-config.jar --spring.config.location=F:/application.properties<br></code></pre></td></tr></tbody></table></figure><h1 id="自动配置原理【重点】"><a href="#自动配置原理【重点】" class="headerlink" title="自动配置原理【重点】"></a>自动配置原理【重点】</h1><ul><li>配置文件到底能写什么？怎么写？这个和spring.factories有什么关联？</li><li>SpringBoot官方文档中有大量的配置，我们无法全部记住</li></ul><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210061854400.png"></p><h2 id="分析自动配置原理"><a href="#分析自动配置原理" class="headerlink" title="分析自动配置原理"></a>分析自动配置原理</h2><p>从spring.factories中选择一个类进入，我们以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong> 为例解释自动配置原理；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.AutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.web.ServerProperties;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.server.Encoding;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.CharacterEncodingFilter;<br><br><span class="hljs-comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span><br><span class="hljs-meta">@AutoConfiguration</span><br><br><span class="hljs-comment">//进入这个ServerProperties查看，将配置文件中对应的值和ServerProperties绑定起来；</span><br><span class="hljs-comment">//并把ServerProperties加入到IOC容器中</span><br><br><span class="hljs-comment">//自动配置属性: 装配好之后，ServerProperties里面的属性就是我们要在配置文件中写的key了。</span><br><span class="hljs-meta">@EnableConfigurationProperties({ServerProperties.class})</span><br><br><span class="hljs-comment">//Spring的底层注解：根据不同条件，来判断当前配置或者类是否生效。如果满足指定的条件，整个配置类里面的配置就会生效；</span><br><span class="hljs-comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span><br><span class="hljs-meta">@ConditionalOnWebApplication(</span><br><span class="hljs-meta">        type = Type.SERVLET</span><br><span class="hljs-meta">)</span><br><br><span class="hljs-comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><br><span class="hljs-meta">@ConditionalOnClass({CharacterEncodingFilter.class})</span><br><br><span class="hljs-comment">//判断配置文件中是否存在某个配置：server.servlet.encoding.enabled；</span><br><span class="hljs-comment">//如果不存在，判断也是成立的</span><br><span class="hljs-comment">//即使我们配置文件中不配置server.servlet.encoding.enabled=true，也是默认生效的；</span><br><span class="hljs-meta">@ConditionalOnProperty(</span><br><span class="hljs-meta">        prefix = "server.servlet.encoding",</span><br><span class="hljs-meta">        value = {"enabled"},</span><br><span class="hljs-meta">        matchIfMissing = true</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span> </span>{<br>    <span class="hljs-comment">//他已经和SpringBoot的配置文件映射了</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Encoding properties;<br><br>    <span class="hljs-comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span><span class="hljs-params">(ServerProperties properties)</span> </span>{<br>        <span class="hljs-keyword">this</span>.properties = properties.getServlet().getEncoding();<br>    }<br><br>    <span class="hljs-comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span> <span class="hljs-comment">//判断容器没有这个组件？</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CharacterEncodingFilter <span class="hljs-title">characterEncodingFilter</span><span class="hljs-params">()</span> </span>{<br>        CharacterEncodingFilter filter = <span class="hljs-keyword">new</span> OrderedCharacterEncodingFilter();<br>        filter.setEncoding(<span class="hljs-keyword">this</span>.properties.getCharset().name());<br>        filter.setForceRequestEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(org.springframework.boot.web.servlet.server.Encoding.Type.REQUEST));<br>        filter.setForceResponseEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(org.springframework.boot.web.servlet.server.Encoding.Type.RESPONSE));<br>        <span class="hljs-keyword">return</span> filter;<br>    }<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration.<span class="hljs-function">LocaleCharsetMappingsCustomizer <span class="hljs-title">localeCharsetMappingsCustomizer</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration.LocaleCharsetMappingsCustomizer(<span class="hljs-keyword">this</span>.properties);<br>    }<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocaleCharsetMappingsCustomizer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebServerFactoryCustomizer</span>&lt;<span class="hljs-title">ConfigurableServletWebServerFactory</span>&gt;, <span class="hljs-title">Ordered</span> </span>{<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Encoding properties;<br><br>        LocaleCharsetMappingsCustomizer(Encoding properties) {<br>            <span class="hljs-keyword">this</span>.properties = properties;<br>        }<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">customize</span><span class="hljs-params">(ConfigurableServletWebServerFactory factory)</span> </span>{<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.properties.getMapping() != <span class="hljs-keyword">null</span>) {<br>                factory.setLocaleCharsetMappings(<span class="hljs-keyword">this</span>.properties.getMapping());<br>            }<br><br>        }<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li><li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件（application.yaml）绑定的；</li><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li><li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(</span><br><span class="hljs-meta">    prefix = "server",</span><br><span class="hljs-meta">    ignoreUnknownFields = true</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerProperties</span> </span>{<br>    <span class="hljs-keyword">private</span> Integer port;<br>    <span class="hljs-keyword">private</span> InetAddress address;<br>    <span class="hljs-meta">@NestedConfigurationProperty</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ErrorProperties error = <span class="hljs-keyword">new</span> ErrorProperties();<br>    <span class="hljs-keyword">private</span> ForwardHeadersStrategy forwardHeadersStrategy;<br>    <span class="hljs-keyword">private</span> String serverHeader;<br>    <span class="hljs-keyword">private</span> DataSize maxHttpHeaderSize = DataSize.ofKilobytes(<span class="hljs-number">8L</span>);<br>    <span class="hljs-keyword">private</span> Shutdown shutdown;<br>    <span class="hljs-meta">@NestedConfigurationProperty</span><br>    <span class="hljs-keyword">private</span> Ssl ssl;<br>    <span class="hljs-meta">@NestedConfigurationProperty</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Compression compression;<br>    <span class="hljs-meta">@NestedConfigurationProperty</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Http2 http2;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Servlet servlet;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Reactive reactive;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Tomcat tomcat;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Jetty jetty;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Netty netty;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Undertow undertow;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210061854523.png"></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#在配置文件中能够配置的东西，都存在一个固有的规律</span><br><span class="hljs-comment"># ***AutoConfiguration: 它们是容器中的一个个组件，最后都会加入到容器中。它们会帮我们自动装配东西，自动装配的东西有默认值，它会从***Properties里面去取默认值。</span><br><span class="hljs-comment"># ***Properties又和配置文件绑定，我们就可以使用自定义的配置了</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>  <span class="hljs-attr">address:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">ssl:</span><br>    <span class="hljs-attr">certificate:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">enabled-protocols:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">trust-store-type:</span> <span class="hljs-string">dsf</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">accept-count:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></tbody></table></figure><p>这个就是自动装配的原理！！!</p><h2 id="精髓"><a href="#精髓" class="headerlink" title="精髓"></a>精髓</h2><p>1、SpringBoot启动会加载大量的自动配置类（xxxxAutoConfigurartion），每一个自动配置类中都有对应的 xxxxProperties，这些xxxxProperties中有着相关的属性与默认值，这些属性又是和配置文件（application.yaml）绑定的，所以我们可以通过配置文件来修改SpringBoot自动配置的默认值；</p><p>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p><p>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p><p>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件（application.yaml）中指定这些属性的值即可；</p><p><strong>xxxxAutoConfigurartion： 给容器中添加组件</strong></p><p>**xxxxProperties:自动配置类，封装配置文件中相关属性； **</p><h2 id="了解：-Conditional"><a href="#了解：-Conditional" class="headerlink" title="了解：@Conditional"></a>了解：@Conditional</h2><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效</strong>；</p><p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（【判断是否满足当前条件）</th></tr></thead><tbody><tr><td>@ConditionalOnBean</td><td>容器中是否存在指定bean</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式</td></tr><tr><td>@ConditionalOnJava</td><td>系统的Java版本是否符合要求</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定bean</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr></tbody></table><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><p>我们怎么知道哪些自动配置类生效？</p><p><strong>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#开启springboot的调试类</span><br><span class="hljs-string">debug=true</span><br></code></pre></td></tr></tbody></table></figure><p>输出的日志中大致分为一下几类：</p><p>Positive matches:（自动配置类启用的：正匹配） 已经启用了，并且生效的</p><p>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</p><p>Unconditional classes: （没有条件的类）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">Positive matches:<br>-----------------<br><br>   AopAutoConfiguration matched:<br>      - <span class="hljs-meta">@ConditionalOnProperty</span> (spring.aop.auto=<span class="hljs-keyword">true</span>) matched (OnPropertyCondition)<br>          <br>          <br>Negative matches:<br>-----------------<br><br>   ActiveMQAutoConfiguration:<br>      Did not match:<br>         - <span class="hljs-meta">@ConditionalOnClass</span> did not find required <span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">javax</span>.<span class="hljs-title">jms</span>.<span class="hljs-title">ConnectionFactory</span>' (<span class="hljs-title">OnClassCondition</span>)</span><br><span class="hljs-class"></span><br><span class="hljs-class"></span><br>Unconditional classes:<br>----------------------<br><br>    org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration<br></code></pre></td></tr></tbody></table></figure><h1 id="SpringBoot-Web-开发前准备"><a href="#SpringBoot-Web-开发前准备" class="headerlink" title="SpringBoot Web 开发前准备"></a>SpringBoot Web 开发前准备</h1><ul><li>我们要解决的问题：<ul><li>导入静态资源，怎么样处理静态资源</li><li>首页index.jsp/index.html</li><li>Jsp,模板引擎Thymeleaf</li><li>装配扩展SpringMVC</li><li>增删改查</li><li>拦截器</li><li>国际化</li></ul></li></ul><h2 id="处理静态资源"><a href="#处理静态资源" class="headerlink" title="处理静态资源"></a>处理静态资源</h2><p>创建一个空的web工程</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210061905924.png"></p><p>创建一个空web工程之后，先写一个测试controller验证有没有问题，没有问题的话再进行下一步。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>{<br>    <span class="hljs-meta">@RequestMapping("/hello")</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello bambi"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210061911767.png"></p><p>WebMvcAutoConfiguration.java 源码中关于静态资源的说明：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>{<br>    <span class="hljs-comment">//1.如果我们在配置文件中自己定义了路径，下面默认的就会失效</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.resourceProperties.isAddMappings()) {<br>        logger.debug(<span class="hljs-string">"Default resource handling disabled"</span>);<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-comment">//2.导入一些静态jar包，如jquery，这些jar包的目录结构要求，如果我们访问http://localhost:8080/webjars/... 就可以访问到/webjars下面的资源</span><br>        <span class="hljs-keyword">this</span>.addResourceHandler(registry, <span class="hljs-string">"/webjars/**"</span>, <span class="hljs-string">"classpath:/META-INF/resources/webjars/"</span>);<br>        <span class="hljs-comment">//3.源码中：staticPathPattern = "/**"，然后去查看WebProperties的Resources，private static final String[] CLASSPATH_RESOURCE_LOCATIONS = new String[]{"classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"};</span><br>        <span class="hljs-keyword">this</span>.addResourceHandler(registry, <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; {<br>            registration.addResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations());<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.servletContext != <span class="hljs-keyword">null</span>) {<br>                ServletContextResource resource = <span class="hljs-keyword">new</span> ServletContextResource(<span class="hljs-keyword">this</span>.servletContext, <span class="hljs-string">"/"</span>);<br>                registration.addResourceLocations(<span class="hljs-keyword">new</span> Resource[]{resource});<br>            }<br><br>        });<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>总结：</p><ol><li><p>在SpringBoot中，我们可以使用以下几种方式处理静态资源</p><ul><li>webjars</li></ul><p>  [^浏览器访问的路径]: localhost:8080/webjars/</p><ul><li>public，static，/**, resources</li></ul><p>  [^浏览器访问的路径]: localhost:8080/</p></li></ol><ol start="2"><li><p>优先级: resources &gt; static(默认) &gt; public</p></li><li><p>如果我们在配置文件（application.properties）中自己定义了路径，SpringBoot默认的路径就会失效，一般不建议这样做，因为它会直接return，代码不会往下走。</p></li><li><p><a href="http://localhost:8080/webjars/%E2%80%A6">http://localhost:8080/webjars/…</a> 这个路径可以访问到/webjars下面的资源，一般会用于导入的依赖jar包的访问（这些依赖要去 webjars的官方网站：<a href="https://www.webjars.org/">https://www.webjars.org</a> 去找），要求这些jar包的目录结构要求如下：</p></li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071417483.png"></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>​        在浏览器中访问通过webjars导入的静态资源：</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071422994.png"></p><ol start="5"><li><p>那我们项目中要是使用自己的静态资源该怎么导入呢？<br>我们去找staticPathPattern发现第二种映射规则 ：staticPathPattern = “/**” , 访问当前的项目任意资源，它会去找 WebProperties这个类 ,这个类在里面Resources定义了这些目录private static final String[] CLASSPATH_RESOURCE_LOCATIONS = new String[]{“classpath:/META-INF/resources/“, “classpath:/resources/“, “classpath:/static/“, “classpath:/public/“};<br>所以平常我们访问 <a href="http://localhost:8080/%E2%80%A6">http://localhost:8080/…</a> ，它就会匹配到上述的目录，去这些目录下寻找资源。</p><p>创建三个js文件去验证这三个目录的优先级。<br><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071429094.png"></p></li></ol><p>   访问localhost:8080/1.js，可以看到返回的是resources下面的js内容，可以得知：resources下面的静态资源优先级最高。<br>   <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071431472.png"></p><p>   接着把resources目录下的js删掉，继续访问localhost:8080/1.js。这一次返回的是static目录下的js内容。<br>   <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071438940.png"></p><p>   因此可以得出，优先级由高到低为：resources &gt; static &gt; public, 我们通常就把静态资源放在这三个目录下，至于怎样放，看个人习惯，很少使用/webjars。</p><h2 id="首页如何定制"><a href="#首页如何定制" class="headerlink" title="首页如何定制"></a>首页如何定制</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> WelcomePageHandlerMapping <span class="hljs-title">welcomePageHandlerMapping</span><span class="hljs-params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>{<br>    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="hljs-keyword">new</span> WelcomePageHandlerMapping(<span class="hljs-keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, <span class="hljs-keyword">this</span>.getWelcomePage(), <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern());<br>    welcomePageHandlerMapping.setInterceptors(<span class="hljs-keyword">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));<br>    welcomePageHandlerMapping.setCorsConfigurations(<span class="hljs-keyword">this</span>.getCorsConfigurations());<br>    <span class="hljs-keyword">return</span> welcomePageHandlerMapping;<br>}<br><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Resource <span class="hljs-title">getWelcomePage</span><span class="hljs-params">()</span> </span>{<br>    String[] var1 = <span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations();<br>    <span class="hljs-keyword">int</span> var2 = var1.length;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var3 = <span class="hljs-number">0</span>; var3 &lt; var2; ++var3) {<br>        String location = var1[var3];<br>        Resource indexHtml = <span class="hljs-keyword">this</span>.getIndexHtml(location);<br>        <span class="hljs-keyword">if</span> (indexHtml != <span class="hljs-keyword">null</span>) {<br>            <span class="hljs-keyword">return</span> indexHtml;<br>        }<br>    }<br><br>    ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>    <span class="hljs-keyword">if</span> (servletContext != <span class="hljs-keyword">null</span>) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getIndexHtml((Resource)(<span class="hljs-keyword">new</span> ServletContextResource(servletContext, <span class="hljs-string">"/"</span>)));<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    }<br>}<br><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Resource <span class="hljs-title">getIndexHtml</span><span class="hljs-params">(String location)</span> </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getIndexHtml(<span class="hljs-keyword">this</span>.resourceLoader.getResource(location));<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Resource <span class="hljs-title">getIndexHtml</span><span class="hljs-params">(Resource location)</span> </span>{<br>    <span class="hljs-keyword">try</span> {<br>        Resource resource = location.createRelative(<span class="hljs-string">"index.html"</span>);<br>        <span class="hljs-keyword">if</span> (resource.exists() &amp;&amp; resource.getURL() != <span class="hljs-keyword">null</span>) {<br>            <span class="hljs-keyword">return</span> resource;<br>        }<br>    } <span class="hljs-keyword">catch</span> (Exception var3) {<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071501321.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071451293.png"></p><h2 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><ul><li><p>前端交给我们的页面，是html页面。如果是我们以前开发，我们需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示，及交互等。</p></li><li><p>jsp支持非常强大的功能，包括能写Java代码，但是呢，我们现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war，第二，我们用的还是嵌入式的Tomcat，所以呢，他现在默认是不支持jsp的。</p></li><li><p>那不支持jsp，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢？</p></li><li><p>SpringBoot推荐你可以来使用模板引擎：</p><ul><li>模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有用的比较多的freemarker，包括SpringBoot给我们推荐的Thymeleaf，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的，什么样一个思想呢我们来看一下这张图：</li></ul><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071610326.png"></p><p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下SpringBoot给我们推荐的Thymeleaf模板引擎，这模板引擎呢，是一个高级语言的模板引擎，他的这个语法更简单。而且呢，功能更强大。<br>我们呢，就来看一下这个模板引擎，那既然要看这个模板引擎。首先，我们来看SpringBoot里边怎么用。</p></li></ul><h3 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h3><ul><li><p>怎么引入呢，对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。给大家三个网址：</p><ul><li>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></li><li>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></li><li>Spring官方文档：找到我们对应的版本<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></li></ul></li><li><p>找到对应的pom依赖：可以适当点进源码看下本来的包！</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>Maven会自动下载jar包，我们可以去看下下载的东西；</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071620411.png"></p></li></ul><h3 id="Thymeleaf分析"><a href="#Thymeleaf分析" class="headerlink" title="Thymeleaf分析"></a>Thymeleaf分析</h3><ul><li><p>前面呢，我们已经引入了Thymeleaf，那这个要怎么使用呢？</p></li><li><p>我们首先得按照SpringBoot的自动配置原理看一下我们这个Thymeleaf的自动配置规则，再按照那个规则，我们进行使用。我们去找一下Thymeleaf的自动配置类：ThymeleafProperties</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(</span><br><span class="hljs-meta">    prefix = "spring.thymeleaf"</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThymeleafProperties</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_ENCODING;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_PREFIX = <span class="hljs-string">"classpath:/templates/"</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_SUFFIX = <span class="hljs-string">".html"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> checkTemplate = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> checkTemplateLocation = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">private</span> String prefix = <span class="hljs-string">"classpath:/templates/"</span>;<br>    <span class="hljs-keyword">private</span> String suffix = <span class="hljs-string">".html"</span>;<br>    <span class="hljs-keyword">private</span> String mode = <span class="hljs-string">"HTML"</span>;<br>    <span class="hljs-keyword">private</span> Charset encoding;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> cache;<br>    <span class="hljs-keyword">private</span> Integer templateResolverOrder;<br>    <span class="hljs-keyword">private</span> String[] viewNames;<br>    <span class="hljs-keyword">private</span> String[] excludedViewNames;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> enableSpringElCompiler;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> renderHiddenMarkersBeforeCheckboxes;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> enabled;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Servlet servlet;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Reactive reactive;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>我们可以在其中看到默认的前缀和后缀！</p></li><li><p>我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</p></li><li><p>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可！</p></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li><p>编写一个IndexController</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">//在templates目录下的所有页面，只能通过controller来跳转。</span><br><span class="hljs-comment">//这个需要模板引擎的支持！thymeleaf</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> </span>{<br>    <span class="hljs-meta">@RequestMapping("/helloindex")</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li>编写一个测试页面 index.html 放在 templates 目录下<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello Bambi<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    明天更好~~<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p>启动项目请求测试</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071637954.png"></p></li></ol><h3 id="Thymeleaf-语法学习"><a href="#Thymeleaf-语法学习" class="headerlink" title="Thymeleaf 语法学习"></a>Thymeleaf 语法学习</h3><ul><li>要学习语法，还是参考官网文档最为准确，我们找到对应的版本看一下；</li><li>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> ， 简单看一下官网！我们去下载Thymeleaf的官方文档！</li><li><strong>我们做个最简单的练习 ：我们需要查出一些数据，在页面中展示</strong></li></ul><ol><li><p>修改测试请求，增加数据传输。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>{<br>    <span class="hljs-meta">@RequestMapping("/test")</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Model model)</span></span>{<br>        model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"你好呀，bambi！"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。我们可以去官方文档查一下然后把命名空间写进来。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071651730.png"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p>我们去编写下前端页面。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--命名空间的约束--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--所有的html元素都可以被thymeleaf替换接管， th:元素名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${msg}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="4"><li>启动项目进行测试。</li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071652696.png"></p><h2 id="SpringMVC自动配置原理"><a href="#SpringMVC自动配置原理" class="headerlink" title="SpringMVC自动配置原理"></a>SpringMVC自动配置原理</h2><h3 id="官网阅读"><a href="#官网阅读" class="headerlink" title="官网阅读"></a>官网阅读</h3><ul><li><p>在进行项目编写前，我们还需要知道一个东西，就是SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展，如何定制。</p></li><li><p>只有把这些都搞清楚了，我们在之后使用才会更加得心应手。<br>途径一：源码分析；<br>途径二：官方文档！</p></li><li><p>地址 ：<a href="https://docs.spring.io/spring-boot/docs/2.7.4/reference/htmlsingle/#web.servlet.spring-mvc.auto-configuration">https://docs.spring.io/spring-boot/docs/2.7.4/reference/htmlsingle/#web.servlet.spring-mvc.auto-configuration</a></p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Spring MVC自动配置</span><br>Spring MVC Auto-configuration<br><span class="hljs-comment">//Spring Boot为Spring MVC提供了自动配置，在大多数应用程序中都能很好地工作。</span><br>Spring Boot provides auto-configuration <span class="hljs-keyword">for</span> Spring MVC that works well with most applications.<br><span class="hljs-comment">//自动配置在Spring默认配置的基础上添加了以下特性:</span><br>The auto-configuration adds the following features on top of Spring’s defaults:<br><span class="hljs-comment">//包含ContentNegotiatingViewResolver和BeanNameViewResolver bean。</span><br>Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.<br><span class="hljs-comment">//对提供静态资源的支持，包括对webjar的支持(在本文档后面介绍)。</span><br>Support <span class="hljs-keyword">for</span> serving <span class="hljs-keyword">static</span> resources, <span class="hljs-function">including support <span class="hljs-keyword">for</span> <span class="hljs-title">WebJars</span> <span class="hljs-params">(covered later in <span class="hljs-keyword">this</span> document)</span>.</span><br><span class="hljs-function"><span class="hljs-comment">//自动注册Converter、GenericConverter和Formatter bean。</span></span><br><span class="hljs-function">Automatic registration of Converter, GenericConverter, and Formatter beans.</span><br><span class="hljs-function"><span class="hljs-comment">//对HttpMessageConverters的支持(在本文档后面介绍)。</span></span><br><span class="hljs-function">Support <span class="hljs-keyword">for</span> <span class="hljs-title">HttpMessageConverters</span> <span class="hljs-params">(covered later in <span class="hljs-keyword">this</span> document)</span>.</span><br><span class="hljs-function"><span class="hljs-comment">//MessageCodesResolver的自动注册(在本文档后面介绍)。</span></span><br><span class="hljs-function">Automatic registration of <span class="hljs-title">MessageCodesResolver</span> <span class="hljs-params">(covered later in <span class="hljs-keyword">this</span> document)</span>.</span><br><span class="hljs-function"><span class="hljs-comment">//静态index . html的支持。</span></span><br><span class="hljs-function">Static index.html support.</span><br><span class="hljs-function"><span class="hljs-comment">//自动使用ConfigurableWebBindingInitializer bean(在本文档后面介绍)。</span></span><br><span class="hljs-function">Automatic use of a ConfigurableWebBindingInitializer <span class="hljs-title">bean</span> <span class="hljs-params">(covered later in <span class="hljs-keyword">this</span> document)</span>.</span><br><span class="hljs-function"><span class="hljs-comment">//如果你想保留那些Spring Boot MVC定制，并做更多的MVC定制(拦截器、格式化器、视图控制器和其他功能)，你可以添加你自己的WebMvcConfigurer类型的@Configuration类，但不需要@EnableWebMvc。</span></span><br><span class="hljs-function">If you want to keep those Spring Boot MVC customizations and make more MVC <span class="hljs-title">customizations</span> <span class="hljs-params">(interceptors, formatters, view controllers, and other features)</span>, you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc.</span><br><span class="hljs-function"><span class="hljs-comment">//如果你想提供RequestMappingHandlerMapping, RequestMappingHandlerAdapter，或ExceptionHandlerExceptionResolver的自定义实例，并且仍然保持Spring引导MVC的自定义，你可以声明一个WebMvcRegistrations类型的bean，并使用它来提供这些组件的自定义实例。</span></span><br><span class="hljs-function">If you want to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, and still keep the Spring Boot MVC customizations, you can declare a bean of type WebMvcRegistrations and use it to provide custom instances of those components.</span><br><span class="hljs-function"><span class="hljs-comment">//如果你想完全控制Spring MVC，你可以添加你自己的@Configuration，带有@EnableWebMvc注解，或者添加你自己的@Configuration注解的DelegatingWebMvcConfiguration，就像@EnableWebMvc的Javadoc中描述的那样。</span></span><br><span class="hljs-function">If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc, or alternatively add your own @Configuration-annotated DelegatingWebMvcConfiguration as described in the Javadoc of @EnableWebMvc.</span><br></code></pre></td></tr></tbody></table></figure><p>我们来仔细对照，看一下它怎么实现的，它告诉我们SpringBoot已经帮我们自动配置好了SpringMVC，然后自动配置了哪些东西呢？</p><h3 id="ContentNegotiatingViewResolver-内容协商视图解析器"><a href="#ContentNegotiatingViewResolver-内容协商视图解析器" class="headerlink" title="ContentNegotiatingViewResolver 内容协商视图解析器"></a>ContentNegotiatingViewResolver 内容协商视图解析器</h3><p>自动配置了ViewResolver，就是我们之前学习的SpringMVC的视图解析器；</p><p>即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。</p><p>我们去看看这里的源码：我们找到 WebMvcAutoConfiguration ， 然后搜索ContentNegotiatingViewResolver。找到如下方法！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean({ViewResolver.class})</span><br><span class="hljs-meta">@ConditionalOnMissingBean(</span><br><span class="hljs-meta">    name = {"viewResolver"},</span><br><span class="hljs-meta">    value = {ContentNegotiatingViewResolver.class}</span><br><span class="hljs-meta">)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ContentNegotiatingViewResolver <span class="hljs-title">viewResolver</span><span class="hljs-params">(BeanFactory beanFactory)</span> </span>{<br>    ContentNegotiatingViewResolver resolver = <span class="hljs-keyword">new</span> ContentNegotiatingViewResolver();<br>    resolver.setContentNegotiationManager((ContentNegotiationManager)beanFactory.getBean(ContentNegotiationManager.class));<br>    resolver.setOrder(Integer.MIN_VALUE);<br>    <span class="hljs-keyword">return</span> resolver;<br>}<br></code></pre></td></tr></tbody></table></figure><p>我们可以点进ContentNegotiatingViewResolver类看看！找到对应的解析视图的代码；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注解说明：@Nullable 即参数可为null</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>{<br>    RequestAttributes attrs = RequestContextHolder.getRequestAttributes();<br>    Assert.state(attrs <span class="hljs-keyword">instanceof</span> ServletRequestAttributes, <span class="hljs-string">"No current ServletRequestAttributes"</span>);<br>    List&lt;MediaType&gt; requestedMediaTypes = <span class="hljs-keyword">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());<br>    <span class="hljs-keyword">if</span> (requestedMediaTypes != <span class="hljs-keyword">null</span>) {<br>        <span class="hljs-comment">//获取候选的视图对象</span><br>        List&lt;View&gt; candidateViews = <span class="hljs-keyword">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes);<br>        <span class="hljs-comment">//选择一个最适合的视图对象，然后把这个对象返回</span><br>        View bestView = <span class="hljs-keyword">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs);<br>        <span class="hljs-keyword">if</span> (bestView != <span class="hljs-keyword">null</span>) {<br>            <span class="hljs-keyword">return</span> bestView;<br>        }<br>    }<br><br>    String mediaTypeInfo = <span class="hljs-keyword">this</span>.logger.isDebugEnabled() &amp;&amp; requestedMediaTypes != <span class="hljs-keyword">null</span> ? <span class="hljs-string">" given "</span> + requestedMediaTypes.toString() : <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.useNotAcceptableStatusCode) {<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) {<br>            <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Using 406 NOT_ACCEPTABLE"</span> + mediaTypeInfo);<br>        }<br><br>        <span class="hljs-keyword">return</span> NOT_ACCEPTABLE_VIEW;<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"View remains unresolved"</span> + mediaTypeInfo);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>我们继续点进去看，他是怎么获得候选的视图的呢？</p><p>getCandidateViews中看到他是把所有的视图解析器拿来，进行while循环，挨个解析！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;View&gt; <span class="hljs-title">getCandidateViews</span><span class="hljs-params">(String viewName, Locale locale, List&lt;MediaType&gt; requestedMediaTypes)</span> <span class="hljs-keyword">throws</span> Exception </span>{<br>    List&lt;View&gt; candidateViews = <span class="hljs-keyword">new</span> ArrayList();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.viewResolvers != <span class="hljs-keyword">null</span>) {<br>        Assert.state(<span class="hljs-keyword">this</span>.contentNegotiationManager != <span class="hljs-keyword">null</span>, <span class="hljs-string">"No ContentNegotiationManager set"</span>);<br>        <span class="hljs-comment">//遍历所有的视图解析器</span><br>        Iterator var5 = <span class="hljs-keyword">this</span>.viewResolvers.iterator();<br><br>        <span class="hljs-keyword">while</span>(var5.hasNext()) {<br>            ViewResolver viewResolver = (ViewResolver)var5.next();<br>            View view = viewResolver.resolveViewName(viewName, locale);<br>            <span class="hljs-keyword">if</span> (view != <span class="hljs-keyword">null</span>) {<br>                candidateViews.add(view);<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>所以得出结论：<strong>ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的</strong></p><p>我们再去研究下他的组合逻辑，看到有个属性viewResolvers，看看它是在哪里进行赋值的！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initServletContext</span><span class="hljs-params">(ServletContext servletContext)</span> </span>{<br>    Collection&lt;ViewResolver&gt; matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(<span class="hljs-keyword">this</span>.obtainApplicationContext(), ViewResolver.class).values();<br>    ViewResolver viewResolver;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.viewResolvers == <span class="hljs-keyword">null</span>) {<br>        <span class="hljs-comment">//这里它是从beanFactory工具中获取容器中的所有视图解析器</span><br>        <span class="hljs-comment">//ViewRescolver.class 把所有的视图解析器来组合的</span><br>        <span class="hljs-keyword">this</span>.viewResolvers = <span class="hljs-keyword">new</span> ArrayList(matchingBeans.size());<br>        Iterator var3 = matchingBeans.iterator();<br><br>        <span class="hljs-keyword">while</span>(var3.hasNext()) {<br>            viewResolver = (ViewResolver)var3.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != viewResolver) {<br>                <span class="hljs-keyword">this</span>.viewResolvers.add(viewResolver);<br>            }<br>        }<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.viewResolvers.size(); ++i) {<br>            viewResolver = (ViewResolver)<span class="hljs-keyword">this</span>.viewResolvers.get(i);<br>            <span class="hljs-keyword">if</span> (!matchingBeans.contains(viewResolver)) {<br>                String name = viewResolver.getClass().getName() + i;<br>                <span class="hljs-keyword">this</span>.obtainApplicationContext().getAutowireCapableBeanFactory().initializeBean(viewResolver, name);<br>            }<br>        }<br>    }<br><br>    AnnotationAwareOrderComparator.sort(<span class="hljs-keyword">this</span>.viewResolvers);<br>    <span class="hljs-keyword">this</span>.cnmFactoryBean.setServletContext(servletContext);<br>}<br></code></pre></td></tr></tbody></table></figure><p>既然它是在容器中去找视图解析器，我们是否可以猜想，我们就可以去实现一个视图解析器了呢？</p><p>我们可以自己给容器中去添加一个视图解析器；这个类就会帮我们自动的将它组合进来；<strong>我们去实现一下</strong></p><ol><li>我们在我们的主程序中去写一个视图解析器来试试；<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.View;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ViewResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>{<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title">MyViewResolver</span><span class="hljs-params">()</span></span>{<br>        <span class="hljs-keyword">return</span> MyViewResolver();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyViewResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ViewResolver</span> </span>{<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>怎么看我们自己写的视图解析器有没有起作用呢？<br>我们给 DispatcherServlet 中的 doDispatch方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中。<br><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071832103.png"></p></li><li><p>我们启动我们的项目，然后随便访问一个页面，看一下Debug信息；</p><p>刚开始这样写之后，我本地debug还没进到doDispatch的断点，项目就报错了。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'MyViewResolver' defined in class path resource [com/cutiebambi/config/MyMvcConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.ViewResolver]: Factory method 'MyViewResolver' threw exception; nested exception is java.lang.StackOverflowError<br></code></pre></td></tr></tbody></table></figure><p>后来经过琢磨，把MyMvcConfig改成下面这样之后，程序就可以正常启动了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果你想diy一些定制化的功能，只要写这个组件，然后将它交给springboot, springboot就会帮我们自动装配。</span><br><span class="hljs-comment">//这个注解表明这是扩展的SpringMVC</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>{<br>    <span class="hljs-comment">//ViewResolver 实现了视图解析器接口的类，我们就可以把它看作是视图解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title">MyViewResolver</span><span class="hljs-params">()</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyViewResolver();<br>    }<br>}<br><br><span class="hljs-comment">//自定义一个自己的视图解析器，MyViewResolver</span><br><span class="hljs-comment">//把这个从上面挪下来</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyViewResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ViewResolver</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><p>   找到this</p><p>   <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071910057.png"></p><p>   找到视图解析器viewResolvers，我们看到我们自己定义的视图解析器也在这里了^-^</p><p>   <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071910474.png"></p><p>   所以说，我们如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情SpringBoot就会帮我们做了！</p><h3 id="转换器和格式化器"><a href="#转换器和格式化器" class="headerlink" title="转换器和格式化器"></a>转换器和格式化器</h3><ul><li><p>在WebMvcAutoConfiguration.java中找到格式化转换器：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FormattingConversionService <span class="hljs-title">mvcConversionService</span><span class="hljs-params">()</span> </span>{<br>    WebMvcProperties.Format format = <span class="hljs-keyword">this</span>.mvcProperties.getFormat();<br>    <span class="hljs-comment">//拿到配置文件中的格式化规则</span><br>    WebConversionService conversionService = <span class="hljs-keyword">new</span> WebConversionService((<span class="hljs-keyword">new</span> DateTimeFormatters()).dateFormat(format.getDate()).timeFormat(format.getTime()).dateTimeFormat(format.getDateTime()));<br>    <span class="hljs-keyword">this</span>.addFormatters(conversionService);<br>    <span class="hljs-keyword">return</span> conversionService;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>点进去：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> DateTimeFormatters <span class="hljs-title">dateFormat</span><span class="hljs-params">(String pattern)</span> </span>{<br>    <span class="hljs-keyword">if</span> (isIso(pattern)) {<br>        <span class="hljs-keyword">this</span>.dateFormatter = DateTimeFormatter.ISO_LOCAL_DATE;<br>        <span class="hljs-keyword">this</span>.datePattern = <span class="hljs-string">"yyyy-MM-dd"</span>;<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">this</span>.dateFormatter = formatter(pattern);<br>        <span class="hljs-keyword">this</span>.datePattern = pattern;<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li>可以看到在我们的Properties文件中，我们可以进行自动配置它！</li><li>如果配置了自己的格式化方式，就会注册到Bean中生效，我们可以在配置文件中配置日期格式化的规则：</li></ul><h3 id="修改SpringBoot的默认配置"><a href="#修改SpringBoot的默认配置" class="headerlink" title="修改SpringBoot的默认配置"></a>修改SpringBoot的默认配置</h3><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><p>这么多的自动配置，原理都是一样的，通过这个WebMVC的自动配置原理分析，我们要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。</p><p>SpringBoot的底层，大量用到了这些设计细节思想，所以，没事需要多阅读源码！得出结论；</p><p>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；</p><p>如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</p><h4 id="方式二：扩展使用Spring-MVC"><a href="#方式二：扩展使用Spring-MVC" class="headerlink" title="方式二：扩展使用Spring MVC"></a>方式二：扩展使用Spring MVC</h4><p>官方文档如下：</p><p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p><p>我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；我们去自己写一个；我们新建一个包叫config，写一个类MyMvcConfig；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.View;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ViewResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">//如果你想diy一些定制化的功能，只要写这个组件，然后将它交给springboot, springboot就会帮我们自动装配。</span><br><span class="hljs-comment">//扩展spring mvc</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>{<br>        <span class="hljs-comment">//只需要访问 http://localhost:8080/bambi  就可以跳转到index.html</span><br>        registry.addViewController(<span class="hljs-string">"/bambi"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>我们去浏览器访问一下：</li></ul><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071941989.png"></p><ul><li>经过验证，<strong>确实跳转过来了！所以说，我们要扩展SpringMVC，官方推荐我们这么去使用，既保留了SpringBoot所有的自动配置，也能用我们扩展的配置！</strong></li></ul><h4 id="分析原理："><a href="#分析原理：" class="headerlink" title="分析原理："></a>分析原理：</h4><p>1、WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter</p><p>2、这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071946923.png"></p><p>3、我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210071947922.png"></p><p>这个父类中有这样一段代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WebMvcConfigurerComposite configurers = <span class="hljs-keyword">new</span> WebMvcConfigurerComposite();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-meta">@Autowired(</span><br><span class="hljs-meta">        required = false</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-comment">//从容器中获取所有的Webmvc Configurer</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigurers</span><span class="hljs-params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>{<br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(configurers)) {<br>            <span class="hljs-keyword">this</span>.configurers.addWebMvcConfigurers(configurers);<br>        }<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>4、我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>{<br>    <span class="hljs-keyword">this</span>.configurers.addViewControllers(registry);<br>}<br></code></pre></td></tr></tbody></table></figure><p>5、我们点进去看一下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>{<br>    Iterator var2 = <span class="hljs-keyword">this</span>.delegates.iterator();<br><br>    <span class="hljs-keyword">while</span>(var2.hasNext()) {<br>        <span class="hljs-comment">//将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的</span><br>        WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();<br>        delegate.addViewControllers(registry);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>所以得出结论：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p><h3 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a>全面接管SpringMVC</h3><h4 id="测试加上-EnableWebMvc之后会发生什么？"><a href="#测试加上-EnableWebMvc之后会发生什么？" class="headerlink" title="测试加上@EnableWebMvc之后会发生什么？"></a>测试加上@EnableWebMvc之后会发生什么？</h4><ul><li><p>官方文档：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果你想完全控制Spring MVC，你可以添加你自己的@Configuration，带有@EnableWebMvc注解，或者添加你自己的@Configuration注解的DelegatingWebMvcConfiguration，就像@EnableWebMvc的Javadoc中描述的那样。</span><br>If you want to take complete control of Spring MVC, you can add your own <span class="hljs-meta">@Configuration</span> annotated with <span class="hljs-meta">@EnableWebMvc</span>, or alternatively add your own <span class="hljs-meta">@Configuration</span>-annotated DelegatingWebMvcConfiguration as described in the Javadoc of <span class="hljs-meta">@EnableWebMvc</span>.<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！</p></li><li><p>只需在我们的配置类中要加一个@EnableWebMvc。</p></li><li><p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射会不会无效，我们可以去测试一下；</p></li><li><p>不加注解之前，访问静态资源：</p><p>在工程static下添加一个静态资源</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210081125289.png"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html;charset=utf-8"</span>/&gt;</span><span class="hljs-comment">&lt;!-- 不加这行代码，文本中的汉字会乱码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hello bambi,我是静态资源~<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210081120596.png"></p><ul><li>给配置类加上注解：@EnableWebMvc</li></ul><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210081121773.png"></p><ul><li>我们发现所有的SpringMVC自动配置都失效了！访问不到静态资源了；</li><li><strong>当然，我们开发中，不推荐使用全面接管SpringMVC</strong></li></ul><h4 id="思考：为什么加了一个注解，自动配置就失效了？"><a href="#思考：为什么加了一个注解，自动配置就失效了？" class="headerlink" title="思考：为什么加了一个注解，自动配置就失效了？"></a>思考：为什么加了一个注解，自动配置就失效了？</h4><ol><li><p>查看代码，加上@EnableWebMvc其实就是导入了一个类: DelegatingWebMvcConfiguration, DelegatingWebMvcConfiguration类的作用是从容器中获取所有的WebMvcConfigurer。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target({ElementType.TYPE})</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import({DelegatingWebMvcConfiguration.class})</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc {<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(</span><br><span class="hljs-meta">    proxyBeanMethods = false</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WebMvcConfigurerComposite configurers = <span class="hljs-keyword">new</span> WebMvcConfigurerComposite();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-meta">@Autowired(</span><br><span class="hljs-meta">        required = false</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigurers</span><span class="hljs-params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>{<br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(configurers)) {<br>            <span class="hljs-keyword">this</span>.configurers.addWebMvcConfigurers(configurers);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>DelegatingWebMvcConfiguration继承了一个父类 WebMvcConfigurationSupport</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span></span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li>我们再来看一下Webmvc自动配置类 (WebMvcAutoConfiguration)的代码。只有当不存在WebMvcConfigurationSupport的时候才会生效，加了@EnableWebMvc之后就相当于是自动引入了WebMvcAutoConfiguration类，所以Spring Boot的自动配置类就会失效。</li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210081134780.png"></p><p>总结：@EnableWebMvc将WebMvcConfigurationSupport组件导入进来了；而导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能！这个WebMvcConfigurationSupport进来之后，就使WebMvcAutoConfiguration这个类不满足条件，导致自动配置类失效！<br><strong>在SpringBoot中会有非常多的扩展配置，只要看见了这个，我们就应该多留心注意~</strong></p><h2 id="一个简单的员工管理系统"><a href="#一个简单的员工管理系统" class="headerlink" title="一个简单的员工管理系统"></a>一个简单的员工管理系统</h2><h2 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>导入lombok依赖</p><p>Lombok官网: <a href="https://www.projectlombok.org/">https://www.projectlombok.org/</a></p><p>Lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码。仅五个字符(@Data)就可以替换数百行代码从而产生干净，简洁且易于维护的Java类。用在实体类中，用注解生成构造方法，get/set，等方法</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>@Data：注解在类，生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法</p></li><li><p>模拟DB中的数据，编写部门和员工的实体类以及对应的Dao。</p><ul><li><p>部门表实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">//部门表</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> </span>{<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String departmentName;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>部门表Dao层</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.dao;<br><br><span class="hljs-keyword">import</span> com.cutiebambi.pojo.Department;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//部门dao</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DepartmentDao</span> </span>{<br>    <span class="hljs-comment">//模拟数据库中的数据</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Department&gt; departments = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span>{<br>        <span class="hljs-comment">//创建一个部门表</span><br>        departments = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Department&gt;();<br><br>        departments.put(<span class="hljs-number">101</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">101</span>, <span class="hljs-string">"教学部"</span>));<br>        departments.put(<span class="hljs-number">102</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">102</span>, <span class="hljs-string">"市场部"</span>));<br>        departments.put(<span class="hljs-number">103</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">103</span>, <span class="hljs-string">"教研部"</span>));<br>        departments.put(<span class="hljs-number">104</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">104</span>, <span class="hljs-string">"运营部"</span>));<br>        departments.put(<span class="hljs-number">105</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">105</span>, <span class="hljs-string">"后勤部"</span>));<br>    }<br><br>    <span class="hljs-comment">//获取所有部门信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;Department&gt; <span class="hljs-title">getDepartments</span><span class="hljs-params">()</span></span>{<br>        <span class="hljs-keyword">return</span> departments.values();<br>    }<br><br>    <span class="hljs-comment">//根据id获取单个部门信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDepartmentById</span><span class="hljs-params">(Integer id)</span></span>{<br>        <span class="hljs-keyword">return</span> departments.get(id);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><ul><li>员工表实体类<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">//员工表</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>{<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Integer gender; <span class="hljs-comment">//0:女 1:男</span><br><br>    <span class="hljs-keyword">private</span> Department department;<br>    <span class="hljs-keyword">private</span> Date birth;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(Integer id, String lastName, String email, Integer gender, Department department)</span> </span>{<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.lastName = lastName;<br>        <span class="hljs-keyword">this</span>.email = email;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.department = department;<br>        <span class="hljs-keyword">this</span>.birth = <span class="hljs-keyword">new</span> Date();<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> id;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>{<br>        <span class="hljs-keyword">this</span>.id = id;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getLastName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> lastName;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLastName</span><span class="hljs-params">(String lastName)</span> </span>{<br>        <span class="hljs-keyword">this</span>.lastName = lastName;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> email;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>{<br>        <span class="hljs-keyword">this</span>.email = email;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getGender</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> gender;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(Integer gender)</span> </span>{<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDepartment</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> department;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDepartment</span><span class="hljs-params">(Department department)</span> </span>{<br>        <span class="hljs-keyword">this</span>.department = department;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirth</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> birth;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirth</span><span class="hljs-params">(Date birth)</span> </span>{<br>        <span class="hljs-keyword">this</span>.birth = birth;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li>员工表Dao层<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.dao;<br><br><span class="hljs-keyword">import</span> com.cutiebambi.pojo.Department;<br><span class="hljs-keyword">import</span> com.cutiebambi.pojo.Employee;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//员工dao</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeDao</span> </span>{<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//Field injection is not recommended</span><br>    <span class="hljs-keyword">private</span> DepartmentDao departmentDao;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Integer id = <span class="hljs-number">1006</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">//模拟DB中的数据</span><br>    <span class="hljs-keyword">static</span>{<br>        <span class="hljs-comment">//创建一个员工表(自己写的时候，把这一行没写，直接用employees call put方法了。差点弄出来空指针异常了)</span><br>        employees = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Employee&gt;();<br><br>        employees.put(<span class="hljs-number">1001</span>, <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1001</span>, <span class="hljs-string">"summer"</span>, <span class="hljs-string">"1@lucky.com"</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">101</span>, <span class="hljs-string">"教学部"</span>)));<br>        employees.put(<span class="hljs-number">1002</span>, <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1002</span>, <span class="hljs-string">"jack"</span>, <span class="hljs-string">"2@lucky.com"</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">101</span>, <span class="hljs-string">"市场部"</span>)));<br>        employees.put(<span class="hljs-number">1003</span>, <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1003</span>, <span class="hljs-string">"cecil"</span>, <span class="hljs-string">"3@lucky.com"</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">101</span>, <span class="hljs-string">"教研部"</span>)));<br>        employees.put(<span class="hljs-number">1004</span>, <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1004</span>, <span class="hljs-string">"roy"</span>, <span class="hljs-string">"4@lucky.com"</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">101</span>, <span class="hljs-string">"运营部"</span>)));<br>        employees.put(<span class="hljs-number">1005</span>, <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1005</span>, <span class="hljs-string">"cara"</span>, <span class="hljs-string">"5@lucky.com"</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">101</span>, <span class="hljs-string">"后勤部"</span>)));<br>    }<br><br>    <span class="hljs-comment">//增加一个员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEmployee</span><span class="hljs-params">(Employee employee)</span></span>{<br>        <span class="hljs-comment">//Integer id = 1006;//这行代码不能写在这里，要不每一次新增员工的时候，id都是从1006开始了！又是我犯的一个错误</span><br>        <span class="hljs-keyword">if</span>(employee.getId() == <span class="hljs-keyword">null</span>){<br>            employee.setId(id++);<br>        }<br>        employees.put(employee.getId(), employee);<br>    }<br><br>    <span class="hljs-comment">//查询全部员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;Employee&gt; <span class="hljs-title">getEmployees</span><span class="hljs-params">()</span></span>{<br>        <span class="hljs-keyword">return</span> employees.values();<br>    }<br><br>    <span class="hljs-comment">//根据id查询员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmployeeById</span><span class="hljs-params">(Integer id)</span></span>{<br>        <span class="hljs-keyword">return</span> employees.get(id);<br>    }<br><br>    <span class="hljs-comment">//删除员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeEmployeeById</span><span class="hljs-params">(Integer id)</span></span>{<br>        employees.remove(id);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="首页实现"><a href="#首页实现" class="headerlink" title="首页实现"></a>首页实现</h2><ul><li><p>实现通过localhost:8080或者localhost:8080/index进入首页的功能</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>{<br>        <span class="hljs-comment">//只需要访问http://localhost:8080/或者http://localhost:8080/index就可以跳转到index.html页面</span><br>        registry.addViewController(<span class="hljs-string">"/"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        registry.addViewController(<span class="hljs-string">"/index"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>所有的静态资源导入都需要使用Thymeleaf接管。所以：</p><ol><li>要先给静态资源导入Thymeleaf命名空间。<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol></li></ul><ol start="2"><li><p>按照Thymeleaf的语法规则，修改静态资源文件。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Bootstrap core CSS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@{/css/bootstrap.min.css}"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Custom styles for this template --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@{/css/signin.css}"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-4"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@{/img/bootstrap-solid.svg}"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"72"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"72"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>修改这里的时候有遇到下面这个问题。</strong>之前中英文我写的href是@{/index.html}，但是点击中文或者English的超链接的时候一直报错，导致国际化一直跳转失败。后来把href改为@{/index}问题才得以解决。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary btn-block"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span> [[#{login.signIn}]] <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2022-2023<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@{/index(l='zh_CN')}"</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@{/index(l='en_US')}"</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 之前这样写的，点击之后总是跳转到error页面</span><br><span class="hljs-comment">&lt;a class="btn btn-sm" th:href="@{/index.html(l='zh_CN')}"&gt;中文&lt;/a&gt;</span><br><span class="hljs-comment">&lt;a class="btn btn-sm" th:href="@{/index.html(l='en_US')}"&gt;English&lt;/a&gt;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>后来经过思考，发现如果改一下自定义Config，就可以通过href访问到/index.html页面了。<strong>但是至于为什么这个可以，我还不知道底层原理，后面知道了之后再补充到这里</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>{<br>        registry.addViewController(<span class="hljs-string">"/"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        registry.addViewController(<span class="hljs-string">"/index"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        <span class="hljs-comment">//加上这行代码，上面的html就可以写成th:href="@{/index.html(l='en_US')}然后也能正常跳转了。</span><br>        registry.addViewController(<span class="hljs-string">"/index.html"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><pre><code class="hljs"> ![](https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210090836775.png) ![](https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210090836715.png)</code></pre><ul><li>关闭模板引擎的缓存<figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="页面国际化"><a href="#页面国际化" class="headerlink" title="页面国际化"></a>页面国际化</h2><h3 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li><p>先在IDEA中统一设置properties的编码问题！</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210090952395.png"></p></li></ul><h3 id="配置文件编写"><a href="#配置文件编写" class="headerlink" title="配置文件编写"></a>配置文件编写</h3><ul><li><p>我们在resources资源文件下新建一个i18n目录，存放国际化配置文件</p><ul><li><p>建立一个login.properties文件，还有一个login_zh_CN.properties；发现IDEA自动识别了我们要做国际化操作；文件夹变了！<br><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210090956477.png"></p><p>接着可以直接在Resource Bundle上右键，添加en_US国际化配置文件</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210090956942.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210090957717.png"></p><p><strong>接下来，我们就来编写国际化配置文件，我们可以看到idea下面有另外一个视图；</strong></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091001018.png"></p><ul><li>如果你的IDEA没有这个视图，那么去plugins里面下载如下插件，下载完之后页面就会显示Resource Bundle视图。<br><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091000847.png"></li></ul></li></ul></li></ul><h3 id="配置文件生效探究"><a href="#配置文件生效探究" class="headerlink" title="配置文件生效探究"></a>配置文件生效探究</h3><ul><li><p>我们去看一下SpringBoot对国际化的自动配置！这里又涉及到一个类：MessageSourceAutoConfiguration</p></li><li><p>里面有一个方法，这里发现SpringBoot已经自动配置好了管理我们国际化资源文件(就是在i8n文件夹下的文件)的组件 ResourceBundleMessageSource； （这个东西是识别国际化配置信息文件里的信息）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> MessageSource <span class="hljs-title">messageSource</span><span class="hljs-params">(MessageSourceProperties properties)</span> </span>{<br>    ResourceBundleMessageSource messageSource = <span class="hljs-keyword">new</span> ResourceBundleMessageSource();<br>    <span class="hljs-comment">//如果你配置了basename，那么就会用你配置的basename路径</span><br>    <span class="hljs-keyword">if</span> (StringUtils.hasText(properties.getBasename())) {<br>        messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));<br>    }<br><br>    <span class="hljs-keyword">if</span> (properties.getEncoding() != <span class="hljs-keyword">null</span>) {<br>        messageSource.setDefaultEncoding(properties.getEncoding().name());<br>    }<br><br>    messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());<br>    Duration cacheDuration = properties.getCacheDuration();<br>    <span class="hljs-keyword">if</span> (cacheDuration != <span class="hljs-keyword">null</span>) {<br>        messageSource.setCacheMillis(cacheDuration.toMillis());<br>    }<br><br>    messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());<br>    messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());<br>    <span class="hljs-keyword">return</span> messageSource;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>我们项目的国际化文件在i18n下面，所以配置我们的basename为i18n.login<figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">messages:</span><br>    <span class="hljs-attr">basename:</span> <span class="hljs-string">i18n.login</span><br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><p>  <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091009498.png"></p><h3 id="配置页面国际化值"><a href="#配置页面国际化值" class="headerlink" title="配置页面国际化值"></a>配置页面国际化值</h3><ul><li>去页面获取国际化的值，查看Thymeleaf的文档，找到message取值操作为：#{…}。<br><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091014916.png"></li></ul><h3 id="配置国际化解析"><a href="#配置国际化解析" class="headerlink" title="配置国际化解析"></a>配置国际化解析</h3><ul><li><p>在Spring中有一个国际化的Locale （区域信息对象）；里面有一个叫做LocaleResolver （获取区域信息对象）的解析器！</p></li><li><p>我们去我们webmvc（WebMvcAutoConfiguration.java）自动配置文件，寻找一下！看到SpringBoot默认配置：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(</span><br><span class="hljs-meta">    name = {"localeResolver"} //不存在localeResolver的时候，走这个bean设置默认Locale</span><br><span class="hljs-meta">)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.webProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.WebProperties.LocaleResolver.FIXED) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FixedLocaleResolver(<span class="hljs-keyword">this</span>.webProperties.getLocale());<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-comment">//接收端国际化分解</span><br>        AcceptHeaderLocaleResolver localeResolver = <span class="hljs-keyword">new</span> AcceptHeaderLocaleResolver();<br>        localeResolver.setDefaultLocale(<span class="hljs-keyword">this</span>.webProperties.getLocale());<br>        <span class="hljs-keyword">return</span> localeResolver;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>点进去AcceptHeaderLocaleResolver（这是源码给的一个国际化（地区）解析器，我们也可以参考这个写一个自己的国际化解析器）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> </span>{<br>    Locale defaultLocale = <span class="hljs-keyword">this</span>.getDefaultLocale();<br>    <span class="hljs-keyword">if</span> (defaultLocale != <span class="hljs-keyword">null</span> &amp;&amp; request.getHeader(<span class="hljs-string">"Accept-Language"</span>) == <span class="hljs-keyword">null</span>) {<br>        <span class="hljs-keyword">return</span> defaultLocale;<br>    } <span class="hljs-keyword">else</span> {<br>        Locale requestLocale = request.getLocale();<br>        List&lt;Locale&gt; supportedLocales = <span class="hljs-keyword">this</span>.getSupportedLocales();<br>        <span class="hljs-keyword">if</span> (!supportedLocales.isEmpty() &amp;&amp; !supportedLocales.contains(requestLocale)) {<br>            Locale supportedLocale = <span class="hljs-keyword">this</span>.findSupportedLocale(request, supportedLocales);<br>            <span class="hljs-keyword">if</span> (supportedLocale != <span class="hljs-keyword">null</span>) {<br>                <span class="hljs-keyword">return</span> supportedLocale;<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">return</span> defaultLocale != <span class="hljs-keyword">null</span> ? defaultLocale : requestLocale;<br>            }<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">return</span> requestLocale;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><p>自己的国际化解析器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.config;<br><br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LocaleResolver</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> </span>{<br>        String language = request.getParameter(<span class="hljs-string">"lang"</span>);<br><br>        Locale requestLocale = Locale.getDefault();<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(language)){<br>            String[] s = StringUtils.split(language, <span class="hljs-string">"_"</span>);<br>            requestLocale = <span class="hljs-keyword">new</span> Locale(s[<span class="hljs-number">0</span>], s[<span class="hljs-number">1</span>]);<br>        }<br>        <span class="hljs-keyword">return</span> requestLocale;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLocale</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>{<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><ul><li>请求端携带上lang参数<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@{/index(lang='zh_CN')}"</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@{/index(lang='en_US')}"</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>将自己写的国际化解析器放进Spring Boot里面</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这样做之后，自己写的国际化组件就生效了</span><br><span class="hljs-meta">@Bean</span><span class="hljs-comment">//注入自己写的国际化组件</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span></span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyLocaleResolver();<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试自己的代码</p><p>点击英文</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091027975.png"></p><p>点击中文</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091028653.png"></p></li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>页面国家化步骤：</p><ul><li>我们需要配置i18n文件，并在application.properties配置文件中绑定，之后在对应的html中用thymeleaf获取（获取国家化信息使用#{} ，链接url是@{} ，变量${}）<ul><li>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> </li></ul></li><li>如果我们需要在项目中进行按钮自动切换，我们需要自己定义一个组件MyLocalResolver继承LocaleResolver</li><li>记得将自己写的组件配置到spring容器中，@Bean</li></ul><h2 id="登录功能与拦截器"><a href="#登录功能与拦截器" class="headerlink" title="登录功能与拦截器"></a>登录功能与拦截器</h2><h3 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h3><ul><li><p>LoginController</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>{<br>    <span class="hljs-meta">@RequestMapping("/user/login")</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = "userName")</span> String userName, <span class="hljs-meta">@RequestParam(name = "password")</span> String password, Model model, HttpSession session)</span></span>{<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(userName) &amp;&amp; password.equals(<span class="hljs-string">"1"</span>)){<br>            session.setAttribute(<span class="hljs-string">"loginUser"</span>, userName);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/main.html"</span>; <span class="hljs-comment">//重定向</span><br>        }<span class="hljs-keyword">else</span>{<br>            model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"用户名或密码错误，登录失败"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>MyMvcConfig</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>{<br>        <span class="hljs-comment">//只需要访问http://localhost:8080/或者http://localhost:8080/index就可以跳转到index.html页面</span><br>        registry.addViewController(<span class="hljs-string">"/"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        registry.addViewController(<span class="hljs-string">"/index"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        registry.addViewController(<span class="hljs-string">"/index.html"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        registry.addViewController(<span class="hljs-string">"/main.html"</span>).setViewName(<span class="hljs-string">"dashboard"</span>);<br>    }<br><br>    <span class="hljs-comment">//将自定义的国际化组件放进Spring Boot里。</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyLocaleResolver();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>index.html</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 修改form表单action --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-signin"</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">"@{/user/login}"</span>&gt;</span><br>        ...<br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary btn-block"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span> [[#{login.signIn}]] <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2022-2023<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@{/index(lang='zh_CN')}"</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@{/index(lang='en_US')}"</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>将登录之后的左上角名字显示为登录的用户名</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-brand col-sm-3 col-md-2 mr-0"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://getbootstrap.com/docs/4.0/examples/dashboard/#"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${session.loginUser}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li>验证结果</li></ul><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091454687.png"></p><h3 id="拦截器功能实现"><a href="#拦截器功能实现" class="headerlink" title="拦截器功能实现"></a>拦截器功能实现</h3><ul><li><p>LoginHandlerInterceptor</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.config;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.server.Session;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandlerInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>{<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        //我写的代码</span><br><span class="hljs-comment">        if(!StringUtils.isEmpty(request.getParameter("userName")) &amp;&amp; request.getParameter("password").equals("1")){</span><br><span class="hljs-comment">            return true;</span><br><span class="hljs-comment">        }else{</span><br><span class="hljs-comment">            return false;</span><br><span class="hljs-comment">        }</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//老师的代码</span><br>        HttpSession session = request.getSession();<br>        <span class="hljs-keyword">if</span>(session.getAttribute(<span class="hljs-string">"loginUser"</span>) != <span class="hljs-keyword">null</span>){<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        }<span class="hljs-keyword">else</span> {<br>            session.setAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"用户名或者密码错误，我是从拦截器过来的提示信息"</span>);<span class="hljs-comment">// 感觉加上这行没什么作用</span><br>            request.getRequestDispatcher(<span class="hljs-string">"/index.html"</span>).forward(request,response);<span class="hljs-comment">//转发到index.html 显示提示信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li>MyMvcConfig<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>{<br>        <span class="hljs-comment">//只需要访问http://localhost:8080/或者http://localhost:8080/index就可以跳转到index.html页面</span><br>        registry.addViewController(<span class="hljs-string">"/"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        registry.addViewController(<span class="hljs-string">"/index"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        registry.addViewController(<span class="hljs-string">"/index.html"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        registry.addViewController(<span class="hljs-string">"/main.html"</span>).setViewName(<span class="hljs-string">"dashboard"</span>);<br>    }<br><br>    <span class="hljs-comment">//将自定义的国际化组件放进Spring Boot里。</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyLocaleResolver();<br>    }<br><br>    <span class="hljs-comment">//拦截器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>{<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="hljs-string">"/**"</span>).excludePathPatterns(<span class="hljs-string">"/"</span>, <span class="hljs-string">"/index.html"</span>, <span class="hljs-string">"/user/login"</span>, <span class="hljs-string">"/img/**"</span>, <span class="hljs-string">"/css/**"</span>, <span class="hljs-string">"/js/**"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="展示员工列表"><a href="#展示员工列表" class="headerlink" title="展示员工列表"></a>展示员工列表</h2><h3 id="将公共代码抽取存放在commons-html里面"><a href="#将公共代码抽取存放在commons-html里面" class="headerlink" title="将公共代码抽取存放在commons.html里面"></a>将公共代码抽取存放在commons.html里面</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091744055.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091744203.png"></p><h3 id="点击员工管理按钮-实现从后台获取员工列表数据并且在前台页面展示"><a href="#点击员工管理按钮-实现从后台获取员工列表数据并且在前台页面展示" class="headerlink" title="点击员工管理按钮,  实现从后台获取员工列表数据并且在前台页面展示"></a>点击员工管理按钮,  实现从后台获取员工列表数据并且在前台页面展示</h3><ul><li>新建一个EmployeeController</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cutiebambi.controller;<br><br><span class="hljs-keyword">import</span> com.cutiebambi.dao.EmployeeDao;<br><span class="hljs-keyword">import</span> com.cutiebambi.pojo.Employee;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeController</span> </span>{<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmployeeDao employeeDao;<br><br>    <span class="hljs-meta">@RequestMapping("/employee/getEmployees")</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmployees</span><span class="hljs-params">(Model model)</span></span>{<br>        Collection&lt;Employee&gt; employees = employeeDao.getEmployees();<br>        model.addAttribute(<span class="hljs-string">"emps"</span>, employees);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/emp/list"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>点击前台’员工管理’tab，调用这个方法</li></ul><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091748306.png"></p><ul><li>前台接收并且解析获取到的数据<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 侧边栏 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">"~{/commons/commons.html :: sidebar(active='list.html')}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"main"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Section title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-responsive"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table table-striped table-sm"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>lastName<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>gender<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>department<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>birth<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>action<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">"employee : ${emps}"</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${employee.getId()}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${employee.getLastName()}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${employee.getEmail()}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 这里使用了三元运算符 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${employee.getGender()} == 0? '女' : '男'"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${employee.getDepartment().getDepartmentName()}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 格式化日期 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${#calendars.format(employee.getBirth(),'yyyy/MM/dd HH:mm:ss')}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm btn-primary"</span>&gt;</span>增加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm btn-danger"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="侧边栏：根据点击的tab不同来实现动态高亮"><a href="#侧边栏：根据点击的tab不同来实现动态高亮" class="headerlink" title="侧边栏：根据点击的tab不同来实现动态高亮"></a>侧边栏：根据点击的tab不同来实现动态高亮</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091751551.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091751261.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202210091752792.png"></p><h2 id="添加，修改与删除员工"><a href="#添加，修改与删除员工" class="headerlink" title="添加，修改与删除员工"></a>添加，修改与删除员工</h2><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p><a href="https://blog.csdn.net/wang_luwei/article/details/123652585">https://blog.csdn.net/wang_luwei/article/details/123652585</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CS61A</title>
    <link href="/posts/e7a99a5e.html"/>
    <url>/posts/e7a99a5e.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="Week1-0826"><a href="#Week1-0826" class="headerlink" title="Week1-0826"></a>Week1-0826</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><code>ls</code>: <strong>l</strong>i<strong>s</strong>ts all files in the current directory</li><li><code>cd &lt;path to directory&gt;</code>: <strong>c</strong>hange into the specified <strong>d</strong>irectory</li><li><code>mkdir &lt;directory name&gt;</code>: <strong>m</strong>a<strong>k</strong>e a new <strong>dir</strong>ectory with the given name</li><li><code>mv &lt;source path&gt; &lt;destination path&gt;</code>: <strong>m</strong>o<strong>v</strong>e the file at the given source to the given destination</li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301141820875.png"></p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><ul><li>$ cd C:/Users/cutiebambi/Desktop</li></ul><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301141826521.png"></p><ul><li><p>$ cd ..：跳转到上级目录</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301141835874.png"></p></li><li><p>$ cd <del>：</del>这个的意思是home directory，所以cd ~意思就是跳转到你的home directory</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301141834625.png"></p></li><li><p>$ cd：这是cd ~的一个缩写方式</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301141835877.png"></p></li></ul><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>$ mkdir 20230114</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301141844524.png"></p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>$ mv d:/20230114 d:/dest</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301141849384.png"></p><p>Python Basics</p><p>浮点除法 (/)：将第一个数字除以第二个数字，计算结果为带小数点的数字，即使数字被整除也是如此。 </p><p>整除法 (//)：将第一个数字除以第二个数字，然后向下舍入，计算结果为整数。 </p><p>模 (%)：计算除法剩余的正余数。</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML5</title>
    <link href="/posts/98f3a6d9.html"/>
    <url>/posts/98f3a6d9.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h1><p><strong>HTML</strong></p><p>Hyper Text Markup Language(超文本标记语言)</p><p>HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。</p><p><strong>W3C</strong></p><p>World Wide Web Consortium(万维网联盟)</p><p>万维网联盟创建于1994年，是Web技术领域最具权威和影响力的国际中立性技术标准机构。W3C已发布了200多项影响深远的Web技术标准及实施指南，如广为业界采用的超文本标记语言HTML（标准通用标记语言下的一个应用）、可扩展标记语言XML（标准通用标记语言下的一个子集）以及帮助残障人士有效获得Web信息的无障碍指南（WCAG）等，有效促进了Web技术的互相兼容，对互联网技术的发展和应用起到了基础性和根本性的支撑作用。</p><h1 id="网页基本信息"><a href="#网页基本信息" class="headerlink" title="网页基本信息"></a>网页基本信息</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- DOCTYPE: 告诉浏览器，我们要使用什么规范 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- head: 代表网页头部 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- meta: 描述性标签，用来描述我们网站的一些信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- title: 网页标题   --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的第一个HTML网页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- body: 代表网页主体 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>你好，bambi<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212201648554.png"></p><h1 id="网页基本标签"><a href="#网页基本标签" class="headerlink" title="网页基本标签"></a>网页基本标签</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--标题标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>h2标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>h2标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>h2标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>h2标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><span class="hljs-comment">&lt;!--段落标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    这是一个段落标签<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--换行标签--&gt;</span><br>这是一个换行<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>标签<br><span class="hljs-comment">&lt;!--水平线标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!--字体样式标签-粗体--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>hope to see you on the top<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-comment">&lt;!--字体样式标签-斜体--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>boun prem<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-comment">&lt;!--特殊符号-空格--&gt;</span><br>你<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>好<br><span class="hljs-comment">&lt;!--特殊符号-大于--&gt;</span><br><span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-comment">&lt;!--特殊符号-小于--&gt;</span><br><span class="hljs-symbol">&amp;lt;</span><br><span class="hljs-comment">&lt;!--特殊符号-版权所有--&gt;</span><br><span class="hljs-symbol">&amp;copy;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212201728159.png"></p><h1 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h1><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212201740835.png"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"resources/image/5.png"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"海绵宝宝"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="超链接标签及其应用"><a href="#超链接标签及其应用" class="headerlink" title="超链接标签及其应用"></a>超链接标签及其应用</h1><h2 id="文本超链接"><a href="#文本超链接" class="headerlink" title="文本超链接"></a>文本超链接</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--href: 必填，表示要跳转到哪一个页面--&gt;</span><br><span class="hljs-comment">&lt;!--target: 表示窗口在哪里打开--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"test01.html"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span>文本超链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="图像超链接"><a href="#图像超链接" class="headerlink" title="图像超链接"></a>图像超链接</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"test01.html"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"resources/image/5.png"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"图片超链接"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bottom"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--锚链接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"test01.html#bottom"</span>&gt;</span>跳转到底部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="功能性链接"><a href="#功能性链接" class="headerlink" title="功能性链接"></a>功能性链接</h2><h3 id="邮件链接"><a href="#邮件链接" class="headerlink" title="邮件链接"></a>邮件链接</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--邮件链接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"mailto:15191434031@163.com"</span>&gt;</span>邮件链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="块元素和行内元素"><a href="#块元素和行内元素" class="headerlink" title="块元素和行内元素"></a>块元素和行内元素</h1><ul><li>块元素<ul><li>无论内容多少，该元素独占一行</li><li>(p, h1-h6)</li></ul></li><li>行内元素<ul><li>内容撑开宽度，左右都是行内元素的可以排在一行</li><li>(a, strong, em)</li></ul></li></ul><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--无序列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212251048593.png"></p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--有序列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>草莓<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212251048879.png"></p><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--自定义列表: 自定义列表一般用在网站底部--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>我的爱好<br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>游泳<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>看书<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>听音乐<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>跑步<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212251048123.png"></p><h1 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表格标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    tr:行</span><br><span class="hljs-comment">    td:列</span><br><span class="hljs-comment">    跨行:rowspan</span><br><span class="hljs-comment">    跨列:colspan</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">"3"</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>33<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271553656.png"></p><h1 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h1><h2 id="视频文件"><a href="#视频文件" class="headerlink" title="视频文件"></a>视频文件</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>媒体元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">controls:控制条</span><br><span class="hljs-comment">autoplay:自动播放</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"resources/video/02.mp4"</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span>测试视频<span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>视频能成功加载并且会自动播放</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271605135.png"></p><h2 id="音频文件"><a href="#音频文件" class="headerlink" title="音频文件"></a>音频文件</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"resources/video/02.mp4"</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271610739.png"></p><h1 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h1><table><thead><tr><th>元素名</th><th>描述</th></tr></thead><tbody><tr><td>header</td><td>标记头部区域的内容（用于页面或页面中的一块区域）</td></tr><tr><td>footer</td><td>标记脚部区域的内容（用于整个页面或者页面的一块区域）</td></tr><tr><td>section</td><td>Web页面中的一块独立区域</td></tr><tr><td>article</td><td>独立的文章内容</td></tr><tr><td>aside</td><td>相关内容或应用（常用于侧边栏）</td></tr><tr><td>nav</td><td>导航类辅助内容</td></tr></tbody></table><h1 id="iframe内联框架"><a href="#iframe内联框架" class="headerlink" title="iframe内联框架"></a>iframe内联框架</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>内联框架<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test03.html"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mainFrame"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271641556.png"></p><h1 id="初识表单post和get提交"><a href="#初识表单post和get提交" class="headerlink" title="初识表单post和get提交"></a>初识表单post和get提交</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>提交表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"test01.html"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"get"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密  码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"重置"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271631106.png"></p><h1 id="文本框和单选框"><a href="#文本框和单选框" class="headerlink" title="文本框和单选框"></a>文本框和单选框</h1><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271633347.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--文本输入框--&gt;</span><br>文本输入框<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--密码框--&gt;</span><br>密码框<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--单选框，默认选中男checked--&gt;</span><br>性别<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"男"</span> <span class="hljs-attr">checked</span>&gt;</span>男<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"女"</span>&gt;</span>女<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271640134.png"></p><h1 id="按钮和多选框"><a href="#按钮和多选框" class="headerlink" title="按钮和多选框"></a>按钮和多选框</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"reading"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span>&gt;</span>阅读<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"running"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span> <span class="hljs-attr">checked</span>&gt;</span>跑步<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"yoga"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span>&gt;</span>瑜伽<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"按钮显示的文字"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"btn1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"image"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"resources/image/5.png"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271647877.png"></p><h1 id="列表框文本域和文件域"><a href="#列表框文本域和文件域" class="headerlink" title="列表框文本域和文件域"></a>列表框文本域和文件域</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>下拉框<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"水果天堂"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"banana"</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"apple"</span> <span class="hljs-attr">selected</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-comment">&lt;!-- 苹果默认会是选中的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"strawberry"</span>&gt;</span>草莓<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>文本域<br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"remark"</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"60"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"10"</span>&gt;</span><br>        在这里写入备注内容<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>文件域<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"上传文件"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"upload"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271655620.png"></p><h1 id="搜索框滑块和简单验证"><a href="#搜索框滑块和简单验证" class="headerlink" title="搜索框滑块和简单验证"></a>搜索框滑块和简单验证</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>邮箱：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>URL：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>滑块：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"range"</span> <span class="hljs-attr">min</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"voice"</span> <span class="hljs-attr">step</span>=<span class="hljs-string">"2"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>搜索：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"search"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"search"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271711969.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271712095.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271713406.png"></p><h1 id="表单的应用"><a href="#表单的应用" class="headerlink" title="表单的应用"></a>表单的应用</h1><ul><li>隐藏域hidden</li><li>只读readonly</li><li>禁用disable</li></ul><h1 id="表单初级验证"><a href="#表单初级验证" class="headerlink" title="表单初级验证"></a>表单初级验证</h1><ul><li>placeholder：提示信息</li><li>required：非空判断</li><li>pattern：正则表达式</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">required</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202212271719014.png"></p>]]></content>
    
    
    <categories>
      
      <category>HTML5</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Javascript</title>
    <link href="/posts/cbb79327.html"/>
    <url>/posts/cbb79327.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="聊聊JavaScript"><a href="#聊聊JavaScript" class="headerlink" title="聊聊JavaScript"></a>聊聊JavaScript</h1><h2 id="JavaScript的起源故事"><a href="#JavaScript的起源故事" class="headerlink" title="JavaScript的起源故事"></a>JavaScript的起源故事</h2><p>网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。工程师<a href="https://link.zhihu.com/?target=http://brendaneich.com/">Brendan Eich</a>负责开发这种新语言。他觉得，没必要设计得很复杂，这种语言只要能够完成一些简单操作就够了，比如判断用户有没有填写表单。</p><p><img src="https://pic2.zhimg.com/80/v2-6295f9c981517cb0917d4ad626e4b871_720w.webp" alt="img"></p><p>Brendan Eich。1995年4月，网景公司录用了他。 Brendan Eich的主要方向和兴趣是函数式编程，网景公司招聘他的目的，是研究将Scheme语言作为网页脚本语言的可能性。 仅仅一个月之后，1995年5月，网景公司做出决策，未来的网页脚本语言必须”看上去与Java足够相似”，但是比Java简单，使得非专业的网页作者也能很快上手。这个决策实际上将Perl、Python、Tcl、Scheme等非面向对象编程的语言都排除在外了。 Brendan Eich被指定为这种”简化版Java语言”的设计师。 但是，他对Java一点兴趣也没有。为了应付公司安排的任务，他只用10天时间就把Javascript设计出来了。 由于设计时间太短，语言的一些细节考虑得不够严谨，导致后来很长一段时间，Javascript写出来的程序混乱不堪。如果Brendan Eich预见到，未来这种语言会成为互联网第一大语言，全世界有几百万学习者，他会不会多花一点时间呢？</p><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p><strong>总的来说，他的设计思路是这样的：</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">（1）借鉴C语言的基本语法；<br>（2）借鉴Java语言的数据类型和内存管理；<br>（3）借鉴Scheme语言，将函数提升到"第一等公民"（first class）的地位；<br>（4）借鉴Self语言，使用基于原型（prototype）的继承机制。<br></code></pre></td></tr></tbody></table></figure><p>所以，Javascript语言实际上是两种语言风格的混合产物—-（简化的）函数式编程+（简化的）面向对象编程。这是由Brendan Eich（函数式编程）与网景公司（面向对象编程）共同决定的。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>JavaScript是 <code>Netscape</code> 公司于 <code>Sun</code> 公司合作开发的。在“javascript”出现之前，Web浏览器不过是一种能够显示超文本文档的软件的基础部分。而在“javascript”出现之后，网页的内容不再局限于枯燥的文本，他们的可交互性得到了显著的改善。 Javascript的第一个版本，即javaScript1.0版本，出现在1995年推出的Netscape Navigatior住在这浏览器市场，微软的IE浏览器则扮演这追赶者的角色。微软在推出IE 3的时候发布了自己的VBScript语言并以JScript为名发布了javaScript的一个版本，一次很快跟上了Netscape的步伐。</p><p>详细内容： <a href="https://zhuanlan.zhihu.com/p/400339768">https://zhuanlan.zhihu.com/p/400339768</a></p><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><p>ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会，European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，所以它可以理解为是JavaScript的一个标准,但实际上后两者是ECMA-262标准的实现和扩展。</p><p><strong>一个合格的Java开发必须精通JavaScript</strong></p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="引入JavaScript"><a href="#引入JavaScript" class="headerlink" title="引入JavaScript"></a>引入JavaScript</h2><h3 id="内部标签"><a href="#内部标签" class="headerlink" title="内部标签"></a>内部标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    alert(123);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301010922246.png"></p><h3 id="外部引入"><a href="#外部引入" class="headerlink" title="外部引入"></a>外部引入</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"hello.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301010922531.png"></p><h2 id="基本语法入门"><a href="#基本语法入门" class="headerlink" title="基本语法入门"></a>基本语法入门</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//变量类型 变量名 = 变量值</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> name = <span class="hljs-string">"boun"</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> age = <span class="hljs-number">13</span>;</span><br><span class="javascript">    alert(<span class="hljs-string">"name= "</span> + name + <span class="hljs-string">", age= "</span> + age);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301010925573.png"></p><h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> score = <span class="hljs-number">98</span>;</span><br><span class="javascript">    <span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">90</span>){</span><br><span class="javascript">       alert(<span class="hljs-string">"你的表现真的很不错，继续保持哦"</span>)</span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301010927498.png"></p><h3 id="浏览器调试"><a href="#浏览器调试" class="headerlink" title="浏览器调试"></a>浏览器调试</h3><ul><li>在浏览器的控制台打印变量 console.log(score);</li><li>用浏览器F12调试代码</li></ul><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301010929421.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301010932831.png"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="number：js不区分整数和小数"><a href="#number：js不区分整数和小数" class="headerlink" title="number：js不区分整数和小数"></a>number：js不区分整数和小数</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">123</span>      <span class="hljs-comment">//整数</span><br><span class="hljs-number">123.1</span>    <span class="hljs-comment">// 浮点数</span><br><span class="hljs-number">1.123e3</span>  <span class="hljs-comment">//科学计数法</span><br>-<span class="hljs-number">80</span>      <span class="hljs-comment">//负数</span><br>NaN      <span class="hljs-comment">//not a number</span><br>Infinity <span class="hljs-comment">//无限大</span><br></code></pre></td></tr></tbody></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">'abc'</span><br><span class="hljs-string">"abc"</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301010942890.png"></p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br></code></pre></td></tr></tbody></table></figure><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&amp;&amp;与<br>||或<br>!非<br></code></pre></td></tr></tbody></table></figure><h3 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">=<br>==  等于（类型不一样，值一样，也会判断为<span class="hljs-keyword">true</span>）<br>=== 绝对等于（类型一样，值一样，结果才会判断为<span class="hljs-keyword">true</span>）<br>    NaN===NaN 结果为<span class="hljs-keyword">false</span>，一般用isNaN来判断<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301010941789.png"></p><h3 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h3><p>null: 空</p><p>undefined: 未定义</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//定义数组方式一（为了保证代码的可读性，尽量使用这种方式来定义数组）</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'hello'</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>];</span><br><span class="javascript">    <span class="hljs-comment">//定义数组方式二</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">'hi'</span>);</span><br><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr2);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301030928445.png"></p><p><strong>根据下标取值，如果越界，则会报undefined错误</strong></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> person = {</span><br><span class="javascript">        name: <span class="hljs-string">"summer"</span>,</span><br>        age: 3,<br><span class="javascript">        tags: [<span class="hljs-string">"js"</span>, <span class="hljs-string">"java"</span>, <span class="hljs-string">"springboot"</span>]</span><br>    };<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(person);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301030932598.png"></p><h2 id="严格检查模式"><a href="#严格检查模式" class="headerlink" title="严格检查模式"></a>严格检查模式</h2><p>这个可以预防因js的随意性产生的一些问题。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301030936499.png"></p><h1 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><ol><li><p>正常字符串我们用单引号或双引号包裹</p></li><li><p>转义字符\</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">\<span class="hljs-string">'</span><br><span class="hljs-string">\n</span><br><span class="hljs-string">\t</span><br><span class="hljs-string">\u4e2d  Unicode字符</span><br><span class="hljs-string">"\x41"  ASCII字符</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>多行字符串编写</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">`</span><br><span class="hljs-string">hello</span><br><span class="hljs-string">你</span><br><span class="hljs-string">好</span><br><span class="hljs-string">`</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>模板字符串</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">"summer"</span>;<br><span class="hljs-keyword">let</span> msg = <span class="hljs-string">'你好呀，${name}'</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>字符串长度</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> student = <span class="hljs-string">"abby"</span>;<br><span class="hljs-built_in">console</span>.log(student.length);<br></code></pre></td></tr></tbody></table></figure></li><li><p>字符串的可变性，不可变</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的第一个Javascript<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> name=<span class="hljs-string">"Summer"</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(name.length);</span><br><br><span class="javascript">    name[<span class="hljs-number">0</span>]=<span class="hljs-string">'b'</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(name);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301080935144.png"></p></li><li><p>大小写转换</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的第一个Javascript<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> name=<span class="hljs-string">"Summer"</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(name.toUpperCase());</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(name.toLowerCase());</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301080935429.png"></p><ol start="8"><li>indexOf<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> name=<span class="hljs-string">"Summer"</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(name.indexOf(<span class="hljs-string">'a'</span>));<span class="hljs-comment">//-1</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(name.indexOf(<span class="hljs-string">'m'</span>));<span class="hljs-comment">//2</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="9"><li><p>subString</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> name=<span class="hljs-string">"abcdef"</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(name.substring(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>));<span class="hljs-comment">//bc [) 前包后不包</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br></code></pre></td></tr></tbody></table></figure><p>1.长度</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr.length);<span class="hljs-comment">//5</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>数组长度是可变的，如果给arr.length赋值，数组大小就会变化。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br>    arr.length = 10;<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr.length);<span class="hljs-comment">//10</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ol start="2"><li><p>indexOf() 通过元素获得下标</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">3</span>));<span class="hljs-comment">//2</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>slice() 截取arr的一部分，返回一个新数组</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>));<span class="hljs-comment">//[2, 3]</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>push() pop() 从尾部插入数据/弹出尾部的数据</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br>    arr.push(6);<br>    arr.push(7);<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[1, 2, 3, 4, 5, 6, 7]</span></span><br><br>    arr.pop();<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[1, 2, 3, 4, 5, 6]</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>unshift() shift()从头部插入或弹出数据</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">    <span class="hljs-comment">//Inserts new elements at the start of an array, and returns the new length of the array.</span></span><br>    arr.unshift(6);<br>    arr.unshift(7);<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[7, 6, 1, 2, 3, 4, 5]</span></span><br><br><span class="javascript">    <span class="hljs-comment">//Removes the first element from an array and returns it.</span></span><br>    arr.shift();<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[6, 1, 2, 3, 4, 5]</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>sort()</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>,<span class="hljs-number">3</span>];</span><br>    arr.sort();<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[1, 2, 3, 4, 5, 6]</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>reverse()元素反转</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];</span><br>    arr.reverse();<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[6, 5, 4, 3, 2, 1]</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>contact() 并没有修改原始数组，只是返回一个新数组</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr.concat(arr2));<span class="hljs-comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[1, 2, 3, 4, 5, 6]</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="9"><li><p>join()</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">"-"</span>));<span class="hljs-comment">//1-2-3-4-5-6</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[1, 2, 3, 4, 5, 6]</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="10"><li>多维数组</li></ol><h2 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h2><p>对象就是若干个键值对，JavaScript中对象所有的键都是字符串，值是任意对象。</p><ol><li><p>对象属性赋值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> person ={</span><br><span class="javascript">        name: <span class="hljs-string">"summer"</span>,</span><br>        age: 30,<br>        score: 80<br>    }<br><span class="javascript">    person.name = <span class="hljs-string">"lucky"</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(person);<span class="hljs-comment">//{name: 'lucky', age: 30, score: 80}</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>使用一个不存在的对象属性，不会报错</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101125684.png"></p></li><li><p>动态的删减属性</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101125702.png"></p></li><li><p>动态添加属性</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101125009.png"></p></li><li><p>判断一个属性是否存在于这个对象中</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101125941.png"></p></li><li><p>判断一个属性是否是这个对象自身拥有的</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101125626.png"></p></li></ol><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> name = <span class="hljs-string">"summer"</span>;</span><br><span class="javascript">    <span class="hljs-keyword">if</span>(name.indexOf(<span class="hljs-string">"m"</span>) &gt; -<span class="hljs-number">1</span>){</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"yes"</span>);</span><br><span class="javascript">    }<span class="hljs-keyword">else</span>{</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"no"</span>);</span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">yes<br></code></pre></td></tr></tbody></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> i = <span class="hljs-number">10</span>;</span><br><span class="javascript">    <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span>){</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(i);</span><br>        i--;<br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101132231.png"></p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">    <span class="hljs-comment">//普通for</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"================="</span>);</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(array[i]);</span><br>    }<br><br><span class="javascript">    <span class="hljs-comment">//for...in...</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"================="</span>);</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> arrayKey <span class="hljs-keyword">in</span> array) {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(arrayKey);<span class="hljs-comment">//这个输出的是array各个值对应的key</span></span><br>    }<br><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"================="</span>);</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> arrayKey <span class="hljs-keyword">in</span> array) {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(array[arrayKey]);</span><br>    }<br><br><span class="javascript">    <span class="hljs-comment">//for...of...</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"================="</span>);</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> number <span class="hljs-keyword">of</span> array) {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(number);</span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101142691.png"></p><h3 id="foreach循环"><a href="#foreach循环" class="headerlink" title="foreach循环"></a>foreach循环</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">    array.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>)</span>{</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(value);</span><br>    });<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101144588.png"></p><h2 id="Map和Set-ES6新特性"><a href="#Map和Set-ES6新特性" class="headerlink" title="Map和Set (ES6新特性)"></a>Map和Set (ES6新特性)</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-string">"tom"</span>, <span class="hljs-number">90</span>], [<span class="hljs-string">"anny"</span>, <span class="hljs-number">85</span>], [<span class="hljs-string">"jack"</span>, <span class="hljs-number">95</span>]]);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(map);<span class="hljs-comment">// {'tom' =&gt; 90, 'anny' =&gt; 85, 'jack' =&gt; 95}</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>Set：元素不重复的集合</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>]);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(set);<span class="hljs-comment">//{1, 2, 3, 5}</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101218930.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101219257.png"></p><h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><h3 id="作业：使用Iterator遍历Map和Set（使用for…of…或者for…in…）"><a href="#作业：使用Iterator遍历Map和Set（使用for…of…或者for…in…）" class="headerlink" title="作业：使用Iterator遍历Map和Set（使用for…of…或者for…in…）"></a>作业：使用Iterator遍历Map和Set（使用for…of…或者for…in…）</h3><p>遍历数组</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> arr) {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(x);</span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101233059.png"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="javascript">    arr.name = <span class="hljs-string">"halla"</span>;</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> number <span class="hljs-keyword">in</span> arr) {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(number);</span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101233290.png"></p><p>遍历Map</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-string">"tom"</span>, <span class="hljs-number">90</span>], [<span class="hljs-string">"anny"</span>, <span class="hljs-number">85</span>], [<span class="hljs-string">"jack"</span>, <span class="hljs-number">95</span>]]);</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> mapElement <span class="hljs-keyword">of</span> map) {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(mapElement);</span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101230845.png"></p><p>遍历Set</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> number <span class="hljs-keyword">of</span> set) {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(number);</span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101230350.png"></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//方式一</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abs</span>(<span class="hljs-params">x</span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">0</span>){</span><br><span class="javascript">            <span class="hljs-keyword">return</span> x;</span><br><span class="javascript">        }<span class="hljs-keyword">else</span>{</span><br><span class="javascript">            <span class="hljs-keyword">return</span> -x;</span><br>        }<br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101235404.png"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//方式二</span></span><br><span class="javascript">    <span class="hljs-comment">//function (x)是一个匿名函数，把结果赋给abs，通过abs就可以访问函数</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> abs = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) {</span><br><span class="javascript">            <span class="hljs-keyword">return</span> x;</span><br><span class="javascript">        } <span class="hljs-keyword">else</span> {</span><br><span class="javascript">            <span class="hljs-keyword">return</span> -x;</span><br>        }<br>    };<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101238883.png"></p><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">abs(-8) //8<br>abs(9) //9<br>abs(10,123,456,789) //10  //参数问题，可以传入任意个参数<br>abs() //NaN<br></code></pre></td></tr></tbody></table></figure><h3 id="参数问题如何规避？"><a href="#参数问题如何规避？" class="headerlink" title="参数问题如何规避？"></a>参数问题如何规避？</h3><ol><li><p>不存在参数</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//function (x)是一个匿名函数，把结果赋给abs，通过abs就可以访问函数</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> abs = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> x != <span class="hljs-string">"number"</span>){</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"参数格式不对，请重新传入参数"</span>)</span><br>        }<br><span class="javascript">        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) {</span><br><span class="javascript">            <span class="hljs-keyword">return</span> x;</span><br><span class="javascript">        } <span class="hljs-keyword">else</span> {</span><br><span class="javascript">            <span class="hljs-keyword">return</span> -x;</span><br>        }<br>    };<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><p>   <img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101243035.png"></p><ol start="2"><li><p>arguments</p><p>arguments代表传递进来的所有参数，是一个数组</p><p>问题：abs(x, y, z) arguments会获取到包括x在内的所有参数的值，所以如果想要得到y的值，必须先拿到x的值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//function (x)是一个匿名函数，把结果赋给abs，通过abs就可以访问函数</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> abs = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> x != <span class="hljs-string">"number"</span>){</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"参数格式不对，请重新传入参数"</span>)</span><br>        }<br><br><span class="javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">arguments</span>.length &gt; <span class="hljs-number">1</span>){</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"传入的参数值多于一个"</span>)</span><br>        }<br><span class="javascript">        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) {</span><br><span class="javascript">            <span class="hljs-keyword">return</span> x;</span><br><span class="javascript">        } <span class="hljs-keyword">else</span> {</span><br><span class="javascript">            <span class="hljs-keyword">return</span> -x;</span><br>        }<br>    };<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101246195.png"></p></li><li><p>rest</p><p>rest参数只能写在最后，用…标识</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> abs = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, y, ...z</span>) </span>{</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"x="</span> + x);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"y="</span> + y);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"z="</span> + z);</span><br>    };<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101248652.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301101249823.png"></p><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNum</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;</span><br>        x = x+1;<br>    }<br><span class="javascript">    x = x+<span class="hljs-number">2</span>;<span class="hljs-comment">//Uncaught ReferenceError: x is not defined</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">const</span> x = <span class="hljs-number">1</span>;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">            <span class="hljs-keyword">const</span> y = x + <span class="hljs-number">1</span>;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"y="</span> + y);<span class="hljs-comment">//y=2</span></span><br>        };<br><span class="javascript">        <span class="hljs-keyword">return</span> b();</span><br><span class="javascript">        <span class="hljs-keyword">const</span> z = y + <span class="hljs-number">1</span>;<span class="hljs-comment">//Uncaught ReferenceError: y is not defined</span></span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(x);</span><br>        }<br>        f();<br><span class="javascript">        <span class="hljs-built_in">console</span>.log(x);</span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a()<br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h3 id="全局对象window"><a href="#全局对象window" class="headerlink" title="全局对象window"></a>全局对象window</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- alert(str) 等价于 alert(window.str) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-number">123</span>;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301110843581.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301110843870.png"></p><h4 id="测试全局对象"><a href="#测试全局对象" class="headerlink" title="测试全局对象"></a>测试全局对象</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-number">123</span>;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.alert(str); <span class="hljs-comment">//123</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> old_alert = <span class="hljs-built_in">window</span>.alert;</span><br><span class="javascript">    old_alert(str); <span class="hljs-comment">//123</span></span><br><span class="javascript">    <span class="hljs-built_in">window</span>.alert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>)</span>{</span><br><span class="javascript">        alert(x); <span class="hljs-comment">//Uncaught RangeError: Maximum call stack size exceeded</span></span><br>    }<br><span class="javascript">    <span class="hljs-built_in">window</span>.alert(<span class="hljs-string">"456"</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-number">123</span>;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.alert(str); <span class="hljs-comment">//123</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> old_alert = <span class="hljs-built_in">window</span>.alert;</span><br><span class="javascript">    old_alert(str); <span class="hljs-comment">//123</span></span><br><span class="javascript">    <span class="hljs-built_in">window</span>.alert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>{</span><br>    }<br><span class="javascript">    <span class="hljs-built_in">window</span>.alert(<span class="hljs-number">456</span>); <span class="hljs-comment">//没有任何弹出信息</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-number">123</span>;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.alert(str); <span class="hljs-comment">//123</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> old_alert = <span class="hljs-built_in">window</span>.alert;</span><br><span class="javascript">    old_alert(str); <span class="hljs-comment">//123</span></span><br><span class="javascript">    <span class="hljs-built_in">window</span>.alert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>{</span><br>    }<br><span class="javascript">    <span class="hljs-built_in">window</span>.alert(<span class="hljs-number">456</span>); <span class="hljs-comment">//没有任何弹出信息</span></span><br><br><span class="javascript">    <span class="hljs-built_in">window</span>.alert = old_alert;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.alert(<span class="hljs-number">789</span>); <span class="hljs-comment">//789</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>所有的全局变量都会绑定到window上，如果不同的文件用了同样的全局变量，就会冲突。</p><p><strong>解决方案：定义唯一命名空间</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//唯一全局命名空间</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> kuangstudy = [];</span><br><br><span class="javascript">    <span class="hljs-comment">//定义全局变量</span></span><br><span class="javascript">    kuangstudy.name = <span class="hljs-string">"java"</span>;</span><br><span class="javascript">    kuangstudy.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">return</span> a + b;</span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301110900677.png"></p><h3 id="局部作用域let"><a href="#局部作用域let" class="headerlink" title="局部作用域let"></a>局部作用域let</h3><p>ES6之后引入了let，为了解决局部作用域冲突的问题。</p><p>用var定义变量</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="javascript">       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++){</span><br><span class="javascript">           <span class="hljs-built_in">console</span>.log(i);</span><br>       }<br><span class="javascript">       <span class="hljs-built_in">console</span>.log(i);<span class="hljs-comment">//之前老师讲课的时候，这里是可以输出i的值的，但是我今天测试发现不能输出，会报undefined错误，应该是JS底层什么东西改了导致的。</span></span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301110903702.png"></p><p>用let定义变量</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="javascript">       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++){</span><br><span class="javascript">           <span class="hljs-built_in">console</span>.log(i);</span><br>       }<br><span class="javascript">       <span class="hljs-built_in">console</span>.log(i);<span class="hljs-comment">//Uncaught ReferenceError: i is not defined</span></span><br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301110905480.png"></p><h3 id="常量const"><a href="#常量const" class="headerlink" title="常量const"></a>常量const</h3><h4 id="ES6之前如何定义常量？"><a href="#ES6之前如何定义常量？" class="headerlink" title="ES6之前如何定义常量？"></a>ES6之前如何定义常量？</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> PI = <span class="hljs-number">3.14</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(PI);<span class="hljs-comment">//3.14</span></span><br>    PI = 3.15;<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(PI);<span class="hljs-comment">//3.15 常量PI的值被改变了</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="ES6之后，引入了const"><a href="#ES6之后，引入了const" class="headerlink" title="ES6之后，引入了const"></a>ES6之后，引入了const</h4><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301110909976.png"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p>方法：把函数放在对象内部，对象只有两个东西，一个是属性，一个是方法。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> kuangshen = {</span><br><span class="javascript">        name: <span class="hljs-string">"kuang"</span>,</span><br>        birth: 2020,<br><span class="javascript">        age: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">            <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear();</span><br><span class="javascript">            <span class="hljs-keyword">return</span> now - <span class="hljs-built_in">this</span>.birth;</span><br>        }<br>    };<br><span class="javascript">    <span class="hljs-comment">//调用属性</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(kuangshen.name);<span class="hljs-comment">//kuang</span></span><br><span class="javascript">    <span class="hljs-comment">//调用方法</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(kuangshen.age());<span class="hljs-comment">//3</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>上面这段代码里面的this代表什么？</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear();</span><br><span class="javascript">        <span class="hljs-keyword">return</span> now - <span class="hljs-built_in">this</span>.birth;</span><br>    }<br><br><span class="javascript">    <span class="hljs-keyword">const</span> kuangshen = {</span><br><span class="javascript">        name: <span class="hljs-string">"kuang"</span>,</span><br>        birth: 2020,<br>        age: getAge<br>    };<br><br><span class="javascript">    <span class="hljs-comment">//this默认指向调用它的那个对象</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(kuangshen.age());<span class="hljs-comment">//3</span></span><br><br><span class="javascript">    <span class="hljs-comment">//这里this指向了window对象，但是window对象没有birth属性，所以获取到的内容是NaN</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getAge());<span class="hljs-comment">//NaN</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>在js中可以控制this的指向！</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear();</span><br><span class="javascript">        <span class="hljs-keyword">return</span> now - <span class="hljs-built_in">this</span>.birth;</span><br>    }<br><br><span class="javascript">    <span class="hljs-keyword">const</span> kuangshen = {</span><br><span class="javascript">        name: <span class="hljs-string">"kuang"</span>,</span><br>        birth: 2020,<br>        age: getAge<br>    };<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getAge.apply(kuangshen, []));<span class="hljs-comment">//3</span></span><br><span class="javascript">    <span class="hljs-comment">//this指向kuangshen，参数为空</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getAge().apply(kuangshen, []));<span class="hljs-comment">//Uncaught TypeError: window.getAge(...).apply is not a function    </span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="内部对象"><a href="#内部对象" class="headerlink" title="内部对象"></a>内部对象</h1><p><strong>标准对象</strong></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202301111031333.png"></p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"年： "</span> + now.getFullYear());</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"月： "</span> + now.getMonth());</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"日： "</span> + now.getDate());</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"星期： "</span> + now.getDay());</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"时： "</span> + now.getHours());</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"分： "</span> + now.getMinutes());</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"秒： "</span> + now.getSeconds());</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"时间戳： "</span> + now.getTime());<span class="hljs-comment">//时间戳是全世界统一的</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">年： <span class="hljs-number">2023</span><br>月： <span class="hljs-number">0</span><br>日： <span class="hljs-number">11</span><br>星期： <span class="hljs-number">3</span><br>时： <span class="hljs-number">10</span><br>分： <span class="hljs-number">36</span><br>秒： <span class="hljs-number">41</span><br>时间戳： <span class="hljs-number">1673404601231</span><br></code></pre></td></tr></tbody></table></figure><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//时间戳转换为Date对象</span></span><br><span class="javascript">    now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">1673404601231</span>);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(now);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(now.toLocaleString());</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(now.toUTCString());</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Wed Jan <span class="hljs-number">11</span> <span class="hljs-number">2023</span> <span class="hljs-number">10</span>:<span class="hljs-number">36</span>:<span class="hljs-number">41</span> GMT+<span class="hljs-number">0800</span> (中国标准时间)<br><span class="hljs-number">2023</span>/<span class="hljs-number">1</span>/<span class="hljs-number">11</span> <span class="hljs-number">10</span>:<span class="hljs-number">36</span>:<span class="hljs-number">41</span><br>Wed, <span class="hljs-number">11</span> Jan <span class="hljs-number">2023</span> <span class="hljs-number">02</span>:<span class="hljs-number">36</span>:<span class="hljs-number">41</span> GMT<br></code></pre></td></tr></tbody></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="JSON是什么？"><a href="#JSON是什么？" class="headerlink" title="JSON是什么？"></a>JSON是什么？</h3><p>JSON是一个标记符的序列。这套标记符包含六个<strong>构造字符、字符串、数字</strong>和三个<strong>字面名</strong>。<br>JSON是一个序列化的<strong>对象</strong>或<strong>数组</strong>。</p><ol><li><p>六个构造字符：<br>begin-array = ws %x5B ws ; [ 左方括号<br>begin-object = ws %x7B ws ; { 左大括号<br>end-array = ws %x5D ws ; ] 右方括号<br>end-object = ws %x7D ws ; } 右大括号<br>name-separator = ws %x3A ws ; : 冒号<br>value-separator = ws %x2C ws ; , 逗号</p></li><li><p>在这六个构造字符的前或后允许存在无意义的空白符(ws):<br>ws = *（%x20 /; 空间<br>%x09 /; 水平标签<br>%x0A /; 换行或换行<br>%x0D）; 回程</p></li><li><p>JSON的构成:<br>值可以是对象、数组、数字、字符串或者三个字面值(false、null、true)中的一个。值中的字面值中的英文必须使用小写。</p></li></ol><ul><li><p><strong>对象</strong>由花括号括起来的逗号分割的成员构成，成员是字符串键和上文所述的值由逗号分割的键值对组成，如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">{<span class="hljs-string">"name"</span>: <span class="hljs-string">"John Doe"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">18</span>, <span class="hljs-string">"address"</span>: {<span class="hljs-string">"country"</span> : <span class="hljs-string">"china"</span>, <span class="hljs-string">"zip-code"</span>: <span class="hljs-string">"10000"</span>}}<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>JSON中的对象可以包含多个键值对，并且有数组结构，该语言正是一次实现过程内容的描述。</p></li><li><p><strong>数组</strong>是由方括号括起来的一组值构成，如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p><strong>字符串</strong>与C或者Java的字符串非常相似。字符串是由双引号包围的任意数量Unicode字符的集合，使用反斜线转义。一个字符（character）即一个单独的字符串（character string）。</p></li><li><p><strong>数字</strong>也与C或者Java的数值非常相似。除去未曾使用的八进制与十六进制格式。除去一些编码细节。 </p></li><li><p>一些合法的JSON的实例：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">{<span class="hljs-string">"a"</span>: <span class="hljs-number">1</span>, <span class="hljs-string">"b"</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">"3"</span>, {<span class="hljs-string">"a"</span>: <span class="hljs-number">4</span>}]<br></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">3.14</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">"plain_text"</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="JSON和JS对象的区别？"><a href="#JSON和JS对象的区别？" class="headerlink" title="JSON和JS对象的区别？"></a>JSON和JS对象的区别？</h3><h4 id="JSON-与-JS-对象的关系"><a href="#JSON-与-JS-对象的关系" class="headerlink" title="JSON 与 JS 对象的关系"></a>JSON 与 JS 对象的关系</h4><p>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = {<span class="hljs-attr">a</span>: <span class="hljs-string">'Hello'</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">'World'</span>}; <span class="hljs-comment">//这是一个对象，注意键名也是可以使用引号包裹的</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> json = <span class="hljs-string">'{"a": "Hello", "b": "World"}'</span>; <span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span><br></code></pre></td></tr></tbody></table></figure><h4 id="JSON-和-JS-对象互转"><a href="#JSON-和-JS-对象互转" class="headerlink" title="JSON 和 JS 对象互转"></a>JSON 和 JS 对象互转</h4><p>从JSON字符串转换为JS对象，使用 JSON.parse() 方法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">'{"a": "Hello", "b": "World"}'</span>); <span class="hljs-comment">//结果是 {a: 'Hello', b: 'World'}</span><br></code></pre></td></tr></tbody></table></figure><p>从JS对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> json = <span class="hljs-built_in">JSON</span>.stringify({<span class="hljs-attr">a</span>: <span class="hljs-string">'Hello'</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">'World'</span>}); <span class="hljs-comment">//结果是 '{"a": "Hello", "b": "World"}'</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="原生JS写法-xhr异步请求"><a href="#原生JS写法-xhr异步请求" class="headerlink" title="原生JS写法  xhr异步请求"></a>原生JS写法  xhr异步请求</h3><h3 id="JQuery封装好的方法-“-name”-ajax-“”"><a href="#JQuery封装好的方法-“-name”-ajax-“”" class="headerlink" title="JQuery封装好的方法  $(“#name”).ajax(“”)"></a>JQuery封装好的方法  $(“#name”).ajax(“”)</h3><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="什么是面向对象？"><a href="#什么是面向对象？" class="headerlink" title="什么是面向对象？"></a>什么是面向对象？</h2><p>类：模板</p><p>对象：具体的实例</p><p>在JavaScript中，这个需要换一个思维方式。</p><p>原型：</p>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java Web</title>
    <link href="/posts/fb60fea1.html"/>
    <url>/posts/fb60fea1.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="Java-Web基本概念"><a href="#Java-Web基本概念" class="headerlink" title="Java Web基本概念"></a>Java Web基本概念</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>用Java开发网页的技术统称为JavaWeb。</li><li>web程序：可以提供浏览器访问的程序；</li></ul><p><strong>web应用分两种</strong>:</p><ul><li><strong>静态web资源</strong>（如html 页面）：<ul><li>指web页面中的数据始终是不变。</li><li>所有用户看到都是同一个页面。</li><li>技术：HTML、CSS。</li></ul></li><li><strong>动态web资源</strong>：<ul><li>指web页面中的浏览的数据是由服务器提供的。</li><li>所有用户看到都是同一个页面。</li><li>技术：JSP/Servlet、ASP、PHP等。</li></ul></li></ul><p>web应用程序编写完毕后，若想提供给外界访问：需要一个<strong>服务器</strong>来统一管理；</p><h2 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h2><p>常见的web的服务器：</p><ul><li>Apache</li><li>Nginx</li><li>IIS</li><li>WebLogic</li><li>WebSphere</li><li><strong>Tomcat</strong></li></ul><p>Tomcat 因为技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和 并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP程序的首选。对于一个Java初学web的人来说，它是最佳的选择。</p><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h2><p>tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p>1、选择合适在的压缩包<br><img src="https://s2.loli.net/2022/06/29/bQkyv8Auw6HWcTe.png"></p><p>2、下载压缩包并解压</p><h2 id="Tomcat启动和配置"><a href="#Tomcat启动和配置" class="headerlink" title="Tomcat启动和配置"></a>Tomcat启动和配置</h2><p><img src="https://s2.loli.net/2022/06/29/gZ3qQreilGXCdPO.png"></p><p><img src="https://s2.loli.net/2022/06/29/I4RpoQurJ1qb3yD.png"></p><p>启动tomcat，然后访问<a href="http://localhost:8080/%E6%B5%8B%E8%AF%95">http://localhost:8080/测试</a></p><p><img src="https://s2.loli.net/2022/06/29/oXY8NceibUzHO1r.png"></p><p><img src="https://s2.loli.net/2022/06/29/Bq7FVs5NkEYyeHS.png"></p><p><img src="https://s2.loli.net/2022/06/29/TFD348ktIYEBoW1.png"></p><p><img src="https://s2.loli.net/2022/06/29/X7RodlZAbT56yzu.png"></p><p>可能遇到的问题：</p><ol><li>Java环境变量没有配置</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="https://s2.loli.net/2022/06/29/vP7mXw5GBjL8DRa.png"></p><ol><li>可以配置启动的端口号</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8080"</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"HTTP/1.1"</span></span><br><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">"20000"</span></span><br><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">"8443"</span> /&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>tomcat默认端口号：8080</li><li>mysql默认端口号：3306</li><li>http默认端口号：80</li><li>https默认端口号：443</li></ul><ol start="2"><li>可以配置主机的名称</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"localhost"</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">"webapps"</span></span><br><span class="hljs-tag">      <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">"true"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>默认的主机名称为：localhost-&gt;127.0.0.1</li><li>默认网站应用存放的位置为：webapps</li></ul><p>面试题</p><p>请你谈谈网站是如何访问的。</p><ol><li><p>输入一个域名，回车</p></li><li><p>检查本机的hosts配置文件下有没有这个域名映射</p><ul><li><p>有：直接返回对应的ip地址，这个地址中，有我们要访问的web程序，可以直接访问。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">127.0.0.1</span>       <span class="hljs-string">localhost</span><br></code></pre></td></tr></tbody></table></figure></li></ul></li></ol><ul><li><p>没有：去DNS服务器找，找到的话返回，找不到就返回找不到。</p><p><img src="https://s2.loli.net/2022/06/29/pRZ2cGdteIl4w1k.png"></p></li></ul><h2 id="发布一个web网站"><a href="#发布一个web网站" class="headerlink" title="发布一个web网站"></a>发布一个web网站</h2><p>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</p><p>网站应该有的结构</p><figure class="highlight haml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby">-webapps：Tomcat服务器的web目录</span><br><span class="ruby">-ROOT</span><br><span class="ruby">    -betterme：自己新建的网站的目录名</span><br><span class="ruby">    -WEB-INF</span><br><span class="ruby">        -<span class="hljs-symbol">classes:</span> java程序</span><br><span class="ruby">        -lib：web应用所依赖的jar包</span><br><span class="ruby">        -web.xml：网站配置文件</span><br><span class="ruby">        - index.html：默认的首页</span><br><span class="ruby">        - static</span><br><span class="ruby">        -css</span><br><span class="ruby">        -style.css</span><br><span class="ruby">        -js</span><br><span class="ruby">        -img</span><br><span class="ruby">        -.....</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/uEbFlGdPJBqwAYC.png"></p><p><img src="https://s2.loli.net/2022/06/29/bzD3epmONEkB8Lo.png"></p><h1 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h1><h2 id="什么是HTTP"><a href="#什么是HTTP" class="headerlink" title="什么是HTTP"></a>什么是HTTP</h2><p>超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><ul><li>文本：html，字符串，~ ….</li><li>超文本：图片，音乐，视频，定位，地图…….</li><li>默认端口：80</li></ul><p>HTTPS （全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性  。HTTPS 在HTTP 的基础下加入SSL，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。</p><ul><li>默认端口：443</li></ul><h2 id="两个时代"><a href="#两个时代" class="headerlink" title="两个时代"></a>两个时代</h2><ul><li>http1.0<ul><li>HTTP/1.0：客户端与web服务器连接后，只能获得一个web资源。</li></ul></li><li>http2.0<ul><li>HTTP/1.1：客户端与web服务器连接后，可以获得多个web资源。</li></ul></li></ul><h2 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h2><ul><li>客户端——发请求（Request）—–服务器</li></ul><p>General</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Request URL: https:<span class="hljs-comment">//www.baidu.com/   请求地址</span><br>Request Method: GET                   请求方式，一般是GET/POST<br>Status Code: <span class="hljs-number">200</span> OK                   状态码：<span class="hljs-number">200</span>表示成功，<span class="hljs-number">404</span>表示没有找到资源，<span class="hljs-number">500</span>表示服务器错误<br>Remote Address: <span class="hljs-number">36.152</span><span class="hljs-number">.44</span><span class="hljs-number">.96</span>:<span class="hljs-number">443</span>      远程地址<br>Referrer Policy: strict-origin-when-cross-origin<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept: text/html<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span>,zh-TW;q=<span class="hljs-number">0.8</span><br>Cache-Control: <span class="hljs-keyword">private</span><br>Connection: keep-alive<br></code></pre></td></tr></tbody></table></figure><h3 id="请求行（request-line）"><a href="#请求行（request-line）" class="headerlink" title="请求行（request line）"></a>请求行（request line）</h3><ul><li>请求方式：GET, POST, HEAD, DELETE, PUT, TRACT<ul><li>GET: 请求能都携带的参数比较少，大小没有限制，会在浏览器的URL地址栏显示数据内容，不安全，但是高效。</li><li>POST：请求能够携带的参数没有限制，大小没有限制，不会在浏览器URL地址栏中显示数据内容，安全，但不高效。</li></ul></li></ul><h3 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept: 告诉浏览器，它所支持的数据类型<br>Accept-Encoding: 支持哪种编码格式  GBK UTF-<span class="hljs-number">8</span><br>Accept-Language: 告诉浏览器，它的语言环境<br>Cache-Control: 缓存控制<br>Connection: 告诉浏览器，请求完成是断开还是保持连接<br></code></pre></td></tr></tbody></table></figure><h2 id="Http响应"><a href="#Http响应" class="headerlink" title="Http响应"></a>Http响应</h2><p>服务器—–响应—–客户端</p><p>Response Headers</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Cache-Control: <span class="hljs-keyword">private</span>      缓存控制<br>Connection: keep-alive      连接<br>Content-Encoding: gzip      编码<br>Content-Type: text/html;charset=utf-<span class="hljs-number">8</span><br></code></pre></td></tr></tbody></table></figure><p>HTTP请求的完全过程：<a href="https://blog.csdn.net/ailunlee/article/details/90600174">https://blog.csdn.net/ailunlee/article/details/90600174</a></p><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Accept</span>：告诉浏览器，它所支持的数据类型<br><span class="hljs-attribute">Accept</span>-Encoding：支持哪种编码格式 GBK UTF-<span class="hljs-number">8</span> GB<span class="hljs-number">2312</span> ISO<span class="hljs-number">8859</span>-<span class="hljs-number">1</span><br><span class="hljs-attribute">Accept</span>-Language：告诉浏览器，它的语言环境<br><span class="hljs-attribute">Cache</span>-Control：缓存控制<br><span class="hljs-attribute">Connection</span>：告诉浏览器，请求完成是断开还是保持连接<br><span class="hljs-attribute">HOST</span>：主机<br><span class="hljs-attribute">Refresh</span>：告诉客户端，多久刷新一次；<br><span class="hljs-attribute">Location</span>：让网页重新定位；<br></code></pre></td></tr></tbody></table></figure><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p>200：请求响应成功</p><p>3xx：请求重定向</p><ul><li>重定向：你重新到我给你的位置去。</li></ul><p>4xx：找不到资源</p><ul><li> 404</li></ul><p>5xx：服务器代码错误</p><ul><li>500</li><li>502</li></ul><p>面试题：当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示出来，经历了什么？</p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>为什么要学习这个技术？</p><ol><li>在Java Web开发中，需要使用大量的jar包，我们手动去导入；</li><li>如何能够让一个东西自动帮我导入和配置这个jar包。</li></ol><p>由此，Maven诞生了！</p><h2 id="Maven项目架构管理工具"><a href="#Maven项目架构管理工具" class="headerlink" title="Maven项目架构管理工具"></a>Maven项目架构管理工具</h2><p>我们目前用它就是为了方便导入jar包的！</p><p>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反</li></ul><h2 id="下载安装Maven"><a href="#下载安装Maven" class="headerlink" title="下载安装Maven"></a>下载安装Maven</h2><p>官网: <a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p><img src="https://s2.loli.net/2022/06/29/d4ZXrwKsytnQPLz.png"></p><p>下载完成后，解压即可；</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>在系统环境变量中，配置以下配置：</p><ol><li>M2_HOME (maven的目录下的bin目录)</li><li>MAVEN_HOME (maven的目录)</li><li>在系统的path中添加 %MAVEN_HOME%\bin</li></ol><p><img src="https://s2.loli.net/2022/06/29/haeQGCUAkEtcYOX.png"></p><ol start="4"><li>配置完成后，测试maven是否安装成功。</li></ol><p><img src="https://s2.loli.net/2022/06/29/GbcvzLtyeU42ABS.png"></p><h2 id="配置阿里云加速镜像"><a href="#配置阿里云加速镜像" class="headerlink" title="配置阿里云加速镜像"></a>配置阿里云加速镜像</h2><p>使用阿里云Maven中央仓库作为下载源，速度更快更稳定。</p><ul><li><p>maven 安装目录的 <code>conf/settings.xml</code></p></li><li><p>在<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签中添加 <code>mirror</code>子节点</p></li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>        <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>修改本地的仓库存放位置</p><ul><li>maven 安装目录的 <code>conf/settings.xml</code></li><li>在<code>&lt;settings&gt;&lt;/settings&gt;</code>标签中添加 <code>localRepository</code>子节点，按个人习惯存放。</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\Tools\apache-maven-3.8.5\maven_repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="在IDEA中使用Maven"><a href="#在IDEA中使用Maven" class="headerlink" title="在IDEA中使用Maven"></a>在IDEA中使用Maven</h2><p>1、启动IDEA</p><p>2、 创建一个MavenWeb项目</p><p><img src="https://s2.loli.net/2022/06/29/ypi6Rwkz7Hg41vJ.png"></p><p>3、等待项目初始化完毕</p><p><img src="https://s2.loli.net/2022/06/29/I2ouxwtYkFa5QP7.png"></p><p>4、检查IDEA中的Maven设置</p><p><img src="https://s2.loli.net/2022/06/29/idpq8G7A4Bbau1k.png"></p><p>6、到这里，Maven在IDEA中的配置和使用就OK了!</p><h2 id="创建一个普通的Maven项目"><a href="#创建一个普通的Maven项目" class="headerlink" title="创建一个普通的Maven项目"></a>创建一个普通的Maven项目</h2><p><img src="https://s2.loli.net/2022/06/29/gRitj3swQD6qpvE.png"></p><p><img src="https://s2.loli.net/2022/06/29/bDsgFHWOf4MoV1x.png"></p><p>只有在<strong>Web应用下才有</strong>的项目结构</p><p><img src="https://s2.loli.net/2022/06/29/t1pKQ3AdSozkVBI.png"></p><h2 id="标记文件夹功能"><a href="#标记文件夹功能" class="headerlink" title="标记文件夹功能"></a>标记文件夹功能</h2><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2022/03/26/kuangstudy5571109f-7c39-4b21-b8cd-37da0324f2d4.png" alt="img"></p><h2 id="在-IDEA中配置Tomcat"><a href="#在-IDEA中配置Tomcat" class="headerlink" title="在 IDEA中配置Tomcat"></a>在 IDEA中配置Tomcat</h2><p>1、添加tomcat</p><p><img src="https://s2.loli.net/2022/06/29/l8Ed3a4yPMDkt67.png"></p><p><img src="https://s2.loli.net/2022/06/29/4Dl6o5PuGUwIXgz.png"></p><p>2、相关配置</p><p><img src="https://s2.loli.net/2022/06/29/cd12uOE4vVowYKt.png"></p><p><img src="https://s2.loli.net/2022/06/29/AfUa4YRJK9B3DIM.png"></p><p>3、启动tomcat</p><p><img src="https://s2.loli.net/2022/06/29/HXgsxF645jilL8B.png"></p><h2 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h2><p>pom.xml 是Maven的核心配置文件.</p><p>记录了项目具体依赖的Jar包的配置版本。</p><p><img src="https://s2.loli.net/2022/06/29/iamSvdgbKpuOcTL.png"></p><p>maven由于它是约定大于配置，有时候会遇到写的配置文件不生效的问题。</p><p>解决方案：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>      <br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>          <br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>           <br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>   <br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>   <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>       <br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>           <br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> <br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>         <br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Maven仓库的使用"><a href="#Maven仓库的使用" class="headerlink" title="Maven仓库的使用"></a>Maven仓库的使用</h2><p>地址：<a href="https://mvnrepository.com/">https://mvnrepository.com</a></p><p><img src="https://s2.loli.net/2022/06/29/d128iU4YFKfITrk.png"></p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h2><p>Servlet用java语言开发动态资源网站的技术。</p><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p><p>servlet生成的class文件存放在tomcat中webapps目录下。</p><h2 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h2><p>Serlvet接口有两个默认的实现类：<code>HttpServlet</code>，<code>GenericServlet</code></p><p>1、构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立 Module；这个空的工程就是Maven主工程；</p><p>2、 关于Maven父子工程的理解：</p><ul><li>父工程会显示子工程的信息。</li><li>子工程会继承父工程。</li></ul><p><img src="https://s2.loli.net/2022/06/29/u1BmXQ27I3WV9YP.png"></p><p>3、编写一个Servlet程序</p><p>3.1、在父工程引用相关的Jar包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- servlet --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- jsp --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>3.2、编写一个普通类，继承HttpServlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.betterme;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException </span>{<br>        response.setContentType(<span class="hljs-string">"text/html; charset=utf-8"</span>);<br>        response.getWriter().print(<span class="hljs-string">"Hello,小番薯兔"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>3.3、Servlet的映射</p><p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器， 所以我们需要再web服务中注册我们写的Servlet，让浏览器找到我们java程序的发布目录</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册Servlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.betterme.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--Servlet的请求路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/betterme<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>3.4、配置Tomcat，并访问。</p><p><img src="https://s2.loli.net/2022/06/29/hxEXRrN4cTHitfI.png"></p><h2 id="Servlet原理"><a href="#Servlet原理" class="headerlink" title="Servlet原理"></a>Servlet原理</h2><p>Servlet是由Web服务器调用。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2022/03/26/kuangstudyb029cec6-5771-4a48-80a9-b0d1a539806a.png" alt="img"></p><h2 id="Servlet映射问题"><a href="#Servlet映射问题" class="headerlink" title="Servlet映射问题"></a>Servlet映射问题</h2><p>1、一个Servlet可以指定一个映射路径</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>2、一个Servlet可以指定多个映射路径</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello3<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/c69wVqFNMDHE3iG.png"></p><p><img src="https://s2.loli.net/2022/06/29/9FJTvOA1iB46aYM.png"></p><p><img src="https://s2.loli.net/2022/06/29/uaS73tWvzERybnM.png"></p><p>3、一个Servlet可以指定通用映射路径</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/jpVsYl3XxhaFRzM.png"></p><p><img src="https://s2.loli.net/2022/06/29/k7oq8Q5zuHNYOIZ.png"></p><p>4、默认请求路径</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/GvJljNdR7SuTMOk.png"></p><p>5、指定一些后缀或者前缀等等…</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 注意，*前面不能加项目映射的路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.demo<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/TjxtIme7Z9KANWJ.png"></p><p>6、优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--但是如果你在地址栏输入/hello, 也是能访问到HelloServlet的, 这就是因为固有的映射路径优先级最高--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.betterme.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--这里配置的是/*, 所以默认会进入error--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.betterme.ErrorServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/9zechwOSZtLq18n.png"></p><p><img src="https://s2.loli.net/2022/06/29/ZsyIiRCTprevBOQ.png"></p><p><img src="https://s2.loli.net/2022/06/29/WenZHqdfzRPjmQk.png"></p><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的 web应用；</p><h3 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h3><p>在一个Servlet中保存的数据，可以在另外一个servlet中拿到；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.betterme;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException </span>{<br>        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>        servletContext.setAttribute(<span class="hljs-string">"name"</span>, <span class="hljs-string">"小番薯兔"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.betterme;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException </span>{<br>        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>        response.setContentType(<span class="hljs-string">"text/html; charset=utf-8"</span>);<br>        response.getWriter().print(<span class="hljs-string">"name:"</span> + servletContext.getAttribute(<span class="hljs-string">"name"</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.betterme.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.betterme.GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/get<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>测试访问结果:</p><p>先访问hello路径保存数据到ServletContext</p><p><img src="https://s2.loli.net/2022/06/29/KL4PoEU8ec59YTj.png"></p><p>再访问get路径获取上面保存的数据</p><p><img src="https://s2.loli.net/2022/06/29/JVD6xQR27zU4PaT.png"></p><h3 id="获取初始化参数"><a href="#获取初始化参数" class="headerlink" title="获取初始化参数"></a>获取初始化参数</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>12345<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.betterme.GetInitParamServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/get<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.betterme;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetInitParamServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException </span>{<br>        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>        response.setContentType(<span class="hljs-string">"text/html; charset=utf-8"</span>);<br>        response.getWriter().print(servletContext.getInitParameter(<span class="hljs-string">"password"</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/mhSHNeDyt2fCzqO.png"></p><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.RequestDispatcher;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>        RequestDispatcher requestDispatcher = context.getRequestDispatcher(<span class="hljs-string">"/hello"</span>);<span class="hljs-comment">// 请求转发的路径</span><br>        requestDispatcher.forward(req, resp);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        System.out.println(<span class="hljs-string">"进入HelloServlet doGet方法"</span>);<br>        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>        servletContext.setAttribute(<span class="hljs-string">"name"</span>, <span class="hljs-string">"summer"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>hobby<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>climbing<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bambi.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bambi.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>访问/dispatcher的时候，经过转发，实际会访问/hello.但是url不会改变</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202303191838220.png"></p><h3 id="读取资源文件"><a href="#读取资源文件" class="headerlink" title="读取资源文件"></a>读取资源文件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadPropertiesServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        InputStream resourceAsStream = <span class="hljs-keyword">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">"/WEB-INF/classes/db.properties"</span>);<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        properties.load(resourceAsStream);<br>        String userName = properties.getProperty(<span class="hljs-string">"userName"</span>);<br>        String password = properties.getProperty(<span class="hljs-string">"password"</span>);<br>        resp.getWriter().print(userName + <span class="hljs-string">": "</span> + password);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">userName</span>= <span class="hljs-string">summer</span><br><span class="hljs-attr">password</span>= <span class="hljs-string">12345</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>read<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bambi.servlet.ReadPropertiesServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>read<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/read<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202303181929591.png"></p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202303181930466.png"></p><p>java文件和resources目录下的文件都打包在了classes文件夹里面，这个文件夹我们俗称为classpath。</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202303181929547.png"></p><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p><ul><li>获取客户端请求过来的参数：<code>HttpServletRequest</code></li><li>响应客户端响应一些信息：<code>HttpServletResponse</code></li></ul><h3 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h3><p>负责向浏览器发送数据的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ServletOutputStream <span class="hljs-title">getOutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<br><span class="hljs-function">PrintWriter <span class="hljs-title">getWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<br></code></pre></td></tr></tbody></table></figure><p>负责向浏览器发送响应头的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setCharacterEncoding</span><span class="hljs-params">(String var1)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> var1)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentLengthLong</span><span class="hljs-params">(<span class="hljs-keyword">long</span> var1)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentType</span><span class="hljs-params">(String var1)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setDateHeader</span><span class="hljs-params">(String var1, <span class="hljs-keyword">long</span> var2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addDateHeader</span><span class="hljs-params">(String var1, <span class="hljs-keyword">long</span> var2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setHeader</span><span class="hljs-params">(String var1, String var2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addHeader</span><span class="hljs-params">(String var1, String var2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setIntHeader</span><span class="hljs-params">(String var1, <span class="hljs-keyword">int</span> var2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addIntHeader</span><span class="hljs-params">(String var1, <span class="hljs-keyword">int</span> var2)</span></span>;<br></code></pre></td></tr></tbody></table></figure><p>响应的状态码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> SC_OK = <span class="hljs-number">200</span>;<br><span class="hljs-keyword">int</span> SC_MULTIPLE_CHOICES = <span class="hljs-number">300</span>;<br><span class="hljs-keyword">int</span> SC_BAD_REQUEST = <span class="hljs-number">400</span>;<br><span class="hljs-keyword">int</span> SC_NOT_FOUND = <span class="hljs-number">404</span>;<br><span class="hljs-keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="hljs-number">500</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h3><h4 id="验证码功能"><a href="#验证码功能" class="headerlink" title="验证码功能"></a>验证码功能</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        <span class="hljs-comment">//让浏览器3秒刷新一次</span><br>        resp.setHeader(<span class="hljs-string">"refresh"</span>, <span class="hljs-string">"3"</span>);<br><br>        <span class="hljs-comment">//在内存中创建一个图片</span><br>        BufferedImage bufferedImage = <span class="hljs-keyword">new</span> BufferedImage(<span class="hljs-number">80</span>, <span class="hljs-number">20</span>, BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-comment">//得到图片</span><br>        Graphics2D graphics = (Graphics2D) bufferedImage.getGraphics();<br>        <span class="hljs-comment">//设置图片背景颜色</span><br>        graphics.setBackground(Color.white);<br>        graphics.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">80</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//给图片写数据</span><br>        graphics.setColor(Color.red);<br>        graphics.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-keyword">null</span>, Font.BOLD, <span class="hljs-number">20</span>));<br>        graphics.drawString(generateNum(), <span class="hljs-number">0</span>, <span class="hljs-number">20</span>);<br><br>        resp.setContentType(<span class="hljs-string">"image/png"</span>);<br>        resp.setDateHeader(<span class="hljs-string">"expires"</span>, -<span class="hljs-number">1</span>);<br>        resp.setHeader(<span class="hljs-string">"Cache-Control"</span>, <span class="hljs-string">"no-cache"</span>);<br><br>        <span class="hljs-comment">//把图片写给浏览器</span><br>        ImageIO.write(bufferedImage, <span class="hljs-string">"png"</span>, resp.getOutputStream());<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">generateNum</span><span class="hljs-params">()</span> </span>{<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        String num = random.nextInt(<span class="hljs-number">9999999</span>) + <span class="hljs-string">""</span>;<br>        StringBuffer stringBuffer = <span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span> - num.length(); i++) {<br>            stringBuffer.append(<span class="hljs-string">"0"</span>);<br>        }<br>        num = stringBuffer.toString() + num;<br>        <span class="hljs-keyword">return</span> num;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>randomNum<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>ImageServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>randomNum<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/randomNum<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/N2HvsVxqAUn4MDj.png"></p><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><ul><li>获取下载文件的路径</li><li>下载的文件名是什么</li><li>想办法让浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到buffer缓冲区</li><li>xxxxxxxxxx&nbsp;– listing properties –name=DB02pwd=130.133.13.14java</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DownloadPicServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        String realPath = <span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">"/WEB-INF/classes/test.png"</span>);<br>        System.out.println(<span class="hljs-string">"需要下载的文件的路径是"</span> + realPath);<br><br>        String fileName = realPath.substring(realPath.lastIndexOf(<span class="hljs-string">"\\"</span>) + <span class="hljs-number">1</span>);<br><br>        resp.setHeader(<span class="hljs-string">"Content-disposition"</span>, <span class="hljs-string">"attachment;filename="</span> + fileName);<br><br>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(realPath);<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        ServletOutputStream outputStream = resp.getOutputStream();<br>        <span class="hljs-keyword">while</span> ((len = fileInputStream.read(buffer)) != -<span class="hljs-number">1</span>) {<br>            outputStream.write(buffer, <span class="hljs-number">0</span>, len);<br>        }<br><br>        fileInputStream.close();<br>        outputStream.close();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>downloadPic<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>DownloadPicServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>downloadPic<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/downloadPic<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/wDoqKElTYvsM6Ox.png"></p><p>在地址栏输入downloadPic</p><p><img src="https://s2.loli.net/2022/06/29/NAOVhE8dvpeBlmk.png"></p><p>回车</p><p><img src="https://s2.loli.net/2022/06/29/JKgZBdMyiL6G23u.png"></p><p>文件下载成功</p><p><img src="https://s2.loli.net/2022/06/29/3P8iZEmebd76sJc.png"></p><p>如果文件名是中文，那么用URLEncoder.encode(fileName, “utf8”)把文件名转一下，要不可能会出现乱码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DownloadPicServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        String realPath = <span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">"/WEB-INF/classes/测试中文文件名.png"</span>);<br>        System.out.println(<span class="hljs-string">"需要下载的文件的路径是"</span> + realPath);<br><br>        String fileName = realPath.substring(realPath.lastIndexOf(<span class="hljs-string">"\\"</span>) + <span class="hljs-number">1</span>);<br><br>        resp.setHeader(<span class="hljs-string">"Content-disposition"</span>, <span class="hljs-string">"attachment;filename="</span> + URLEncoder.encode(fileName, <span class="hljs-string">"utf8"</span>));<br><br>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(realPath);<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        ServletOutputStream outputStream = resp.getOutputStream();<br>        <span class="hljs-keyword">while</span> ((len = fileInputStream.read(buffer)) != -<span class="hljs-number">1</span>) {<br>            outputStream.write(buffer, <span class="hljs-number">0</span>, len);<br>        }<br><br>        fileInputStream.close();<br>        outputStream.close();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/YDxA5TvgojXHqIN.png"></p><p><img src="https://s2.loli.net/2022/06/29/veE38xjC9VlXTFB.png"></p><p><img src="https://s2.loli.net/2022/06/29/igxYCMtAKos85hu.png"></p><h4 id="转发与重定向"><a href="#转发与重定向" class="headerlink" title="转发与重定向"></a>转发与重定向</h4><p><strong>转发流程</strong>：</p><p>实现代码：</p><figure class="highlight vbscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-built_in">request</span>.getRequestDispatcher(<span class="hljs-string">"/地址"</span>).forward(<span class="hljs-built_in">request</span>, <span class="hljs-built_in">response</span>);<br></code></pre></td></tr></tbody></table></figure><p><strong>重定向流程</strong>：</p><p>实现代码</p><figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">response.sendRedirect(<span class="hljs-string">"/地址"</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedirectServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        resp.sendRedirect(<span class="hljs-string">"/servlet_05_war/randomNum"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>redirect<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>RedirectServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>redirect<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/redirect<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/BqHKjXrv2mcSLsW.png"></p><p><img src="https://s2.loli.net/2022/06/29/MOUNFkPQL2G8Krq.png"></p><p><img src="https://s2.loli.net/2022/06/29/78PoeWugC6sEmHI.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Request</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        <span class="hljs-comment">//处理请求</span><br>        String userName = req.getParameter(<span class="hljs-string">"userName"</span>);<br>        String password = req.getParameter(<span class="hljs-string">"password"</span>);<br>        System.out.println(userName + <span class="hljs-string">":"</span> + password);<br>        <span class="hljs-comment">//重定向一定要注意路径问题</span><br>        resp.sendRedirect(<span class="hljs-string">"/servlet_05_war/success.jsp"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>request<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>Request<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>request<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>index.jsp</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;<br>        &lt;form action=<span class="hljs-string">"${pageContext.request.contextPath}/login"</span> method=<span class="hljs-string">"get"</span>&gt;<br>            UserName:&lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"userName"</span>&gt; &lt;br&gt;<br>            Password:&lt;input type=<span class="hljs-string">"password"</span> name=<span class="hljs-string">"password"</span>&gt; &lt;br&gt;<br>            &lt;input type=<span class="hljs-string">"submit"</span>&gt;<br>        &lt;/form&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p>success.jsp</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;h1&gt;success~&lt;/h1&gt;<br>        &lt;/form&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/3w5OSoEAFGjMsBh.png"></p><p>如果Request类不加重定向代码，那么submit之后就会进入一个空白页面，在路径上会把填写的userName和password打出来。</p><p><img src="https://s2.loli.net/2022/06/29/u4NdODnGq3s1rJA.png"></p><p>如果Request类加了重定向代码，那么submit之后就会进入重定向后的页面。</p><p><img src="https://s2.loli.net/2022/06/29/BOsvrdPexG3LMik.png"></p><h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>获取参数request.getParameter(<span class="hljs-string">"p1"</span>);request.getParameterValues(<span class="hljs-string">"p2"</span>);<span class="hljs-regexp">//</span>设置request编码为UTF-<span class="hljs-number">8</span>request.setCharacterEncoding(<span class="hljs-string">"UTF-8"</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="获取前端传递的参数并且实现请求转发"><a href="#获取前端传递的参数并且实现请求转发" class="headerlink" title="获取前端传递的参数并且实现请求转发"></a>获取前端传递的参数并且实现请求转发</h3><p>工程目录结构</p><p><img src="https://s2.loli.net/2022/06/29/9ajduA4W7bTgzIr.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        req.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br><br>        <span class="hljs-comment">//获取前台表单数据</span><br>        String userName = req.getParameter(<span class="hljs-string">"userName"</span>);<br>        String password = req.getParameter(<span class="hljs-string">"password"</span>);<br><br>        String[] hobbies = req.getParameterValues(<span class="hljs-string">"hobby"</span>);<br><br>        System.out.println(Arrays.toString(hobbies));<br><br>        <span class="hljs-comment">//请求转发</span><br>        <span class="hljs-comment">//这里的/指的是当前的web应用</span><br>        req.getRequestDispatcher(<span class="hljs-string">"/success.jsp"</span>).forward(req, resp);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        doGet(req, resp);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>web.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>index.jsp</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;Login Page&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        &lt;form action=<span class="hljs-string">"${pageContext.request.contextPath}/login"</span> method=<span class="hljs-string">"post"</span>&gt;<br>            用户名：&lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"userName"</span>&gt; &lt;br&gt;<br>            密码：&lt;input type=<span class="hljs-string">"password"</span> name=<span class="hljs-string">"password"</span>&gt; &lt;br&gt;<br><br>            爱好：&lt;input type=<span class="hljs-string">"checkbox"</span> name=<span class="hljs-string">"hobby"</span> value=<span class="hljs-string">"跑步"</span>&gt;跑步<br>            &lt;input type=<span class="hljs-string">"checkbox"</span> name=<span class="hljs-string">"hobby"</span> value=<span class="hljs-string">"阅读"</span>&gt;阅读<br>            &lt;input type=<span class="hljs-string">"checkbox"</span> name=<span class="hljs-string">"hobby"</span> value=<span class="hljs-string">"编程"</span>&gt;编程<br>            &lt;input type=<span class="hljs-string">"checkbox"</span> name=<span class="hljs-string">"hobby"</span> value=<span class="hljs-string">"听音乐"</span>&gt;听音乐<br>            &lt;input type=<span class="hljs-string">"checkbox"</span> name=<span class="hljs-string">"hobby"</span> value=<span class="hljs-string">"爬山"</span>&gt;爬山<br>            &lt;br&gt;<br><br>            &lt;input type=<span class="hljs-string">"submit"</span>&gt;<br>        &lt;/form&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p>success.jsp</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;Login Success Page&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        &lt;h1&gt;Login success~&lt;/h1&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p>==请求转发和重定向的区别==</p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化；307</li><li>重定向的时候，url地址栏会发生变化；302</li></ul><p><img src="https://s2.loli.net/2022/06/29/5Nbay3CGdeIwZUf.png"></p><p><img src="https://s2.loli.net/2022/06/29/NIUk9yMw2ZL6VdK.png"></p><h1 id="Cookie-amp-Session"><a href="#Cookie-amp-Session" class="headerlink" title="Cookie &amp; Session"></a>Cookie &amp; Session</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>用户打开一个 浏览器，点击了很多 超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话。</p><p>==有状态会话==：</p><p>1、 服务端给客户端一个标识，客户端带上标识访问服务端即可: cookie</p><p>2、 服务器登记你来过了，下次你来的时候我来匹配你: seesion</p><h2 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h2><p><strong>Cookie</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">客户端技术 （响应，请求）<br></code></pre></td></tr></tbody></table></figure><p><strong>Session</strong></p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">服务器技术，利用这个技术，可以保存用户的会话信息。我们可以把信息或者数据放在<span class="hljs-keyword">Session</span>中。<br></code></pre></td></tr></tbody></table></figure><p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie"></a>什么是Cookie</h3><p>访问网站的时候，Cookie会在客户端保存。一般会保存在本地的 用户目录下 appdata；</p><p>1、访问网站时，服务器会返回cookie信息。</p><p>2、客户端访问服务器时，需要带上cookie，方便知道你是谁。</p><h3 id="关于Cookie的细节问题"><a href="#关于Cookie的细节问题" class="headerlink" title="关于Cookie的细节问题"></a>关于Cookie的细节问题</h3><ul><li>一个Cookie只能保存一个信息；</li><li>一个web站点可以给浏览器发送多个cookie，每个站点最多存放20个cookie；</li><li>Cookie大小有限制4kb；</li><li>300个cookie浏览器上限</li></ul><h3 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h3><ul><li><p>不设置有效期，关闭浏览器，自动失效；</p></li><li><p>设置有效期时间为 0 ；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cookie.setMaxAge(<span class="hljs-number">0</span>);<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="中文编码解码"><a href="#中文编码解码" class="headerlink" title="中文编码解码"></a>中文编码解码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">URLEncoder.encode(<span class="hljs-string">"小番薯兔"</span>, <span class="hljs-string">"utf-8"</span>);<br>URLDecoder.decode(cookie.getValue(), <span class="hljs-string">"utf-8"</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.betterme.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">//保存用户上一次访问的时间</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        req.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setContentType(<span class="hljs-string">"text/html;charset=utf-8"</span>);<br><br>        PrintWriter out = resp.getWriter();<br>        <span class="hljs-comment">//Cookie,服务器端从客户端获取。</span><br>        Cookie[] cookies = req.getCookies();<span class="hljs-comment">//这里返回数组，说明Cookie可能存在多个。</span><br>        <span class="hljs-comment">//判断Cookie是否存在</span><br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span>) {<br>            out.print(<span class="hljs-string">"你上一次访问这个网站的时间是："</span>);<br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) {<br>                <span class="hljs-keyword">if</span> (cookie.getName().equals(<span class="hljs-string">"lastLoginTime"</span>)) {<br>                    <span class="hljs-comment">//获取cookie中的值</span><br>                    <span class="hljs-keyword">long</span> l = Long.parseLong(cookie.getValue());<br>                    Date date = <span class="hljs-keyword">new</span> Date(l);<br>                    out.write(date.toString());<br>                }<br>            }<br>        } <span class="hljs-keyword">else</span> {<br>            out.write(<span class="hljs-string">"这是你第一次访问这个网站"</span>);<br>        }<br><br>        <span class="hljs-comment">//服务器给客户端响应一个Cookie</span><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">"lastLoginTime"</span>, System.currentTimeMillis() + <span class="hljs-string">""</span>);<br>        cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);<span class="hljs-comment">//设置cookie过期时间</span><br>        resp.addCookie(cookie);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>cookieDemo01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.betterme.servlet.CookieDemo01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>cookieDemo01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/cookieDemo01<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/s7tlg53MqwcDnHF.png"></p><p><a href="https://gitee.com/xiaofanshutugoon/cloudimage/raw/master/img/snipaste_20220517_080641.png">https://gitee.com/xiaofanshutugoon/cloudimage/raw/master/img/snipaste_20220517_080641.png</a></p><p><img src="https://s2.loli.net/2022/06/29/s7tlg53MqwcDnHF.png"></p><p><img src="https://s2.loli.net/2022/06/29/1aY3hBzlftLIcu2.png"></p><h2 id="Session（重点）"><a href="#Session（重点）" class="headerlink" title="Session（重点）"></a>Session（重点）</h2><h3 id="什么是Session"><a href="#什么是Session" class="headerlink" title="什么是Session"></a>什么是Session</h3><ul><li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li><li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li><li>用户登录之后，整个网站他都可以访问！—&gt; Session的应用：保存用户的信息；用户的权限等等</li></ul><h3 id="Session和Cookie的区别"><a href="#Session和Cookie的区别" class="headerlink" title="Session和Cookie的区别"></a>Session和Cookie的区别</h3><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li><li>Session把用户的数据写到用户独占Session中，服务器端保存 （保存重要的信息，减少服务器资源的浪费）</li><li>Session对象由服务器创建；</li></ul><p><img src="https://s2.loli.net/2022/06/29/akzZNMU9jvPlK8D.png"></p><p><img src="https://s2.loli.net/2022/06/29/HIc1dKAqWmFifb4.png"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>保存一个登录用户的信息；</li><li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li></ul><h3 id="Session常用方法"><a href="#Session常用方法" class="headerlink" title="Session常用方法"></a>Session常用方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//得到Session</span><br>HttpSession session = req.getSession();<br><span class="hljs-comment">//给Session中存数据</span><br>session.setAttribute(<span class="hljs-string">"name"</span>,<span class="hljs-string">"admin"</span>);<br><span class="hljs-comment">//获取Session中的数据</span><br>session.getAttribute(<span class="hljs-string">"name"</span>);<br><span class="hljs-comment">//删除Session中的数据</span><br>session.removeAttribute(<span class="hljs-string">"name"</span>);<br><span class="hljs-comment">//获取Session的ID</span><br>String sessionId = session.getId()<br><span class="hljs-comment">//手动注销Session</span><br>Sessionsession.invalidate();<br></code></pre></td></tr></tbody></table></figure><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p>保存一个字符串到session</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.betterme.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        <span class="hljs-comment">//解决乱码问题</span><br>        req.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setContentType(<span class="hljs-string">"text/html;charset=utf-8"</span>);<br><br>        <span class="hljs-comment">//得到session</span><br>        HttpSession session = req.getSession();<br><br>        <span class="hljs-comment">//给session中存数据</span><br>        session.setAttribute(<span class="hljs-string">"name"</span>, <span class="hljs-string">"小番薯兔"</span>);<br><br>        <span class="hljs-comment">//获取session的ID</span><br>        String id = session.getId();<br>        <span class="hljs-comment">//判断session是不是新session</span><br>        <span class="hljs-keyword">if</span> (session.isNew()) {<br>            resp.getWriter().write(<span class="hljs-string">"session创建成功, ID:"</span> + id);<br>        } <span class="hljs-keyword">else</span> {<br>            resp.getWriter().write(<span class="hljs-string">"这个session在服务器中已经存在了, ID:"</span> + id);<br>        }<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>用SessionDemo02获取SessionDemo01保存在session中的字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.betterme.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionDemo02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        req.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setContentType(<span class="hljs-string">"text/html;charset=utf-8"</span>);<br><br>        String name = (String) req.getSession().getAttribute(<span class="hljs-string">"name"</span>);<br>        System.out.println(name);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><p>保存一个对象到session</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.betterme.servlet;<br><br><span class="hljs-keyword">import</span> com.betterme.servlet.pojo.Person;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        <span class="hljs-comment">//解决乱码问题</span><br>        req.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setContentType(<span class="hljs-string">"text/html;charset=utf-8"</span>);<br><br>        <span class="hljs-comment">//得到session</span><br>        HttpSession session = req.getSession();<br><br>        <span class="hljs-comment">//给session中存数据</span><br><span class="hljs-comment">//        session.setAttribute("name", "小番薯兔");</span><br>        session.setAttribute(<span class="hljs-string">"person"</span>, <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"小番薯兔"</span>, <span class="hljs-number">23</span>));<br><br>        <span class="hljs-comment">//获取session的ID</span><br>        String id = session.getId();<br>        <span class="hljs-comment">//判断session是不是新session</span><br>        <span class="hljs-keyword">if</span> (session.isNew()) {<br>            resp.getWriter().write(<span class="hljs-string">"session创建成功, ID:"</span> + id);<br>        } <span class="hljs-keyword">else</span> {<br>            resp.getWriter().write(<span class="hljs-string">"这个session在服务器中已经存在了, ID:"</span> + id);<br>        }<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>获取保存在session中的对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.betterme.servlet;<br><br><span class="hljs-keyword">import</span> com.betterme.servlet.pojo.Person;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionDemo02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        req.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        resp.setContentType(<span class="hljs-string">"text/html;charset=utf-8"</span>);<br><br>        Person person = (Person) req.getSession().getAttribute(<span class="hljs-string">"person"</span>);<br>        System.out.println(person);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h3><p>手动注销Session</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.betterme.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionDemo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{<br>        HttpSession session = req.getSession();<br>        session.removeAttribute(<span class="hljs-string">"name"</span>);<br>        <span class="hljs-comment">//手动注销Session</span><br>        session.invalidate();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>不同浏览器生成的sessionId是不同的。</p><p><img src="https://s2.loli.net/2022/06/29/MBjRaPnkzxSZGT3.png"></p><p>手动清除session前</p><p><img src="https://s2.loli.net/2022/06/29/drR5fQvwq3LpKIX.png"></p><p>手动清除session后</p><p><img src="https://s2.loli.net/2022/06/29/A9gPC7Jtnfjyp6b.png"></p><h3 id="会话自动过期"><a href="#会话自动过期" class="headerlink" title="会话自动过期"></a>会话自动过期</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置Session默认的失效时间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--1分钟后Session自动失效，以分钟为单位--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/29/8OQSU2zdJcRZfhx.png"></p><p>1分钟后，刷新页面，重新生成了一个sessionId。</p><p><img src="https://s2.loli.net/2022/06/29/l3wQFiKHXoC4VyL.png"></p><p>疑问：自动失效的这个，这个是只能让第一次的sessionId自动失效一次吗？经过测试，一旦重新生成了一个sessionId之后，这个sessionId就不会失效了。</p><p>下来查资料研究一下这里</p><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h2><p>Java Server Pages(JSP)：Java服务器端页面，也和Servlet一样，用于动态Web技术！<br>最大的特点：</p><ul><li><p>写JSP就像在写HTML</p></li><li><p>区别：</p><ul><li>HTML只给用户提供静态的数据</li><li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li></ul></li></ul><h2 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理"></a>JSP原理</h2><p>学习思路：JSP到底是怎么执行的？</p><ul><li><p>代码层面没有任何问题</p></li><li><p>服务器内部工作</p><ul><li>tomcat中有一个work目录；</li><li>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/19/pJgFxosEIZ9dH2S.png"></p><p>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</p><p>JSP最终也会被转换成为一个Java类！</p><p><img src="https://s2.loli.net/2022/05/20/oHB1ri8Rl6I9UkF.png"></p><p>JSP 本质上就是一个Servlet。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index_jsp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">jasper</span>.<span class="hljs-title">runtime</span>.<span class="hljs-title">HttpJspBase</span></span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">jasper</span>.<span class="hljs-title">runtime</span>.<span class="hljs-title">JspSourceDependent</span>,</span><br><span class="hljs-class">                 <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">jasper</span>.<span class="hljs-title">runtime</span>.<span class="hljs-title">JspSourceImports</span></span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpJspBase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpJspPage</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/21/ZMzuUryR765sD8f.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspInit</span><span class="hljs-params">()</span> </span>{<br>}<br><span class="hljs-comment">//销毁</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspDestroy</span><span class="hljs-params">()</span> </span>{<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspService</span><span class="hljs-params">(<span class="hljs-keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="hljs-keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> java.io.IOException, javax.servlet.ServletException </span>{<br>    }<br></code></pre></td></tr></tbody></table></figure><p>内置对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;<span class="hljs-comment">//页面上下文</span><br>javax.servlet.http.HttpSession session = <span class="hljs-keyword">null</span>;<span class="hljs-comment">//session</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletContext application;<span class="hljs-comment">//application</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;<span class="hljs-comment">//config</span><br>javax.servlet.jsp.JspWriter out = <span class="hljs-keyword">null</span>;<span class="hljs-comment">//out</span><br><span class="hljs-keyword">final</span> java.lang.Object page = <span class="hljs-keyword">this</span>;<span class="hljs-comment">//page 当前页</span><br>HttpServletRequest request<span class="hljs-comment">//请求</span><br>HttpServletResponse response<span class="hljs-comment">//响应</span><br></code></pre></td></tr></tbody></table></figure><p>输出页面前增加的代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> {<br>    response.setContentType(<span class="hljs-string">"text/html"</span>);<span class="hljs-comment">//设置响应的页面类型</span><br>    pageContext = _jspxFactory.getPageContext(<span class="hljs-keyword">this</span>, request, response,<br>                                              <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-keyword">true</span>);<br>    _jspx_page_context = pageContext;<br>    application = pageContext.getServletContext();<br>    config = pageContext.getServletConfig();<br>    session = pageContext.getSession();<br>    out = pageContext.getOut();<br>    _jspx_out = out;<br>}<br><br>以上的这些对象，我们可以在jsp页面上直接使用。<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/21/bNrOdCl2UwTtXZE.png"></p><p>在JSP页面中，只要是java代码就会原封不动的输出，如果是html代码，就会被转换为out.write(“\r\n”);</p><p><img src="https://s2.loli.net/2022/05/21/EuaHClzyng8YF15.png"></p><h2 id="JSP基础语法"><a href="#JSP基础语法" class="headerlink" title="JSP基础语法"></a>JSP基础语法</h2><p>任何语言都有自己的语法。</p><p>JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解即可），可支持Java所有语法！</p><h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%-- JSP表达式<br> 作用：用来将程序的输出，输出到客户端<br> &lt;%=变量或者表达式%&gt;<br> --%&gt;<br>&lt;%=<span class="hljs-keyword">new</span> java.util.Date()%&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="JSP脚本片段"><a href="#JSP脚本片段" class="headerlink" title="JSP脚本片段"></a>JSP脚本片段</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%-- JSP脚本片段<br> 作用：用来将程序的输出，输出到客户端<br> &lt;%=变量或者表达式%&gt;<br> --%&gt;<br>&lt;%<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) {<br>        sum += i;<br>    }<br>    out.println(<span class="hljs-string">"&lt;h1&gt;sum="</span> + sum + <span class="hljs-string">"&lt;/h1&gt;"</span>);<br>%&gt;<br><br>&lt;%<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">100</span>;<br>    out.println(x);<br>%&gt;<br>&lt;p&gt;这是一个JSP文档&lt;/p&gt;<br>&lt;%<br>    out.println(x);<br>%&gt;<br><br>&lt;%-- 在JSP代码中嵌入HTML元素 --%&gt;<br>&lt;%<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) {<br>%&gt;<br>&lt;h2&gt;Hello Summer&lt;/h2&gt;<br>&lt;%<br>    }<br>%&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- JSP声明 --&gt;<br>&lt;%!<br>    <span class="hljs-keyword">static</span>{<br>        String message = <span class="hljs-string">"Enjoy Every Day~"</span>;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMethod</span><span class="hljs-params">()</span></span>{<br>        System.out.println(<span class="hljs-string">"你好，明天~"</span>);<br>    }<br>%&gt;<br></code></pre></td></tr></tbody></table></figure><p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p><p><img src="https://s2.loli.net/2022/05/22/I9oMilt61v2JKgu.png"></p><p>在JSP，嵌入Java代码即可！</p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span><span class="hljs-meta">%</span>&gt;&lt;<span class="hljs-meta">%</span>=<span class="hljs-meta">%</span>&gt;&lt;<span class="hljs-meta">%</span>!<span class="hljs-meta">%</span>&gt;&lt;<span class="hljs-meta">%</span>--注释--<span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></tbody></table></figure><p>JSP的注释，不会在客户端显示，HTML注释就会！</p><h2 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h2><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> args.... %&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">""</span>%&gt;<br>&lt;%--<span class="hljs-meta">@include</span>会将两个页面合二为一--%&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"common/header.jsp"</span>%&gt;<br>&lt;h1&gt;网页主体&lt;/h1&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"common/footer.jsp"</span>%&gt;<br>&lt;hr&gt;<br>&lt;%--jSP标签jsp:include：拼接页面，本质还是三个--%&gt;<br>&lt;jsp:include page=<span class="hljs-string">"/common/header.jsp"</span>/&gt;<br>&lt;h1&gt;网页主体&lt;/h1&gt;<br>&lt;jsp:include page=<span class="hljs-string">"/common/footer.jsp"</span>/&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="9大内置对象"><a href="#9大内置对象" class="headerlink" title="9大内置对象"></a>9大内置对象</h2><ul><li>PageContext</li><li>Request</li><li>Response</li><li>Session</li><li>Application —&gt; SerlvetContext</li><li>config —&gt;SerlvetConfig</li><li>out</li><li>page ，不需要了解</li><li>exception</li></ul><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%-- 内置对象 --%&gt;<br>&lt;%<br>    pageContext.setAttribute(<span class="hljs-string">"name1"</span>, <span class="hljs-string">"jack1"</span>);<span class="hljs-comment">//保存的数据只在一个页面中有效</span><br>    request.setAttribute(<span class="hljs-string">"name2"</span>, <span class="hljs-string">"jack2"</span>);<span class="hljs-comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br>    session.setAttribute(<span class="hljs-string">"name3"</span>, <span class="hljs-string">"jack3"</span>);<span class="hljs-comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br>    application.setAttribute(<span class="hljs-string">"name4"</span>, <span class="hljs-string">"jack4"</span>);<span class="hljs-comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span><br>%&gt;<br><br>&lt;%--脚本片段中的代码，会被原封不动的生成到.jsp_java--%&gt;<br>&lt;%<br>    <span class="hljs-comment">//从pageContext取出保存的值</span><br>    String name1 = (String) pageContext.findAttribute(<span class="hljs-string">"name1"</span>);<br>    String name2 = (String) pageContext.findAttribute(<span class="hljs-string">"name2"</span>);<br>    String name3 = (String) pageContext.findAttribute(<span class="hljs-string">"name3"</span>);<br>    String name4 = (String) pageContext.findAttribute(<span class="hljs-string">"name4"</span>);<br>    String name5 = (String) pageContext.findAttribute(<span class="hljs-string">"name5"</span>);<br>%&gt;<br><br>&lt;%--使用EL表达式输出 ${} --%&gt;<br>&lt;h1&gt;取出的值为：&lt;/h1&gt;<br>&lt;h5&gt;${name1}&lt;/h5&gt;<br>&lt;h5&gt;${name2}&lt;/h5&gt;<br>&lt;h5&gt;${name3}&lt;/h5&gt;<br>&lt;h5&gt;${name4}&lt;/h5&gt;<br>&lt;h5&gt;${name5}&lt;/h5&gt;&lt;%--这种方式如果值不存在，EL表达式会自动给你过滤掉--%&gt;<br>&lt;h5&gt;&lt;%=name5%&gt;&lt;/h5&gt;&lt;%--这种方式如果值不存在，那么会输出一个null--%&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p>请求转发</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;%<br>        pageContext.forward(<span class="hljs-string">"/index.jsp"</span>);<br>        <span class="hljs-comment">//等价于</span><br>        <span class="hljs-comment">//request.getRequestDispatcher("/index.jsp").forward(request, response);</span><br>    %&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/31/k7Kr29QWSwcsONF.png"></p><p>request保存的数据只在一次请求中有效，请求转发会携带这个数据</p><p>将pageContextDemo01转发到pageContextDemo02，这个时候访问pageContextDemo01的时候，就能访问到name2</p><p>pageContextDemo01.jsp</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;pageContextDemo01&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%-- 内置对象 --%&gt;<br>&lt;%<br>    pageContext.setAttribute(<span class="hljs-string">"name1"</span>, <span class="hljs-string">"jack1"</span>);<span class="hljs-comment">//保存的数据只在一个页面中有效</span><br>    request.setAttribute(<span class="hljs-string">"name2"</span>, <span class="hljs-string">"jack2"</span>);<span class="hljs-comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br>    session.setAttribute(<span class="hljs-string">"name3"</span>, <span class="hljs-string">"jack3"</span>);<span class="hljs-comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br>    application.setAttribute(<span class="hljs-string">"name4"</span>, <span class="hljs-string">"jack4"</span>);<span class="hljs-comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span><br>%&gt;<br><br>&lt;%--脚本片段中的代码，会被原封不动的生成到.jsp_java--%&gt;<br>&lt;%<br>    <span class="hljs-comment">//从pageContext取出保存的值</span><br>    String name1 = (String) pageContext.findAttribute(<span class="hljs-string">"name1"</span>);<br>    String name2 = (String) pageContext.findAttribute(<span class="hljs-string">"name2"</span>);<br>    String name3 = (String) pageContext.findAttribute(<span class="hljs-string">"name3"</span>);<br>    String name4 = (String) pageContext.findAttribute(<span class="hljs-string">"name4"</span>);<br>    String name5 = (String) pageContext.findAttribute(<span class="hljs-string">"name5"</span>);<br>%&gt;<br><br>&lt;%--请求转发--%&gt;<br>&lt;%<br>    pageContext.forward(<span class="hljs-string">"/pageContextDemo02.jsp"</span>);<br>%&gt;<br><br>&lt;%--使用EL表达式输出 ${} --%&gt;<br>&lt;h1&gt;取出的值为：&lt;/h1&gt;<br>&lt;h5&gt;${name1}&lt;/h5&gt;<br>&lt;h5&gt;${name2}&lt;/h5&gt;<br>&lt;h5&gt;${name3}&lt;/h5&gt;<br>&lt;h5&gt;${name4}&lt;/h5&gt;<br>&lt;h5&gt;${name5}&lt;/h5&gt;&lt;%--这种方式如果值不存在，EL表达式会自动给你过滤掉--%&gt;<br>&lt;h5&gt;&lt;%=name5%&gt;&lt;/h5&gt;&lt;%--这种方式如果值不存在，那么会输出一个null--%&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p>pageContextDemo02.jsp</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;pageContextDemo02&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%--脚本片段中的代码，会被原封不动的生成到.jsp_java--%&gt;<br>&lt;%<br>    <span class="hljs-comment">//从pageContext取出保存的值</span><br>    String name1 = (String) pageContext.findAttribute(<span class="hljs-string">"name1"</span>);<br>    String name2 = (String) pageContext.findAttribute(<span class="hljs-string">"name2"</span>);<br>    String name3 = (String) pageContext.findAttribute(<span class="hljs-string">"name3"</span>);<br>    String name4 = (String) pageContext.findAttribute(<span class="hljs-string">"name4"</span>);<br>    String name5 = (String) pageContext.findAttribute(<span class="hljs-string">"name5"</span>);<br>%&gt;<br><br>&lt;%--使用EL表达式输出 ${} --%&gt;<br>&lt;h1&gt;取出的值为：&lt;/h1&gt;<br>&lt;h5&gt;${name1}&lt;/h5&gt;<br>&lt;h5&gt;${name2}&lt;/h5&gt;<br>&lt;h5&gt;${name3}&lt;/h5&gt;<br>&lt;h5&gt;${name4}&lt;/h5&gt;<br>&lt;h5&gt;${name5}&lt;/h5&gt;&lt;%--这种方式如果值不存在，EL表达式会自动给你过滤掉--%&gt;<br>&lt;h5&gt;&lt;%=name5%&gt;&lt;/h5&gt;&lt;%--这种方式如果值不存在，那么会输出一个null--%&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/05/31/DVSd93nBivG8lY6.png"></p><p>但是如果直接访问pageContextDemo02，还是不能访问name2</p><p><img src="https://s2.loli.net/2022/05/31/ATwSKxILrCJ6piR.png"></p><p><strong>request</strong>：客户端向服务器发送请求，产生的数据，可能过会就用不上了，例：某个文章！</p><p><strong>session</strong>：客户端向服务器发送请求，产生的数据，可能用完了还要用，例：用户信息；</p><p><strong>application</strong>：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用。例：全局参数。</p><h2 id="JSP标签、JSTL标签、EL表达式"><a href="#JSP标签、JSTL标签、EL表达式" class="headerlink" title="JSP标签、JSTL标签、EL表达式"></a>JSP标签、JSTL标签、EL表达式</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- JSTL表达式的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- standard标签库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式${}"></a>EL表达式${}</h3><ul><li>获取数据</li><li>执行运算</li><li>获取web开发的常用对象</li></ul><h3 id="JSP标签"><a href="#JSP标签" class="headerlink" title="JSP标签"></a>JSP标签</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:include page=<span class="hljs-string">"相对 URL 地址"</span> flush=<span class="hljs-string">"true"</span> /&gt;<br><br>&lt;jsp:forward page=<span class="hljs-string">"相对 URL 地址"</span> /&gt;<br>&lt;jsp:param name=<span class="hljs-string">"fontcolor"</span> value=<span class="hljs-string">"red"</span> /&gt;<br>&lt;jsp:param name=<span class="hljs-string">"background"</span> value=<span class="hljs-string">"black"</span> /&gt;<br>&lt;/jsp:forward&gt;<br></code></pre></td></tr></tbody></table></figure><p>示例jspTag1.jsp</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Better me&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;jsp:forward page=<span class="hljs-string">"jspTag2.jsp"</span>&gt;<br>        &lt;jsp:param name=<span class="hljs-string">"name"</span> value=<span class="hljs-string">"lucky"</span>/&gt;<br>        &lt;jsp:param name=<span class="hljs-string">"age"</span> value=<span class="hljs-string">"10"</span>/&gt;<br>    &lt;/jsp:forward&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p>示例jspTag2.jsp</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Better me me&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;%-- 通过JSP表达式获取name和age<br>         &lt;%=变量或者表达式%&gt;<br>     --%&gt;<br>    姓名： &lt;%=request.getParameter(<span class="hljs-string">"name"</span>)%&gt;<br>    年龄： &lt;%=request.getParameter(<span class="hljs-string">"age"</span>)%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/13/ivs4ySnO3NV5HwZ.png"></p><h3 id="JSTL表达式"><a href="#JSTL表达式" class="headerlink" title="JSTL表达式"></a>JSTL表达式</h3><p>JSTL支持通用的、结构化的任务，比如迭代，条件判断，XML文档操作，国际化标签，SQL标签。</p><ul><li><strong>核心标签</strong>（掌握部分即可）</li><li><strong>格式化标签</strong></li><li><strong>SQL 标签</strong></li><li><strong>XML 标签</strong></li><li><strong>JSTL 函数</strong></li></ul><p>JSTL标签库使用步骤</p><ul><li><p>引入对应的taglib</p></li><li><p>使用其中的方法</p></li></ul><p><img src="https://s2.loli.net/2022/06/13/K2sXp13HhU8O9gj.png"></p><h4 id="c-if"><a href="#c-if" class="headerlink" title="c:if"></a>c:if</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%-- 引入JSTL核心标签库，我们才能使用JSTL标签 --%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;<br><br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;if测试&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;form action=<span class="hljs-string">"coreif.jsp"</span> method=<span class="hljs-string">"get"</span>&gt;<br>    &lt;%--<br>    通过EL表达式获取表单中的数据<br>    ${param.参数名}<br>    --%&gt;<br>    &lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"userName"</span> value=<span class="hljs-string">"${param.userName}"</span>&gt;<br>    &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"登录"</span>&gt;<br>&lt;/form&gt;<br><br>&lt;%-- 判断如果提交的用户名是管理员，则提示登录成功 --%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"${param.userName == 'admin'}"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"isAdmin"</span>&gt;<br>    &lt;c:out value="欢迎你登录系统，管理员"&gt;&lt;/c:out&gt;<br>&lt;/c:if&gt;<br><br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"${param.userName != 'admin'}"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"isAdmin"</span>&gt;<br>    &lt;c:out value="欢迎你登录系统，${param.userName}" &gt;&lt;/c:out&gt;<br>&lt;/c:if&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/13/qiWdZuyGPRQJ81c.png"></p><p><img src="https://s2.loli.net/2022/06/13/uPKGy4JCkt6UQ8Y.png"></p><h4 id="c-choose-amp-c-when"><a href="#c-choose-amp-c-when" class="headerlink" title="c:choose &amp; c:when"></a>c:choose &amp; c:when</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%-- 引入JSTL核心标签库，我们才能使用JSTL标签 --%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;<br><br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">"score"</span> value=<span class="hljs-string">"95"</span>/&gt;<br><br>&lt;c:choose&gt;<br>    &lt;c:when test=<span class="hljs-string">"${score &gt;= 90}"</span>&gt;<br>        优秀<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">"${score &gt;= 80}"</span>&gt;<br>        良好<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">"${score &lt;= 70}"</span>&gt;<br>        一般<br>    &lt;/c:when&gt;<br>&lt;/c:choose&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/13/hlXQAw53CpEmtHY.png"></p><h4 id="c-forEach"><a href="#c-forEach" class="headerlink" title="c:forEach"></a>c:forEach</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.util.ArrayList"</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%-- 引入JSTL核心标签库，我们才能使用JSTL标签 --%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;<br><br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%<br>    ArrayList&lt;String&gt; nameList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    nameList.add(<span class="hljs-string">"summer"</span>);<br>    nameList.add(<span class="hljs-string">"lucky"</span>);<br>    nameList.add(<span class="hljs-string">"cara"</span>);<br>    nameList.add(<span class="hljs-string">"jacky"</span>);<br>    nameList.add(<span class="hljs-string">"iris"</span>);<br>    nameList.add(<span class="hljs-string">"mia"</span>);<br>    nameList.add(<span class="hljs-string">"mat"</span>);<br>    nameList.add(<span class="hljs-string">"cat"</span>);<br><br>    request.setAttribute(<span class="hljs-string">"list"</span>, nameList);<br>%&gt;<br><br>&lt;%--<br><span class="hljs-keyword">var</span>: 每一次遍历出来的变量<br>items: 要遍历的对象<br>step: 步长<br>--%&gt;<br><br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">"name"</span> items=<span class="hljs-string">"${list}"</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">"${name}"</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br>&lt;hr&gt;<br><br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">"name"</span> items=<span class="hljs-string">"${list}"</span> begin=<span class="hljs-string">"1"</span> end=<span class="hljs-string">"5"</span> step=<span class="hljs-string">"2"</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">"${name}"</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/13/2PW8Ilv7sYuCcQE.png"></p><h1 id="Java-Bean"><a href="#Java-Bean" class="headerlink" title="Java Bean"></a>Java Bean</h1><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>JavaBean有特定的写法：</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法；</li></ul><p>一般用来和数据库的字段做映射 ORM（Object Relational Mapping）；</p><p>ORM ：对象关系映射</p><ul><li>数据库表—&gt;Java程序里面的一个类</li><li>字段—&gt;属性</li><li>行记录——&gt;对象</li></ul><p>刚开始运行之后报了500错误，后来检查之后发现是因为实体类这里我只加了有参构造方法，没有无参构造方法 。但是 问我在jsp代码里面是下面这样用的，所以就报错。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"com.lucky.entity.User"</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;jsp:useBean id=<span class="hljs-string">"user"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"com.lucky.entity.User"</span> scope=<span class="hljs-string">"page"</span>/&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lucky.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age, String sex)</span> </span>{<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>经过完善之后的代码如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"com.lucky.entity.User"</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%<br>  <span class="hljs-comment">//User user = new User();</span><br>%&gt;<br><br>&lt;jsp:useBean id=<span class="hljs-string">"user"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"com.lucky.entity.User"</span> scope=<span class="hljs-string">"page"</span>/&gt;<br><br>&lt;jsp:setProperty name=<span class="hljs-string">"user"</span> property=<span class="hljs-string">"id"</span>  value=<span class="hljs-string">"10001"</span>/&gt;<br>&lt;jsp:setProperty name=<span class="hljs-string">"user"</span> property=<span class="hljs-string">"name"</span>  value=<span class="hljs-string">"李华"</span>/&gt;<br>&lt;jsp:setProperty name=<span class="hljs-string">"user"</span> property=<span class="hljs-string">"age"</span>  value=<span class="hljs-string">"22"</span>/&gt;<br>&lt;jsp:setProperty name=<span class="hljs-string">"user"</span> property=<span class="hljs-string">"sex"</span>  value=<span class="hljs-string">"女"</span>/&gt;<br><br>id: &lt;jsp:getProperty name=<span class="hljs-string">"user"</span> property=<span class="hljs-string">"id"</span>/&gt; &lt;br&gt;<br>name: &lt;jsp:getProperty name=<span class="hljs-string">"user"</span> property=<span class="hljs-string">"name"</span>/&gt; &lt;br&gt;<br>age: &lt;jsp:getProperty name=<span class="hljs-string">"user"</span> property=<span class="hljs-string">"age"</span>/&gt; &lt;br&gt;<br>sex: &lt;jsp:getProperty name=<span class="hljs-string">"user"</span> property=<span class="hljs-string">"sex"</span>/&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lucky.entity;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//实体类一般都是和数据库中的表一一对应</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age, String sex)</span> </span>{<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> id;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<br>        <span class="hljs-keyword">this</span>.id = id;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> sex;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(String sex)</span> </span>{<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/15/738mpuaO6y9xqdC.png"></p><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><h2 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h2><ul><li>Model：模型</li><li>View：视图</li><li>Controller ：控制器</li></ul><p>开始的时候，web应用的操作，用户直接访问控制层，控制层就可以直接操作数据库；</p><p><img src="https://s2.loli.net/2022/06/15/x6woqIanRJkpSP7.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">servlet--CRUD--&gt;数据库<br>弊端：程序十分臃肿，不利于维护<br>servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码<br></code></pre></td></tr></tbody></table></figure><h2 id="MVC三层架构图"><a href="#MVC三层架构图" class="headerlink" title="MVC三层架构图"></a>MVC三层架构图</h2><p><img src="https://s2.loli.net/2022/06/15/9RsEUxyuWI62poa.png"></p><p>Model</p><ul><li>业务处理 ：业务逻辑（Service）</li><li>数据持久层：CRUD （DAO）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求 （a，form，img…）</li></ul><p>Controller </p><ul><li>接收用户的请求 （req：请求参数、Session信息…）</li><li>交给业务层处理对应的代码</li><li>控制视图的跳转</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、登录<br><span class="hljs-number">2</span>、接收用户的登录请求<br><span class="hljs-number">3</span>、处理用户的请求（获取用户登录的参数，username，password）<br><span class="hljs-number">4</span>、交给业务层处理登录业务（判断用户名密码是否正确：事务）<br><span class="hljs-number">5</span>、Dao层查询用户名和密码是否正确<br><span class="hljs-number">6</span>、数据库<br></code></pre></td></tr></tbody></table></figure><h1 id="过滤器、监听器"><a href="#过滤器、监听器" class="headerlink" title="过滤器、监听器"></a>过滤器、监听器</h1><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>Filter：过滤器 ，用来过滤请求中的数据；</p><ul><li>处理中文乱码</li><li>登录验证…</li></ul><p><img src="https://s2.loli.net/2022/06/15/oihIWl8UZkamAwj.png"></p><p>1、导入包（javax.servlet.Filter）</p><p>2、实现Filter接口，重写相应方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi.filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>{<br>        System.out.println(<span class="hljs-string">"执行init方法"</span>);<br>    }<br><br>    <span class="hljs-comment">//chain: 链</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1. 过滤器中的所有代码，在过滤特定的请求的时候都会执行</span><br><span class="hljs-comment">    2. 必须要让过滤器继续执行。 filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>{<br>        servletRequest.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        servletResponse.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>        servletResponse.setContentType(<span class="hljs-string">"text/html; charset=utf-8"</span>);<br><br>        System.out.println(<span class="hljs-string">"filter执行前"</span>);<br>        filterChain.doFilter(servletRequest, servletResponse);<span class="hljs-comment">//让请求继续走，如果不写，程序到这里就被拦截停止了</span><br>        System.out.println(<span class="hljs-string">"filter执行后"</span>);<br>    }<br><br>    <span class="hljs-comment">//Web服务器关闭的时候，就会执行销毁方法。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"执行销毁方法"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>3、在<code>web.xml</code>配置Filter</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.bambi.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--所有的请求，都会经过这个过滤器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.bambi.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servletTest下面的所有请求，都会经过这个过滤器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servletTest/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/15/NDWrtlyCxi8aFqH.png"></p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>实现一个监听器的接口；（有N种方式）</p><p>1、编写一个监听器，实现监听器的接口。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi.listener;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class="hljs-comment">//统计网站在线人数：统计session</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpSessionListener</span> </span>{<br>    <span class="hljs-comment">//创建session监听：看你的一举一动</span><br>    <span class="hljs-comment">//一旦创建session成功，就会出发一次这个事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span> </span>{<br>        ServletContext servletContext = se.getSession().getServletContext();<br>        Integer onlineCount = (Integer)servletContext.getAttribute(<span class="hljs-string">"onlineCount"</span>);<br>        <span class="hljs-keyword">if</span>(onlineCount == <span class="hljs-keyword">null</span>){<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>        }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-keyword">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(count + <span class="hljs-number">1</span>);<br>        }<br>        servletContext.setAttribute(<span class="hljs-string">"onlineCount"</span>, onlineCount);<br>    }<br><br>    <span class="hljs-comment">//销毁session监听</span><br>    <span class="hljs-comment">//一旦销毁session就会触发一次这个事件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent se)</span> </span>{<br>        ServletContext servletContext = se.getSession().getServletContext();<br>        Integer onlineCount = (Integer)servletContext.getAttribute(<span class="hljs-string">"onlineCount"</span>);<br>        <span class="hljs-keyword">if</span>(onlineCount == <span class="hljs-keyword">null</span>){<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">0</span>);<br>        }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-keyword">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(count - <span class="hljs-number">1</span>);<br>        }<br>        servletContext.setAttribute(<span class="hljs-string">"onlineCount"</span>, onlineCount);<br>    }<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * Session销毁</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 1.手动销毁</span><br><span class="hljs-comment">    * 2.自动销毁</span><br><span class="hljs-comment">    * */</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>2、在<code>web.xml</code>配置监听器</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 注册监听器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.bambi.listener.OnlineCountListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="过滤器、监听器的常见应用"><a href="#过滤器、监听器的常见应用" class="headerlink" title="过滤器、监听器的常见应用"></a>过滤器、监听器的常见应用</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bambi.listener;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.WindowAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.WindowEvent;<br><span class="hljs-keyword">import</span> java.awt.event.WindowListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPanel</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Frame frame = <span class="hljs-keyword">new</span> Frame(<span class="hljs-string">"天天开心"</span>);<br>        Panel panel = <span class="hljs-keyword">new</span> Panel(<span class="hljs-keyword">null</span>);<br>        frame.setLayout(<span class="hljs-keyword">null</span>);<br><br>        frame.setBounds(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>,<span class="hljs-number">300</span>);<br>        frame.setBackground(<span class="hljs-keyword">new</span> Color(<span class="hljs-number">128</span>,<span class="hljs-number">208</span>,<span class="hljs-number">255</span>));<br><br>        panel.setBounds(<span class="hljs-number">30</span>,<span class="hljs-number">30</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>        panel.setBackground(<span class="hljs-keyword">new</span> Color(<span class="hljs-number">200</span>,<span class="hljs-number">150</span>,<span class="hljs-number">160</span>));<br><br>        frame.add(panel);<br><br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">//适配器模式</span><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> WindowAdapter() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowDeactivated</span><span class="hljs-params">(WindowEvent e)</span> </span>{<br>                System.out.println(<span class="hljs-string">"关闭中~~~~"</span>);<br>            }<br>        });<br><br>        <span class="hljs-comment">//监听关闭事件</span><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> WindowListener() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowOpened</span><span class="hljs-params">(WindowEvent e)</span> </span>{<br>                System.out.println(<span class="hljs-string">"打开"</span>);<br>            }<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>{<br>                System.out.println(<span class="hljs-string">"关闭中"</span>);<br>                System.exit(<span class="hljs-number">0</span>);<br>            }<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosed</span><span class="hljs-params">(WindowEvent e)</span> </span>{<br>                System.out.println(<span class="hljs-string">"关闭"</span>);<br>            }<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowIconified</span><span class="hljs-params">(WindowEvent e)</span> </span>{<br><br>            }<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowDeiconified</span><span class="hljs-params">(WindowEvent e)</span> </span>{<br><br>            }<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowActivated</span><span class="hljs-params">(WindowEvent e)</span> </span>{<br>                System.out.println(<span class="hljs-string">"激活"</span>);<br>            }<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowDeactivated</span><span class="hljs-params">(WindowEvent e)</span> </span>{<br>                System.out.println(<span class="hljs-string">"未激活"</span>);<br>            }<br>        });<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/30/9dDSbpsMGefLtCQ.png"></p><p><strong>用户登录之后才能进入主页，用户注销之后不能进入主页</strong></p><p>待写</p>]]></content>
    
    
    <categories>
      
      <category>Java Web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IO学习笔记</title>
    <link href="/posts/c89e3217.html"/>
    <url>/posts/c89e3217.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="文件基础知识"><a href="#文件基础知识" class="headerlink" title="文件基础知识"></a>文件基础知识</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/1a385e2924dabbdb9eff64c7b60339f8.png"></p><h2 id="常用的文件操作"><a href="#常用的文件操作" class="headerlink" title="常用的文件操作"></a>常用的文件操作</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/04fbd7328950868267be4158b219e38d.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileCreate</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        FileCreate fileCreate = <span class="hljs-keyword">new</span> FileCreate();<br>        fileCreate.create01();<br>        fileCreate.create02();<br>        fileCreate.create03();<br>    }<br><br>    <span class="hljs-comment">//public File(String pathname)根据路径构造一个File对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">create01</span><span class="hljs-params">()</span> </span>{<br>        String pathname = <span class="hljs-string">"D:\\goon\\test\\test01.doc"</span>;<br>        File file = <span class="hljs-keyword">new</span> File(pathname);<br>        <span class="hljs-keyword">try</span> {<br>            file.createNewFile();<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            System.out.println(<span class="hljs-string">"创建文件失败"</span>);<br>        }<br>    }<br><br>    <span class="hljs-comment">//public File(File parent, String child)根据父目录文件+子路径构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">create02</span><span class="hljs-params">()</span> </span>{<br>        String parentPath = <span class="hljs-string">"D:\\"</span>;<br>        String child = <span class="hljs-string">"goon\\test\\test02.doc"</span>;<br>        File parentFile = <span class="hljs-keyword">new</span> File(parentPath);<br>        File file = <span class="hljs-keyword">new</span> File(parentFile, child);<br>        <span class="hljs-keyword">try</span> {<br>            file.createNewFile();<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            System.out.println(<span class="hljs-string">"创建文件失败"</span>);<br>        }<br>    }<br><br>    <span class="hljs-comment">//public File(String parent, String child)根据父目录+子路径构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">create03</span><span class="hljs-params">()</span> </span>{<br>        String parent = <span class="hljs-string">"D:\\"</span>;<br>        String child = <span class="hljs-string">"goon\\test\\test03.doc"</span>;<br>        File file = <span class="hljs-keyword">new</span> File(parent, child);<br>        <span class="hljs-keyword">try</span> {<br>            file.createNewFile();<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            System.out.println(<span class="hljs-string">"创建文件失败"</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2f5e07564a0fa4ed4fe818e79ac1c4a7.png"></p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>getName()</li><li>getAbsolutePath()</li><li>getParent()</li><li>length()</li><li>exists()</li><li>isFile()</li><li>isDirectory()</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileMethods</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        FileMethods fileMethods = <span class="hljs-keyword">new</span> FileMethods();<br>        fileMethods.createFile();<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createFile</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">try</span> {<br>            String parentPath = <span class="hljs-string">"D:\\demo\\test"</span>;<br>            String child = <span class="hljs-string">"a.txt"</span>;<br>            File parentFile = <span class="hljs-keyword">new</span> File(parentPath);<br>            <span class="hljs-keyword">if</span> (!parentFile.exists()) {<br>                parentFile.mkdirs();<br>            }<br>            File file = <span class="hljs-keyword">new</span> File(parentFile, child);<br>            <span class="hljs-keyword">if</span> (!file.exists()) {<br>                file.createNewFile();<br>            }<br>            System.out.println(<span class="hljs-string">"文件名字："</span> + file.getName());<span class="hljs-comment">//a.txt</span><br>            System.out.println(<span class="hljs-string">"文件绝对路径："</span> + file.getAbsolutePath());<span class="hljs-comment">//D:\demo\test\a.txt</span><br>            System.out.println(<span class="hljs-string">"文件父目录："</span> + file.getParent());<span class="hljs-comment">//D:\demo\test</span><br>            System.out.println(<span class="hljs-string">"文件长度(字节)："</span> + file.length());<span class="hljs-comment">//0</span><br>            System.out.println(<span class="hljs-string">"文件是否存在："</span> + file.exists());<span class="hljs-comment">//true</span><br>            System.out.println(<span class="hljs-string">"是不是一个文件："</span> + file.isFile());<span class="hljs-comment">//true</span><br>            System.out.println(<span class="hljs-string">"是不是一个目录："</span> + file.isDirectory());<span class="hljs-comment">//false</span><br>            file.createNewFile();<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            System.out.println(<span class="hljs-string">"创建文件失败"</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">文件名字：a.txt<br>文件绝对路径：D:\demo\test\a.txt<br>文件父目录：D:\demo\test<br>文件长度(字节)：<span class="hljs-number">0</span><br>文件是否存在：<span class="hljs-keyword">true</span><br>是不是一个文件：<span class="hljs-keyword">true</span><br>是不是一个目录：<span class="hljs-keyword">false</span><br></code></pre></td></tr></tbody></table></figure><h3 id="目录的操作和删除"><a href="#目录的操作和删除" class="headerlink" title="目录的操作和删除"></a>目录的操作和删除</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">mkdir</span><span class="hljs-params">()</span>创建一级目录</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">mkdirs</span><span class="hljs-params">()</span>创建多级目录</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span>删除空目录或文件</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileOperation</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        FileOperation fileOperation = <span class="hljs-keyword">new</span> FileOperation();<br>        fileOperation.fileFolderTest03();<br>    }<br><br>    <span class="hljs-comment">//1. 判断文件全路径是否存在，如果存在就删除该文件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fileFolderTest01</span><span class="hljs-params">()</span> </span>{<br>        String path = <span class="hljs-string">"D:\\goon\\test\\test01.doc"</span>;<br>        File file = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (file.exists()) {<br>            System.out.println(<span class="hljs-string">"文件存在"</span>);<br>            file.delete();<br>            System.out.println(<span class="hljs-string">"删除成功"</span>);<br>        }<br>    }<br><br>    <span class="hljs-comment">//2. 判断文件的父目录是否存在，如果存在就删除，不存在就提示文件父路径不存在</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fileFolderTest02</span><span class="hljs-params">()</span> </span>{<br>        String path = <span class="hljs-string">"D:\\demo\\test"</span>;<br>        File file = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (file.exists()) {<br>            file.delete();<span class="hljs-comment">//只能删除空目录或者文件</span><br>            System.out.println(<span class="hljs-string">"删除成功"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"该路径不存在"</span>);<br>        }<br>    }<br><br>    <span class="hljs-comment">//3. 判断文件父路径是否存在，如果存在就提示已经存在，不存在就创建该路径</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fileFolderTest03</span><span class="hljs-params">()</span> </span>{<br>        String path = <span class="hljs-string">"D:\\demo\\a\\b\\c"</span>;<br>        File file = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (file.exists()) {<br>            System.out.println(<span class="hljs-string">"该路径已存在"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">boolean</span> mkdirs = file.mkdirs();<br>            <span class="hljs-keyword">if</span> (mkdirs) {<br>                System.out.println(<span class="hljs-string">"该路径不存在，但是已创建出该路径"</span>);<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="IO流原理以及流的分类"><a href="#IO流原理以及流的分类" class="headerlink" title="IO流原理以及流的分类"></a>IO流原理以及流的分类</h1><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><p><img src="https://s2.loli.net/2022/06/17/cANzkO8lS34QVIB.png"></p><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><p><img src="https://s2.loli.net/2022/06/17/GVszCE3Ku6DYJ1W.png"></p><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InputStream</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/lG6WKhazsMIq4wr.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.hanshunping.io;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileInputStream_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        FileInputStream_ fileInputStream_ = <span class="hljs-keyword">new</span> FileInputStream_();<br>        System.out.println(<span class="hljs-string">"=====方式1====="</span>);<br>        fileInputStream_.read01();<br>        System.out.println(<span class="hljs-string">"\n"</span>);<br>        System.out.println(<span class="hljs-string">"=====方式2====="</span>);<br>        fileInputStream_.read02();<br>    }<br><br>    <span class="hljs-comment">//读取的文件里面不含中文</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read01</span><span class="hljs-params">()</span> </span>{<br>        String name = <span class="hljs-string">"D:\\test.txt"</span>;<br>        FileInputStream fileInputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> {<br>            fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(name);<br>            <span class="hljs-keyword">int</span> readFlag;<br>            <span class="hljs-keyword">while</span> ((readFlag = fileInputStream.read()) != -<span class="hljs-number">1</span>) {<br>                System.out.print((<span class="hljs-keyword">char</span>) readFlag);<br>            }<br>        } <span class="hljs-keyword">catch</span> (FileNotFoundException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">finally</span> {<br>            <span class="hljs-keyword">try</span> {<br>                fileInputStream.close();<br>            } <span class="hljs-keyword">catch</span> (IOException e) {<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>            }<br>        }<br>    }<br><br>    <span class="hljs-comment">//读取的文件里面含有中文</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read02</span><span class="hljs-params">()</span> </span>{<br>        String name = <span class="hljs-string">"D:\\test2.txt"</span>;<br>        FileInputStream fileInputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> {<br>            fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(name);<br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">50</span>];<br>            <span class="hljs-keyword">int</span> readLength;<br>            <span class="hljs-comment">//read(byte b[])：Reads up to b.length bytes of data from this input stream into an array of bytes.</span><br>            <span class="hljs-comment">//return：the total number of bytes read into the buffer</span><br>            <span class="hljs-keyword">while</span> ((readLength = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>) {<br>                System.out.print(<span class="hljs-keyword">new</span> String(bytes, <span class="hljs-number">0</span>, readLength));<br>            }<br>        } <span class="hljs-keyword">catch</span> (FileNotFoundException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">finally</span> {<br>            <span class="hljs-keyword">try</span> {<br>                fileInputStream.close();<br>            } <span class="hljs-keyword">catch</span> (IOException e) {<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">=====方式<span class="hljs-number">1</span>=====<br>day day up!<br><br>=====方式<span class="hljs-number">2</span>=====<br>每天进步一点点~<br>哈哈~<br>better me~<br></code></pre></td></tr></tbody></table></figure><h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><p><img src="https://s2.loli.net/2022/06/17/WQmFKZ52f1OMRh4.png"></p><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileOutputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OutputStream</span></span><br></code></pre></td></tr></tbody></table></figure><p>xxxxxxxxxx&nbsp;import java.io.File;​public class FileOperation { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;FileOperation fileOperation = new FileOperation(); &nbsp; &nbsp; &nbsp; &nbsp;fileOperation.fileFolderTest03(); &nbsp;  }​ &nbsp; &nbsp;//1. 判断文件全路径是否存在，如果存在就删除该文件 &nbsp; &nbsp;public void fileFolderTest01() { &nbsp; &nbsp; &nbsp; &nbsp;String path = “D:\goon\test\test01.doc”; &nbsp; &nbsp; &nbsp; &nbsp;File file = new File(path); &nbsp; &nbsp; &nbsp; &nbsp;if (file.exists()) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(“文件存在”); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;file.delete(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(“删除成功”); &nbsp; &nbsp; &nbsp;  } &nbsp;  }​ &nbsp; &nbsp;//2. 判断文件的父目录是否存在，如果存在就删除，不存在就提示文件父路径不存在 &nbsp; &nbsp;public void fileFolderTest02() { &nbsp; &nbsp; &nbsp; &nbsp;String path = “D:\demo\test”; &nbsp; &nbsp; &nbsp; &nbsp;File file = new File(path); &nbsp; &nbsp; &nbsp; &nbsp;if (file.exists()) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;file.delete();//只能删除空目录或者文件 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(“删除成功”); &nbsp; &nbsp; &nbsp;  } else { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(“该路径不存在”); &nbsp; &nbsp; &nbsp;  } &nbsp;  }​ &nbsp; &nbsp;//3. 判断文件父路径是否存在，如果存在就提示已经存在，不存在就创建该路径 &nbsp; &nbsp;public void fileFolderTest03() { &nbsp; &nbsp; &nbsp; &nbsp;String path = “D:\demo\a\b\c”; &nbsp; &nbsp; &nbsp; &nbsp;File file = new File(path); &nbsp; &nbsp; &nbsp; &nbsp;if (file.exists()) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(“该路径已存在”); &nbsp; &nbsp; &nbsp;  } else { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;boolean mkdirs = file.mkdirs(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (mkdirs) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(“该路径不存在，但是已创建出该路径”); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  } &nbsp; &nbsp; &nbsp;  } &nbsp;  }}java</p><p><img src="https://s2.loli.net/2022/06/17/LOsCnIMypGWFdjJ.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.hanshunping.io;<br><br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileOutputStream_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String path = <span class="hljs-string">"D:\\test3.txt"</span>;<br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> {<br>            <span class="hljs-comment">//1. 这种方式创建的FileOutputStream，当写入内容时，会覆盖原来的内容</span><br>            <span class="hljs-comment">//fileOutputStream = new FileOutputStream(path);</span><br><br>            <span class="hljs-comment">//2. 这种方式创建的FileOutputStream，当写入内容时，不会覆盖原来的内容，新内容会追加到久内容后面</span><br>            fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(path, <span class="hljs-keyword">true</span>);<br><br>            <span class="hljs-comment">//public void write(int b)</span><br>            <span class="hljs-keyword">char</span> c = <span class="hljs-string">'D'</span>;<br>            fileOutputStream.write(c);<br>            <span class="hljs-comment">//public void write(byte b[])</span><br>            String str = <span class="hljs-string">"hello summer"</span>;<br>            fileOutputStream.write(str.getBytes());<br><br>            <span class="hljs-comment">//public void write(byte b[], int off, int len)</span><br>            fileOutputStream.write(str.getBytes(), <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">finally</span> {<br>            <span class="hljs-keyword">try</span> {<br>                fileOutputStream.close();<br>            } <span class="hljs-keyword">catch</span> (IOException e) {<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>编程实现文件的拷贝</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.hanshunping.io;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileCopy</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String readPath = <span class="hljs-string">"D:\\test.txt"</span>;<br>        String writePath = <span class="hljs-string">"D:\\demo.txt"</span>;<br>        FileInputStream fileInputStream = <span class="hljs-keyword">null</span>;<br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> {<br>            fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(readPath);<br>            fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(writePath);<br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> readLength;<br>            <span class="hljs-keyword">while</span> ((readLength = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>) {<br>                fileOutputStream.write(bytes, <span class="hljs-number">0</span>, readLength);<br>            }<br>        } <span class="hljs-keyword">catch</span> (FileNotFoundException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">finally</span> {<br>            <span class="hljs-keyword">try</span> {<br>                <span class="hljs-keyword">if</span> (fileInputStream != <span class="hljs-keyword">null</span>) {<br>                    fileInputStream.close();<br>                }<br>                <span class="hljs-keyword">if</span> (fileOutputStream != <span class="hljs-keyword">null</span>) {<br>                    fileOutputStream.close();<br>                }<br>            } <span class="hljs-keyword">catch</span> (IOException e) {<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p><img src="https://s2.loli.net/2022/06/17/JV7n5g6QtZSkuOT.png"></p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li>new FileReader(File/String)</li><li>read()每次读取单个字符，返回该字符，如果到文件末尾则返回-1</li><li>read(char[])批量读取多个字符到数组，返回读取到的字符数，如果到文件末尾则返回-1</li></ol><p>相关API</p><ol><li>new String(char[])将char[]转换成String</li><li>new String(char[], off, len)将char[]的指定部分转换成String</li></ol><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileReader_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        System.out.println(<span class="hljs-string">"=====方式1====="</span>);<br>        String path = <span class="hljs-string">"D:\\test.txt"</span>;<br>        FileReader fileReader = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> {<br>            fileReader = <span class="hljs-keyword">new</span> FileReader(path);<br>            <span class="hljs-keyword">int</span> readData;<br>            <span class="hljs-keyword">while</span> ((readData = fileReader.read()) != -<span class="hljs-number">1</span>) {<br>                System.out.print((<span class="hljs-keyword">char</span>) readData);<br>            }<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">finally</span> {<br>            <span class="hljs-keyword">if</span>(fileReader != <span class="hljs-keyword">null</span>){<br>                <span class="hljs-keyword">try</span> {<br>                    fileReader.close();<br>                } <span class="hljs-keyword">catch</span> (IOException e) {<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>                }<br>            }<br>        }<br><br>        System.out.println(<span class="hljs-string">"=====方式2====="</span>);<br>        <span class="hljs-keyword">try</span> {<br>            fileReader = <span class="hljs-keyword">new</span> FileReader(path);<br>            <span class="hljs-keyword">char</span>[] chr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">500</span>];<br>            <span class="hljs-keyword">int</span> readLength;<br>            <span class="hljs-keyword">while</span> ((readLength = fileReader.read(chr)) != -<span class="hljs-number">1</span>) {<br>                System.out.print(<span class="hljs-keyword">new</span> String(chr, <span class="hljs-number">0</span>, readLength));<br>            }<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">finally</span> {<br>            <span class="hljs-keyword">if</span>(fileReader != <span class="hljs-keyword">null</span>){<br>                <span class="hljs-keyword">try</span> {<br>                    fileReader.close();<br>                } <span class="hljs-keyword">catch</span> (IOException e) {<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>                }<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">=====方式<span class="hljs-number">1</span>=====<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileCreate</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        FileCreate fileCreate = <span class="hljs-keyword">new</span> FileCreate();<br>        fileCreate.create01();<br>    }<br><br>    <span class="hljs-comment">//public File(String pathname)根据路径构造一个File对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">create01</span><span class="hljs-params">()</span> </span>{<br>        String pathname = <span class="hljs-string">"D:\\goon\\test\\test01.doc"</span>;<br>        File file = <span class="hljs-keyword">new</span> File(pathname);<br>        <span class="hljs-keyword">try</span> {<br>            file.createNewFile();<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            System.out.println(<span class="hljs-string">"创建文件失败"</span>);<br>        }<br>    }<br>}<br>=====方式<span class="hljs-number">2</span>=====<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileCreate</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        FileCreate fileCreate = <span class="hljs-keyword">new</span> FileCreate();<br>        fileCreate.create01();<br>    }<br><br>    <span class="hljs-comment">//public File(String pathname)根据路径构造一个File对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">create01</span><span class="hljs-params">()</span> </span>{<br>        String pathname = <span class="hljs-string">"D:\\goon\\test\\test01.doc"</span>;<br>        File file = <span class="hljs-keyword">new</span> File(pathname);<br>        <span class="hljs-keyword">try</span> {<br>            file.createNewFile();<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            System.out.println(<span class="hljs-string">"创建文件失败"</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><p><img src="https://s2.loli.net/2022/06/17/AdIPJvf9pzyuYm2.png"></p><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li>new FileWriter(File/String)：覆盖模式，相当于流的指针在首端</li><li>new FileWriter(File/String, true)：追加模式，相当于流的指针在尾端</li><li>write(int)：写入单个字符</li><li>write(char[])：写入指定数组</li><li>write(char[], off, len)：写入指定数组的指定部分</li><li>write(string)：写入整个字符串</li><li>write(string, off, len)：写入字符串的指定部分</li></ol><p>相关API</p><p>toCharArray: 将String转换成char[] 【String类的方法】</p><p>注意：</p><p>==FileWriter使用后，必须要关闭(close)或者刷新(flush)，否则写入不到指定的文件。==</p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileWriter_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String fileName = <span class="hljs-string">"D:\\demo\\test\\b.txt"</span>;<br>        FileWriter fileWriter = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> {<br>            <span class="hljs-comment">//1. FileWriter(String fileName)</span><br>            fileWriter = <span class="hljs-keyword">new</span> FileWriter(fileName);<br><br>            <span class="hljs-comment">//2. write(String str)</span><br>            fileWriter.write(<span class="hljs-string">"D"</span>);<br><br>            <span class="hljs-comment">//3. write(String str)</span><br>            fileWriter.write(<span class="hljs-string">"你好呀!"</span>);<br><br>            <span class="hljs-comment">//4. write(String str, int off, int len)</span><br>            fileWriter.write(<span class="hljs-string">"little rabbit"</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">char</span>[] chars = <span class="hljs-string">"hello world"</span>.toCharArray();<br>            <span class="hljs-comment">//5. write(char cbuf[])</span><br>            fileWriter.write(chars);<br><br>            <span class="hljs-comment">//6. write(char cbuf[], int off, int len)</span><br>            fileWriter.write(chars, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>);<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">finally</span> {<br>            <span class="hljs-keyword">if</span> (fileWriter != <span class="hljs-keyword">null</span>) {<br>                <span class="hljs-keyword">try</span> {<br>                    fileWriter.close();<br>                } <span class="hljs-keyword">catch</span> (IOException e) {<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>                }<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">D你好呀!rabbithello worldworld<br></code></pre></td></tr></tbody></table></figure><h1 id="节点流和处理流概述"><a href="#节点流和处理流概述" class="headerlink" title="节点流和处理流概述"></a>节点流和处理流概述</h1><h2 id="节点流"><a href="#节点流" class="headerlink" title="节点流"></a>节点流</h2><table><thead><tr><th>分类</th><th>字节输入流</th><th>字节输出流</th><th>字符输入流</th><th>字符输出流</th></tr></thead><tbody><tr><td>抽象基类</td><td>InputStream</td><td>OutputStream</td><td>Reader</td><td>Writer</td></tr><tr><td>访问文件</td><td>FileInputStream</td><td>FileOutputStream</td><td>FileReader</td><td>FileWriter</td></tr><tr><td>访问数组</td><td>ByteArrayInputStream</td><td>ByteArrayOutputStream</td><td>CharArrayReader</td><td>CharArrayWriter</td></tr><tr><td>访问管道</td><td>PipedInputStream</td><td>PipedOutputStream</td><td>PipedReader</td><td>PipedWriter</td></tr><tr><td>访问字符串</td><td></td><td></td><td>StringReader</td><td>StringWriter</td></tr></tbody></table><p><img src="https://s2.loli.net/2022/06/17/T1w6sRMNnDmAzKE.png"></p><p><img src="https://s2.loli.net/2022/06/17/T2ObPkHs8j9It1u.png"></p><p><img src="https://s2.loli.net/2022/06/17/thrcNfk4VegwmDi.png"></p><p><img src="https://s2.loli.net/2022/06/17/zHAkY829roOjZwE.png"></p><p><img src="https://s2.loli.net/2022/06/17/MV9dAnGlObUufiZ.png"></p><h2 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h2><table><thead><tr><th>分类</th><th>字节输入流</th><th>字节输出流</th><th>字符输入流</th><th>字符输出流</th></tr></thead><tbody><tr><td>抽象基类</td><td>InputStream</td><td>OutputStream</td><td>Reader</td><td>Writer</td></tr><tr><td>对象流</td><td>ObjectInputStream</td><td>ObjectOutputStream</td><td></td><td></td></tr><tr><td>文件流</td><td>FileInputStream</td><td>FileOutputStream</td><td></td><td></td></tr><tr><td>转换流</td><td></td><td></td><td>InputStreamReader</td><td>OutputStreamWriter</td></tr><tr><td>打印流</td><td></td><td>PrintStream</td><td></td><td>PrintWriter</td></tr><tr><td></td><td>（父）FilterInputStream</td><td>（父）FilterOutputStream</td><td>（父）FilterReader</td><td>FilterWriter</td></tr><tr><td>推回输入流</td><td>（子）PushbackInputStream</td><td></td><td>（子）PushbackReader</td><td></td></tr><tr><td>特殊流</td><td>（子）DataInputStream</td><td>（子）DataOutputStream</td><td></td><td></td></tr><tr><td>缓冲流</td><td>（子）BufferedInputStream</td><td>（子）BufferedOutputStream</td><td>BufferedReader</td><td>BufferedWriter</td></tr></tbody></table><p><img src="https://s2.loli.net/2022/06/17/lOdiGk3rv2FhWSH.png"></p><p><img src="https://s2.loli.net/2022/06/17/Ju9HbocFsmLEWtr.png"></p><p><img src="https://s2.loli.net/2022/06/17/yLcn3bBf2hJdq9T.png"></p><p><img src="https://s2.loli.net/2022/06/17/R7lyKqYa8nLmUZ5.png"></p><p><img src="https://s2.loli.net/2022/06/17/KmtiyIQAT93dPve.png"></p><h2 id="节点流和处理流的区别和联系"><a href="#节点流和处理流的区别和联系" class="headerlink" title="节点流和处理流的区别和联系"></a>节点流和处理流的区别和联系</h2><ol><li>节点流是底层流/低级流，直接跟数据源相关。</li><li>处理流既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出。</li><li>处理流也叫包装流，它可以对节点流进行包装。使用了修饰器设计模式，不会直接与数据源相连。</li></ol><h1 id="字符处理流"><a href="#字符处理流" class="headerlink" title="字符处理流"></a>字符处理流</h1><h2 id="BufferedReader-amp-BufferedWriter"><a href="#BufferedReader-amp-BufferedWriter" class="headerlink" title="BufferedReader&amp;BufferedWriter"></a>BufferedReader&amp;BufferedWriter</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedReader</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">Reader</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/KpQTFDhRWyd8VeY.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedWriter</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">Writer</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/zedsCyTH1j9xlEZ.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedCopy</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br>        String fileSrc = <span class="hljs-string">"D:\\demo\\test\\a.txt"</span>;<br>        String fileDest = <span class="hljs-string">"D:\\demo\\test\\b.txt"</span>;<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(fileSrc));<br>        BufferedWriter bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(fileDest));<br>        String content = <span class="hljs-string">""</span>;<br>        <span class="hljs-keyword">while</span> ((content = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) {<br>            bufferedWriter.write(content);<br>        }<br>        <span class="hljs-keyword">if</span>(bufferedReader != <span class="hljs-keyword">null</span>){<br>            bufferedReader.close();<br>        }<br><br>        <span class="hljs-keyword">if</span>(bufferedWriter != <span class="hljs-keyword">null</span>){<br>            bufferedWriter.close();<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="字节处理流"><a href="#字节处理流" class="headerlink" title="字节处理流"></a>字节处理流</h1><h2 id="BufferedInputStream-amp-BufferedOutputStream"><a href="#BufferedInputStream-amp-BufferedOutputStream" class="headerlink" title="BufferedInputStream&amp;BufferedOutputStream"></a>BufferedInputStream&amp;BufferedOutputStream</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedInputStream</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">FilterInputStream</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/dGjtuo1OryJSnQl.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedOutputStream</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">FilterOutputStream</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/JHZwAKYm9yWng6P.png"></p><h3 id="用字节处理流实现图片拷贝"><a href="#用字节处理流实现图片拷贝" class="headerlink" title="用字节处理流实现图片拷贝"></a>用字节处理流实现图片拷贝</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedInputStreamCopy</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br>        String fileSrc = <span class="hljs-string">"D:\\demo\\test\\a.jpg"</span>;<br>        String fileDest = <span class="hljs-string">"D:\\demo\\test\\b.jpg"</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">100</span>];<br>        BufferedInputStream bufferedInputStream = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(fileSrc));<br>        BufferedOutputStream bufferedOutputStream = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(fileDest));<br>        <span class="hljs-keyword">int</span> length;<br>        <span class="hljs-comment">//读取方式一</span><br><span class="hljs-comment">//        while ((length = bufferedInputStream.read()) != -1) {</span><br><span class="hljs-comment">//            bufferedOutputStream.write(length);</span><br><span class="hljs-comment">//        }</span><br>        <span class="hljs-comment">//读取方式二</span><br>        <span class="hljs-keyword">while</span> ((length = bufferedInputStream.read(bytes)) != -<span class="hljs-number">1</span>) {<br>            bufferedOutputStream.write(bytes, <span class="hljs-number">0</span>, length);<br>        }<br>        <span class="hljs-keyword">if</span> (bufferedInputStream != <span class="hljs-keyword">null</span>) {<br>            bufferedInputStream.close();<br>        }<br><br>        <span class="hljs-keyword">if</span> (bufferedOutputStream != <span class="hljs-keyword">null</span>) {<br>            bufferedOutputStream.close();<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/lQSr3e9kF4dKBiN.png"></p><h1 id="对象处理流"><a href="#对象处理流" class="headerlink" title="对象处理流"></a>对象处理流</h1><h2 id="对象处理流的使用细节"><a href="#对象处理流的使用细节" class="headerlink" title="对象处理流的使用细节"></a>对象处理流的使用细节</h2><ol><li>读写顺序要一致。</li><li>序列化或反序列化的对象，需要实现Serializable接口。</li><li>序列化的类中建议添加serialVersionUID，为了提高版本的兼容性。</li><li>序列化对象时，默认将里面的所有属性都进行序列化。但是如果成员是被static或者transient修饰的，则不会被序列化。</li><li>序列化对象时，要求里面属性的类型也需要实现序列化接口。</li><li>序列化具备可继承性，即如果某类已经实现了序列化，则它的所有子类也默认实现了序列化。</li></ol><h2 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectOutputStream</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">OutputStream</span></span><br><span class="hljs-class"><span class="hljs-keyword">implements</span> <span class="hljs-title">ObjectOutput</span>, <span class="hljs-title">ObjectStreamConstants</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/4oIC58HrcVwudSv.png"></p><p><img src="https://s2.loli.net/2022/06/17/4Cja63ZJMfALHF1.png"></p><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><p>用ObjectOutputStream序列化一个基本数据类型和一个Dog对象，并存储到test.dat文件中。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectOutputStream_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br>        String name = <span class="hljs-string">"D:\\demo\\test\\test.dat"</span>;<br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(name);<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(fileOutputStream);<br>        objectOutputStream.writeInt(<span class="hljs-number">9</span>);<br>        objectOutputStream.writeObject(<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">"旺财"</span>, <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">if</span> (objectOutputStream != <span class="hljs-keyword">null</span>) {<br>            objectOutputStream.close();<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Dog{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectInputStream</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">InputStream</span></span><br><span class="hljs-class"><span class="hljs-keyword">implements</span> <span class="hljs-title">ObjectInput</span>, <span class="hljs-title">ObjectStreamConstants</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/NyTCMEma91kprtw.png"></p><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h3><p>使用ObjectInputStream读取test.dat并且反序列化数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectInputStream_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>{<br>        String name = <span class="hljs-string">"D:\\demo\\test\\test.dat"</span>;<br>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(name);<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(fileInputStream);<br>        System.out.println(objectInputStream.readInt());<br>        <span class="hljs-comment">//刚开始忘了注释这一行，运行下面那一行的时候报错了 java.io.EOFException</span><br>        <span class="hljs-comment">//System.out.println(objectInputStream.readObject());</span><br>        Dog dog = (Dog) objectInputStream.readObject();<br>        System.out.println(dog.getName());<br>        System.out.println(dog.getAge());<br>        <span class="hljs-keyword">if</span> (objectInputStream != <span class="hljs-keyword">null</span>) {<br>            objectInputStream.close();<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StandardStream</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//1. public final static InputStream in = null;</span><br>        <span class="hljs-comment">//2. 编译类型：InputStream</span><br>        InputStream in = System.in;<br>        <span class="hljs-comment">//3. 运行类型：BufferedInputStream</span><br>        <span class="hljs-comment">//4. 表示标准输入 键盘</span><br>        System.out.println(System.in);<span class="hljs-comment">//java.io.BufferedInputStream@4d7e1886</span><br><br>        <span class="hljs-comment">//1. public final static PrintStream out = null;</span><br>        <span class="hljs-comment">//2. 编译类型：PrintStream</span><br>        PrintStream out = System.out;<br>        <span class="hljs-comment">//3. 运行类型：PrintStream</span><br>        <span class="hljs-comment">//4. 表示标准输出 显示器</span><br>        System.out.println(System.out);<span class="hljs-comment">//java.io.PrintStream@3cd1a2f1</span><br><br>        System.out.println(<span class="hljs-string">"标准输出，打印到显示器"</span>);<br><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">"从键盘接收数据："</span>);<br>        System.out.println(<span class="hljs-string">"next = "</span> + scanner.next());<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">java.io.BufferedInputStream@4d7e1886<br>java.io.PrintStream@3cd1a2f1<br>标准输出，打印到显示器<br>从键盘接收数据：<br>hello<br>next = hello<br></code></pre></td></tr></tbody></table></figure><h1 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h1><h2 id="通过乱码问题引出转换流"><a href="#通过乱码问题引出转换流" class="headerlink" title="通过乱码问题引出转换流"></a>通过乱码问题引出转换流</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodeIssue</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br>        String fileName = <span class="hljs-string">"D:\\demo\\test\\code_issue.txt"</span>;<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(fileName));<br>        System.out.println(bufferedReader.readLine());<br>        bufferedReader.close();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">���ѽ<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/McVqB4KofpW3DrT.png"></p><p>所以就引出了转换流。</p><p><img src="https://s2.loli.net/2022/06/17/6cqTdElwhvFZDRW.png"></p><h2 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Object<br>java.io.Reader<br>java.io.InputStreamReader<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputStreamReader</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">Reader</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/WOZgaYkz3qycxuL.png"></p><h3 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h3><p>将字节流FileInputStream用gbk的编码格式包装成字符流InputStreamReader，接着再包装成BufferedReader。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedReader_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br>        String fileName = <span class="hljs-string">"D:\\demo\\test\\code_issue.txt"</span>;<br>        String charset = <span class="hljs-string">"gbk"</span>;<br>        InputStreamReader inputStreamReader = <span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">new</span> FileInputStream(fileName), charset);<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(inputStreamReader);<br>        System.out.println(bufferedReader.readLine());<br>        bufferedReader.close();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">你好呀<br></code></pre></td></tr></tbody></table></figure><h2 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Object<br>java.io.Writer<br>java.io.OutputStreamWriter<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputStreamWriter</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">Writer</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/F1r3SYcRE8LJsBo.png"></p><h3 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h3><p>将字节流FileOutputStream用utf8的编码格式包装成字符流OutputStreamWriter，对文件进行写入，按照gbk的格式。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputStreamWriter_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br>        String fileName = <span class="hljs-string">"D:\\demo\\test\\aa.txt"</span>;<br>        String charset = <span class="hljs-string">"utf8"</span>;<br>        OutputStreamWriter outputStreamWriter = <span class="hljs-keyword">new</span> OutputStreamWriter(<span class="hljs-keyword">new</span> FileOutputStream(fileName), charset);<br>        outputStreamWriter.write(<span class="hljs-string">"你好，世界！"</span>);<br>        outputStreamWriter.close();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/mV1FAobwQUzqfMT.png"></p><h1 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h1><h2 id="PrintStream（字节打印流）"><a href="#PrintStream（字节打印流）" class="headerlink" title="PrintStream（字节打印流）"></a>PrintStream（字节打印流）</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Object<br>java.io.OutputStream<br>java.io.FilterOutputStream<br>java.io.PrintStream<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintStream</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">FilterOutputStream</span></span><br><span class="hljs-class"><span class="hljs-keyword">implements</span> <span class="hljs-title">Appendable</span>, <span class="hljs-title">Closeable</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/YMaThtX7euRvSbf.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.PrintStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintStream_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        PrintStream printStream = System.out;<br>        printStream.print(<span class="hljs-string">"你好，明天！"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">你好，明天！<br></code></pre></td></tr></tbody></table></figure><h2 id="PrintWriter（字符打印流）"><a href="#PrintWriter（字符打印流）" class="headerlink" title="PrintWriter（字符打印流）"></a>PrintWriter（字符打印流）</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Object<br>java.io.Writer<br>java.io.PrintWriter<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintWriter</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">Writer</span></span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/mqs9UZcla1bLzpi.png"></p><h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><h2 id="普通方法读取配置文件"><a href="#普通方法读取配置文件" class="headerlink" title="普通方法读取配置文件"></a>普通方法读取配置文件</h2><p>配置文件内容</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">DB01</span><br><span class="hljs-attr">pwd</span>=<span class="hljs-string">130.133.13.14</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Properties01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"src\\sql.properties"</span>));<br>        String content;<br>        <span class="hljs-keyword">while</span> ((content = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) {<br>            String[] stars = content.split(<span class="hljs-string">"="</span>);<br>            System.out.println(stars[<span class="hljs-number">0</span>] + <span class="hljs-string">": "</span> + stars[<span class="hljs-number">1</span>]);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">name: DB01<br>pwd: <span class="hljs-number">130.133</span><span class="hljs-number">.13</span><span class="hljs-number">.14</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Properties类基本介绍"><a href="#Properties类基本介绍" class="headerlink" title="Properties类基本介绍"></a>Properties类基本介绍</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Properties</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">Hashtable</span>&lt;<span class="hljs-title">Object</span>,<span class="hljs-title">Object</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/17/CTOFgNRdPG2Bkr3.png"></p><h2 id="Properties类常用方法"><a href="#Properties类常用方法" class="headerlink" title="Properties类常用方法"></a>Properties类常用方法</h2><h3 id="Properties类读取配置文件"><a href="#Properties类读取配置文件" class="headerlink" title="Properties类读取配置文件"></a>Properties类读取配置文件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Properties02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        properties.load(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"src\\sql.properties"</span>));<br>        System.out.println(properties.getProperty(<span class="hljs-string">"name"</span>));<br>        System.out.println(properties.getProperty(<span class="hljs-string">"pwd"</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">DB01<br><span class="hljs-number">130.133</span><span class="hljs-number">.13</span><span class="hljs-number">.14</span><br></code></pre></td></tr></tbody></table></figure><h3 id="Properties类添加新的key-value到配置文件"><a href="#Properties类添加新的key-value到配置文件" class="headerlink" title="Properties类添加新的key-value到配置文件"></a>Properties类添加新的key-value到配置文件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Properties03</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        properties.load(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"src\\sql.properties"</span>));<br>        properties.put(<span class="hljs-string">"通过程序添加的key"</span>, <span class="hljs-string">"通过程序添加的value"</span>);<br>        properties.store(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"src\\sql.properties"</span>), <span class="hljs-keyword">null</span>);<br>        properties.list(System.out);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">-- listing properties --<br>name=DB01<br>通过程序添加的key=通过程序添加的value<br>pwd=<span class="hljs-number">130.133</span><span class="hljs-number">.13</span><span class="hljs-number">.14</span><br>charset=utf8<br></code></pre></td></tr></tbody></table></figure><p>double check: 检查local file，新的key-value添加成功</p><p><img src="https://s2.loli.net/2022/06/17/O5oszN1Cwti8uWS.png"></p><p>这里记录一个小插曲，测试的时候，用IDEA打开这个配置文件的时候，出现了乱码。</p><p><img src="https://s2.loli.net/2022/06/17/l9wHvQ1NFPJaVoq.png"></p><p>上面这个问题的解决办法如下：</p><p>File-&gt;Setting</p><p><img src="https://s2.loli.net/2022/06/17/AumqwQnH16fdJpb.png"></p><p><img src="https://s2.loli.net/2022/06/17/RgYjSt6KIdul9km.png"></p><h3 id="Properties类读取配置文件，并且修改某一个key-value"><a href="#Properties类读取配置文件，并且修改某一个key-value" class="headerlink" title="Properties类读取配置文件，并且修改某一个key-value"></a>Properties类读取配置文件，并且修改某一个key-value</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Properties03</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        properties.load(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">"src\\sql.properties"</span>));<br>        properties.put(<span class="hljs-string">"name"</span>, <span class="hljs-string">"DB02"</span>);<br>        properties.store(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">"src\\sql.properties"</span>), <span class="hljs-keyword">null</span>);<br>        properties.list(System.out);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">-- listing properties --<br>name=DB02<br>pwd=<span class="hljs-number">130.133</span><span class="hljs-number">.13</span><span class="hljs-number">.14</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java IO</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java集合练习题</title>
    <link href="/posts/efe18b52.html"/>
    <url>/posts/efe18b52.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="集合的理解和好处"><a href="#集合的理解和好处" class="headerlink" title="集合的理解和好处"></a>集合的理解和好处</h1><h2 id="集合的理解和好处-1"><a href="#集合的理解和好处-1" class="headerlink" title="集合的理解和好处"></a>集合的理解和好处</h2><ul><li>可以动态保存任意多个对象，使用比较方便</li><li>提供了一系列方便的操作对象的方法：add,remove,set,get等</li><li>使用集合添加，删除新元素的代码，会很简洁</li></ul><h2 id="集合的框架体系"><a href="#集合的框架体系" class="headerlink" title="集合的框架体系"></a>集合的框架体系</h2><p><img src="https://s2.loli.net/2022/06/28/2Z1rMlftSsuVp8R.png"></p><p><img src="https://s2.loli.net/2022/06/28/FS6liNBXdg1k7Zf.png"></p><p><img src="https://s2.loli.net/2022/09/22/hRIkLzp5yF7r4OJ.jpg"></p><h1 id="Collection接口和常用方法"><a href="#Collection接口和常用方法" class="headerlink" title="Collection接口和常用方法"></a>Collection接口和常用方法</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">E</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Collection接口实现类的特点"><a href="#Collection接口实现类的特点" class="headerlink" title="Collection接口实现类的特点"></a>Collection接口实现类的特点</h2><ol><li>可以存放多个元素</li><li>Collection的有些实现类是有序的</li><li>Collection的有些实现类是无序的</li></ol><h2 id="Collection接口常用方法"><a href="#Collection接口常用方法" class="headerlink" title="Collection接口常用方法"></a>Collection接口常用方法</h2><ul><li>add: 添加单个元素</li><li>remove：删除指定元素</li><li>contains：查找元素是否存在</li><li>size：获取元素个数</li><li>isEmpty：判断是否为空</li><li>clear：清空</li><li>addAll：添加多个元素</li><li>containsAll：查找多个元素是否存在</li><li>removeAll：删除多个元素</li></ul><h2 id="Collection接口的元素遍历方式"><a href="#Collection接口的元素遍历方式" class="headerlink" title="Collection接口的元素遍历方式"></a>Collection接口的元素遍历方式</h2><h3 id="方式1-Iterator（迭代器）"><a href="#方式1-Iterator（迭代器）" class="headerlink" title="方式1 - Iterator（迭代器）"></a>方式1 - Iterator（迭代器）</h3><p>==代码==</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Collection</span><br><span class="hljs-comment">// Map</span><br><span class="hljs-comment">// 1. 集合主要是两组（单列集合，双列集合）</span><br><span class="hljs-comment">// 2. Collection接口有两个重要的子接口，List Set，他们的实现子类都是单列集合</span><br><span class="hljs-comment">// 3. Map接口的实现子类都是双列集合</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>{<br>    Collection collection = <span class="hljs-keyword">new</span> ArrayList();<br>    collection.add(<span class="hljs-string">"test1"</span>);<br>    collection.add(<span class="hljs-string">"test2"</span>);<br>    collection.add(<span class="hljs-string">"test3"</span>);<br>    Iterator iterator = collection.iterator();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>        Object next =  iterator.next();<br>        System.out.println(next);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">test1<br>test2<br>test3<br></code></pre></td></tr></tbody></table></figure><h3 id="方式2-增强for循环"><a href="#方式2-增强for循环" class="headerlink" title="方式2 - 增强for循环"></a>方式2 - 增强for循环</h3><p>==增强for循环的特点==</p><ol><li><p>增强for可以在collection集合上使用</p></li><li><p>增强for底层仍然调用的是迭代器</p></li><li><p>可以这样理解，增强for就是简化版的迭代器遍历</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Itr();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><p>==代码==</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>{<br>    Collection collection = <span class="hljs-keyword">new</span> ArrayList();<br>    collection.add(<span class="hljs-string">"test1"</span>);<br>    collection.add(<span class="hljs-string">"test2"</span>);<br>    collection.add(<span class="hljs-string">"test3"</span>);<br><br>    <span class="hljs-keyword">for</span> (Object o : collection) {<br>        System.out.println(o);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">test1<br>test2<br>test3<br></code></pre></td></tr></tbody></table></figure><h1 id="List接口和常用方法"><a href="#List接口和常用方法" class="headerlink" title="List接口和常用方法"></a>List接口和常用方法</h1><h2 id="List接口特点"><a href="#List接口特点" class="headerlink" title="List接口特点"></a>List接口特点</h2><ol><li><p>List集合中的元素是有序的（即添加和取出顺序一致）、并且可以重复。</p></li><li><p>List集合中的每个元素都有其对应的顺序索引，即支持索引。</p></li><li><p>List容器中的元素都对应一个整数型序号记载其在容器中的位置，可以根据序号存取容器中的元素。</p></li><li><p>JDK API中List接口的实现类有：</p><p><a href="https://docs.oracle.com/javase/8/docs/api/">Java1.8 API Doc</a></p><p><img src="https://s2.loli.net/2022/06/28/zYAV6XCgdeHSDvM.png"></p></li></ol><h2 id="List接口常用的方法："><a href="#List接口常用的方法：" class="headerlink" title="List接口常用的方法："></a>List接口常用的方法：</h2><ol><li><p>void add(int index, E element)<br>Inserts the specified element at the specified position in this list (optional operation).</p></li><li><p>boolean addAll(int index, Collection&lt;? extends E&gt; c)<br>Inserts all of the elements in the specified collection into this list at the specified position (optional operation).</p></li><li><p>E get(int index)<br>Returns the element at the specified position in this list.</p></li><li><p>int indexOf(Object o)<br>Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</p></li><li><p>int lastIndexOf(Object o)<br>Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</p></li><li><p>E remove(int index)<br>Removes the element at the specified position in this list (optional operation).</p></li><li><p>E set(int index, E element)<br>Replaces the element at the specified position in this list with the specified element (optional operation).</p></li><li><p>List<e> subList(int fromIndex, int toIndex)<br>Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.</e></p></li></ol><h2 id="List接口课堂练习"><a href="#List接口课堂练习" class="headerlink" title="List接口课堂练习"></a>List接口课堂练习</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListExercise</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 添加10个以上元素</span><br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) {<br>            list.add(<span class="hljs-string">"Hello"</span> + i);<br>        }<br>        <span class="hljs-comment">// 在2号位置插入一个元素“summergoon”</span><br>        list.add(<span class="hljs-number">1</span>, <span class="hljs-string">"summergoon"</span>);<br><br>        <span class="hljs-comment">// 获取第5个元素</span><br>        System.out.println(list.get(<span class="hljs-number">4</span>));<br><br>        <span class="hljs-comment">// 删除第6个元素</span><br>        list.remove(<span class="hljs-number">5</span>);<br><br>        <span class="hljs-comment">// 修改第7个元素</span><br>        list.set(<span class="hljs-number">6</span>, <span class="hljs-string">"modify"</span>);<br><br>        <span class="hljs-comment">// 再使用迭代器遍历集合</span><br>        Iterator iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            Object next = iterator.next();<br>            System.out.println(next);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="List的元素遍历方式"><a href="#List的元素遍历方式" class="headerlink" title="List的元素遍历方式"></a>List的元素遍历方式</h2><h3 id="方式1：Iterator迭代器"><a href="#方式1：Iterator迭代器" class="headerlink" title="方式1：Iterator迭代器"></a>方式1：Iterator迭代器</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    List list = <span class="hljs-keyword">new</span> ArrayList();<br>    list.add(<span class="hljs-string">"tom"</span>);<br>    list.add(<span class="hljs-string">"jerry"</span>);<br>    list.add(<span class="hljs-string">"naonao"</span>);<br><br>    <span class="hljs-comment">// Iterator</span><br>    Iterator iterator = list.iterator();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>        Object next = iterator.next();<br>        System.out.println(next);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="方式二：增强for"><a href="#方式二：增强for" class="headerlink" title="方式二：增强for"></a>方式二：增强for</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    List list = <span class="hljs-keyword">new</span> ArrayList();<br>    list.add(<span class="hljs-string">"tom"</span>);<br>    list.add(<span class="hljs-string">"jerry"</span>);<br>    list.add(<span class="hljs-string">"naonao"</span>);<br><br>    <span class="hljs-comment">// 增强for</span><br>    <span class="hljs-keyword">for</span> (Object o : list) {<br>        System.out.println(o);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="方式三：普通for"><a href="#方式三：普通for" class="headerlink" title="方式三：普通for"></a>方式三：普通for</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    List list = <span class="hljs-keyword">new</span> ArrayList();<br>    list.add(<span class="hljs-string">"tom"</span>);<br>    list.add(<span class="hljs-string">"jerry"</span>);<br>    list.add(<span class="hljs-string">"naonao"</span>);<br><br>    <span class="hljs-comment">// 普通for</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) {<br>        System.out.println(list.get(i));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>上面三种的输出都是一样的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">tom<br>jerry<br>naonao<br></code></pre></td></tr></tbody></table></figure><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Book</span>&gt; </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> price;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(String name, String author, <span class="hljs-keyword">double</span> price)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.author = author;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthor</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> author;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAuthor</span><span class="hljs-params">(String author)</span> </span>{<br>        <span class="hljs-keyword">this</span>.author = author;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> price;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> price)</span> </span>{<br>        <span class="hljs-keyword">this</span>.price = price;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Book{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", author='"</span> + author + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", price="</span> + price +<br>                <span class="hljs-string">'}'</span>;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Book o)</span> </span>{<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) (<span class="hljs-keyword">this</span>.price - o.price);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListSort</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">"如何拥抱一只刺猬"</span>, <span class="hljs-string">"测试1"</span>, <span class="hljs-number">69.9</span>));<br>        list.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">"动物的家"</span>, <span class="hljs-string">"测试2"</span>, <span class="hljs-number">30.6</span>));<br>        list.add(<span class="hljs-keyword">new</span> Book(<span class="hljs-string">"我长大了"</span>, <span class="hljs-string">"测试3"</span>, <span class="hljs-number">90.9</span>));<br><br>        Collections.sort(list);<br><br>        <span class="hljs-keyword">for</span> (Object o : list) {<br>            System.out.println(o);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Book{name=<span class="hljs-string">'动物的家'</span>, author=<span class="hljs-string">'测试2'</span>, price=<span class="hljs-number">30.6</span>}<br>Book{name=<span class="hljs-string">'如何拥抱一只刺猬'</span>, author=<span class="hljs-string">'测试1'</span>, price=<span class="hljs-number">69.9</span>}<br>Book{name=<span class="hljs-string">'我长大了'</span>, author=<span class="hljs-string">'测试3'</span>, price=<span class="hljs-number">90.9</span>}<br></code></pre></td></tr></tbody></table></figure><h1 id="ArrayList源码剖析"><a href="#ArrayList源码剖析" class="headerlink" title="ArrayList源码剖析"></a>ArrayList源码剖析</h1><h2 id="ArrayList的注意事项"><a href="#ArrayList的注意事项" class="headerlink" title="ArrayList的注意事项"></a>ArrayList的注意事项</h2><ol><li>Implements all optional list operations, and permits all elements, including <code>null</code>.</li><li>ArrayList是由数组来实现数据存储的。</li><li>ArrayList基本等同于Vector，ArrayList是线程不安全的（但是执行效率高）。在多线程的情况下，不建议使用ArrayList。</li></ol><h2 id="ArrayList底层操作机制源码分析（重点、难点）"><a href="#ArrayList底层操作机制源码分析（重点、难点）" class="headerlink" title="ArrayList底层操作机制源码分析（重点、难点）"></a>ArrayList底层操作机制源码分析（重点、难点）</h2><ul><li><p>ArrayList中维护了一个Object类型的数组elementData</p></li><li><p>当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第1次添加，则扩容elementData为10，如果需要再次扩容，则扩容elementData为1.5倍。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></tbody></table></figure></li><li><p>如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容，则扩容elementData为1.5倍。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span></span><br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h2><h3 id="使用无参构造器创建ArrayList对象，跟踪源码"><a href="#使用无参构造器创建ArrayList对象，跟踪源码" class="headerlink" title="使用无参构造器创建ArrayList对象，跟踪源码"></a>使用无参构造器创建ArrayList对象，跟踪源码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListSource</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//使用无参构造器创建ArrayList对象</span><br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) {<br>            list.add(i);<br>        }<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">11</span>; i &lt;= <span class="hljs-number">15</span>; i++) {<br>            list.add(i);<br>        }<br>        list.add(<span class="hljs-number">100</span>);<br>        list.add(<span class="hljs-number">200</span>);<br>        list.add(<span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">for</span> (Object o : list) {<br>            System.out.println(o);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>创建一个空的elementData[]</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Constructs an empty list with an initial capacity of ten.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>}<br></code></pre></td></tr></tbody></table></figure><p>装箱</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>{<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行list.add</p><p>(1) 先确定是否要扩容</p><p>(2)然后再执行赋值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>{<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>确定是否要扩容</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>{<br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>}<br></code></pre></td></tr></tbody></table></figure><p>计算minCapacity</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-keyword">int</span> minCapacity)</span> </span>{<br>    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {<br>        <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>    }<br>    <span class="hljs-keyword">return</span> minCapacity;<br>}<br></code></pre></td></tr></tbody></table></figure><p>(1)modCount++记录集合被修改的次数</p><p>(2)如果elementData的大小不够，就调用grow()去扩容。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>{<br>    modCount++;<br><br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        grow(minCapacity);<br>}<br></code></pre></td></tr></tbody></table></figure><p>(1)真正的扩容</p><p>(2)使用扩容机制来确定要扩容到多大</p><p>(3)第一次newCapacity = 10</p><p>(4)第二次及其以后，按照1.5倍扩容</p><p>(5)扩容使用的是Arrays.copyOf()</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>{<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>    <span class="hljs-keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="使用有参构造器创建ArrayList对象，跟踪源码【待写】"><a href="#使用有参构造器创建ArrayList对象，跟踪源码【待写】" class="headerlink" title="使用有参构造器创建ArrayList对象，跟踪源码【待写】"></a>使用有参构造器创建ArrayList对象，跟踪源码【待写】</h3><h1 id="Vector源码剖析"><a href="#Vector源码剖析" class="headerlink" title="Vector源码剖析"></a>Vector源码剖析</h1><h2 id="Vector的基本介绍"><a href="#Vector的基本介绍" class="headerlink" title="Vector的基本介绍"></a>Vector的基本介绍</h2><ol><li><p>Vector类的定义说明</p><p><img src="https://s2.loli.net/2022/06/28/c2nO7eGXVIpW8SE.png"></p></li><li><p>Vector底层也是一个对象数组，</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object[] elementData;<br></code></pre></td></tr></tbody></table></figure></li><li><p>Vector是线程同步的，即线程安全，Vector类的操作方法带有synchronized</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    <span class="hljs-keyword">if</span> (index &gt;= elementCount)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArrayIndexOutOfBoundsException(index);<br><br>    <span class="hljs-keyword">return</span> elementData(index);<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="源码剖析-1"><a href="#源码剖析-1" class="headerlink" title="源码剖析"></a>源码剖析</h2><h3 id="使用无参构造器创建Vector对象，跟踪源码"><a href="#使用无参构造器创建Vector对象，跟踪源码" class="headerlink" title="使用无参构造器创建Vector对象，跟踪源码"></a>使用无参构造器创建Vector对象，跟踪源码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vector_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Vector vector = <span class="hljs-keyword">new</span> Vector();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {<br>            vector.add(i);<br>        }<br>        vector.add(<span class="hljs-number">100</span>);<br>        vector.add(<span class="hljs-number">200</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>装箱操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>{<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行vector.add</p><p>(1)modCount++：记录集合被修改的次数</p><p>(2)先确定是否需要扩容</p><p>(3)然后再执行赋值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>{<br>    modCount++;<br>    ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>);<br>    elementData[elementCount++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>如果elementData的大小不够，就调用grow()去扩容</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacityHelper</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>{<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        grow(minCapacity);<br>}<br></code></pre></td></tr></tbody></table></figure><p>真正的扩容</p><p>(1)使用扩容机制来确定要扩容到多大</p><p>(2)capacityIncrement=0，第一次oldCapacity=10，newCapacity=oldCapacity*2=20，即相当于按照2倍扩容</p><p>(3)扩容使用的是Arrays.copyOf()</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>{<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>    <span class="hljs-keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="hljs-number">0</span>) ?<br>                                     capacityIncrement : oldCapacity);<br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="使用有参构造器创建Vector对象，跟踪源码【待写】"><a href="#使用有参构造器创建Vector对象，跟踪源码【待写】" class="headerlink" title="使用有参构造器创建Vector对象，跟踪源码【待写】"></a>使用有参构造器创建Vector对象，跟踪源码【待写】</h3><h2 id="Vector底层结构和ArrayList的比较"><a href="#Vector底层结构和ArrayList的比较" class="headerlink" title="Vector底层结构和ArrayList的比较"></a>Vector底层结构和ArrayList的比较</h2><table><thead><tr><th></th><th>底层结构</th><th>版本</th><th>线程 安全（同步）效率</th><th>扩容倍数</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>jdk1.2</td><td>不安全，效率高</td><td>如果 有参构造1.5倍<br>如果是无参<br>1. 第一次10<br>2. 第二次开始按1.5扩</td></tr><tr><td>Vector</td><td>可变数组 Object[]</td><td>jdk1.0</td><td>安全，效率低</td><td>如果指定大小，则每次直接按2倍扩<br>如果是无参构造，默认10，满了 之后，按2倍扩容</td></tr></tbody></table><h1 id="LinkedList源码剖析"><a href="#LinkedList源码剖析" class="headerlink" title="LinkedList源码剖析"></a>LinkedList源码剖析</h1><h2 id="模拟双向链表"><a href="#模拟双向链表" class="headerlink" title="模拟双向链表"></a>模拟双向链表</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetStructure</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 1. 创建一个数组，数组的类型是Node[]</span><br>        <span class="hljs-comment">// 2. 有些人，直接把Node[] 数组称为 表</span><br>        Node[] table = <span class="hljs-keyword">new</span> Node[<span class="hljs-number">16</span>];<br>        <span class="hljs-comment">// 3. 创建节点</span><br>        Node summer = <span class="hljs-keyword">new</span> Node(<span class="hljs-string">"summer"</span>, <span class="hljs-keyword">null</span>);<br>        table[<span class="hljs-number">2</span>] = summer;<br>        Node ada = <span class="hljs-keyword">new</span> Node(<span class="hljs-string">"ada"</span>, <span class="hljs-keyword">null</span>);<br>        summer.next = ada;<span class="hljs-comment">// 将ada挂载到summer</span><br>        Node cara = <span class="hljs-keyword">new</span> Node(<span class="hljs-string">"cara"</span>, <span class="hljs-keyword">null</span>);<br>        ada.next = cara;<span class="hljs-comment">// 将cara挂载到jack</span><br><br>        Node lucky = <span class="hljs-keyword">new</span> Node(<span class="hljs-string">"lucky"</span>, <span class="hljs-keyword">null</span>);<br>        table[<span class="hljs-number">3</span>] = lucky;<br>        <span class="hljs-keyword">for</span> (Node node : table) {<br>            System.out.println(node);<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>{<span class="hljs-comment">// 节点，存储数据，可以指向下一个节点，从而形成链表</span><br>    Object item;<span class="hljs-comment">// 存放数据</span><br>    Node next;<span class="hljs-comment">// 指向下一个节点</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object item, Node next)</span> </span>{<br>        <span class="hljs-keyword">this</span>.item = item;<br>        <span class="hljs-keyword">this</span>.next = next;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Node{"</span> +<br>                <span class="hljs-string">"item="</span> + item +<br>                <span class="hljs-string">", next="</span> + next +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br>Node{item=summer, next=Node{item=ada, next=Node{item=cara, next=<span class="hljs-keyword">null</span>}}}<br>Node{item=lucky, next=<span class="hljs-keyword">null</span>}<br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br></code></pre></td></tr></tbody></table></figure><h2 id="LinkedList源码剖析-1"><a href="#LinkedList源码剖析-1" class="headerlink" title="LinkedList源码剖析"></a>LinkedList源码剖析</h2><p>add</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedList</span><span class="hljs-params">()</span> </span>{<br>}<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">AbstractSequentialList</span><span class="hljs-params">()</span> </span>{<br>}<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">AbstractList</span><span class="hljs-params">()</span> </span>{<br>}<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">AbstractCollection</span><span class="hljs-params">()</span> </span>{<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>{<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>{<br>    linkLast(e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkLast</span><span class="hljs-params">(E e)</span> </span>{<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(l, e, <span class="hljs-keyword">null</span>);<br>    last = newNode;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-keyword">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>}<br></code></pre></td></tr></tbody></table></figure><p>remove</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">return</span> removeFirst();<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">removeFirst</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();<br>    <span class="hljs-keyword">return</span> unlinkFirst(f);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> E <span class="hljs-title">unlinkFirst</span><span class="hljs-params">(Node&lt;E&gt; f)</span> </span>{<br>    <span class="hljs-comment">// assert f == first &amp;&amp; f != null;</span><br>    <span class="hljs-keyword">final</span> E element = f.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = f.next;<br>    f.item = <span class="hljs-keyword">null</span>;<br>    f.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// help GC</span><br>    first = next;<br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-keyword">null</span>)<br>        last = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">else</span><br>        next.prev = <span class="hljs-keyword">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>}<br></code></pre></td></tr></tbody></table></figure><p>remove(3)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    checkElementIndex(index);<br>    <span class="hljs-keyword">return</span> unlink(node(index));<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkElementIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    <span class="hljs-keyword">if</span> (!isElementIndex(index))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isElementIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    <span class="hljs-keyword">return</span> index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; size;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Node&lt;E&gt; <span class="hljs-title">node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    <span class="hljs-comment">// assert isElementIndex(index);</span><br><br>    <span class="hljs-keyword">if</span> (index &lt; (size &gt;&gt; <span class="hljs-number">1</span>)) {<br>        Node&lt;E&gt; x = first;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++)<br>            x = x.next;<br>        <span class="hljs-keyword">return</span> x;<br>    } <span class="hljs-keyword">else</span> {<br>        Node&lt;E&gt; x = last;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size - <span class="hljs-number">1</span>; i &gt; index; i--)<br>            x = x.prev;<br>        <span class="hljs-keyword">return</span> x;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">unlink</span><span class="hljs-params">(Node&lt;E&gt; x)</span> </span>{<br>    <span class="hljs-comment">// assert x != null;</span><br>    <span class="hljs-keyword">final</span> E element = x.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = x.next;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; prev = x.prev;<br><br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-keyword">null</span>) {<br>        first = next;<br>    } <span class="hljs-keyword">else</span> {<br>        prev.next = next;<br>        x.prev = <span class="hljs-keyword">null</span>;<br>    }<br><br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-keyword">null</span>) {<br>        last = prev;<br>    } <span class="hljs-keyword">else</span> {<br>        next.prev = prev;<br>        x.next = <span class="hljs-keyword">null</span>;<br>    }<br><br>    x.item = <span class="hljs-keyword">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>}<br></code></pre></td></tr></tbody></table></figure><p>得到某个元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    checkElementIndex(index);<br>    <span class="hljs-keyword">return</span> node(index).item;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkElementIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    <span class="hljs-keyword">if</span> (!isElementIndex(index))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isElementIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    <span class="hljs-keyword">return</span> index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; size;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Node&lt;E&gt; <span class="hljs-title">node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    <span class="hljs-comment">// assert isElementIndex(index);</span><br><br>    <span class="hljs-keyword">if</span> (index &lt; (size &gt;&gt; <span class="hljs-number">1</span>)) {<br>        Node&lt;E&gt; x = first;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++)<br>            x = x.next;<br>        <span class="hljs-keyword">return</span> x;<br>    } <span class="hljs-keyword">else</span> {<br>        Node&lt;E&gt; x = last;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size - <span class="hljs-number">1</span>; i &gt; index; i--)<br>            x = x.prev;<br>        <span class="hljs-keyword">return</span> x;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="LinkedList和ArrayList比较"><a href="#LinkedList和ArrayList比较" class="headerlink" title="LinkedList和ArrayList比较"></a>LinkedList和ArrayList比较</h2><table><thead><tr><th></th><th>底层结构</th><th>增删的效率</th><th>改查的效率</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>较低<br>数组扩容</td><td>较高</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>较高<br>通过链表追加</td><td>较低</td></tr></tbody></table><p><strong>实际中如何选择？</strong></p><ol><li>如果“改查”操作多，选择ArrayList</li><li>如果“增删”操作多，选择LinkedList</li></ol><h1 id="Set接口和常用方法"><a href="#Set接口和常用方法" class="headerlink" title="Set接口和常用方法"></a>Set接口和常用方法</h1><h2 id="Set接口基本介绍"><a href="#Set接口基本介绍" class="headerlink" title="Set接口基本介绍"></a>Set接口基本介绍</h2><p>PS: Set接口的实现类的对象，简称Set接口对象</p><ol><li>无序（添加和取出的顺序不一致），没有索引</li><li>不允许重复元素，所以最多包含一个null</li><li>JDK API中Set接口的实现类如下：</li></ol><p><img src="https://s2.loli.net/2022/06/28/TNBOxZjEoweWGYV.png"></p><h2 id="Set接口常用方法"><a href="#Set接口常用方法" class="headerlink" title="Set接口常用方法"></a>Set接口常用方法</h2><p>和List接口一样，Set接口也是Collection的子接口，常用方法和Collection接口一样。</p><h2 id="Set接口的遍历方式"><a href="#Set接口的遍历方式" class="headerlink" title="Set接口的遍历方式"></a>Set接口的遍历方式</h2><p>和Collection的遍历方式一样，因为Set接口是Collection接口的子接口。</p><ol><li><p>Iterator迭代器</p></li><li><p>增强for</p></li><li><p>==不能使用==索引的方式</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Set_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        System.out.println(<span class="hljs-string">"======添加数据======"</span>);<br>        Set set = <span class="hljs-keyword">new</span> HashSet();<br>        set.add(<span class="hljs-string">"joan"</span>);<br>        set.add(<span class="hljs-string">"summer"</span>);<br>        set.add(<span class="hljs-keyword">null</span>);<br>        set.add(<span class="hljs-string">"joan"</span>);<br>        set.add(<span class="hljs-keyword">null</span>);<br>        System.out.println(set);<br>        System.out.println(<span class="hljs-string">"======Iterator遍历======"</span>);<br>        Iterator iterator = set.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            Object obj = iterator.next();<br>            System.out.println(obj);<br>        }<br>        System.out.println(<span class="hljs-string">"======增强for遍历======"</span>);<br>        <span class="hljs-keyword">for</span> (Object o : set) {<br>            System.out.println(o);<br>        }<br>        System.out.println(<span class="hljs-string">"======删除数据======"</span>);<br>        set.remove(<span class="hljs-string">"joan"</span>);<br>        System.out.println(set);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">======添加数据======<br>[<span class="hljs-keyword">null</span>, joan, summer]<br>======Iterator遍历======<br><span class="hljs-keyword">null</span><br>joan<br>summer<br>======增强<span class="hljs-keyword">for</span>遍历======<br><span class="hljs-keyword">null</span><br>joan<br>summer<br>======删除数据======<br>[<span class="hljs-keyword">null</span>, summer]<br></code></pre></td></tr></tbody></table></figure><h1 id="HashSet源码剖析"><a href="#HashSet源码剖析" class="headerlink" title="HashSet源码剖析"></a>HashSet源码剖析</h1><h2 id="HashSet的全面说明"><a href="#HashSet的全面说明" class="headerlink" title="HashSet的全面说明"></a>HashSet的全面说明</h2><ol><li><p>HashSet实现了Set接口</p></li><li><p>HashSet实际上是HashMap</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashSet</span><span class="hljs-params">()</span> </span>{<br>    map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p>可以存放null值，但是只能有一个null</p></li><li><p>HashSet不保证元素是有序的，取决于hash后，再确定索引的结果（即不保证数据存放和取出的顺序一致）</p></li><li><p>不能有重复的元素/对象</p></li></ol><h2 id="HashSet案例说明"><a href="#HashSet案例说明" class="headerlink" title="HashSet案例说明"></a>HashSet案例说明</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSet_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Set set = <span class="hljs-keyword">new</span> HashSet();<br>        <span class="hljs-comment">//执行add方法后，会返回一个boolean值</span><br>        <span class="hljs-comment">//如果添加成功，返回true，否则返回false</span><br>        <span class="hljs-comment">//可以通过remove指定删除哪个对象</span><br>        System.out.println(set.add(<span class="hljs-string">"joan"</span>));<br>        System.out.println(set.add(<span class="hljs-string">"lucky"</span>));<br>        System.out.println(set.add(<span class="hljs-string">"summer"</span>));<br>        System.out.println(set.add(<span class="hljs-string">"null"</span>));<br>        System.out.println(set.add(<span class="hljs-string">"joan"</span>));<span class="hljs-comment">// false: 不能添加重复元素</span><br>        System.out.println(set.add(<span class="hljs-string">"jack"</span>));<br>        System.out.println(set.add(<span class="hljs-string">"null"</span>));<span class="hljs-comment">// false: 不能添加重复元素</span><br><br>        System.out.println(<span class="hljs-string">"=====删除前====="</span>);<br>        System.out.println(set);<br><br>        set.remove(<span class="hljs-string">"null"</span>);<span class="hljs-comment">// 将会删掉null</span><br>        System.out.println(<span class="hljs-string">"=====删除后====="</span>);<br>        System.out.println(set);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br>=====删除前=====<br>[lucky, joan, <span class="hljs-keyword">null</span>, summer, jack]<br>=====删除后=====<br>[lucky, joan, summer, jack]<br></code></pre></td></tr></tbody></table></figure><h2 id="HashSet底层机制说明"><a href="#HashSet底层机制说明" class="headerlink" title="HashSet底层机制说明"></a>HashSet底层机制说明</h2><ol><li>HashSet底层是HashMap， HashMap底层是数组+链表+红黑树</li><li>添加一个元素时，==先得到Hash值==，会转换成索引值</li><li>找到存储数据表table，看这个索引位置是否已经存放有元素</li><li>如果没有，直接加入</li><li>如果有，==调用equals方法比较==，如果相同，就放弃添加，如果不相同，则添加到最后</li><li>在Java8中，如果一条链表的元素个数到TREEIFY_THRESHOLD(默认是8)，并且table的大小&gt;=MIN_TREEIFY_CAPACITY(默认64)，就会进行树化（红黑树）</li></ol><h3 id="模拟简单的数组-链表结构"><a href="#模拟简单的数组-链表结构" class="headerlink" title="模拟简单的数组+链表结构"></a>模拟简单的数组+链表结构</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetStructure</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 1. 创建一个数组，数组的类型是Node[]</span><br>        <span class="hljs-comment">// 2. 有些人，直接把Node[] 数组称为 表</span><br>        Node[] table = <span class="hljs-keyword">new</span> Node[<span class="hljs-number">16</span>];<br>        <span class="hljs-comment">// 3. 创建节点</span><br>        Node summer = <span class="hljs-keyword">new</span> Node(<span class="hljs-string">"summer"</span>, <span class="hljs-keyword">null</span>);<br>        table[<span class="hljs-number">2</span>] = summer;<br>        Node ada = <span class="hljs-keyword">new</span> Node(<span class="hljs-string">"ada"</span>, <span class="hljs-keyword">null</span>);<br>        summer.next = ada;<span class="hljs-comment">// 将ada挂载到summer</span><br>        Node cara = <span class="hljs-keyword">new</span> Node(<span class="hljs-string">"cara"</span>, <span class="hljs-keyword">null</span>);<br>        ada.next = cara;<span class="hljs-comment">// 将cara挂载到jack</span><br><br>        Node lucky = <span class="hljs-keyword">new</span> Node(<span class="hljs-string">"lucky"</span>, <span class="hljs-keyword">null</span>);<br>        table[<span class="hljs-number">3</span>] = lucky;<br>        <span class="hljs-keyword">for</span> (Node node : table) {<br>            System.out.println(node);<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>{<span class="hljs-comment">// 节点，存储数据，可以指向下一个节点，从而形成链表</span><br>    Object item;<span class="hljs-comment">// 存放数据</span><br>    Node next;<span class="hljs-comment">// 指向下一个节点</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object item, Node next)</span> </span>{<br>        <span class="hljs-keyword">this</span>.item = item;<br>        <span class="hljs-keyword">this</span>.next = next;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Node{"</span> +<br>                <span class="hljs-string">"item="</span> + item +<br>                <span class="hljs-string">", next="</span> + next +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br>Node{item=summer, next=Node{item=ada, next=Node{item=cara, next=<span class="hljs-keyword">null</span>}}}<br>Node{item=lucky, next=<span class="hljs-keyword">null</span>}<br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br></code></pre></td></tr></tbody></table></figure><h3 id="分析HashSet的添加元素的底层是如何实现的-hash-equals"><a href="#分析HashSet的添加元素的底层是如何实现的-hash-equals" class="headerlink" title="分析HashSet的添加元素的底层是如何实现的( hash() + equals() )"></a>分析HashSet的添加元素的底层是如何实现的( hash() + equals() )</h3><p><img src="https://s2.loli.net/2022/06/28/73mrwW2D4TSX1Ka.png"></p><h2 id="源码剖析-2"><a href="#源码剖析-2" class="headerlink" title="源码剖析"></a>源码剖析</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetSource</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        HashSet hashSet = <span class="hljs-keyword">new</span> HashSet();<br>        hashSet.add(<span class="hljs-string">"java"</span>);<br>        hashSet.add(<span class="hljs-string">"php"</span>);<br>        hashSet.add(<span class="hljs-string">"java"</span>);<br>        System.out.println(hashSet);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>分析上面的代码：</p><p>执行构造器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashSet</span><span class="hljs-params">()</span> </span>{<br>    map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行add()方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里的PRESENT是 private static final Object PRESENT = new Object();</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>{<br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-keyword">null</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>{<span class="hljs-comment">// key: java value: PRESENT(object)</span><br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行hash(key) 方法会得到key对应的hash值，这个hash值不是hashCode，是根据算法(key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)得到对应的hash值.(这个hash值就是table表对应的索引值)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object key)</span> </span>{<span class="hljs-comment">// key: java</span><br>    <span class="hljs-keyword">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>); <span class="hljs-comment">// 无符号右移16位</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>hashCode()</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span> h = hash;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> &amp;&amp; value.length &gt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">char</span> val[] = value;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; value.length; i++) {<br>            h = <span class="hljs-number">31</span> * h + val[i];<br>        }<br>        hash = h;<br>    }<br>    <span class="hljs-keyword">return</span> h;<br>}<br></code></pre></td></tr></tbody></table></figure><p>==核心代码（重点中的重点）==</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent,</span></span><br><span class="hljs-function"><span class="hljs-params">               <span class="hljs-keyword">boolean</span> evict)</span> </span>{<br>    <span class="hljs-comment">//定义辅助变量</span><br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-keyword">int</span> n, i;<br>    <span class="hljs-comment">//如果当前table是null，或者大小等于0，就第一次扩容，扩到16个空间</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<span class="hljs-comment">//table是hashMap的一个属性，这个table就是放node节点的一个数组。类型是：Node[]</span><br>        n = (tab = resize()).length;<br>    <span class="hljs-comment">//(1)根据key，得到hash，去计算该key应该存放到table表的哪个索引位置，并让p指向这个索引位置的对象</span><br>    <span class="hljs-comment">//(2)判断p指向的索引位置的对象是否为null</span><br>    <span class="hljs-comment">//(2.1)如果p指向的索引位置的对象为null，表示还没有存放元素，就创建一个Node(key="java", value="PRESENT")</span><br>    <span class="hljs-comment">//     就放在该位置tab[i] = newNode(hash, key, value, null);</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<span class="hljs-comment">//(set_pic_2)</span><br>    <span class="hljs-comment">//(2.2)如果p指向的索引位置的对象不为null</span><br>    <span class="hljs-keyword">else</span> {<br>        <span class="hljs-comment">//一个开发技巧：在需要局部变量（辅助变量）的时候，再创建</span><br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">//如果当前索引位置对应的链表的第一个元素的hash值和准备添加的key的hash值一样。并且满足下面两个条件之一：</span><br>        <span class="hljs-comment">//(1) 准备加入的key和p指向的Node节点的k是同一个对象(set_pic_3)</span><br>        <span class="hljs-comment">//(2) p指向的Node节点的对象k和准备加入的key经equals()方法比较后相同(set_pic_4)</span><br>        <span class="hljs-comment">//如果满足上面两个条件之一，那么就不能加入</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-comment">// 再判断p是不是一颗红黑树，如果是红黑树，就调用putTreeVal来进行添加</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-keyword">this</span>, tab, hash, key, value);<br>        <span class="hljs-comment">//如果table对应索引位置，已经是一个链表，就使用for循环比较</span><br>        <span class="hljs-comment">//(1) 依次和链表的每一个元素比较后，都不相同，则加入到该链表最后(set_pic_5)</span><br>        <span class="hljs-comment">//(2) 在依次和该链表的每一个元素比较的过程中，如果有相同情况，就直接break</span><br>        <span class="hljs-keyword">else</span> {<br>            <span class="hljs-comment">//set_pic_6</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>; ; ++binCount) {<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-keyword">null</span>) {<br>                    p.next = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st // TREEIFY_THRESHOLD=8</span><br>                    <span class="hljs-comment">//注意：在把元素添加到链表后，会立即进行判断，判断该链表是否已经达到8个节点,</span><br>           <span class="hljs-comment">// 如果达到8个节点，就调用treeifyBin(tab, hash)对当前链表进行树化（转成红黑树）</span><br>           <span class="hljs-comment">// 在转成红黑树时，还会进行一个判断，如果该table数组的大小小于MIN_TREEIFY_CAPACITY（64），</span><br>          <span class="hljs-comment">// 判断条件如下：</span><br>             <span class="hljs-comment">// if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br>           <span class="hljs-comment">//     resize();</span><br>           <span class="hljs-comment">// 如果上面条件成立，不会马上转成红黑树，会先进行table扩容</span><br>           <span class="hljs-comment">// 只有当上面的条件不成立的时候，才进行转成红黑树</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//添加到节点后面然后退出</span><br>                }<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//放弃添加然后退出</span><br>                <span class="hljs-comment">// 这句代码，p依次指向它自己的下一个节点，这样就达到了循环每一个节点</span><br>                p = e;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) { <span class="hljs-comment">// existing mapping for key</span><br>            V oldValue = e.value;<br>            <span class="hljs-comment">//onlyIfAbsent是put方法调用putVal的时候传入进来的参数，永远为false</span><br>            <span class="hljs-comment">//public V put(K key, V value) {</span><br>            <span class="hljs-comment">//    return putVal(hash(key), key, value, false[这个参数对应的就是onlyIfAbsent], true);</span><br>            <span class="hljs-comment">//}</span><br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-keyword">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        }<br>    }<br>    ++modCount;<br>    <span class="hljs-comment">//size就是每加入一个节点Node(k, v, h, next), size就会增加</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<span class="hljs-comment">// 扩容</span><br>    <span class="hljs-comment">//这个方法其实是给它的子类用的</span><br>    afterNodeInsertion(evict);<br>    <span class="hljs-comment">//返回null表示添加成功</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() {<br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-keyword">int</span> oldCap = (oldTab == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-keyword">int</span> oldThr = threshold;<br>    <span class="hljs-keyword">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) {<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br>    <span class="hljs-keyword">else</span> {               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>        <span class="hljs-comment">//DEFAULT_INITIAL_CAPACITY: 1&lt;&lt;4 2*2*2*2=16</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        <span class="hljs-comment">//DEFAULT_LOAD_FACTOR: 0.75</span><br>        <span class="hljs-comment">//临界值0.75*16=12（缓冲层）</span><br>        newThr = (<span class="hljs-keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    }<br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY ?<br>                  (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br>    }<br>    threshold = newThr;<br>    <span class="hljs-meta">@SuppressWarnings({"rawtypes","unchecked"})</span><br>    <span class="hljs-comment">//辅助变量newTable执行完下面这行代码后，就会变成有16个位置的空数组</span><br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[newCap];<br>    <span class="hljs-comment">//hashMap的table变成有16个位置的空数组（(set_pic_1)）</span><br>    table = newTab;<br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-keyword">null</span>) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldCap; ++j) {<br>            Node&lt;K,V&gt; e;<br>            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-keyword">null</span>) {<br>                oldTab[j] = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-keyword">null</span>)<br>                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-keyword">this</span>, newTab, j, oldCap);<br>                <span class="hljs-keyword">else</span> { <span class="hljs-comment">// preserve order</span><br>                    Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>                    Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>                    Node&lt;K,V&gt; next;<br>                    <span class="hljs-keyword">do</span> {<br>                        next = e.next;<br>                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) {<br>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)<br>                                loHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                loTail.next = e;<br>                            loTail = e;<br>                        }<br>                        <span class="hljs-keyword">else</span> {<br>                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)<br>                                hiHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                hiTail.next = e;<br>                            hiTail = e;<br>                        }<br>                    } <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);<br>                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) {<br>                        loTail.next = <span class="hljs-keyword">null</span>;<br>                        newTab[j] = loHead;<br>                    }<br>                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) {<br>                        hiTail.next = <span class="hljs-keyword">null</span>;<br>                        newTab[j + oldCap] = hiHead;<br>                    }<br>                }<br>            }<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> newTab;<br>}<br></code></pre></td></tr></tbody></table></figure><p>set_pic_1：</p><p><img src="https://s2.loli.net/2022/06/28/jtgH7DKqQ5uVoxB.png"></p><p>set_pic_2：刚开始创建一个空table, 接着，当插入一个数据之后</p><p><img src="https://s2.loli.net/2022/06/28/ikKf7rq9cuPbjCx.jpg"></p><p><img src="https://s2.loli.net/2022/06/28/YCTInL3KysZldoa.png"></p><p>set_pic_3：插入数据时，判断能不能插入根据：即将要插入的key对应的对象和p所指向的Node对应的key的对象是否一样</p><p><img src="https://s2.loli.net/2022/06/28/P8gVNt6nbRpB4DE.png"></p><p>set_pic_4：添加数据时，equals()方法存在的意义</p><p><img src="https://s2.loli.net/2022/06/28/9kBdYL6C8SrcnGm.jpg"></p><p>set_pic_5：</p><p><img src="https://s2.loli.net/2022/06/28/aselW2TESyRr5dC.jpg"></p><p><img src="https://s2.loli.net/2022/06/28/8DU9vao6h2wRZTH.png"></p><p>set_pic_6：</p><p><img src="https://s2.loli.net/2022/06/28/WHJDr2aUepOGA75.jpg"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Node&lt;K,V&gt; <span class="hljs-title">newNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Node&lt;&gt;(hash, key, value, next);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="分析HashSet的扩容和转成红黑树机制"><a href="#分析HashSet的扩容和转成红黑树机制" class="headerlink" title="分析HashSet的扩容和转成红黑树机制"></a>分析HashSet的扩容和转成红黑树机制</h3><ol><li>HashSet底层是HashMap，第一次添加时，table数组扩容到16，临界值（threshold）是16*加载因子（loadFactor）是0.75 = 12</li><li>如果table数组使用到了临界值12，就会扩容到16<em>2 = 32， 新的临界值就是 32</em>0.75 = 24, 以此类推</li><li>在Java8中，如果一条链表的元素个数到达TREEIFY_THRESHOLD（默认是8），并且table的大小 &gt;= MIN_TREEIFY_CAPACITY（默认是64），就会进行树化（转成红黑树），==否则仍然采用数组扩容机制==</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetIncrement</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// HashSet底层是HashMap，第一次添加时，table数组扩容到16，</span><br>        <span class="hljs-comment">// 临界值（threshold）是16*加载因子（loadFactor）是0.75 = 12</span><br>        <span class="hljs-comment">// 如果table数组使用到了临界值12，就会扩容到16*2 = 32， 新的临界值就是 32*0.75 = 24, 以此类推</span><br><br>        HashSet hashSet = <span class="hljs-keyword">new</span> HashSet();<br><span class="hljs-comment">//        for (int i = 0; i &lt; 100; i++) {</span><br><span class="hljs-comment">//            hashSet.add(i);</span><br><span class="hljs-comment">//        }</span><br><br>        <span class="hljs-comment">// 在Java8中，如果一条链表的元素个数到达TREEIFY_THRESHOLD（默认是8），</span><br>        <span class="hljs-comment">// 并且table的大小 &gt;= MIN_TREEIFY_CAPACITY（默认是64），就会进行树化（转成红黑树），</span><br>        <span class="hljs-comment">// 否则仍然采用数组扩容机制</span><br><span class="hljs-comment">//        for (int i = 0; i &lt; 12; i++) {</span><br><span class="hljs-comment">//            hashSet.add(new A(i));</span><br><span class="hljs-comment">//        }</span><br><br>        <span class="hljs-comment">// 当我们向hashSet增加一个元素，这个元素在底层封装了一个数据Node，加入到了table，就算是size++，</span><br>        <span class="hljs-comment">// 而不是说非得增加到table表的第一个才算是增加size++</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) {<br>            hashSet.add(<span class="hljs-keyword">new</span> A(i));<br>        }<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) {<br>            hashSet.add(<span class="hljs-keyword">new</span> B(j));<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> i;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>{<br>        <span class="hljs-keyword">this</span>.i = i;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"A{"</span> +<br>                <span class="hljs-string">"i="</span> + i +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> n;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">B</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>{<br>        <span class="hljs-keyword">this</span>.n = n;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span>;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"B{"</span> +<br>                <span class="hljs-string">"n="</span> + n +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="HashSet课堂-练习1"><a href="#HashSet课堂-练习1" class="headerlink" title="HashSet课堂 练习1"></a>HashSet课堂 练习1</h3><p>我的代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetExercise</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 定义一个Employee类，name，age</span><br>        <span class="hljs-comment">// 创建3个Employee对象放入HashSet中</span><br>        <span class="hljs-comment">// name和age相同时，认为是相同员工，不能添加到HashSet中</span><br>        HashSet hashSet = <span class="hljs-keyword">new</span> HashSet();<br>        Employee jack = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"jack"</span>, <span class="hljs-number">10</span>);<br>        Employee jack2 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"jack"</span>, <span class="hljs-number">10</span>);<br>        Employee lucky = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"lucky"</span>, <span class="hljs-number">10</span>);<br>        hashSet.add(jack);<br>        hashSet.add(jack2);<br>        hashSet.add(lucky);<br>        System.out.println(hashSet);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> (name + age).hashCode();<br>    }<br>    <span class="hljs-comment">// 刚开始我没有重写equals方法，导致虽然名字和年龄相同了，但是还是插入到了HashSet里面</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        Employee employee = (Employee) o;<br>        <span class="hljs-keyword">return</span> age == employee.age &amp;&amp; Objects.equals(name, employee.name);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Employee{"</span> +<br>            <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>            <span class="hljs-string">", age="</span> + age +<br>            <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[Employee{name=<span class="hljs-string">'jack'</span>, age=<span class="hljs-number">10</span>}, Employee{name=<span class="hljs-string">'lucky'</span>, age=<span class="hljs-number">10</span>}]<br></code></pre></td></tr></tbody></table></figure><p>老师的代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetExercise</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 定义一个Employee类，name，age</span><br>        <span class="hljs-comment">// 创建3个Employee对象放入HashSet中</span><br>        <span class="hljs-comment">// name和age相同时，认为是相同员工，不能添加到HashSet中</span><br>        HashSet hashSet = <span class="hljs-keyword">new</span> HashSet();<br>        Employee jack = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"jack"</span>, <span class="hljs-number">10</span>);<br>        Employee jack2 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"jack"</span>, <span class="hljs-number">10</span>);<br>        Employee lucky = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"lucky"</span>, <span class="hljs-number">10</span>);<br>        hashSet.add(jack);<br>        hashSet.add(jack2);<br>        hashSet.add(lucky);<br>        System.out.println(hashSet);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br>    <span class="hljs-comment">// 老师的代码和我的代码的主要区别就在equals()和hashCode()方法这里</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        Employee employee = (Employee) o;<br>        <span class="hljs-keyword">return</span> age == employee.age &amp;&amp; Objects.equals(name, employee.name);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Employee{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/28/X5n9xcGe42UAbm8.png"></p><p><img src="https://s2.loli.net/2022/06/28/ltUoQHYzxd92BEX.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[Employee{name=<span class="hljs-string">'lucky'</span>, age=<span class="hljs-number">10</span>}, Employee{name=<span class="hljs-string">'jack'</span>, age=<span class="hljs-number">10</span>}]<br></code></pre></td></tr></tbody></table></figure><h3 id="HashSet课堂-练习2"><a href="#HashSet课堂-练习2" class="headerlink" title="HashSet课堂 练习2"></a>HashSet课堂 练习2</h3><p>我的代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetExercise</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 定义一个Employee类，name，sal, birthday(MyDate类型，属性包括：year，month，day)</span><br>        <span class="hljs-comment">// 创建3个Employee对象放入HashSet中</span><br>        <span class="hljs-comment">// name和birthday相同时，认为是相同员工，不能添加到HashSet中</span><br>        HashSet hashSet = <span class="hljs-keyword">new</span> HashSet();<br>        hashSet.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"jack"</span>, <span class="hljs-number">18000</span>, <span class="hljs-keyword">new</span> MyDate(<span class="hljs-number">1989</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)));<br>        hashSet.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"lucky"</span>, <span class="hljs-number">9000</span>, <span class="hljs-keyword">new</span> MyDate(<span class="hljs-number">1996</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>)));<br>        hashSet.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"jack"</span>, <span class="hljs-number">26000</span>, <span class="hljs-keyword">new</span> MyDate(<span class="hljs-number">1989</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)));<br>        System.out.println(hashSet);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sal;<br>    <span class="hljs-keyword">private</span> MyDate date;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> sal, MyDate date)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.sal = sal;<br>        <span class="hljs-keyword">this</span>.date = date;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        Employee employee = (Employee) o;<br>        <span class="hljs-keyword">return</span> Objects.equals(name, employee.name) &amp;&amp; Objects.equals(date, employee.date);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> Objects.hash(name, date);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Employee{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", sal="</span> + sal +<br>                <span class="hljs-string">", date="</span> + date +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDate</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> year;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> day;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyDate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day)</span> </span>{<br>        <span class="hljs-keyword">this</span>.year = year;<br>        <span class="hljs-keyword">this</span>.month = month;<br>        <span class="hljs-keyword">this</span>.day = day;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        MyDate myDate = (MyDate) o;<br>        <span class="hljs-keyword">return</span> year == myDate.year &amp;&amp; month == myDate.month &amp;&amp; day == myDate.day;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> Objects.hash(year, month, day);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"MyDate{"</span> +<br>                <span class="hljs-string">"year="</span> + year +<br>                <span class="hljs-string">", month="</span> + month +<br>                <span class="hljs-string">", day="</span> + day +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[Employee{name=<span class="hljs-string">'lucky'</span>, sal=<span class="hljs-number">9000</span>, date=MyDate{year=<span class="hljs-number">1996</span>, month=<span class="hljs-number">7</span>, day=<span class="hljs-number">1</span>}}, Employee{name=<span class="hljs-string">'jack'</span>, sal=<span class="hljs-number">18000</span>, date=MyDate{year=<span class="hljs-number">1989</span>, month=<span class="hljs-number">3</span>, day=<span class="hljs-number">5</span>}}]<br></code></pre></td></tr></tbody></table></figure><h1 id="Map接口和常用方法"><a href="#Map接口和常用方法" class="headerlink" title="Map接口和常用方法"></a>Map接口和常用方法</h1><h2 id="Map接口实现类特点"><a href="#Map接口实现类特点" class="headerlink" title="Map接口实现类特点"></a>Map接口实现类特点</h2><ol><li>用于保存具有映射关系的数据Key-Value</li><li>Map中的key和value可以是任意引用类型的数据，会封装到HashMap$Node对象中</li><li>Map中的key不允许重复，原因和HashSet一样</li><li>Map中的value可以重复</li><li>Map中的key可以为null，value也可以为null，key为null只能有一个，value为null可以有多个，和第4点前后呼应</li><li>常用String类作为Map的key</li><li>Key和value之间存在单向一对一的关系，即通过key可以找到对应的value值</li><li>Map存放的数据是Key-Value</li></ol><h2 id="Map接口和常用方法-1"><a href="#Map接口和常用方法-1" class="headerlink" title="Map接口和常用方法"></a>Map接口和常用方法</h2><h3 id="Map体系的继承图"><a href="#Map体系的继承图" class="headerlink" title="Map体系的继承图"></a>Map体系的继承图</h3><p><img src="https://s2.loli.net/2022/06/28/FS6liNBXdg1k7Zf.png"></p><h3 id="Map接口的常用方法"><a href="#Map接口的常用方法" class="headerlink" title="Map接口的常用方法"></a>Map接口的常用方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapMethod</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        <span class="hljs-comment">//1. put</span><br>        map.put(<span class="hljs-string">"小丸子"</span>, <span class="hljs-string">"樱桃小丸子"</span>);<br>        map.put(<span class="hljs-string">"桔梗"</span>, <span class="hljs-string">"犬夜叉"</span>);<br>        map.put(<span class="hljs-string">"月野兔"</span>, <span class="hljs-string">"美少女战士"</span>);<br>        map.put(<span class="hljs-string">"唐三"</span>, <span class="hljs-string">"同样的key，value会覆盖"</span>);<br>        map.put(<span class="hljs-string">"唐三"</span>, <span class="hljs-string">"斗罗大陆"</span>);<br>        map.put(<span class="hljs-keyword">null</span>, <span class="hljs-string">"null key"</span>);<br>        map.put(<span class="hljs-string">"null value"</span>, <span class="hljs-keyword">null</span>);<br>        map.put(<span class="hljs-string">"学校"</span>, <span class="hljs-keyword">new</span> School(<span class="hljs-string">"哈哈大学"</span>));<br>        System.out.println(map);<span class="hljs-comment">// {null=null key, 学校=com.example.hanshunping.map.School@4d7e1886, 唐三=斗罗大陆, 小丸子=樱桃小丸子, null value=null, 月野兔=美少女战士, 桔梗=犬夜叉}</span><br>        <span class="hljs-comment">//2.get</span><br>        System.out.println(map.get(<span class="hljs-string">"月野兔"</span>));<span class="hljs-comment">// 美少女战士</span><br>        <span class="hljs-comment">//3.size</span><br>        System.out.println(map.size());<span class="hljs-comment">// 7</span><br>        <span class="hljs-comment">//4.isEmpty</span><br>        System.out.println(map.isEmpty());<span class="hljs-comment">// false</span><br>        <span class="hljs-comment">//5.containsKey</span><br>        System.out.println(map.containsKey(<span class="hljs-string">"猪太郎"</span>));<span class="hljs-comment">// false</span><br>        System.out.println(map.containsKey(<span class="hljs-string">"小丸子"</span>));<span class="hljs-comment">// true</span><br>        <span class="hljs-comment">//6.remove</span><br>        System.out.println(map.remove(<span class="hljs-string">"test"</span>));<span class="hljs-comment">// null</span><br>        Object remover = map.remove(<span class="hljs-keyword">null</span>);<br>        System.out.println(remover.getClass());<span class="hljs-comment">// class java.lang.String</span><br>        System.out.println(map);<span class="hljs-comment">// {学校=com.example.hanshunping.map.School@4d7e1886, 唐三=斗罗大陆, 小丸子=樱桃小丸子, null value=null, 月野兔=美少女战士, 桔梗=犬夜叉}</span><br>        <span class="hljs-comment">//7.clear</span><br>        map.clear();<br>        System.out.println(map);<span class="hljs-comment">// {}</span><br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">School</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">School</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="Map接口的元素遍历方式"><a href="#Map接口的元素遍历方式" class="headerlink" title="Map接口的元素遍历方式"></a>Map接口的元素遍历方式</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapFor</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        map.put(<span class="hljs-string">"小丸子"</span>, <span class="hljs-string">"樱桃小丸子"</span>);<br>        map.put(<span class="hljs-string">"桔梗"</span>, <span class="hljs-string">"犬夜叉"</span>);<br>        map.put(<span class="hljs-string">"月野兔"</span>, <span class="hljs-string">"美少女战士"</span>);<br>        map.put(<span class="hljs-string">"唐三"</span>, <span class="hljs-string">"斗罗大陆"</span>);<br><br>        <span class="hljs-comment">//1.keySet</span><br>        <span class="hljs-comment">//(1)增强for</span><br>        System.out.println(<span class="hljs-string">"=====1.keySet 增强for====="</span>);<br>        <span class="hljs-keyword">for</span> (Object key : map.keySet()) {<br>            System.out.println(key + <span class="hljs-string">"-"</span> + map.get(key));<br>        }<br>        <span class="hljs-comment">//(2)迭代器</span><br>        System.out.println(<span class="hljs-string">"=====1.keySet 迭代器====="</span>);<br>        Iterator iterator = map.keySet().iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            Object next = iterator.next();<span class="hljs-comment">// 这里iterator.next()的类型是class java.lang.String</span><br>            System.out.println(next);<br>        }<br>        <span class="hljs-comment">//2.values</span><br>        <span class="hljs-comment">//(1)增强for</span><br>        System.out.println(<span class="hljs-string">"=====2.values 增强for====="</span>);<br>        <span class="hljs-keyword">for</span> (Object value : map.values()) {<br>            System.out.println(value);<br>        }<br>        <span class="hljs-comment">//(2)迭代器</span><br>        System.out.println(<span class="hljs-string">"=====2.values 迭代器====="</span>);<br>        Collection values = map.values();<br>        Iterator valuesIterator = values.iterator();<br>        <span class="hljs-keyword">while</span> (valuesIterator.hasNext()) {<br>            Object next = valuesIterator.next();<span class="hljs-comment">// valuesIterator.next()的类型是class java.lang.String</span><br>            System.out.println(next);<br>        }<br><br>        <span class="hljs-comment">//3.entrySet</span><br>        Set set = map.entrySet();<br>        <span class="hljs-comment">//(1)增强for</span><br>        System.out.println(<span class="hljs-string">"=====3.entrySet 增强for====="</span>);<br>        <span class="hljs-keyword">for</span> (Object o : set) {<br>            Map.Entry entry = (Map.Entry) o;<span class="hljs-comment">// o的类型是class java.util.HashMap$Node</span><br>            System.out.println(entry.getValue() + <span class="hljs-string">"-"</span> + entry.getValue());<br>        }<br>        <span class="hljs-comment">//(2)迭代器</span><br>        System.out.println(<span class="hljs-string">"=====3.entrySet 迭代器====="</span>);<br>        Iterator entrySetIterator = set.iterator();<br>        <span class="hljs-keyword">while</span> (entrySetIterator.hasNext()) {<br>            Object next = entrySetIterator.next();<span class="hljs-comment">// entrySetIterator.next()的类型是class java.util.HashMap$Node</span><br>            Map.Entry entry = (Map.Entry) next;<br>            System.out.println(entry.getValue() + <span class="hljs-string">"-"</span> + entry.getValue());<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jav">=====1.keySet 增强for=====<br>唐三-斗罗大陆<br>小丸子-樱桃小丸子<br>月野兔-美少女战士<br>桔梗-犬夜叉<br>=====1.keySet 迭代器=====<br>唐三<br>小丸子<br>月野兔<br>桔梗<br>=====2.values 增强for=====<br>斗罗大陆<br>樱桃小丸子<br>美少女战士<br>犬夜叉<br>=====2.values 迭代器=====<br>斗罗大陆<br>樱桃小丸子<br>美少女战士<br>犬夜叉<br>=====3.entrySet 增强for=====<br>斗罗大陆-斗罗大陆<br>樱桃小丸子-樱桃小丸子<br>美少女战士-美少女战士<br>犬夜叉-犬夜叉<br>=====3.entrySet 迭代器=====<br>斗罗大陆-斗罗大陆<br>樱桃小丸子-樱桃小丸子<br>美少女战士-美少女战士<br>犬夜叉-犬夜叉<br></code></pre></td></tr></tbody></table></figure><h3 id="Map接口课堂练习"><a href="#Map接口课堂练习" class="headerlink" title="Map接口课堂练习"></a>Map接口课堂练习</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapExercise</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        Employee jack = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"jack"</span>, <span class="hljs-number">1001</span>, <span class="hljs-number">31000</span>);<br>        Employee rose = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"rose"</span>, <span class="hljs-number">1002</span>, <span class="hljs-number">25000</span>);<br>        Employee jacky = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">"jacky"</span>, <span class="hljs-number">1003</span>, <span class="hljs-number">9000</span>);<br>        map.put(jack.getId(), jack);<br>        map.put(rose.getId(), rose);<br>        map.put(jacky.getId(), jacky);<br><br>        <span class="hljs-comment">// keySet-增强for遍历</span><br>        System.out.println(<span class="hljs-string">"=====keySet-增强for遍历====="</span>);<br>        Employee employee = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (Object key : map.keySet()) {<br>            employee = (Employee) map.get(key);<br>            <span class="hljs-keyword">if</span> (employee.getSalary() &gt; <span class="hljs-number">18000</span>) {<br>                System.out.println(employee.toString());<br>            }<br>        }<br>        <span class="hljs-comment">// entrySet-迭代器遍历</span><br>        System.out.println(<span class="hljs-string">"=====entrySet-迭代器遍历====="</span>);<br>        Set set = map.entrySet();<br>        Iterator iterator = set.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            Object next = iterator.next();<br>            Map.Entry entry = (Map.Entry) next;<br>            Employee employee1 = (Employee) entry.getValue();<br>            <span class="hljs-keyword">if</span> (employee1.getSalary() &gt; <span class="hljs-number">18000</span>) {<br>                System.out.println(employee1);<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">=====keySet-增强<span class="hljs-keyword">for</span>遍历=====<br>Employee{name=<span class="hljs-string">'jack'</span>, id=<span class="hljs-number">1001</span>, salary=<span class="hljs-number">31000.0</span>}<br>Employee{name=<span class="hljs-string">'rose'</span>, id=<span class="hljs-number">1002</span>, salary=<span class="hljs-number">25000.0</span>}<br>=====entrySet-迭代器遍历=====<br>Employee{name=<span class="hljs-string">'jack'</span>, id=<span class="hljs-number">1001</span>, salary=<span class="hljs-number">31000.0</span>}<br>Employee{name=<span class="hljs-string">'rose'</span>, id=<span class="hljs-number">1002</span>, salary=<span class="hljs-number">25000.0</span>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Map接口底层代码分析"><a href="#Map接口底层代码分析" class="headerlink" title="Map接口底层代码分析"></a>Map接口底层代码分析</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapSource_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Map hashMap = <span class="hljs-keyword">new</span> HashMap();<br>        hashMap.put(<span class="hljs-string">"no1"</span>, <span class="hljs-string">"小可爱1号"</span>);<br>        hashMap.put(<span class="hljs-string">"no2"</span>, <span class="hljs-string">"小可爱2号"</span>);<br><br>        <span class="hljs-comment">//1. k-v 最后是 HashMap$Node node = newNode(hash, key, value, null);</span><br>        <span class="hljs-comment">//2. k-v 为了方便程序员遍历, 还会创建一个EntrySet集合, 该集合存放的元素的类型是Entry, 而一个Entry对象里面就有k,v,EntrySet&lt;Entry&lt;K, V&gt;&gt;</span><br>        <span class="hljs-comment">//   底层代码: public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</span><br>        Set set = hashMap.entrySet();<br>        System.out.println(set.getClass()); <span class="hljs-comment">// class java.util.HashMap$EntrySet</span><br><br>        <span class="hljs-comment">//3. entrySet里面数据定义的类型是Map.Entry, 底层代码: Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet(); 但是实际上存放的还是HashMap$Node.</span><br>        <span class="hljs-comment">//   为什么可以把一个Node类型存放到Map.Entry里面呢? 这是因为HashMap$Node实现了Map$Entry. 底层代码：static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;</span><br>        <span class="hljs-keyword">for</span> (Object obj : set) {<br>            System.out.println(obj.getClass());<span class="hljs-comment">// class java.util.HashMap$Node</span><br>        }<br><br>        <span class="hljs-comment">//4. 既然key,value已经存放到HashMap$Node, 那为什么设计者设计的时候, 又把对象存放到了EntrySet里面呢? 这是因为对象存放到entrySet之后, 就方便我们程序员遍历了.</span><br>        <span class="hljs-comment">//   为什么会方便程序员遍历呢? 这是因为Map.Entry提供了两个重要的方法 (1)K getKey();  (2)V getValue();</span><br>        <span class="hljs-keyword">for</span> (Object o : set) {<br>            Map.Entry entry = (Map.Entry) o;<br>            System.out.println(entry.getKey() + <span class="hljs-string">"-"</span> + entry.getValue());<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">util</span>.<span class="hljs-title">HashMap</span>$<span class="hljs-title">EntrySet</span></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">util</span>.<span class="hljs-title">HashMap</span>$<span class="hljs-title">Node</span></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">util</span>.<span class="hljs-title">HashMap</span>$<span class="hljs-title">Node</span></span><br><span class="hljs-class"><span class="hljs-title">no2</span>-小可爱2号</span><br><span class="hljs-class"><span class="hljs-title">no1</span>-小可爱1号</span><br></code></pre></td></tr></tbody></table></figure><p>==entry里面的key和value其实是指向node节点 key和value的引用==</p><p><img src="https://s2.loli.net/2022/06/28/SDqXT1vHFgfIEJ2.png"></p><h1 id="HashMap源码剖析"><a href="#HashMap源码剖析" class="headerlink" title="HashMap源码剖析"></a>HashMap源码剖析</h1><h2 id="HashMap基本介绍"><a href="#HashMap基本介绍" class="headerlink" title="HashMap基本介绍"></a>HashMap基本介绍</h2><ol><li>Map接口的常用实现类：==HashMap==、Hashtable和Properties。</li><li>HashMap是以Key-Value键值对的方式来存储数据的（Entry）。</li><li>Key不能重复，value可以重复，允许有null key和null value。</li><li>如果添加相同的key，后面的会覆盖前面的key-value，等同于修改。（key不变，value会替换）</li><li>与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的。</li><li>HashMap没有实现同步，因此线程是不安全的。方法没有做同步互斥的操作（synchronized），public V put(K key, V value) </li></ol><h2 id="HashMap底层代码剖析"><a href="#HashMap底层代码剖析" class="headerlink" title="HashMap底层代码剖析"></a>HashMap底层代码剖析</h2><p>执行HashMap()</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="hljs-comment">// all other fields defaulted</span><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>{<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object key)</span> </span>{<br>    <span class="hljs-keyword">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span> h = hash;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> &amp;&amp; value.length &gt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">char</span> val[] = value;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; value.length; i++) {<br>            h = <span class="hljs-number">31</span> * h + val[i];<br>        }<br>        hash = h;<br>    }<br>    <span class="hljs-keyword">return</span> h;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent,</span></span><br><span class="hljs-function"><span class="hljs-params">               <span class="hljs-keyword">boolean</span> evict)</span> </span>{<br>    <span class="hljs-comment">//定义辅助变量</span><br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-keyword">int</span> n, i;<br>    <span class="hljs-comment">//如果当前table是null，或者大小等于0，就第一次扩容，扩到16个空间</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<span class="hljs-comment">//table是hashMap的一个属性，这个table就是放node节点的一个数组。类型是：Node[]</span><br>        n = (tab = resize()).length;<br>    <span class="hljs-comment">//(1)根据key，得到hash，去计算该key应该存放到table表的哪个索引位置，并让p指向这个索引位置的对象</span><br>    <span class="hljs-comment">//(2)判断p指向的索引位置的对象是否为null</span><br>    <span class="hljs-comment">//(2.1)如果p指向的索引位置的对象为null，表示还没有存放元素，就创建一个Node(key="java", value="PRESENT")</span><br>    <span class="hljs-comment">//     就放在该位置tab[i] = newNode(hash, key, value, null);</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>    <span class="hljs-comment">//(2.2)如果p指向的索引位置的对象不为null</span><br>    <span class="hljs-keyword">else</span> {<br>        <span class="hljs-comment">//一个开发技巧：在需要局部变量（辅助变量）的时候，再创建</span><br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">//如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样。并且满足下面两个条件之一：</span><br>        <span class="hljs-comment">//(1) 准备加入的key和现存的p指向的Node节点的key是同一个对象</span><br>        <span class="hljs-comment">//(2) 现存的p指向的Node节点的key的equals()和准备加入的key比较后相同</span><br>        <span class="hljs-comment">//如果满足上面两个条件之一，那么就不能加入</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-comment">// 再判断p是不是一颗红黑树，如果是红黑树，就调用putTreeVal来进行添加</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-keyword">this</span>, tab, hash, key, value);<br>        <span class="hljs-comment">//如果table对应索引位置，已经是一个链表，就使用for循环比较</span><br>        <span class="hljs-comment">//(1) 依次和链表的每一个元素比较后，都不相同，则加入到该链表最后</span><br>        <span class="hljs-comment">//(2) 在依次和该链表的每一个元素比较的过程中，如果有相同情况，就直接break</span><br>        <span class="hljs-keyword">else</span> {<br>            <span class="hljs-comment">//如果找到的节点后面是链表，就循环比较</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>; ; ++binCount) {<span class="hljs-comment">//死循环</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-keyword">null</span>) {<span class="hljs-comment">//如果整个链表没有和它相同的，就加到链表的最后</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st // TREEIFY_THRESHOLD=8</span><br>                    <span class="hljs-comment">//注意：在把元素添加到链表后，会立即进行判断，判断该链表是否已经达到8个节点,</span><br>           <span class="hljs-comment">// 如果达到8个节点，就调用treeifyBin(tab, hash)对当前链表进行树化（转成红黑树）</span><br>           <span class="hljs-comment">// 在转成红黑树时，还会进行一个判断，判断该table数组的大小是否小于MIN_TREEIFY_CAPACITY（64），</span><br>          <span class="hljs-comment">// 判断条件如下：</span><br>             <span class="hljs-comment">// if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br>           <span class="hljs-comment">//     resize();</span><br>           <span class="hljs-comment">// 如果小于64，不会马上转成红黑树，会先进行table扩容</span><br>           <span class="hljs-comment">// 只有当上面的条件不成立的时候，才进行转成红黑树</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//添加到节点后面然后退出</span><br>                }<br>                <span class="hljs-comment">//如果在循环比较的过程中，有相同的</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//放弃添加然后退出</span><br>                <span class="hljs-comment">// 这句代码，p依次指向它自己的下一个节点，这样就达到了循环每一个节点</span><br>                p = e;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) { <span class="hljs-comment">// existing mapping for key</span><br>            V oldValue = e.value;<br>            <span class="hljs-comment">//onlyIfAbsent是put方法调用putVal的时候传入进来的参数，永远为false</span><br>            <span class="hljs-comment">//public V put(K key, V value) {</span><br>            <span class="hljs-comment">//    return putVal(hash(key), key, value, false[这个参数对应的就是onlyIfAbsent], true);</span><br>            <span class="hljs-comment">//}</span><br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-keyword">null</span>)<br>                <span class="hljs-comment">//这里就实现了map同key的时候，后面的value会覆盖前面的value</span><br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        }<br>    }<br>    ++modCount;<br>    <span class="hljs-comment">//size就是每加入一个节点Node(k, v, h, next), size就会增加</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<span class="hljs-comment">// 扩容</span><br>    afterNodeInsertion(evict);<br>    <span class="hljs-comment">//返回null表示添加成功</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() {<br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-keyword">int</span> oldCap = (oldTab == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-keyword">int</span> oldThr = threshold;<br>    <span class="hljs-keyword">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) {<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br>    <span class="hljs-keyword">else</span> {               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>        <span class="hljs-comment">//DEFAULT_INITIAL_CAPACITY: 1&lt;&lt;4 2*2*2*2=16</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        <span class="hljs-comment">//DEFAULT_LOAD_FACTOR: 0.75</span><br>        <span class="hljs-comment">//临界值0.75*16=12（缓冲层）</span><br>        newThr = (<span class="hljs-keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    }<br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY ?<br>                  (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br>    }<br>    threshold = newThr;<br>    <span class="hljs-meta">@SuppressWarnings({"rawtypes","unchecked"})</span><br>    <span class="hljs-comment">//辅助变量newTable执行完下面这行代码后，就会变成有16个位置的空数组</span><br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[newCap];<br>    <span class="hljs-comment">//hashMap的table变成有16个位置的空数组</span><br>    table = newTab;<br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-keyword">null</span>) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldCap; ++j) {<br>            Node&lt;K,V&gt; e;<br>            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-keyword">null</span>) {<br>                oldTab[j] = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-keyword">null</span>)<br>                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-keyword">this</span>, newTab, j, oldCap);<br>                <span class="hljs-keyword">else</span> { <span class="hljs-comment">// preserve order</span><br>                    Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>                    Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>                    Node&lt;K,V&gt; next;<br>                    <span class="hljs-keyword">do</span> {<br>                        next = e.next;<br>                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) {<br>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)<br>                                loHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                loTail.next = e;<br>                            loTail = e;<br>                        }<br>                        <span class="hljs-keyword">else</span> {<br>                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)<br>                                hiHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                hiTail.next = e;<br>                            hiTail = e;<br>                        }<br>                    } <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);<br>                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) {<br>                        loTail.next = <span class="hljs-keyword">null</span>;<br>                        newTab[j] = loHead;<br>                    }<br>                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) {<br>                        hiTail.next = <span class="hljs-keyword">null</span>;<br>                        newTab[j + oldCap] = hiHead;<br>                    }<br>                }<br>            }<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> newTab;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="HashMap表的扩容和树化"><a href="#HashMap表的扩容和树化" class="headerlink" title="HashMap表的扩容和树化"></a>HashMap表的扩容和树化</h2><h3 id="模拟扩容"><a href="#模拟扩容" class="headerlink" title="模拟扩容"></a>模拟扩容</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashMapSource2</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        HashMap map = <span class="hljs-keyword">new</span> HashMap();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">16</span>; i++) {<br>            map.put(<span class="hljs-keyword">new</span> Test(i), <span class="hljs-string">"小番薯"</span>);<br>        }<br>        System.out.println(map);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span> </span>{<br>        <span class="hljs-keyword">this</span>.number = number;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"\nTest{"</span> +<br>                <span class="hljs-string">"number="</span> + number +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>0 -&gt; 16(12)</p><p><img src="https://s2.loli.net/2022/06/28/GMNSZ8Bk5CKYtJb.png"></p><p><img src="https://s2.loli.net/2022/06/28/QLF7IyXafw8qCG6.png"></p><p>16(12) -&gt; 32(24)</p><p><img src="https://s2.loli.net/2022/06/28/hSK6gcUyzjXG7O9.png"></p><p><img src="https://s2.loli.net/2022/06/28/g1odTmnf7WriGYu.png"></p><p>32(24) -&gt; 64(48)</p><p><img src="https://s2.loli.net/2022/06/28/BoOWYg76JVTjrlR.png"></p><p><img src="https://s2.loli.net/2022/06/28/favetBPJip5znKF.png"></p><p>64(48) -&gt; 128(96)</p><p><img src="https://s2.loli.net/2022/06/28/O2YKshgezkXZrU9.png"></p><p>table表也不能一直无限扩容下去，有个限制，如果大于等于MAXIMUM_CAPACITY(1 &lt;&lt; 30 = 1073741824)就不能再继续扩容下去了</p><p><img src="https://s2.loli.net/2022/06/28/YsB8XlyVmhZx5uA.png"></p><h3 id="模拟树化"><a href="#模拟树化" class="headerlink" title="模拟树化"></a>模拟树化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashMapSource2</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        HashMap map = <span class="hljs-keyword">new</span> HashMap();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">16</span>; i++) {<br>            map.put(<span class="hljs-keyword">new</span> Test(i), <span class="hljs-string">"兔子"</span>);<br>        }<br>        System.out.println(map);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;<br>    <span class="hljs-comment">//重写hashCode方法，为了让添加的节点都会在table表的同一个索引位置上。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span> </span>{<br>        <span class="hljs-keyword">this</span>.number = number;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"\nTest{"</span> +<br>                <span class="hljs-string">"number="</span> + number +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">{<br>Test{number=<span class="hljs-number">9</span>}=兔子, <br>Test{number=<span class="hljs-number">1</span>}=兔子, <br>Test{number=<span class="hljs-number">2</span>}=兔子, <br>Test{number=<span class="hljs-number">14</span>}=兔子, <br>Test{number=<span class="hljs-number">3</span>}=兔子, <br>Test{number=<span class="hljs-number">4</span>}=兔子, <br>Test{number=<span class="hljs-number">5</span>}=兔子, <br>Test{number=<span class="hljs-number">6</span>}=兔子, <br>Test{number=<span class="hljs-number">15</span>}=兔子, <br>Test{number=<span class="hljs-number">7</span>}=兔子, <br>Test{number=<span class="hljs-number">8</span>}=兔子, <br>Test{number=<span class="hljs-number">10</span>}=兔子, <br>Test{number=<span class="hljs-number">12</span>}=兔子, <br>Test{number=<span class="hljs-number">11</span>}=兔子, <br>Test{number=<span class="hljs-number">13</span>}=兔子}<br></code></pre></td></tr></tbody></table></figure><p>刚开始table是null</p><p><img src="https://s2.loli.net/2022/06/28/LrvXfh6QTFUHbcR.png"></p><p>插入第一条数据之后，table扩容到16，临界值为12</p><p><img src="https://s2.loli.net/2022/06/28/1CnMkVLbuBp34cW.png"></p><p>一直插入数据，直到当前10号索引位置的所挂载的元素超过8个，这个时候不会立即进行树化，因为table表的空间还小于64，所以table表就会进行再一次扩容，这一次会扩容到32，临界值会变为24。</p><p><img src="https://s2.loli.net/2022/06/28/68sABOeClNLWhpV.png"></p><p>当再进行一次数据的插入操作之后，table表会再一次进行扩容，这一次会扩容到64，临界值会变为48。</p><p><img src="https://s2.loli.net/2022/06/28/UjQnVA1zD8L4BKH.png"></p><p><img src="https://s2.loli.net/2022/06/28/IFkK1zBHoZdaLGJ.png"></p><p>再插入一条数据，这个时候，table的索引位置10就会树化，变为TreeNode</p><p><img src="https://s2.loli.net/2022/06/28/KUaGbywrpWcS6tO.png"></p><h1 id="HashTable源码剖析"><a href="#HashTable源码剖析" class="headerlink" title="HashTable源码剖析"></a>HashTable源码剖析</h1><h2 id="Hashtable基本介绍"><a href="#Hashtable基本介绍" class="headerlink" title="Hashtable基本介绍"></a>Hashtable基本介绍</h2><p><img src="https://s2.loli.net/2022/06/28/Reychrm5SvEndCO.png"></p><ol><li>存放的元素是键值对。</li><li>key和value都不能是null。</li><li>Key不能重复，value可以重复，允许有null key和null value。</li><li>Hashtable的方法基本和HashMap类似。</li><li>与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的。</li><li>Hashtable是线程安全的。(synchronized)</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hashtable_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Hashtable hashtable = <span class="hljs-keyword">new</span> Hashtable();<br>        hashtable.put(<span class="hljs-string">"小丸子"</span>, <span class="hljs-string">"樱桃小丸子"</span>);<br>        hashtable.put(<span class="hljs-string">"桔梗"</span>, <span class="hljs-string">"犬夜叉"</span>);<br>        hashtable.put(<span class="hljs-string">"月野兔"</span>, <span class="hljs-string">"美少女战士"</span>);<br>        hashtable.put(<span class="hljs-string">"唐三"</span>, <span class="hljs-string">"哈哈"</span>);<span class="hljs-comment">//会被下面的value覆盖</span><br>        hashtable.put(<span class="hljs-string">"唐三"</span>, <span class="hljs-string">"斗罗大陆"</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        hashtable.put(null, "key是null");//会抛异常 java.lang.NullPointerException</span><br><span class="hljs-comment">        hashtable.put("value是null", null);//会抛异常 java.lang.NullPointerException</span><br><span class="hljs-comment">         */</span><br>        System.out.println(hashtable);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">{唐三=斗罗大陆, 月野兔=美少女战士, 小丸子=樱桃小丸子, 桔梗=犬夜叉}<br></code></pre></td></tr></tbody></table></figure><h2 id="HashMap底层代码剖析-1"><a href="#HashMap底层代码剖析-1" class="headerlink" title="HashMap底层代码剖析"></a>HashMap底层代码剖析</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hashtable_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Hashtable hashtable = <span class="hljs-keyword">new</span> Hashtable();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) {<br>            hashtable.put(<span class="hljs-string">"student"</span> + i, <span class="hljs-string">"test"</span>);<br>        }<br>        System.out.println(hashtable);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ol><li>底层有数组，Hashtable$Entry[]， 初始化大小为11。临界值是8，threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1);</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hashtable</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">11</span>, <span class="hljs-number">0.75f</span>);<span class="hljs-comment">//initialCapacity:11  loadFactor:0.75</span><br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/28/qznU24rVOsyeKl1.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>{<br>    <span class="hljs-comment">// Make sure the value is not null</span><br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>) {<span class="hljs-comment">//value如果为null在这里就会抛出空指针异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    }<br><br>    <span class="hljs-comment">// Makes sure the key is not already in the hashtable.</span><br>    Entry&lt;?,?&gt; tab[] = table;<br>    <span class="hljs-keyword">int</span> hash = key.hashCode();<br>    <span class="hljs-keyword">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>    <span class="hljs-meta">@SuppressWarnings("unchecked")</span><br>    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];<br>    <span class="hljs-keyword">for</span>(; entry != <span class="hljs-keyword">null</span> ; entry = entry.next) {<br>        <span class="hljs-keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) {<br>            V old = entry.value;<br>            entry.value = value;<br>            <span class="hljs-keyword">return</span> old;<br>        }<br>    }<br>    <span class="hljs-comment">//这里正式执行添加数据操作</span><br>    addEntry(hash, key, value, index);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="2"><li>执行方法addEntry，将key-value封装到Entry. </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEntry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">int</span> index)</span> </span>{<br>    modCount++;<br><br>    Entry&lt;?,?&gt; tab[] = table;<br>    <span class="hljs-comment">//如果table表的size大于等于临界值，就会进行table的扩容</span><br>    <span class="hljs-keyword">if</span> (count &gt;= threshold) {<br>        <span class="hljs-comment">// Rehash the table if the threshold is exceeded</span><br>        rehash();<br><br>        tab = table;<br>        hash = key.hashCode();<br>        index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>    }<br><br>    <span class="hljs-comment">// Creates the new entry.</span><br>    <span class="hljs-meta">@SuppressWarnings("unchecked")</span><br>    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];<br>    tab[index] = <span class="hljs-keyword">new</span> Entry&lt;&gt;(hash, key, value, e);<br>    count++;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rehash</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span> oldCapacity = table.length;<br>    Entry&lt;?,?&gt;[] oldMap = table;<br><br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-comment">//oldCapacity &lt;&lt; 1 + 1 = 2*oldCapacity + 1</span><br>    <span class="hljs-keyword">int</span> newCapacity = (oldCapacity &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)<br>            <span class="hljs-comment">// Keep running with MAX_ARRAY_SIZE buckets</span><br>            <span class="hljs-keyword">return</span>;<br>        newCapacity = MAX_ARRAY_SIZE;<br>    }<br>    Entry&lt;?,?&gt;[] newMap = <span class="hljs-keyword">new</span> Entry&lt;?,?&gt;[newCapacity];<br><br>    modCount++;<br>    threshold = (<span class="hljs-keyword">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="hljs-number">1</span>);<br>    table = newMap;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = oldCapacity ; i-- &gt; <span class="hljs-number">0</span> ;) {<br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="hljs-keyword">null</span> ; ) {<br>            Entry&lt;K,V&gt; e = old;<br>            old = old.next;<br><br>            <span class="hljs-keyword">int</span> index = (e.hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % newCapacity;<br>            e.next = (Entry&lt;K,V&gt;)newMap[index];<br>            newMap[index] = e;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/28/nOS3kZYsXEhzRAG.png"></p><h2 id="Hashtable和HashMap对比"><a href="#Hashtable和HashMap对比" class="headerlink" title="Hashtable和HashMap对比"></a>Hashtable和HashMap对比</h2><table><thead><tr><th></th><th>版本</th><th>线程安全（同步）？</th><th>效率</th><th>允许null key和null value？</th></tr></thead><tbody><tr><td>HashMap</td><td>1.2</td><td>不安全</td><td>高</td><td>允许</td></tr><tr><td>Hashtable</td><td>1.0</td><td>安全</td><td>较低</td><td>不允许</td></tr></tbody></table><h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><h2 id="Properties基本介绍"><a href="#Properties基本介绍" class="headerlink" title="Properties基本介绍"></a>Properties基本介绍</h2><p><img src="https://s2.loli.net/2022/06/28/ybhpoHv2LOxGzWU.png"></p><p>Properties可以用于从*.properties中加载数据到Properties类对象，进行数据的读取和修改。</p><p>工作中*.properties通常作为配置文件。</p><h2 id="Properties用法"><a href="#Properties用法" class="headerlink" title="Properties用法"></a>Properties用法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Properties_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">//1.put</span><br>        <span class="hljs-comment">//不能存null key或者null value。 public class Properties extends Hashtable&lt;Object,Object&gt;</span><br>        <span class="hljs-comment">//properties.put(null, "null key");</span><br>        <span class="hljs-comment">//properties.put("null value", null);//Exception in thread "main" java.lang.NullPointerException</span><br>        properties.put(<span class="hljs-string">"1001"</span>, <span class="hljs-string">"jack"</span>);<span class="hljs-comment">//Exception in thread "main" java.lang.NullPointerException</span><br>        properties.put(<span class="hljs-string">"1001"</span>, <span class="hljs-string">"lucky"</span>);<span class="hljs-comment">//相同的key，后一个value会替换前一个value。</span><br>        properties.put(<span class="hljs-string">"1002"</span>, <span class="hljs-string">"cara"</span>);<br>        properties.put(<span class="hljs-string">"1003"</span>, <span class="hljs-string">"ada"</span>);<br>        System.out.println(<span class="hljs-string">"=====put====="</span>);<br>        System.out.println(properties);<br><br>        <span class="hljs-comment">//2.get</span><br>        System.out.println(<span class="hljs-string">"=====get====="</span>);<br>        System.out.println(properties.get(<span class="hljs-string">"1001"</span>));<br><br>        <span class="hljs-comment">//3.getProperty(String key)</span><br>        System.out.println(<span class="hljs-string">"=====getProperty(String key)====="</span>);<br>        System.out.println(properties.getProperty(<span class="hljs-string">"1002"</span>));<br><br>        <span class="hljs-comment">//4.getProperty(String key, String defaultValue)</span><br>        System.out.println(<span class="hljs-string">"=====getProperty(String key, String defaultValue)====="</span>);<br>        System.out.println(properties.getProperty(<span class="hljs-string">"1005"</span>, <span class="hljs-string">"user not exists"</span>));<br><br>        <span class="hljs-comment">//3.remove</span><br>        properties.remove(<span class="hljs-string">"1003"</span>);<br>        System.out.println(<span class="hljs-string">"=====remove====="</span>);<br>        System.out.println(properties);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">=====put=====<br>{<span class="hljs-number">1003</span>=ada, <span class="hljs-number">1002</span>=cara, <span class="hljs-number">1001</span>=lucky}<br>=====get=====<br>lucky<br>=====getProperty(String key)=====<br>cara<br>=====getProperty(String key, String defaultValue)=====<br>user not exists<br>=====remove=====<br>{<span class="hljs-number">1002</span>=cara, <span class="hljs-number">1001</span>=lucky}<br></code></pre></td></tr></tbody></table></figure><h2 id="Properties源码剖析"><a href="#Properties源码剖析" class="headerlink" title="Properties源码剖析"></a>Properties源码剖析</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Properties</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">this</span>(<span class="hljs-keyword">null</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Properties</span><span class="hljs-params">(Properties defaults)</span> </span>{<br>    <span class="hljs-keyword">this</span>.defaults = defaults;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hashtable</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">11</span>, <span class="hljs-number">0.75f</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>{<br>    <span class="hljs-comment">// Make sure the value is not null</span><br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>) {<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    }<br><br>    <span class="hljs-comment">// Makes sure the key is not already in the hashtable.</span><br>    Entry&lt;?,?&gt; tab[] = table;<br>    <span class="hljs-keyword">int</span> hash = key.hashCode();<br>    <span class="hljs-keyword">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>    <span class="hljs-meta">@SuppressWarnings("unchecked")</span><br>    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];<br>    <span class="hljs-keyword">for</span>(; entry != <span class="hljs-keyword">null</span> ; entry = entry.next) {<br>        <span class="hljs-comment">//如果要插入的的key的hash值和准备插入的table索引位置的对象的hash值一样，并且equals方法相等，那么就执行替换操作</span><br>        <span class="hljs-keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) {<br>            V old = entry.value;<br>            entry.value = value;<span class="hljs-comment">//替换</span><br>            <span class="hljs-keyword">return</span> old;<br>        }<br>    }<br><br>    addEntry(hash, key, value, index);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEntry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">int</span> index)</span> </span>{<br>    modCount++;<br><br>    Entry&lt;?,?&gt; tab[] = table;<br>    <span class="hljs-keyword">if</span> (count &gt;= threshold) {<br>        <span class="hljs-comment">// Rehash the table if the threshold is exceeded</span><br>        <span class="hljs-comment">//如果table中的数据大于等于临界值，就会扩容</span><br>        rehash();<br><br>        tab = table;<br>        hash = key.hashCode();<br>        index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>    }<br><br>    <span class="hljs-comment">// Creates the new entry.</span><br>    <span class="hljs-meta">@SuppressWarnings("unchecked")</span><br>    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];<br>    tab[index] = <span class="hljs-keyword">new</span> Entry&lt;&gt;(hash, key, value, e);<br>    count++;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rehash</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span> oldCapacity = table.length;<br>    Entry&lt;?,?&gt;[] oldMap = table;<br><br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-comment">//2*oldCapacity + 1</span><br>    <span class="hljs-keyword">int</span> newCapacity = (oldCapacity &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)<br>            <span class="hljs-comment">// Keep running with MAX_ARRAY_SIZE buckets</span><br>            <span class="hljs-keyword">return</span>;<br>        newCapacity = MAX_ARRAY_SIZE;<br>    }<br>    Entry&lt;?,?&gt;[] newMap = <span class="hljs-keyword">new</span> Entry&lt;?,?&gt;[newCapacity];<br><br>    modCount++;<br>    <span class="hljs-comment">//计算新的临界值</span><br>    threshold = (<span class="hljs-keyword">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="hljs-number">1</span>);<br>    table = newMap;<br><br>    <span class="hljs-comment">//遍历旧数据，将原来的值再放到新的map上</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = oldCapacity ; i-- &gt; <span class="hljs-number">0</span> ;) {<br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="hljs-keyword">null</span> ; ) {<br>            Entry&lt;K,V&gt; e = old;<br>            old = old.next;<br><br>            <span class="hljs-keyword">int</span> index = (e.hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % newCapacity;<br>            e.next = (Entry&lt;K,V&gt;)newMap[index];<br>            newMap[index] = e;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="TreeSet源码剖析"><a href="#TreeSet源码剖析" class="headerlink" title="TreeSet源码剖析"></a>TreeSet源码剖析</h1><h2 id="TreeSet基本介绍"><a href="#TreeSet基本介绍" class="headerlink" title="TreeSet基本介绍"></a>TreeSet基本介绍</h2><p><img src="https://s2.loli.net/2022/06/28/2pM9DSRUrYKItNT.png"></p><p><img src="https://s2.loli.net/2022/06/28/CzsoaA1Pn9fQdTJ.png"></p><h2 id="TreeSet基本用法"><a href="#TreeSet基本用法" class="headerlink" title="TreeSet基本用法"></a>TreeSet基本用法</h2><h3 id="使用无参构造器创建TreeSet对象"><a href="#使用无参构造器创建TreeSet对象" class="headerlink" title="使用无参构造器创建TreeSet对象"></a>使用无参构造器创建TreeSet对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeSet_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//输出的结果和数据插入的顺序不一致</span><br>        TreeSet treeSet = <span class="hljs-keyword">new</span> TreeSet();<br>        treeSet.add(<span class="hljs-string">"jack"</span>);<br>        treeSet.add(<span class="hljs-string">"roy"</span>);<br>        treeSet.add(<span class="hljs-string">"alisa"</span>);<br>        treeSet.add(<span class="hljs-string">"cecil"</span>);<br>        System.out.println(treeSet);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[alisa, cecil, jack, roy]<br></code></pre></td></tr></tbody></table></figure><h3 id="使用有参构造器创建TreeSet对象"><a href="#使用有参构造器创建TreeSet对象" class="headerlink" title="使用有参构造器创建TreeSet对象"></a>使用有参构造器创建TreeSet对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeSetSortable</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//按字母升序排列</span><br>        TreeSet treeSet = <span class="hljs-keyword">new</span> TreeSet(<span class="hljs-keyword">new</span> Comparator() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>{<br>                <span class="hljs-keyword">return</span> ((String) o1).compareTo(((String) o2));<br>            }<br>        });<br>        treeSet.add(<span class="hljs-string">"jack"</span>);<br>        treeSet.add(<span class="hljs-string">"roy"</span>);<br>        treeSet.add(<span class="hljs-string">"alisa"</span>);<br>        treeSet.add(<span class="hljs-string">"cecil"</span>);<br>        System.out.println(treeSet);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[alisa, cecil, jack, roy]<br></code></pre></td></tr></tbody></table></figure><h2 id="TreeSet源码剖析-1"><a href="#TreeSet源码剖析-1" class="headerlink" title="TreeSet源码剖析"></a>TreeSet源码剖析</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeSet</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-keyword">super</span> E&gt; comparator)</span> </span>{<br>    <span class="hljs-keyword">this</span>(<span class="hljs-keyword">new</span> TreeMap&lt;&gt;(comparator));<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>{<br>    <span class="hljs-keyword">return</span> m.put(e, PRESENT)==<span class="hljs-keyword">null</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>{<br>    Entry&lt;K,V&gt; t = root;<br>    <span class="hljs-comment">//插入第一个数据，t为null，进入这个if条件</span><br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-keyword">null</span>) {<br>        compare(key, key); <span class="hljs-comment">// type (and possibly null) check</span><br>        <span class="hljs-comment">//插入数据</span><br>        root = <span class="hljs-keyword">new</span> Entry&lt;&gt;(key, value, <span class="hljs-keyword">null</span>);<br>        size = <span class="hljs-number">1</span>;<br>        modCount++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    }<br>    <span class="hljs-keyword">int</span> cmp;<br>    Entry&lt;K,V&gt; parent;<br>    <span class="hljs-comment">// split comparator and comparable paths</span><br>    <span class="hljs-comment">//comparator会动态绑定到我们写的匿名内部类对象</span><br>    Comparator&lt;? <span class="hljs-keyword">super</span> K&gt; cpr = comparator;<br>    <span class="hljs-keyword">if</span> (cpr != <span class="hljs-keyword">null</span>) {<br>        <span class="hljs-keyword">do</span> {<br>            parent = t;<br>            <span class="hljs-comment">//比较</span><br>            cmp = cpr.compare(key, t.key);<br>            <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-comment">//t=t.left，如果左侧还有节点，那么while循环会继续比较</span><br>                t = t.left;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-comment">//t=t.right，如果右侧还有节点，那么while循环会继续比较</span><br>                t = t.right;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> t.setValue(value);<br>        } <span class="hljs-keyword">while</span> (t != <span class="hljs-keyword">null</span>);<br>    }<br>    <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        <span class="hljs-meta">@SuppressWarnings("unchecked")</span><br>        Comparable&lt;? <span class="hljs-keyword">super</span> K&gt; k = (Comparable&lt;? <span class="hljs-keyword">super</span> K&gt;) key;<br>        <span class="hljs-keyword">do</span> {<br>            parent = t;<br>            cmp = k.compareTo(t.key);<br>            <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>                t = t.left;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>                t = t.right;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> t.setValue(value);<br>        } <span class="hljs-keyword">while</span> (t != <span class="hljs-keyword">null</span>);<br>    }<br>    Entry&lt;K,V&gt; e = <span class="hljs-keyword">new</span> Entry&lt;&gt;(key, value, parent);<br>    <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>        parent.left = e;<br>    <span class="hljs-keyword">else</span><br>        parent.right = e;<br>    fixAfterInsertion(e);<br>    size++;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="TreeMap源码剖析"><a href="#TreeMap源码剖析" class="headerlink" title="TreeMap源码剖析"></a>TreeMap源码剖析</h1><h2 id="TreeMap基本介绍"><a href="#TreeMap基本介绍" class="headerlink" title="TreeMap基本介绍"></a>TreeMap基本介绍</h2><p><img src="https://s2.loli.net/2022/06/28/3R6ztETWvoSLj7p.png"></p><p><img src="https://s2.loli.net/2022/06/28/DuCEJcnW53Zk8dF.png"></p><h2 id="TreeMap基本用法"><a href="#TreeMap基本用法" class="headerlink" title="TreeMap基本用法"></a>TreeMap基本用法</h2><h3 id="使用无参构造器创建TreeMap对象"><a href="#使用无参构造器创建TreeMap对象" class="headerlink" title="使用无参构造器创建TreeMap对象"></a>使用无参构造器创建TreeMap对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Constructs a new, empty tree map, using the natural ordering of its keys. All keys inserted into the map must implement the Comparable interface. Furthermore, all such keys must be mutually comparable.</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeMap_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        TreeMap treeMap = <span class="hljs-keyword">new</span> TreeMap();<br>        treeMap.put(<span class="hljs-string">"jack"</span>, <span class="hljs-string">"1001"</span>);<br>        treeMap.put(<span class="hljs-string">"henry"</span>, <span class="hljs-string">"1002"</span>);<br>        treeMap.put(<span class="hljs-string">"roy"</span>, <span class="hljs-string">"1003"</span>);<br>        treeMap.put(<span class="hljs-string">"winnie"</span>, <span class="hljs-string">"1004"</span>);<br>        treeMap.put(<span class="hljs-string">"cecil"</span>, <span class="hljs-string">"1005"</span>);<br>        treeMap.put(<span class="hljs-string">"cara"</span>, <span class="hljs-string">"1006"</span>);<br>        System.out.println(treeMap);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">{cara=<span class="hljs-number">1006</span>, cecil=<span class="hljs-number">1005</span>, henry=<span class="hljs-number">1002</span>, jack=<span class="hljs-number">1001</span>, roy=<span class="hljs-number">1003</span>, winnie=<span class="hljs-number">1004</span>}<br></code></pre></td></tr></tbody></table></figure><h3 id="使用有参构造器创建TreeMap对象"><a href="#使用有参构造器创建TreeMap对象" class="headerlink" title="使用有参构造器创建TreeMap对象"></a>使用有参构造器创建TreeMap对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeMapSortable</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        TreeMap treeMap = <span class="hljs-keyword">new</span> TreeMap(<span class="hljs-keyword">new</span> Comparator() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>{<br>                <span class="hljs-keyword">return</span> ((String) o1).length() - (((String) o2).length());<br>            }<br>        });<br>        treeMap.put(<span class="hljs-string">"jack"</span>, <span class="hljs-string">"1001"</span>);<br>        treeMap.put(<span class="hljs-string">"henry"</span>, <span class="hljs-string">"1002"</span>);<br>        treeMap.put(<span class="hljs-string">"roy"</span>, <span class="hljs-string">"1003"</span>);<br>        treeMap.put(<span class="hljs-string">"winnie"</span>, <span class="hljs-string">"1004"</span>);<br>        treeMap.put(<span class="hljs-string">"cecil"</span>, <span class="hljs-string">"1005"</span>);<br>        treeMap.put(<span class="hljs-string">"cara"</span>, <span class="hljs-string">"1006"</span>);<br>        System.out.println(treeMap);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">{roy=<span class="hljs-number">1003</span>, jack=<span class="hljs-number">1006</span>, henry=<span class="hljs-number">1005</span>, winnie=<span class="hljs-number">1004</span>}<br></code></pre></td></tr></tbody></table></figure><h2 id="TreeMap源码剖析-1"><a href="#TreeMap源码剖析-1" class="headerlink" title="TreeMap源码剖析"></a>TreeMap源码剖析</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeMap</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-keyword">super</span> K&gt; comparator)</span> </span>{<br>    <span class="hljs-keyword">this</span>.comparator = comparator;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>{<br>    Entry&lt;K,V&gt; t = root;<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-keyword">null</span>) {<br>        compare(key, key); <span class="hljs-comment">// type (and possibly null) check</span><br><br>        root = <span class="hljs-keyword">new</span> Entry&lt;&gt;(key, value, <span class="hljs-keyword">null</span>);<br>        size = <span class="hljs-number">1</span>;<br>        modCount++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    }<br>    <span class="hljs-keyword">int</span> cmp;<br>    Entry&lt;K,V&gt; parent;<br>    <span class="hljs-comment">// split comparator and comparable paths</span><br>    Comparator&lt;? <span class="hljs-keyword">super</span> K&gt; cpr = comparator;<br>    <span class="hljs-keyword">if</span> (cpr != <span class="hljs-keyword">null</span>) {<br>        <span class="hljs-keyword">do</span> {<br>            parent = t;<br>            cmp = cpr.compare(key, t.key);<br>            <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>                t = t.left;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>                t = t.right;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> t.setValue(value);<br>        } <span class="hljs-keyword">while</span> (t != <span class="hljs-keyword">null</span>);<br>    }<br>    <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        <span class="hljs-meta">@SuppressWarnings("unchecked")</span><br>        Comparable&lt;? <span class="hljs-keyword">super</span> K&gt; k = (Comparable&lt;? <span class="hljs-keyword">super</span> K&gt;) key;<br>        <span class="hljs-keyword">do</span> {<br>            parent = t;<br>            cmp = k.compareTo(t.key);<br>            <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>                t = t.left;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>                t = t.right;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> t.setValue(value);<br>        } <span class="hljs-keyword">while</span> (t != <span class="hljs-keyword">null</span>);<br>    }<br>    Entry&lt;K,V&gt; e = <span class="hljs-keyword">new</span> Entry&lt;&gt;(key, value, parent);<br>    <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>        parent.left = e;<br>    <span class="hljs-keyword">else</span><br>        parent.right = e;<br>    fixAfterInsertion(e);<br>    size++;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">setValue</span><span class="hljs-params">(V value)</span> </span>{<br>    <span class="hljs-comment">//如果key相同，value会进行替换</span><br>    V oldValue = <span class="hljs-keyword">this</span>.value;<br>    <span class="hljs-keyword">this</span>.value = value;<br>    <span class="hljs-keyword">return</span> oldValue;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h1><h2 id="Collections工具类基本介绍"><a href="#Collections工具类基本介绍" class="headerlink" title="Collections工具类基本介绍"></a>Collections工具类基本介绍</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Collections</span></span><br><span class="hljs-class"><span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span></span><br></code></pre></td></tr></tbody></table></figure><h2 id="Collections工具类常用方法"><a href="#Collections工具类常用方法" class="headerlink" title="Collections工具类常用方法"></a>Collections工具类常用方法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Collections_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-string">"roy"</span>);<br>        list.add(<span class="hljs-string">"cecil"</span>);<br>        list.add(<span class="hljs-string">"summer"</span>);<br>        list.add(<span class="hljs-string">"roy"</span>);<br><br>        <span class="hljs-comment">//reverse: 反转list中的元素</span><br>        Collections.reverse(list);<br>        System.out.println(<span class="hljs-string">"=====reverse====="</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//shuffle: 对list中的元素进行随机排序</span><br>        System.out.println(<span class="hljs-string">"=====shuffle====="</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) {<br>            Collections.shuffle(list);<br>            System.out.println(list);<br>        }<br><br>        <span class="hljs-comment">//sort: 根据元素的自然顺序对list集合元素进行升序排序</span><br>        System.out.println(<span class="hljs-string">"=====sort====="</span>);<br>        Collections.sort(list);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c: 按指定顺序对元素进行排序</span><br>        Collections.sort(list, <span class="hljs-keyword">new</span> Comparator() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>{<br>                <span class="hljs-keyword">return</span> ((String) o2).length() - ((String) o1).length();<br>            }<br>        });<br>        System.out.println(<span class="hljs-string">"=====sort传入比较器====="</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//swap: 将j处元素和i处元素进行交换</span><br>        System.out.println(<span class="hljs-string">"=====swap====="</span>);<br>        Collections.swap(list, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//frequency: 返回集合中指定元素出现的次数</span><br>        System.out.println(<span class="hljs-string">"=====frequency====="</span>);<br>        System.out.println(Collections.frequency(list, <span class="hljs-string">"roy"</span>));<br><br>        <span class="hljs-comment">//copy: 将src中的内容复制到dest中</span><br>        System.out.println(<span class="hljs-string">"=====copy====="</span>);<br>        List list1 = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-string">"henry"</span>);<br>        list.add(<span class="hljs-string">"jacky"</span>);<br>        list.add(<span class="hljs-string">"jack"</span>);<br>        Collections.copy(list, list1);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//replaceAll: 使用新值替换List对象的所有旧值</span><br>        System.out.println(<span class="hljs-string">"=====replaceAll====="</span>);<br>        Collections.replaceAll(list, <span class="hljs-string">"roy"</span>, <span class="hljs-string">"lucky"</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//max: 根据元素的自然顺序，返回给定集合中的最大元素</span><br>        System.out.println(<span class="hljs-string">"=====max====="</span>);<br>        System.out.println(Collections.max(list));<br><br>        <span class="hljs-comment">//max: 根据Comparator指定的顺序，返回给定集合中的最大元素</span><br>        System.out.println(<span class="hljs-string">"=====max====="</span>);<br>        System.out.println(Collections.max(list, <span class="hljs-keyword">new</span> Comparator() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>{<br>                <span class="hljs-keyword">return</span> ((String) o2).length() - ((String) o1).length();<br>            }<br>        }));<br><br>        <span class="hljs-comment">//min: 根据元素的自然顺序，返回给定集合中的最小元素</span><br>        System.out.println(<span class="hljs-string">"=====min====="</span>);<br>        System.out.println(Collections.min(list));<br><br>        <span class="hljs-comment">//min: 根据Comparator指定的顺序，返回给定集合中的最小元素</span><br>        System.out.println(<span class="hljs-string">"=====min====="</span>);<br>        System.out.println(Collections.min(list, <span class="hljs-keyword">new</span> Comparator() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>{<br>                <span class="hljs-keyword">return</span> ((String) o2).compareTo(((String) o1));<br>            }<br>        }));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">=====reverse=====<br>[roy, summer, cecil, roy]<br>=====shuffle=====<br>[roy, roy, summer, cecil]<br>[roy, cecil, roy, summer]<br>[roy, cecil, summer, roy]<br>=====sort=====<br>[cecil, roy, roy, summer]<br>=====sort传入比较器=====<br>[summer, cecil, roy, roy]<br>=====swap=====<br>[summer, roy, cecil, roy]<br>=====frequency=====<br><span class="hljs-number">2</span><br>=====copy=====<br>[summer, roy, cecil, roy, henry, jacky, jack]<br>=====replaceAll=====<br>[summer, lucky, cecil, lucky, henry, jacky, jack]<br>=====max=====<br>summer<br>=====max=====<br>jack<br>=====min=====<br>cecil<br>=====min=====<br>summer<br></code></pre></td></tr></tbody></table></figure><h1 id="集合框架练习"><a href="#集合框架练习" class="headerlink" title="集合框架练习"></a>集合框架练习</h1><h2 id="练习题一"><a href="#练习题一" class="headerlink" title="练习题一"></a>练习题一</h2><p>题目：</p><ol><li><p>封装一个新闻类，包含标题和内容属性，提供get、set方法，重写toString方法，打印对象时只打印标题。</p></li><li><p>只提供一个带参数的构造器，实例化对象时，只初始化标题；并且实例化两个对象。</p></li><li><p>将新闻对象添加到ArrayList集合中，并且进行倒序遍历。</p></li><li><p>在遍历集合的过程中，对新闻标题进行处理，超过15个字的，只保留前15个，然后在后边加上”…”</p></li><li><p>在控制台打印遍历经过处理的新闻标题。</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework01</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        ArrayList arrayList = <span class="hljs-keyword">new</span> ArrayList();<br>        News news01 = <span class="hljs-keyword">new</span> News(<span class="hljs-string">"a今天是世界读书日 在书中“读”行四海 用画笔畅游太空"</span>);<br>        News news02 = <span class="hljs-keyword">new</span> News(<span class="hljs-string">"b海军 中国人民解放军海军成立73周年 十年之变：人民海军风浪中步履铿锵"</span>);<br>        arrayList.add(news01);<br>        arrayList.add(news02);<br>        Collections.sort(arrayList, <span class="hljs-keyword">new</span> Comparator() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>{<br>                <span class="hljs-keyword">return</span> ((News) o2).getTitle().compareTo(((News) o1).getTitle());<br>            }<br>        });<br><br>        Iterator iterator = arrayList.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            News news = (News) iterator.next();<br>            String title = news.getTitle();<br>            <span class="hljs-keyword">if</span> (title.length() &gt; <span class="hljs-number">15</span>) {<br>                news.setTitle(title.substring(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>) + <span class="hljs-string">"..."</span>);<br>            }<br>            System.out.println(news.getTitle());<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">News</span> </span>{<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">News</span><span class="hljs-params">(String title)</span> </span>{<br>        <span class="hljs-keyword">this</span>.title = title;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTitle</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> title;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTitle</span><span class="hljs-params">(String title)</span> </span>{<br>        <span class="hljs-keyword">this</span>.title = title;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getContent</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> content;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setContent</span><span class="hljs-params">(String content)</span> </span>{<br>        <span class="hljs-keyword">this</span>.content = content;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"News{"</span> +<br>                <span class="hljs-string">"title='"</span> + title + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">b海军 中国人民解放军海军成立...<br>a今天是世界读书日 在书中“读...<br></code></pre></td></tr></tbody></table></figure><h2 id="练习题二"><a href="#练习题二" class="headerlink" title="练习题二"></a>练习题二</h2><p>使用ArrayList完成对象Car{name, price}的各种操作</p><ol><li>add: 添加单个元素</li><li>remove： 删除指定元素</li><li>contains：查找元素是否存在</li><li>size：获取元素个数</li><li>isEmpty：判断是否为空</li><li>clear：清空</li><li>addAll：添加多个元素</li><li>containsAll：查找多个元素是否都存在</li><li>removeAll：删除多个元素</li></ol><p>使用增强for和迭代器来遍历所有的Car，需要重写Car的toString()方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        List list2 = <span class="hljs-keyword">new</span> ArrayList();<br>        List list3 = <span class="hljs-keyword">new</span> ArrayList();<br>        Car car1 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">"亚洲龙"</span>, <span class="hljs-number">270000</span>);<br>        Car car2 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">"奥迪A7L"</span>, <span class="hljs-number">770000</span>);<br>        Car car3 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">"思域"</span>, <span class="hljs-number">160000</span>);<br>        Car car4 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">"宋PLUS"</span>, <span class="hljs-number">205000</span>);<br>        Car car5 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">"速腾"</span>, <span class="hljs-number">165000</span>);<br>        <span class="hljs-comment">//add</span><br>        list.add(car1);<br>        System.out.println(<span class="hljs-string">"===add==="</span> + list);<br>        <span class="hljs-comment">//addAll</span><br>        list2.add(car2);<br>        list2.add(car3);<br>        list.addAll(list2);<br><br>        list3.add(car4);<br>        list3.add(car5);<br>        list.addAll(list3);<br>        System.out.println(<span class="hljs-string">"===addAll==="</span> + list);<br>        <span class="hljs-comment">//remove</span><br>        list.remove(car3);<br>        System.out.println(<span class="hljs-string">"===remove==="</span> + list);<br>        <span class="hljs-comment">//contains</span><br>        System.out.println(<span class="hljs-string">"===contains==="</span> + list.contains(car3));<br>        <span class="hljs-comment">//size</span><br>        System.out.println(<span class="hljs-string">"===size==="</span> + list.size());<br>        <span class="hljs-comment">//isEmpty</span><br>        System.out.println(<span class="hljs-string">"===isEmpty==="</span> + list.isEmpty());<br>        <span class="hljs-comment">//containsAll</span><br>        System.out.println(<span class="hljs-string">"===containsAll==="</span> + list.containsAll(list3));<br>        <span class="hljs-comment">//removeAll</span><br>        System.out.println(<span class="hljs-string">"===removeAll==="</span> + list.removeAll(list2));<br>        <span class="hljs-comment">//遍历集合</span><br>        System.out.println(<span class="hljs-string">"=====增强for循环遍历集合====="</span>);<br>        <span class="hljs-keyword">for</span> (Object o : list) {<br>            System.out.println((Car) o);<br>        }<br>        System.out.println(<span class="hljs-string">"=====迭代器遍历集合====="</span>);<br>        Iterator iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            System.out.println(iterator.next());<br>        }<br>        <span class="hljs-comment">//clear</span><br>        list.clear();<br>        System.out.println(<span class="hljs-string">"===clear==="</span> + list);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> price;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">(String name, <span class="hljs-keyword">double</span> price)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Car{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", price="</span> + price +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">===add===[Car{name=<span class="hljs-string">'亚洲龙'</span>, price=<span class="hljs-number">270000.0</span>}]<br>===addAll===[Car{name=<span class="hljs-string">'亚洲龙'</span>, price=<span class="hljs-number">270000.0</span>}, Car{name=<span class="hljs-string">'奥迪A7L'</span>, price=<span class="hljs-number">770000.0</span>}, Car{name=<span class="hljs-string">'思域'</span>, price=<span class="hljs-number">160000.0</span>}, Car{name=<span class="hljs-string">'宋PLUS'</span>, price=<span class="hljs-number">205000.0</span>}, Car{name=<span class="hljs-string">'速腾'</span>, price=<span class="hljs-number">165000.0</span>}]<br>===remove===[Car{name=<span class="hljs-string">'亚洲龙'</span>, price=<span class="hljs-number">270000.0</span>}, Car{name=<span class="hljs-string">'奥迪A7L'</span>, price=<span class="hljs-number">770000.0</span>}, Car{name=<span class="hljs-string">'宋PLUS'</span>, price=<span class="hljs-number">205000.0</span>}, Car{name=<span class="hljs-string">'速腾'</span>, price=<span class="hljs-number">165000.0</span>}]<br>===contains===<span class="hljs-keyword">false</span><br>===size===<span class="hljs-number">4</span><br>===isEmpty===<span class="hljs-keyword">false</span><br>===containsAll===<span class="hljs-keyword">true</span><br>===removeAll===<span class="hljs-keyword">true</span><br>=====增强<span class="hljs-keyword">for</span>循环遍历集合=====<br>Car{name=<span class="hljs-string">'亚洲龙'</span>, price=<span class="hljs-number">270000.0</span>}<br>Car{name=<span class="hljs-string">'宋PLUS'</span>, price=<span class="hljs-number">205000.0</span>}<br>Car{name=<span class="hljs-string">'速腾'</span>, price=<span class="hljs-number">165000.0</span>}<br>=====迭代器遍历集合=====<br>Car{name=<span class="hljs-string">'亚洲龙'</span>, price=<span class="hljs-number">270000.0</span>}<br>Car{name=<span class="hljs-string">'宋PLUS'</span>, price=<span class="hljs-number">205000.0</span>}<br>Car{name=<span class="hljs-string">'速腾'</span>, price=<span class="hljs-number">165000.0</span>}<br>===clear===[]<br></code></pre></td></tr></tbody></table></figure><h2 id="练习题三"><a href="#练习题三" class="headerlink" title="练习题三"></a>练习题三</h2><ol><li>使用HashMap类实例化一个Map类型的对象m，key是String类型，value是int类型，分别用于存储员工的姓名和工资。jack-100,summer-1000,roy:2000</li><li>将jack的工资改为2600元。</li><li>为所有员工工资加薪100元。</li><li>遍历集合中的所有员工。</li><li>遍历集合中所有的工资。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework03</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        map.put(<span class="hljs-string">"lucky"</span>, <span class="hljs-number">5000</span>);<br>        map.put(<span class="hljs-string">"lucy"</span>, <span class="hljs-number">6000</span>);<br>        map.put(<span class="hljs-string">"henry"</span>, <span class="hljs-number">3500</span>);<br>        map.put(<span class="hljs-string">"lucky"</span>, <span class="hljs-number">8000</span>);<br><br>        Iterator iterator = map.keySet().iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            String key = (String) iterator.next();<br>            <span class="hljs-keyword">int</span> salary = (<span class="hljs-keyword">int</span>) map.get(key);<br>            salary += <span class="hljs-number">100</span>;<br>            map.put(key, salary);<br>        }<br><br>        Set set = map.entrySet();<br>        <span class="hljs-keyword">for</span> (Object o : set) {<br>            Map.Entry entry = (Map.Entry) o;<br>            System.out.println(entry.getValue());<br>        }<br>        System.out.println(<span class="hljs-string">"==============="</span>);<br>        <span class="hljs-keyword">for</span> (Object o : set) {<br>            Map.Entry entry = (Map.Entry) o;<br>            System.out.println(entry.getKey());<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">8100</span><br><span class="hljs-number">3600</span><br><span class="hljs-number">6100</span><br>===============<br>lucky<br>henry<br>lucy<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/06/28/anNIJktxpODFKw3.png"></p><h2 id="练习题四"><a href="#练习题四" class="headerlink" title="练习题四"></a>练习题四</h2><p>分析HashSet和TreeSet分别如何实现去重的？</p><h2 id="练习题五"><a href="#练习题五" class="headerlink" title="练习题五"></a>练习题五</h2><p>分析下面的代码运行会不会抛出异常，并从源码层面说明原因。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeSet_</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        TreeSet treeSet = <span class="hljs-keyword">new</span> TreeSet();<br>        treeSet.add(<span class="hljs-keyword">new</span> Person());<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">"main"</span> java.lang.ClassCastException: com.example.hanshunping.collection.Person cannot be cast to java.lang.Comparable<br>at java.util.TreeMap.compare(TreeMap.java:<span class="hljs-number">1294</span>)<br>at java.util.TreeMap.put(TreeMap.java:<span class="hljs-number">538</span>)<br>at java.util.TreeSet.add(TreeSet.java:<span class="hljs-number">255</span>)<br>at com.example.hanshunping.collection.TreeSet_.main(TreeSet_.java:<span class="hljs-number">8</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="练习题六"><a href="#练习题六" class="headerlink" title="练习题六"></a>练习题六</h2><p>分析下面这段代码的输出结果是什么？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Homework06</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        HashSet hashSet = <span class="hljs-keyword">new</span> HashSet();<br>        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">1001</span>, <span class="hljs-string">"AA"</span>);<br>        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">1001</span>, <span class="hljs-string">"BB"</span>);<br>        hashSet.add(p1);<br>        hashSet.add(p2);<br>        p1.setName(<span class="hljs-string">"CC"</span>);<br>        hashSet.remove(p1);<br>        System.out.println(hashSet);<br>        hashSet.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">1001</span>, <span class="hljs-string">"CC"</span>));<br>        System.out.println(hashSet);<br>        hashSet.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">1001</span>, <span class="hljs-string">"AA"</span>));<br>        System.out.println(hashSet);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person{"</span> +<br>                <span class="hljs-string">"id="</span> + id +<br>                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        Person person = (Person) o;<br>        <span class="hljs-keyword">return</span> id == person.id &amp;&amp; Objects.equals(name, person.name);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> Objects.hash(id, name);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<br>        <span class="hljs-keyword">this</span>.id = id;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[Person{id=<span class="hljs-number">1001</span>, name=<span class="hljs-string">'CC'</span>}, Person{id=<span class="hljs-number">1001</span>, name=<span class="hljs-string">'BB'</span>}]<br>[Person{id=<span class="hljs-number">1001</span>, name=<span class="hljs-string">'CC'</span>}, Person{id=<span class="hljs-number">1001</span>, name=<span class="hljs-string">'BB'</span>}, Person{id=<span class="hljs-number">1001</span>, name=<span class="hljs-string">'CC'</span>}]<br>[Person{id=<span class="hljs-number">1001</span>, name=<span class="hljs-string">'CC'</span>}, Person{id=<span class="hljs-number">1001</span>, name=<span class="hljs-string">'BB'</span>}, Person{id=<span class="hljs-number">1001</span>, name=<span class="hljs-string">'CC'</span>}, Person{id=<span class="hljs-number">1001</span>, name=<span class="hljs-string">'AA'</span>}]<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java集合框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象总结</title>
    <link href="/posts/ec82f976.html"/>
    <url>/posts/ec82f976.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p>包就相当于文件夹</p><p>学习阿里巴巴开发手册</p><h1 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h1><h2 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println();<br>类名.对象.方法名<br></code></pre></td></tr></tbody></table></figure><h2 id="方法的定义及调用"><a href="#方法的定义及调用" class="headerlink" title="方法的定义及调用"></a>方法的定义及调用</h2><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>方法名相同，参数不同。</p><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>任何方法最多只能有一个可变参数，并且必须是参数列表最后一个。</p><h2 id="递归（工作中不常用）"><a href="#递归（工作中不常用）" class="headerlink" title="递归（工作中不常用）"></a>递归（工作中不常用）</h2><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    System.out.println(f(<span class="hljs-number">5</span>));<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>{<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">return</span> i * f(i - <span class="hljs-number">1</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211161622644.png"></p><h1 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h1><h2 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h2><p>相同数据类型的有序集合</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arrays = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br></code></pre></td></tr></tbody></table></figure><h2 id="数组声明创建"><a href="#数组声明创建" class="headerlink" title="数组声明创建"></a>数组声明创建</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>num.length<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211161655935.png"></p><h3 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h3><h4 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arrays = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br></code></pre></td></tr></tbody></table></figure><h4 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arrays = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>arrays[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>arrays[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br></code></pre></td></tr></tbody></table></figure><h4 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h4><p>数组是引用类型，它的元素相当于类的实例变量。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arrays = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>System.out.println(arrays[<span class="hljs-number">0</span>]);<span class="hljs-comment">//输出0</span><br>System.out.println(arrays[<span class="hljs-number">1</span>]);<span class="hljs-comment">//输出0</span><br></code></pre></td></tr></tbody></table></figure><h3 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h3><ul><li>长度是确定的。一旦创建，就不可以改变大小。</li><li>元素必须是相同类型。</li><li>元素可以是任何数据类型，包括基本类型和引用类型。</li><li>数组变量属于引用类型，数组也可以看做是对象，数组中的每个元素相当于该对象的成员变量。</li><li>数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组本身都是在堆中的。</li></ul><h2 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h2><ul><li><p>for循环</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arrays = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>};<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrays.length; i++) {<br>    System.out.println(arrays[i] + <span class="hljs-string">" "</span>);<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>增强for循环</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arrays = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>};<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num: arrays) {<br>    System.out.println(num + <span class="hljs-string">" "</span>);<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>作为方法参数</p></li><li><p>作为方法返回值</p></li></ul><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] arrays = {{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}, {<span class="hljs-number">3</span>,<span class="hljs-number">4</span>}, {<span class="hljs-number">5</span>,<span class="hljs-number">6</span>}}<br></code></pre></td></tr></tbody></table></figure><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>Arrays类中的方法都是static修饰的。</p><h3 id="Arrays类的结构图"><a href="#Arrays类的结构图" class="headerlink" title="Arrays类的结构图"></a>Arrays类的结构图</h3><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181649351.png"></p><p>扩展知识：IDEA中的Structure模块使用详解</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181652846.png"></p><ol><li><p>类方法的展示</p><ul><li>开头的 m 标识是表示方法，如果出现 f 标识则表示为属性；</li><li>m 或者 f 后面紧跟着的是方法或者属性的访问修饰符：<ul><li>#红色关闭的锁表示为private；</li><li>#圆圈表示不带任何修饰符，default；</li><li>#一把钥匙代表protected；</li><li> #绿色打开的锁代表public；</li></ul></li><li>接下来是方法名称；</li><li>括号内为方法的入参类型；</li><li>冒号后面为方法的返回值类型；</li></ul></li><li><p>顶部各个图标说明</p></li></ol><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181703473.png"></p><p>表示展示的顺序按照访问权限从public到private的格式展示；（structure排序都是先展示方法，再展示属性，这个不可设置和更改）</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181702629.png"></p><p>表示展示的顺序按照开头字母a-z的顺序来展示；</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181702982.png"></p><p>会展示实现的接口类和继承的抽象类，把所有的实现方法展示在其中；</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181704984.png"></p><p>会展示类中所有属性的get、set方法；</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181704588.png"></p><p>会展示所有的属性字段；（注意：单独使用只会展示修饰符为public的属性字段，想要展示其他访问修饰符的字段需要结合下面说到的红色锁来实现）；</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181704991.png"></p><p>structure默认只会展示被public修饰的属性，需要查看非公有属性需要使用该按钮；</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181704903.png"></p><p>展示所继承的方法，包括所继承的object方法；</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181704255.png"></p><p>会展示出匿名内部类；</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181704975.png"></p><p>会展示出使用的lambda表达式；</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181705806.png"></p><p>点击左侧属性和方法时，右侧代码跟着滚动定位；</p><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181705793.png"></p><p>点击右侧代码中的属性和方法时，左侧的structure中对应的属性和方法跟着滚动定位；</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>给数组赋值：通过fill方法</li><li>对数组排序：通过sort方法，按升序排序</li><li>比较数组：通过equals方法比较数组中的元素是否相等</li><li>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找操作</li></ul><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>外层循环：控制循环的次数</p><p>内层循环：比较两个数字的大小</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arrays = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]{<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">65</span>, <span class="hljs-number">99</span>, <span class="hljs-number">130</span>, <span class="hljs-number">120</span>};<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrays.length; i++) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) {<br>            <span class="hljs-keyword">if</span>(arrays[i] &gt; arrays[j]){<br>                <span class="hljs-keyword">int</span> num = arrays[i];<br>                arrays[i] = arrays[j];<br>                arrays[j] = num;<br>            }<br>        }<br>    }<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> array: arrays) {<br>        System.out.print(array + <span class="hljs-string">" "</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">130</span> <span class="hljs-number">120</span> <span class="hljs-number">99</span> <span class="hljs-number">65</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">8</span> <span class="hljs-number">3</span> <br></code></pre></td></tr></tbody></table></figure><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>这一节我跳过了，没有学</p><h1 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h1><p>面向对象的本质就是：<strong>以类的方式组织代码，以对象的组织（封装）数据。</strong></p><p>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象。</p><p>从代码运行角度考虑是先有类后有对象。类是对象的模板。</p><h1 id="回顾方法及加深理解"><a href="#回顾方法及加深理解" class="headerlink" title="回顾方法及加深理解"></a>回顾方法及加深理解</h1><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><h3 id="break和return的区别"><a href="#break和return的区别" class="headerlink" title="break和return的区别"></a>break和return的区别</h3><ul><li><p>break</p><p>跳出当前循环；但是如果是嵌套循环，则只能跳出当前的这一层循环，只有逐层break才能跳出所有循环。</p></li></ul>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">breakTest</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span>) {<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">// 在执行i==6时强制终止循环，i==6不会被执行</span><br>        }<br>        System.out.println(i);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>输出结果为0 1 2 3 4 5 ；6以后的都不会输出</p></blockquote>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <br></code></pre></td></tr></tbody></table></figure><ul><li>continue</li></ul><p>​        终止当前循环，但是不会跳出循环，终止当前循环后，会根据条件，继续往下根据循环条件执行循环。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">continueTest</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span>) {<br>            <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// i==6不会被执行，而是被中断了</span><br>        }<br>        System.out.println(i);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>输出结果为0 1 2 3 4 5 7 8 9；只有6没有输出</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <br></code></pre></td></tr></tbody></table></figure><ul><li><p>return</p><p>从当前的方法中退出，返回到该调用方法的语句处，继续执行。</p><p>返回一个值给调用该方法的语句，返回值的数据类型必须与方法的声明中的返回值类型一致。</p></li></ul><p><a href="https://www.cnblogs.com/514929hgy/p/6915128.html">Java中break continue和return的区别</a></p><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><h3 id="静态方法与非静态方法的区别"><a href="#静态方法与非静态方法的区别" class="headerlink" title="静态方法与非静态方法的区别"></a>静态方法与非静态方法的区别</h3><ul><li>==<strong>调用方法不同</strong>==</li></ul><p><strong>静态方法</strong>可以直接调用，类名调用和对象调用。</p><p><strong>非静态方法</strong>只能通过对象调用。</p><ul><li>==<strong>生命周期不同</strong>==</li></ul><p><strong>静态方法</strong>的生命周期和对应的类一样长，静态方法和静态变量会跟随着类的定义而被分配合装载入内存中。一直到线程结束，静态属性和方法才会被销毁。（也就是静态方法属于类）</p><p><strong>非静态方法</strong>的生命周期和类的实例化对象一样长，只有当类实例化了一个对象，非静态方法才会被创建，而当这个对象被销毁的时候，非静态方法也马上被销毁。（也就是非静态方法属于对象）</p><p>这个内容是参考这个文章写的</p><p><a href="https://www.cnblogs.com/ygao/p/13951778.html">静态方法和非静态方法的区别</a></p><h3 id="java中的this关键字"><a href="#java中的this关键字" class="headerlink" title="java中的this关键字"></a>java中的this关键字</h3><ol><li><h5 id="当局部变量与成员变量重名的时候，可以使用this表明用的是对象的成员变量。"><a href="#当局部变量与成员变量重名的时候，可以使用this表明用的是对象的成员变量。" class="headerlink" title="当局部变量与成员变量重名的时候，可以使用this表明用的是对象的成员变量。"></a>当局部变量与成员变量重名的时候，可以使用this表明用的是对象的成员变量。</h5></li><li><p>当方法需要一个该类的对象做参数的时候，可以用this代替。</p></li><li><p>当一个方法需要返回对当前对象的引用的时候，可以用return this。</p></li></ol><p>现在针对上面的每一种情况，写一个例子，方便理解。</p><p> 第一点：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">learnKeywordThis</span> </span>{<br><br>    <span class="hljs-keyword">public</span> String s = <span class="hljs-string">"A"</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">learnKeywordThis</span><span class="hljs-params">()</span> </span>{<br><br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">learnKeywordThis</span><span class="hljs-params">(String s)</span> </span>{<br>        System.out.println(<span class="hljs-string">"s的值 = "</span> + s);<br>        s = <span class="hljs-string">"B"</span>;<br>        System.out.println(<span class="hljs-string">"经过s=\"B\"赋值后成员变量s的值"</span>);<br>        System.out.println(<span class="hljs-string">"成员变量s的值 = "</span> + <span class="hljs-keyword">this</span>.s);<br>        <span class="hljs-keyword">this</span>.s = <span class="hljs-string">"B"</span>;<br>        System.out.println(<span class="hljs-string">"经过this.s=\"B\"赋值后成员变量s的值"</span>);<br>        System.out.println(<span class="hljs-string">"成员变量s的值 = "</span> + <span class="hljs-keyword">this</span>.s);<br>    }<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"无参构造器中成员变量s的值 = "</span> + s);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        System.out.println(<span class="hljs-string">"调用无参构造器"</span>);<br>        <span class="hljs-keyword">new</span> learnKeywordThis().show();<br>        System.out.println(<span class="hljs-string">"调用含参构造器后"</span>);<br>        <span class="hljs-keyword">new</span> learnKeywordThis(<span class="hljs-string">"C"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>Output</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">调用无参构造器<br>无参构造器中成员变量s的值 = A<br>调用含参构造器后<br>s的值 = C<br>经过s=<span class="hljs-string">"B"</span>赋值后成员变量s的值<br>成员变量s的值 = A<br>经过<span class="hljs-keyword">this</span>.s=<span class="hljs-string">"B"</span>赋值后成员变量s的值<br>成员变量s的值 = B<br></code></pre></td></tr></tbody></table></figure><p>第二点：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>{<br>    B(A a) {<br>        a.show();<br>    }<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doB</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">new</span> B(<span class="hljs-keyword">this</span>);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"我是A"</span>);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">new</span> A().doB();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>Output</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">我是A<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">B</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"这里的this是"</span> + <span class="hljs-keyword">this</span>.getClass().getSimpleName());<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Bshow</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"这里的this是"</span> + <span class="hljs-keyword">this</span>.getClass().getSimpleName());<br>    }<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-keyword">new</span> A();<br>        <span class="hljs-keyword">new</span> B().Bshow();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">这里的<span class="hljs-keyword">this</span>是A<br>这里的<span class="hljs-keyword">this</span>是B<br>这里的<span class="hljs-keyword">this</span>是B<br></code></pre></td></tr></tbody></table></figure><p><strong><em>我们这里讨论了this的五种用法，但是都是根据this的定义引申出在不同情况下的用法。this只能在方法内部使用，当调用方法中含有this的时候，this就指的调用该方法的对象的引用，当方法参数中需要传入一个类的对象的时候，用this代指这个传入类的对象。当用构造方法初始化成员变量的时候，JVM会默认传入当前对象来初始化成员变量。</em></strong></p><p><a href="https://www.cnblogs.com/qifengshi/p/5425238.html">Java this的一两点使用</a></p><p><a href="https://www.w3schools.com/java/ref_keyword_this.asp">Java this keyword</a></p><p><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html">Oracle Using the this keyword</a></p><h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><h1 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h1><h2 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h2><h2 id="使用new关键字创建对象"><a href="#使用new关键字创建对象" class="headerlink" title="使用new关键字创建对象"></a>使用new关键字创建对象</h2><p>使用new关键字创建对象的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</p><p>使用new关键字，本质是在调用构造器</p><p><strong>构造器必须要掌握哦</strong></p><p>构造器：</p><ol><li>和类名相同</li><li>没有返回值</li></ol><p>作用：</p><ol><li>new 本质是在调用构造方法</li><li>初始化对象的值</li></ol><p>注意点：</p><ol><li><p>定义有参构造之后，如果想使用无参构造，就必须显示的定义一个无参的构造。</p></li><li><p>Alt+Insert快捷键</p></li></ol><h1 id="Java简单的内存图"><a href="#Java简单的内存图" class="headerlink" title="Java简单的内存图"></a>Java简单的内存图</h1><p><img src="https://gitee.com/xiaofanshutugoon/cloudimage/raw/master/img/image-20220406143515944.png"></p><h1 id="前期学习的一个小总结"><a href="#前期学习的一个小总结" class="headerlink" title="前期学习的一个小总结"></a>前期学习的一个小总结</h1><ol><li><p>类与对象</p><p>类是一个模板，抽象的，对象是一个具体的实例。</p></li><li><p>方法</p><p>定义，调用。</p></li><li><p>对象的引用</p><p>引用类型 基本类型</p><p>对象是通过引用来操作的： 栈 —-&gt; 堆</p></li><li><p>属性：字段Field 成员变量</p><p>默认初始化：</p><p>​    数字：0   0.0</p><p>​    char：u0000</p><p>​    boolean：false</p><p>​    引用：null</p><p>修饰符  属性类型 属性名 = 属性值！</p></li><li><p>对象的创建和使用</p><ul><li><p>必须使用new关键字创建对象，构造器 Person person = new Person();</p></li><li><p>对象的属性 person.name</p></li><li><p>对象的方法 person.sleep();</p></li></ul></li><li><p>类</p><p>静态的属性  属性</p><p>动态的行为 方法</p></li></ol><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="该露的露，该藏的藏"><a href="#该露的露，该藏的藏" class="headerlink" title="该露的露，该藏的藏"></a>该露的露，该藏的藏</h2><p>写程序要追求高内聚，低耦合。</p><p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉。</p><p>低耦合：仅仅暴露少量的方法给外部使用。</p><h2 id="属性私有，get-set"><a href="#属性私有，get-set" class="headerlink" title="属性私有，get/set"></a>属性私有，get/set</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Student s1 = <span class="hljs-keyword">new</span> Student();<br><br>        s1.setName(<span class="hljs-string">"jack"</span>);<br>        s1.setAge(<span class="hljs-number">30</span>);<br><br>        System.out.println(<span class="hljs-string">"name:"</span> + s1.getName() + <span class="hljs-string">",age: "</span> + s1.getAge());<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>{<br>    <span class="hljs-comment">//属性私有</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-comment">// 提供一些可以操作这些属性的公有方法. get/set</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">name:jack,age: <span class="hljs-number">30</span><br></code></pre></td></tr></tbody></table></figure><h2 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h2><ol><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统可维护性增加了</li></ol><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​    继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</p><p>​    <strong>extends</strong></p><p>​    Java中的类只有单继承，没有多继承</p><p>​    继承就是扩展，子类对父类的扩展</p><p>​    子类和父类之间的关系，具有“is a”的关系。</p><p>​    子类继承父类，子类就会拥有父类的全部方法（私有的东西不会被继承）</p><p>​    <strong>记住一个快捷键：Ctrl+H</strong></p><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>在Java中，所有的类默认直接或间接继承Object类</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><h3 id="代码理解"><a href="#代码理解" class="headerlink" title="代码理解"></a>代码理解</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Student s1 = <span class="hljs-keyword">new</span> Student();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"Person的无参构造执行了"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"Student的无参构造执行了"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Person的无参构造执行了<br>Student的无参构造执行了<br></code></pre></td></tr></tbody></table></figure><h3 id="super注意点"><a href="#super注意点" class="headerlink" title="super注意点"></a>super注意点</h3><ul><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或者构造方法中</li><li>super和this不能同时调用构造方法</li></ul><p>​    VS this</p><p>​    代表的对象不同：</p><p>​        this：本身调用者这个对象</p><p>​        super：代表父类对象的应用</p><p>​    前提：</p><p>​        this：没有继承也可以使用</p><p>​        super：只能在继承条件下才可以使用</p><p>​    构造方法：</p><p>​        this()：本类的构造</p><p>​        super()：父类的构造</p><h2 id="方法重写（重点）"><a href="#方法重写（重点）" class="headerlink" title="方法重写（重点）"></a>方法重写（重点）</h2><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>需要有继承关系，子类重写父类的方法！</p><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大，但是不能缩小。 Public&gt;Protected&gt;Default&gt;Private</li><li>抛出的异常：范围可以被缩小，但是不能扩大。 ClassNotFoundException –&gt; Exception(大)</li></ol><p>重写，子类的方法和父类必须要一致，方法体不同</p><p>为什么需要重写：</p><ul><li>父类的功能，子类不一定需要，或者不一定满足。</li><li>Alt+Insert; Override</li></ul><h3 id="代码理解-1"><a href="#代码理解-1" class="headerlink" title="代码理解"></a>代码理解</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 方法的调用只和左边，定义的数据类型有关系</span><br>        Student s1 = <span class="hljs-keyword">new</span> Student();<br>        s1.say();<br><br>        <span class="hljs-comment">// 父类的引用指向了子类</span><br>        Person p = <span class="hljs-keyword">new</span> Student();<br>        p.say();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Student的say方法<br>Student的say方法<br></code></pre></td></tr></tbody></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态概念"><a href="#多态概念" class="headerlink" title="多态概念"></a>多态概念</h2><ul><li>即同一个方法可以根据发送对象的不同而采用多种不同的行为方式</li><li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</li></ul><h2 id="多态存在的条件"><a href="#多态存在的条件" class="headerlink" title="多态存在的条件"></a>多态存在的条件</h2><ul><li>有继承关系</li><li>子类重写父类的方法</li><li>父类引用指向子类对象</li></ul><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>{<br><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>{<br><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Object object = <span class="hljs-keyword">new</span> Student();<br>        System.out.println(<span class="hljs-string">"===Object object = new Student();==="</span>);<br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Student);<span class="hljs-comment">// true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">// true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">// true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Teacher);<span class="hljs-comment">// false</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> String);<span class="hljs-comment">// false</span><br><br>        Person person = <span class="hljs-keyword">new</span> Student();<br>        System.out.println(<span class="hljs-string">"===Person person = new Student();==="</span>);<br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Student);<span class="hljs-comment">// true</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">// true</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">// true</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Teacher);<span class="hljs-comment">// false</span><br>        <span class="hljs-comment">//System.out.println(person instanceof String);// 编译错误</span><br><br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        System.out.println(<span class="hljs-string">"===Student student = new Student();==="</span>);<br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Student);<span class="hljs-comment">// true</span><br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">// true</span><br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">// true</span><br>        <span class="hljs-comment">//System.out.println(student instanceof Teacher);// 编译错误</span><br>        <span class="hljs-comment">//System.out.println(student instanceof String);// 编译错误</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="多态注意事项"><a href="#多态注意事项" class="headerlink" title="多态注意事项"></a>多态注意事项</h2><ol><li>多态是方法的多态，属性没有多态</li><li>父类和子类，是要有联系的。 类型转换异常！ ClassCastException!</li><li>存在条件：继承关系，方法需要重写，父类引用指向子类对象！ Father f1 = new Son();</li><li> 父类引用指向子类对象</li><li>把子类转换为父类，向上转型</li><li>把父类转换为子类，向下转型；强制转换</li><li>方便方法的调用，减少重复代码</li></ol><h2 id="代码理解-2"><a href="#代码理解-2" class="headerlink" title="代码理解"></a>代码理解</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 一个对象的实际类型是确定的，但是可以指向的引用类型就不确定。</span><br>        <span class="hljs-comment">// 父类的引用指向子类</span><br>        <span class="hljs-comment">// 对象能执行哪些方法，主要看对象左边的类型，和右边的关系不大。</span><br>        Student s1 = <span class="hljs-keyword">new</span> Student();<br>        Person p1 = <span class="hljs-keyword">new</span> Student();<br>        Object obj = <span class="hljs-keyword">new</span> Student();<br>        s1.run();<br>        p1.run(); <span class="hljs-comment">// 子类重写了父类的方法，所以这里执行的是子类的方法</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>{<br>        System.out.println(<span class="hljs-string">"Person run"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"Student run"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>代码执行结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Student run<br>Student run<br></code></pre></td></tr></tbody></table></figure><h1 id="static关键字详解"><a href="#static关键字详解" class="headerlink" title="static关键字详解"></a>static关键字详解</h1><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"call get info method"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Student.getInfo();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> rank;<br>    <span class="hljs-keyword">public</span> String country;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        String name = Student.name;<br>        <span class="hljs-keyword">int</span> rank = Student.rank;<br>        <span class="hljs-keyword">int</span> age = student.age;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Person person = <span class="hljs-keyword">new</span> Person();<br><br>        System.out.println(<span class="hljs-string">"============="</span>);<br>        Person person2 = <span class="hljs-keyword">new</span> Person();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">静态代码块<br>匿名代码块<br>构造方法<br>=============<br>匿名代码块<br>构造方法<br></code></pre></td></tr></tbody></table></figure><h2 id="静态导入包"><a href="#静态导入包" class="headerlink" title="静态导入包"></a>静态导入包</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 静态导入包</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.random;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.PI;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        System.out.println(random());<br>        System.out.println(PI);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0.3015101621894791</span><br><span class="hljs-number">3.141592653589793</span><br></code></pre></td></tr></tbody></table></figure><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// abstract 抽象类， extends 单继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Action</span> </span>{<br>    <span class="hljs-comment">// 约束~有人帮我们实现</span><br>    <span class="hljs-comment">// abstract 抽象方法，只有方法名字，没有方法的实现。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//1. 不能new这个抽象类，只能靠子类去实现它；约束！</span><br>    <span class="hljs-comment">//2. 抽象类中可以写普通的方法</span><br>    <span class="hljs-comment">//3. 抽象方法必须在抽象类中</span><br>    <span class="hljs-comment">// 抽象的抽象：约束</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>存在抽象类的构造器吗？</p><p>通过查看代码，发现编译后的class文件如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Action</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Action</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="普通类、抽象类和接口的对比"><a href="#普通类、抽象类和接口的对比" class="headerlink" title="普通类、抽象类和接口的对比"></a>普通类、抽象类和接口的对比</h2><ul><li>普通类：只有具体实现</li><li>抽象类：集体实现和规范（抽象方法）都有</li><li>接口：只有规范，自己无法写方法</li></ul><h2 id="声明类的关键字是class，声明接口的关键字是interface"><a href="#声明类的关键字是class，声明接口的关键字是interface" class="headerlink" title="声明类的关键字是class，声明接口的关键字是interface"></a>声明类的关键字是class，声明接口的关键字是interface</h2><h2 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h2><ul><li>接口就是规范，定义的是一组规则。</li><li>接口的本质在是契约，制定好之后大家都去遵守。</li><li>OO的精髓，是对对象的抽象，最能体现这一点的就是接口。</li></ul><h2 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h2><ol><li>约束</li><li>定义一些方法，让不同的人去实现。</li><li>方法都是public abstract</li><li>属性都是public static final</li><li>接口不能被实例化，接口中没有构造方法</li><li>implements可以实现多个接口</li><li>必须要重写接口中的方法</li></ol><h2 id="代码理解-3"><a href="#代码理解-3" class="headerlink" title="代码理解"></a>代码理解</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.kuangshenjava.oop.demo09;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span>, <span class="hljs-title">TimeService</span> </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String name)</span> </span>{<br><br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(String name)</span> </span>{<br><br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(String name)</span> </span>{<br><br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search</span><span class="hljs-params">(String name)</span> </span>{<br><br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getTime</span><span class="hljs-params">()</span> </span>{<br>        <br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.kuangshenjava.oop.demo09;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{<br>    <span class="hljs-comment">// 接口中所有的定义方法其实都是抽象的public abstract</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String name)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(String name)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(String name)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">search</span><span class="hljs-params">(String name)</span></span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.kuangshenjava.oop.demo09;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TimeService</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getTime</span><span class="hljs-params">()</span></span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"这是外部类的方法"</span>);<br>    }<br><br>    <span class="hljs-comment">//普通内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>{<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">()</span> </span>{<br>            System.out.println(<span class="hljs-string">"这是内部类的方法"</span>);<br>        }<br>    }<br><br>    <span class="hljs-comment">//获得外部类的私有属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getID</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(id);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"这是外部类的方法"</span>);<br>    }<br><br>    <span class="hljs-comment">//静态内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>{<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">()</span> </span>{<br>            System.out.println(<span class="hljs-string">"这是静态内部类的方法"</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>{<br>    <span class="hljs-comment">//局部内部类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>{<br>            <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">()</span> </span>{<br>                System.out.println(<span class="hljs-string">"这是局部内部类的方法"</span>);<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//没有名字初始化类，不用将实例保存到变量中。</span><br>        <span class="hljs-keyword">new</span> Recorder().getInfo();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Recorder</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>{<br>        System.out.println(<span class="hljs-string">"Call getInfo method"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h2><p><img src="https://raw.githubusercontent.com/xiaofanshutu/typora2022/main/202211181808007.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="记住以下几个关键字"><a href="#记住以下几个关键字" class="headerlink" title="记住以下几个关键字"></a>记住以下几个关键字</h2><p>try catch finally throw throws</p><p>注意：</p><ul><li>throw是在代码块内的，即用于捕获方法内的异常并抛出时用</li><li>throws是针对方法的，即将方法的异常信息抛出去</li><li>可以理解为throw是主动（在方法内容里我们是主动捕获并throw的），而throws是被动（在方法上是没有捕获异常进行处理，直接throws的）</li><li>使用位置不同：throw位于方法体内部，可以作为单独语句使用，throws必须跟在方法参数列表后面，不能单独使用。</li><li>内容不同：throw抛出一个异常对象，而且只能是一个，throws后面跟异常类，可以有多个。</li></ul><p>小技巧：IDEA快捷键</p><p>psvm</p><p>ctrl + alt + t</p>]]></content>
    
    
    <categories>
      
      <category>Java面向对象和基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
