<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yubiii</title>
  
  
  <link href="https://xiaofanshutu.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaofanshutu.github.io/"/>
  <updated>2025-07-08T00:10:40.463Z</updated>
  <id>https://xiaofanshutu.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Oracle</title>
    <link href="https://xiaofanshutu.github.io/posts/f145fed6.html"/>
    <id>https://xiaofanshutu.github.io/posts/f145fed6.html</id>
    <published>2025-07-07T09:36:01.015Z</published>
    <updated>2025-07-08T00:10:40.463Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Oracle简介"><a href="#Oracle简介" class="headerlink" title="Oracle简介"></a>Oracle简介</h1><h2 id="Oracle特点"><a href="#Oracle特点" class="headerlink" title="Oracle特点"></a>Oracle特点</h2><p>Oracle数据库具有以下特点：</p><ol><li>支持多用户，大事务量的事务处理</li><li>数据安全性和完整性控制</li><li>支持分布式数据处理</li><li>可移植性</li></ol><h2 id="Oracle体系结构"><a href="#Oracle体系结构" class="headerlink" title="Oracle体系结构"></a>Oracle体系结构</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Oracle数据库是数据的物理存储。Oracle的数据库是指一个操作系统只有一个库，可以看做Oracle只有一个大数据库。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>一个Oracle实例（Oracle Instance）有一系列的后台进程（Background Processes）和内存结构（Memory Structures）组成。一个数据库可以有多个(n个)实例。</p><h3 id="数据文件-dbf"><a href="#数据文件-dbf" class="headerlink" title="数据文件(dbf)"></a>数据文件(dbf)</h3><ul><li>数据文件是数据库的物理存储单位。数据库的数据是存储在表空间中的。</li><li>一个表空间可以由一个或多个数据文件组成，一个数据文件只能属于一个表空间。</li><li>一旦数据文件被加入到某个表空间，就不能删除这个文件，如果要删除该数据文件，必须删除其所属的表空间才可以。</li></ul><h3 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h3><ul><li>表空间是Oracle对物理数据库上相关数据文件（ORA或者DBF文件）的逻辑映射。</li><li>一个数据库在逻辑上被划分成一到若干个表空间，每个表空间包含了在逻辑上相关联的一组结构。</li><li>每个数据库至少有一个表空间称之为 system 表空间 。</li><li>每个表空间由同一磁盘上的一个或多个文件组成，这些文件叫数据文件(datafile) 。一个数据文件只能属于一个表空间。</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707175858947.png" alt="image-20250707175858947"></p><p>注：</p><p>(1)表的数据，是有用户放入某一个表空间的，而这个表空间会随机把这些表数据放到一个或者多个数据文件中。</p><p>(2)逻辑结构最小单位是数据块，不是磁盘块。</p><p>由于 oracle 的数据库不是普通的概念， oracle 是由用户和表空间对数据进行管理和存放的。但是表不是由表空间去查询的，而是由用户去查的。因为不同用户可以在同一个表空间建立同一个名字的表！这里区分就是用户了！</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707175956189.png" alt="image-20250707175956189"></p><p>图片理解：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707180136371.png" alt="image-20250707180136371">这个符号是指一个数据文件由多个磁盘块组成</p><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>表空间—&gt;用户—&gt;表</p><p>用户是在表空间下建立的。用户登陆后只能看到和操作自己的表 , Oracle的用户与MySQL的数据库类似，每建立一个应用需要创建一个用户。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707180041756.png" alt="image-20250707180041756"></p><p><strong>超级管理员账户</strong></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707192340153.png" alt="image-20250707192340153"></p><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">tablespace</span> waterboss<br><span class="hljs-keyword">datafile</span> <span class="hljs-string">'D:\2_dan\learningVideo\oracle\waterboss.dbf'</span><br><span class="hljs-keyword">size</span> <span class="hljs-number">100</span>m<br><span class="hljs-keyword">autoextend</span> <span class="hljs-keyword">ON</span><br><span class="hljs-keyword">next</span> <span class="hljs-number">10</span>m;<br></code></pre></td></tr></tbody></table></figure><p>名字可以一样，也可以不一样</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707181133991.png" alt="image-20250707181133991"></p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> wateruser<br><span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">123456</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">tablespace</span> waterboss;<br></code></pre></td></tr></tbody></table></figure><p>wateruser：用户名</p><p>123456：密码</p><p>waterboss：默认表空间名称</p><h2 id="用户赋权"><a href="#用户赋权" class="headerlink" title="用户赋权"></a>用户赋权</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> dba <span class="hljs-keyword">to</span> wateruser;<span class="hljs-comment">--给用户赋dba权限</span><br></code></pre></td></tr></tbody></table></figure><h1 id="表的创建、修改与删除"><a href="#表的创建、修改与删除" class="headerlink" title="表的创建、修改与删除"></a>表的创建、修改与删除</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p><strong>语法：</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名称(<br>字段名 类型 长度 primary <span class="hljs-keyword">key</span><br>字段名 类型 长度<br>......<br>);<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_owners<br>(<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">number</span> primary <span class="hljs-keyword">key</span>,<br><span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar2</span>(<span class="hljs-number">30</span>),<br>addressid <span class="hljs-built_in">number</span>,<br>housenumber <span class="hljs-built_in">varchar2</span>(<span class="hljs-number">30</span>),<br>watermeter <span class="hljs-built_in">varchar2</span>(<span class="hljs-number">30</span>),<br>adddate <span class="hljs-built_in">date</span>,<br>ownertypeid <span class="hljs-built_in">number</span><br>);<br></code></pre></td></tr></tbody></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>字符型</strong></p><ol><li>CHAR : 固定长度的字符类型，最多存储 2000 个字节</li><li>VARCHAR2 : 可变长度的字符类型，最多存储 4000 个字节</li><li>LONG : 大文本类型。 最大可以存储 2G</li></ol><p><strong>数值型</strong></p><p>NUMBER : 数值类型</p><p>例如：<br>NUMBER (5)   最大可以存的数为 99999<br>NUMBER(5,2) 最大可以存的数为 999.99</p><p><strong>日期型</strong></p><ol><li>DATE ：日期时间型，精确到秒</li><li>TIMESTAMP ：精确到秒的小数点后 9 位</li></ol><p><strong>二进制型</strong></p><ol><li>CLOB : 存储字符 最大可以存 4G</li><li>BLOB ：存储图像、声音、 视频等二进制数据 最多可以存 4G</li></ol><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><p><strong>增加字段语法</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 <span class="hljs-keyword">ADD</span><br>(<br>    列名<span class="hljs-number">1</span> 类型 [<span class="hljs-keyword">DEFAULT</span> 默认值]，<br>    列名<span class="hljs-number">2</span> 类型 [<span class="hljs-keyword">DEFAULT</span> 默认值]<br>);<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> T_OWNERS <span class="hljs-keyword">ADD</span><br>(<br>REMARK <span class="hljs-built_in">VARCHAR2</span> <span class="hljs-number">20</span><br>OUTDATE <span class="hljs-built_in">DATE</span><br>)<br></code></pre></td></tr></tbody></table></figure><p><strong>修改字段语法</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 <span class="hljs-keyword">MODIFY</span><br>(<br>列名<span class="hljs-number">1</span> 类型 [<span class="hljs-keyword">DEFAULT</span> 默认值]，<br>列名<span class="hljs-number">2</span> 类型 [<span class="hljs-keyword">DEFAULT</span> 默认值]<br>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">ALTE R TABLE T_OWNERS MODIFY<br>(<br>REMARK CHAR 20<br>OUTDATE TIMESTAMP<br>)<br></code></pre></td></tr></tbody></table></figure><p><strong>修改字段名语法</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 RNAME <span class="hljs-keyword">COLUMN</span> 原列名 <span class="hljs-keyword">TO</span> 新列名<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> T_OWNERS <span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">COLUMN</span> OUTDATE <span class="hljs-keyword">TO</span> EXITDATE<br></code></pre></td></tr></tbody></table></figure><p><strong>删除字段名</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除一个字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> 列名<br><br><span class="hljs-comment">--删除多个字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 <span class="hljs-keyword">DROP</span>( 列名<span class="hljs-number">1</span>, 列名<span class="hljs-number">2.</span>..)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--删除字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> T_OWNERS <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> REMARK<br></code></pre></td></tr></tbody></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 表名称<br></code></pre></td></tr></tbody></table></figure><h1 id="数据增删改"><a href="#数据增删改" class="headerlink" title="数据增删改"></a>数据增删改</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>语法：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名( 列名<span class="hljs-number">1</span>，列名<span class="hljs-number">2</span>，...) <span class="hljs-keyword">VALUES</span> ( 值<span class="hljs-number">1</span>，值<span class="hljs-number">2.</span>..)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> T_OWNERS_COPY <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">11</span>, <span class="hljs-string">'张三丰'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'123'</span>, <span class="hljs-string">'321'</span>, <span class="hljs-keyword">sysdate</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708070503640.png" alt="image-20250708070503640"></p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p><strong>方式1</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 列名<span class="hljs-number">1</span>=值<span class="hljs-number">1</span>, 列名<span class="hljs-number">2</span>=值<span class="hljs-number">2</span>,... <span class="hljs-keyword">where</span> 修改条件;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> T_OWNERS_COPY <span class="hljs-keyword">set</span> <span class="hljs-keyword">NAME</span> = <span class="hljs-string">'小红'</span>, ADDRESSID = <span class="hljs-string">'888'</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure><p><strong>方式2</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> 表名<br></code></pre></td></tr></tbody></table></figure><p>两种方式的区别：</p><ol><li>truncate删除的数据不可以rollback，delete删除的数据可以rollback</li></ol><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>语法：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> fromm 表名 <span class="hljs-keyword">where</span> 删除条件;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> T_OWNERS_COPY <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">11</span>;<br></code></pre></td></tr></tbody></table></figure><h1 id="JDBC连接Oracle"><a href="#JDBC连接Oracle" class="headerlink" title="JDBC连接Oracle"></a>JDBC连接Oracle</h1><h2 id="导入驱动包ojdbc8-jar"><a href="#导入驱动包ojdbc8-jar" class="headerlink" title="导入驱动包ojdbc8.jar"></a>导入驱动包ojdbc8.jar</h2><p>oracle 19c安装之后的ojdbc.jar包在下面这个地方可以找到，D:\6_application\oracle\jdbc\lib</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707185831853.png" alt="image-20250707185831853"></p><p>将上面的jar添加到工程的library，否则会报下面这个错误。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.ClassNotFoundException: oracle.jdbc.driver.OracleDriver<br>at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="hljs-number">382</span>)<br>at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="hljs-number">424</span>)<br>at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="hljs-number">349</span>)<br>at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="hljs-number">357</span>)<br>at java.lang.Class.forName0(Native Method)<br>at java.lang.Class.forName(Class.java:<span class="hljs-number">264</span>)<br>at dao.BaseDao.&lt;clinit&gt;(BaseDao.java:<span class="hljs-number">11</span>)<br>at dao.OwnerDao.add(OwnerDao.java:<span class="hljs-number">15</span>)<br>at test.Test01.main(Test01.java:<span class="hljs-number">17</span>)<br>Exception in thread <span class="hljs-string">"main"</span> java.lang.RuntimeException: java.sql.SQLException: No suitable driver found <span class="hljs-keyword">for</span> jdbc:oracle:thin:<span class="hljs-meta">@localhost</span>:<span class="hljs-number">1521</span>:orcl<br>at dao.OwnerDao.add(OwnerDao.java:<span class="hljs-number">26</span>)<br>at test.Test01.main(Test01.java:<span class="hljs-number">17</span>)<br>Caused by: java.sql.SQLException: No suitable driver found <span class="hljs-keyword">for</span> jdbc:oracle:thin:<span class="hljs-meta">@localhost</span>:<span class="hljs-number">1521</span>:orcl<br>at java.sql.DriverManager.getConnection(DriverManager.java:<span class="hljs-number">689</span>)<br>at java.sql.DriverManager.getConnection(DriverManager.java:<span class="hljs-number">247</span>)<br>at dao.BaseDao.getConnection(BaseDao.java:<span class="hljs-number">23</span>)<br>at dao.OwnerDao.add(OwnerDao.java:<span class="hljs-number">15</span>)<br>... <span class="hljs-number">1</span> more<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707174713196.png" alt="image-20250707174713196"></p><h2 id="BaseDao"><a href="#BaseDao" class="headerlink" title="BaseDao"></a>BaseDao</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基础数据访问类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseDao</span> </span>{<br>    <span class="hljs-keyword">static</span> {<br>        <span class="hljs-keyword">try</span> {<br>            Class.forName(<span class="hljs-string">"oracle.jdbc.driver.OracleDriver"</span>); <span class="hljs-comment">// 加载Oracle JDBC驱动</span><br>        } <span class="hljs-keyword">catch</span> (Exception e) {<br>            e.printStackTrace();<br>        }<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取数据库连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 数据库连接对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>{<br>        <span class="hljs-comment">//痩连接: jdbc:oracle:thin</span><br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(<span class="hljs-string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>, <span class="hljs-string">"wateruser"</span>, <span class="hljs-string">"123456"</span>);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭数据库连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn 数据库连接对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(ResultSet rs, Statement stmt, Connection conn)</span> </span>{<br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) {<br>            <span class="hljs-keyword">try</span> {<br>                rs.close();<br>            } <span class="hljs-keyword">catch</span> (SQLException e) {<br>                e.printStackTrace();<br>            }<br>        }<br><br>        <span class="hljs-keyword">if</span> (stmt != <span class="hljs-keyword">null</span>) {<br>            <span class="hljs-keyword">try</span> {<br>                stmt.close();<br>            } <span class="hljs-keyword">catch</span> (SQLException e) {<br>                e.printStackTrace();<br>            }<br>        }<br><br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) {<br>            <span class="hljs-keyword">try</span> {<br>                conn.close();<br>            } <span class="hljs-keyword">catch</span> (SQLException e) {<br>                e.printStackTrace();<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="OwnerDao"><a href="#OwnerDao" class="headerlink" title="OwnerDao"></a>OwnerDao</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<br><br><span class="hljs-keyword">import</span> entity.Owners;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OwnerDao</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Owners owner)</span> </span>{<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//预处理，防止注入攻击</span><br>        PreparedStatement stmt = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> {<br>            conn = BaseDao.getConnection();<br>            stmt = conn.prepareStatement(<span class="hljs-string">"INSERT INTO T_OWNERS_COPY (id, name, addressid, housenumber, watermeter, adddate, ownertypeid) VALUES (?, ?, ?, ?, ?, ?, ?)"</span>);<br>            stmt.setLong(<span class="hljs-number">1</span>, owner.getId());<br>            stmt.setString(<span class="hljs-number">2</span>, owner.getName());<br>            stmt.setLong(<span class="hljs-number">3</span>, owner.getAddressid());<br>            stmt.setString(<span class="hljs-number">4</span>, owner.getHousenumber());<br>            stmt.setString(<span class="hljs-number">5</span>, owner.getWatermeter());<br>            <span class="hljs-comment">//日期转为长整型Long, 然后再构造为java.sql.Date类型</span><br>            stmt.setDate(<span class="hljs-number">6</span>, <span class="hljs-keyword">new</span> java.sql.Date(owner.getAdddate().getTime()));<br>            stmt.setLong(<span class="hljs-number">7</span>, owner.getOwnertypeid());<br>            stmt.executeUpdate();<br>        } <span class="hljs-keyword">catch</span> (SQLException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">finally</span> {<br>            BaseDao.close(<span class="hljs-keyword">null</span>, stmt, conn);<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(Owners owner)</span> </span>{<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement stmt = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> {<br>            conn = BaseDao.getConnection();<br>            stmt = conn.prepareStatement(<span class="hljs-string">"update T_OWNERS_COPY set name =?, addressid=?, housenumber=?, watermeter=?, adddate=?, ownertypeid=? where id=?"</span>);<br>            stmt.setString(<span class="hljs-number">1</span>, owner.getName());<br>            stmt.setLong(<span class="hljs-number">2</span>, owner.getAddressid());<br>            stmt.setString(<span class="hljs-number">3</span>, owner.getHousenumber());<br>            stmt.setString(<span class="hljs-number">4</span>, owner.getWatermeter());<br>            stmt.setDate(<span class="hljs-number">5</span>, <span class="hljs-keyword">new</span> java.sql.Date(owner.getAdddate().getTime()));<br>            stmt.setLong(<span class="hljs-number">6</span>, owner.getOwnertypeid());<br>            stmt.setLong(<span class="hljs-number">7</span>, owner.getId());<br>            stmt.executeUpdate();<br>        } <span class="hljs-keyword">catch</span> (SQLException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">finally</span> {<br>            BaseDao.close(<span class="hljs-keyword">null</span>, stmt, conn);<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(Owners owner)</span> </span>{<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement stmt = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> {<br>            conn = BaseDao.getConnection();<br>            stmt = conn.prepareStatement(<span class="hljs-string">"delete from T_OWNERS_COPY where id=?"</span>);<br>            stmt.setLong(<span class="hljs-number">1</span>, owner.getId());<br>            stmt.executeUpdate();<br>        } <span class="hljs-keyword">catch</span> (SQLException e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        } <span class="hljs-keyword">finally</span> {<br>            BaseDao.close(<span class="hljs-keyword">null</span>, stmt, conn);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="实体类Owners"><a href="#实体类Owners" class="headerlink" title="实体类Owners"></a>实体类Owners</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Owners</span> </span>{<br>    <span class="hljs-keyword">private</span> Long id;<span class="hljs-comment">//业主编号</span><br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">// 业主名称</span><br>    <span class="hljs-keyword">private</span> Long addressid;<span class="hljs-comment">// 地址编号</span><br>    <span class="hljs-keyword">private</span> String housenumber;<span class="hljs-comment">// 门牌号</span><br>    <span class="hljs-keyword">private</span> String watermeter;<span class="hljs-comment">// 水表编号</span><br>    <span class="hljs-keyword">private</span> Date adddate;<span class="hljs-comment">// 登记日期</span><br>    <span class="hljs-keyword">private</span> Long ownertypeid;<span class="hljs-comment">// 业主类型 ID</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> id;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Long id)</span> </span>{<br>        <span class="hljs-keyword">this</span>.id = id;<br>    }<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    其他getter，setter方法，省略</span><br><span class="hljs-comment">    */</span><br>}    <br></code></pre></td></tr></tbody></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Owners owner = <span class="hljs-keyword">new</span> Owners();<br>        owner.setId(<span class="hljs-number">1L</span>);<br>        owner.setName(<span class="hljs-string">"张三"</span>);<br>        owner.setAddressid(<span class="hljs-number">111L</span>);<br>        owner.setHousenumber(<span class="hljs-string">"111号"</span>);<br>        owner.setWatermeter(<span class="hljs-string">"6666"</span>);<br>        owner.setAdddate(<span class="hljs-keyword">new</span> java.util.Date());<br>        owner.setOwnertypeid(<span class="hljs-number">888L</span>);<br><br>        OwnerDao.modify(owner);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>执行modify方法之前</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707185508957.png" alt="image-20250707185508957"></p><p>执行modify方法之后</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707185543105.png" alt="image-20250707185543105"></p><h1 id="数据导入与导出"><a href="#数据导入与导出" class="headerlink" title="数据导入与导出"></a>数据导入与导出</h1><h2 id="数据库导入与导出"><a href="#数据库导入与导出" class="headerlink" title="数据库导入与导出"></a>数据库导入与导出</h2><h3 id="整库导出"><a href="#整库导出" class="headerlink" title="整库导出"></a>整库导出</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">exp system/超级管理员用户system的密码 full=y <span class="hljs-comment">--full=y表示整库导出</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707191456554.png" alt="image-20250707191456554"></p><p>执行命令后会在当前目录下生成一个叫EXPDAT.DMP，此文件为备份文件。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707191409362.png" alt="image-20250707191409362"></p><p>添加file参数即可指定备份文件的名称</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">exp system/超级管理员用户system的密码 file=文件名 full=y<br></code></pre></td></tr></tbody></table></figure><h3 id="整库导入"><a href="#整库导入" class="headerlink" title="整库导入"></a>整库导入</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">imp system/超级管理员用户system的密码 full=y<br></code></pre></td></tr></tbody></table></figure><p>如果指定file 参数，则按照file指定的备份文件进行导入</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">imp system/超级管理员用户system的密码 full=y file=water.dmp<br></code></pre></td></tr></tbody></table></figure><h2 id="按用户导入与导出"><a href="#按用户导入与导出" class="headerlink" title="按用户导入与导出"></a>按用户导入与导出</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">exp system/itcast owner=wateruser file=wateruser.dmp<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707191636590.png" alt="image-20250707191636590"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707191650272.png" alt="image-20250707191650272"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707191722469.png" alt="image-20250707191722469"></p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">imp system/itcast file=wateruser.dmp fromuser=wateruser<br></code></pre></td></tr></tbody></table></figure><p>导入前特意删掉T_OWNERS_COPY表</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707191857634.png" alt="image-20250707191857634"></p><p>导入后刷新，表成功导入</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250707191954325.png" alt="image-20250707191954325"></p><h2 id="按表导入与导出"><a href="#按表导入与导出" class="headerlink" title="按表导入与导出"></a>按表导入与导出</h2><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">exp wateruser/123456 file=a.dmp tables=t_account,a_area<br></code></pre></td></tr></tbody></table></figure><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">imp wateruser/123456 file=a.dmp tables=t_account,a_area<br></code></pre></td></tr></tbody></table></figure><h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><h2 id="简单条件查询"><a href="#简单条件查询" class="headerlink" title="简单条件查询"></a>简单条件查询</h2><h3 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h3><p>需求：查询水表编号为30408 的业主记录</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_OWNERS <br><span class="hljs-keyword">WHERE</span><br>watermeter = <span class="hljs-string">'30408'</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075359712.png" alt="image-20250708075359712"></p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>需求：查询业主名称包含“刘”的业主记录</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>t_owners <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">name</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%刘%'</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075426288.png" alt="image-20250708075426288"></p><h3 id="and运算符"><a href="#and运算符" class="headerlink" title="and运算符"></a>and运算符</h3><p>需求：查询业主名称包含“刘”的并且门牌号包含5 的业主记录</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>t_owners <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">name</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%刘%'</span> <br><span class="hljs-keyword">AND</span> housenumber <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%5%'</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075450264.png" alt="image-20250708075450264"></p><h3 id="or运算符"><a href="#or运算符" class="headerlink" title="or运算符"></a>or运算符</h3><p>需求：查询业主名称包含“刘”的或者门牌号包含5 的业主记录</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>t_owners <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">name</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%刘%'</span> <br><span class="hljs-keyword">OR</span> housenumber <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%5%'</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075509435.png" alt="image-20250708075509435"></p><h3 id="and和or运算符混合使用"><a href="#and和or运算符混合使用" class="headerlink" title="and和or运算符混合使用"></a>and和or运算符混合使用</h3><p>需求：查询业主名称包含“刘”的或者门牌号包含5 的业主记录，并且地址编号<br>为3 的记录。</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--and 的优先级比or 大，需要用()来改变优先级。</span><br><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>t_owners <br><span class="hljs-keyword">WHERE</span><br>( <span class="hljs-keyword">name</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%刘%'</span> <span class="hljs-keyword">OR</span> housenumber <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%5%'</span> ) <br><span class="hljs-keyword">AND</span> addressid =<span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075539804.png" alt="image-20250708075539804"></p><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><p>需求：查询台账记录中用水字数大于等于10000，并且小于等于20000 的记录</p><ol><li><strong>用&gt;= 和&lt;=来实现</strong></li></ol><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_ACCOUNT <br><span class="hljs-keyword">WHERE</span><br>usenum &gt;= <span class="hljs-number">10000</span> <br><span class="hljs-keyword">AND</span> usenum &lt;= <span class="hljs-number">20000</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075618647.png" alt="image-20250708075618647"></p><ol start="2"><li><strong>用between .. and ..来实现</strong></li></ol><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_ACCOUNT <br><span class="hljs-keyword">WHERE</span><br>usenum <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">10000</span> <br><span class="hljs-keyword">AND</span> <span class="hljs-number">20000</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075642222.png" alt="image-20250708075642222"></p><h3 id="空值查询"><a href="#空值查询" class="headerlink" title="空值查询"></a>空值查询</h3><p>需求1：查询T_PRICETABLE 表中MAXNUM 为空的记录</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_PRICETABLE t <br><span class="hljs-keyword">WHERE</span><br>maxnum <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075704292.png" alt="image-20250708075704292"></p><p>需求2：查询T_PRICETABLE 表中MAXNUM 不为空的记录</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_PRICETABLE t <br><span class="hljs-keyword">WHERE</span><br>maxnum <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075718119.png" alt="image-20250708075718119"></p><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>需求：查询业主表中的地址ID,不重复显示</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>addressid <br><span class="hljs-keyword">FROM</span><br>T_OWNERS<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075741271.png" alt="image-20250708075741271"></p><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>需求1：对T_ACCOUNT 表按使用量进行升序排序</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--默认是升序</span><br><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_ACCOUNT <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>usenum<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075810038.png" alt="image-20250708075810038"></p><p>需求2：对T_ACCOUNT 表按使用量进行降序排序</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_ACCOUNT <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>usenum <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075838844.png" alt="image-20250708075838844"></p><h2 id="基于伪列的查询"><a href="#基于伪列的查询" class="headerlink" title="基于伪列的查询"></a>基于伪列的查询</h2><p>在Oracle 的表的使用过程中，实际表中还有一些附加的列，称为伪列。伪列就<br>像表中的列一样，但是在表中并不存储。伪列只能查询，不能进行增删改操作。</p><h3 id="ROWID"><a href="#ROWID" class="headerlink" title="ROWID"></a>ROWID</h3><p>表中的每一行在数据文件中都有一个<strong>物理地址</strong>，ROWID 伪列返回的就是该行的<br>物理地址。</p><p>使用ROWID 可以快速的定位表中的某一行。</p><p>ROWID 值可以唯一的标识表中的一行。</p><p>由于ROWID 返回的是该行的物理地址，因此使用ROWID 可以显示行是如何存储的。</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ROWID</span><br>,<br>t.* <br><span class="hljs-keyword">FROM</span><br>T_AREA t<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075920074.png" alt="image-20250708075920074"></p><h3 id="ROWNUM"><a href="#ROWNUM" class="headerlink" title="ROWNUM"></a>ROWNUM</h3><p>在查询 的结果集中，ROWNUMM为结果集中每一行标识一个行号。第一行返回1，第二行返回2…。通过它可以限制查询结果集中返回的行数。</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ROWNUM</span><br>,<br>t.* <br><span class="hljs-keyword">FROM</span><br>T_OWNERTYPE t<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075937938.png" alt="image-20250708075937938"></p><h2 id="聚合统计"><a href="#聚合统计" class="headerlink" title="聚合统计"></a>聚合统计</h2><p>Oralce中的聚合统计是通过分组函数来实现的。</p><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ol><li>求和sum</li></ol><p>需求：统计2012 年所有用户的用水量总和</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">sum</span>( usenum ) <br><span class="hljs-keyword">FROM</span><br>t_account <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">year</span> = <span class="hljs-string">'2012'</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708075959651.png" alt="image-20250708075959651"></p><ol start="2"><li>求平均avg</li></ol><p>需求：统计2012 年所有用水量（字数）的平均值</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">avg</span>(usenum) <br><span class="hljs-keyword">FROM</span><br>T_ACCOUNT <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">year</span> = <span class="hljs-string">'2012'</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080047398.png" alt="image-20250708080047398"></p><ol start="3"><li>求最大值max</li></ol><p>需求：统计2012 年最高用水量（字数）</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">max</span>( usenum ) <br><span class="hljs-keyword">FROM</span><br>T_ACCOUNT <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">year</span> = <span class="hljs-string">'2012'</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080105204.png" alt="image-20250708080105204"></p><ol start="4"><li>求最小值min</li></ol><p>需求：统计2012 年最低用水量（字数）</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">min</span>( usenum ) <br><span class="hljs-keyword">FROM</span><br>T_ACCOUNT <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">year</span> = <span class="hljs-string">'2012'</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080122614.png" alt="image-20250708080122614"></p><ol start="5"><li>统计记录个数count</li></ol><p>需求：统计业主类型ID 为1 的业主数量</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">count</span>( * ) <br><span class="hljs-keyword">FROM</span><br>T_OWNERS t <br><span class="hljs-keyword">WHERE</span><br>ownertypeid =<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080141969.png" alt="image-20250708080141969"></p><h3 id="分组聚合group-by"><a href="#分组聚合group-by" class="headerlink" title="分组聚合group by"></a>分组聚合group by</h3><p>需求：按区域分组统计水费合计数</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>areaid,<br><span class="hljs-keyword">sum</span>( money ) <br><span class="hljs-keyword">FROM</span><br>t_account <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>areaid<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080200663.png" alt="image-20250708080200663"></p><h3 id="分组后条件查询having"><a href="#分组后条件查询having" class="headerlink" title="分组后条件查询having"></a>分组后条件查询having</h3><p>需求：查询水费合计大于16900 的区域及水费合计</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>areaid,<br><span class="hljs-keyword">sum</span>( money ) <br><span class="hljs-keyword">FROM</span><br>t_account <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>areaid <br><span class="hljs-keyword">HAVING</span><br><span class="hljs-keyword">sum</span>( money ) &gt; <span class="hljs-number">169000</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080220318.png" alt="image-20250708080220318"></p><h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><h2 id="多表内连接查询"><a href="#多表内连接查询" class="headerlink" title="多表内连接查询"></a>多表内连接查询</h2><p>需求1：查询显示业主编号，业主名称，业主类型名称，如下图：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708074137569.png" alt="image-20250708074137569"></p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>o.id 业主编号,<br>o.name 业主名称,<br>ot.name 业主类型 <br><span class="hljs-keyword">FROM</span><br>T_OWNERS o,<br>T_OWNERTYPE ot <br><span class="hljs-keyword">WHERE</span><br>o.ownertypeid = ot.id<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080240874.png" alt="image-20250708080240874"></p><p>需求2：查询显示业主编号，业主名称、地址和业主类型，如下图</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708074224084.png" alt="image-20250708074224084"></p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>o.id 业主编号,<br>o.name 业主名称,<br>ad.name 地址,<br>ot.name 业主类型 <br><span class="hljs-keyword">FROM</span><br>T_OWNERS o,<br>T_OWNERTYPE ot,<br>T_ADDRESS ad <br><span class="hljs-keyword">WHERE</span><br>o.ownertypeid = ot.id <br><span class="hljs-keyword">AND</span> o.addressid = ad.id<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080313376.png" alt="image-20250708080313376"></p><p>需求3：查询显示业主编号、业主名称、地址、所属区域、业主分类，如下<br>图：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708074255113.png" alt="image-20250708074255113"></p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>o.id 业主编号,<br>o.name 业主名称,<br>ar.name 区域,<br>ad.name 地址,<br>ot.name 业主类型 <br><span class="hljs-keyword">FROM</span><br>T_OWNERS o,<br>T_OWNERTYPE ot,<br>T_ADDRESS ad,<br>T_AREA ar <br><span class="hljs-keyword">WHERE</span><br>o.ownertypeid = ot.id <br><span class="hljs-keyword">AND</span> o.addressid = ad.id <br><span class="hljs-keyword">AND</span> ad.areaid = ar.id<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080428987.png" alt="image-20250708080428987"></p><p>需求：查询显示业主编号、业主名称、地址、所属区域、收费员、业主分类，如下图：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708074320508.png" alt="image-20250708074320508"></p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>ow.id 业主编号,<br>ow.name 业主名称,<br>ad.name 地址,<br>ar.name 所属区域,<br>op.name 收费员,<br>ot.name 业主类型 <br><span class="hljs-keyword">FROM</span><br>T_OWNERS ow,<br>T_OWNERTYPE ot,<br>T_ADDRESS ad,<br>T_AREA ar,<br>T_OPERATOR op <br><span class="hljs-keyword">WHERE</span><br>ow.ownertypeid = ot.id <br><span class="hljs-keyword">AND</span> ow.addressid = ad.id <br><span class="hljs-keyword">AND</span> ad.areaid = ar.id <br><span class="hljs-keyword">AND</span> ad.operatorid = op.id<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080457384.png" alt="image-20250708080457384"></p><h2 id="左外连接查询"><a href="#左外连接查询" class="headerlink" title="左外连接查询"></a>左外连接查询</h2><p>需求1：查询业主的账务记录，显示业主编号、名称、年、月、金额。如果此业主没有账务记录也要列出姓名。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708074349057.png" alt="image-20250708074349057"></p><p>分析：业主表为左表、账务表为右表。</p><p>按照SQL1999标准的语法，查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>ow.id,<br>ow.name,<br>ac.year,<br>ac.month,<br>ac.money <br><span class="hljs-keyword">FROM</span><br>T_OWNERS ow<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> T_ACCOUNT ac <span class="hljs-keyword">ON</span> ow.id = ac.owneruuid<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080525688.png" alt="image-20250708080525688"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080540024.png" alt="image-20250708080540024"></p><p>按照Oracle提供的语法，查询语句：</p><p>如果是左外连接，就在右表所在的条件后面加上(+)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>ow.id,<br>ow.name,<br>ac.year,<br>ac.month,<br>ac.money <br><span class="hljs-keyword">FROM</span><br>T_OWNERS ow,<br>T_ACCOUNT ac <br><span class="hljs-keyword">WHERE</span><br>ow.id = ac.owneruuid ( + )<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p>和上面的结果一样</p><h2 id="右外连接查询"><a href="#右外连接查询" class="headerlink" title="右外连接查询"></a>右外连接查询</h2><p>需求：查询业主的账务记录，显示业主编号、名称、年、月、金额。如果账务记录没有对应的业主信息，也要列出记录。如下图：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708074616276.png" alt="image-20250708074616276"></p><p>按照SQL1999标准的语法，查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>ow.id,<br>ow.name,<br>ac.year,<br>ac.month,<br>ac.money <br><span class="hljs-keyword">FROM</span><br>T_OWNERS ow<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> T_ACCOUNT ac <span class="hljs-keyword">ON</span> ow.id = ac.owneruuid<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080640420.png" alt="image-20250708080640420"></p><p>按照Oracle提供的语法，查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>ow.id,<br>ow.name,<br>ac.year,<br>ac.month,<br>ac.money <br><span class="hljs-keyword">FROM</span><br>T_OWNERS ow,<br>T_ACCOUNT ac <br><span class="hljs-keyword">WHERE</span><br>ow.id ( + ) = ac.owneruuid<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p>和上面的结果一样</p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="where子句中的子查询"><a href="#where子句中的子查询" class="headerlink" title="where子句中的子查询"></a>where子句中的子查询</h2><h3 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h3><ul><li><p>只返回一条记录</p></li><li><p>单行操作符</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708074747823.png" alt="image-20250708074747823"></p></li></ul><p>需求：查询2012 年1 月用水量大于平均值的台账记录</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_ACCOUNT <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">year</span> = <span class="hljs-string">'2012'</span> <br><span class="hljs-keyword">AND</span> <span class="hljs-keyword">month</span> = <span class="hljs-string">'01'</span> <br><span class="hljs-keyword">AND</span> usenum &gt; ( <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">avg</span>( usenum ) <span class="hljs-keyword">FROM</span> T_ACCOUNT <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">year</span> = <span class="hljs-string">'2012'</span> <span class="hljs-keyword">AND</span> <span class="hljs-keyword">month</span> = <span class="hljs-string">'01'</span> )<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080721911.png" alt="image-20250708080721911"></p><h3 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h3><ul><li><p>可能会返回多条记录</p></li><li><p>多行操作符</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708074843832.png" alt="image-20250708074843832"></p></li></ul><h4 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h4><p>需求1：查询地址编号为1 、3、4 的业主记录</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_OWNERS <br><span class="hljs-keyword">WHERE</span><br>addressid <span class="hljs-keyword">IN</span> ( <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> )<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080750597.png" alt="image-20250708080750597"></p><p>需求2：查询地址含有“花园”的业主的信息</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_OWNERS <br><span class="hljs-keyword">WHERE</span><br>addressid <span class="hljs-keyword">IN</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">FROM</span> t_address <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%花园%'</span> )<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080813957.png" alt="image-20250708080813957"></p><p>需求3：查询地址不含有“花园”的业主的信息</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>T_OWNERS <br><span class="hljs-keyword">WHERE</span><br>addressid <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">FROM</span> t_address <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%花园%'</span> )<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080850962.png" alt="image-20250708080850962"></p><h2 id="from子句中的子查询"><a href="#from子句中的子查询" class="headerlink" title="from子句中的子查询"></a>from子句中的子查询</h2><p><strong>from 子句的子查询为多行子查询</strong><br>需求：查询显示业主编号，业主名称，业主类型名称，条件为业主类型为”居民”，使用子查询实现。</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>(<br><span class="hljs-keyword">SELECT</span><br>o.id 业主编号,<br>o.name 业主名称,<br>ot.name 业主类型 <br><span class="hljs-keyword">FROM</span><br>T_OWNERS o,<br>T_OWNERTYPE ot <br><span class="hljs-keyword">WHERE</span><br>o.ownertypeid = ot.id <br>) <br><span class="hljs-keyword">WHERE</span><br>业主类型= <span class="hljs-string">'居民'</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080916696.png" alt="image-20250708080916696"></p><h2 id="select子句中的子查询"><a href="#select子句中的子查询" class="headerlink" title="select子句中的子查询"></a>select子句中的子查询</h2><p><strong>select 子句的子查询必须为单行子查询</strong></p><p>需求1：列出业主信息，包括ID，名称，所属地址。</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">id</span>,<br><span class="hljs-keyword">name</span>,<br>( <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">FROM</span> t_address <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = addressid ) addressname <br><span class="hljs-keyword">FROM</span><br>t_owners<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708080954304.png" alt="image-20250708080954304"></p><p>需求2：列出业主信息，包括ID，名称，所属地址，所属区域。</p><p>查询语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">id</span>,<br><span class="hljs-keyword">name</span>,<br>( <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">FROM</span> t_address <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = addressid ) addressname,<br>( <span class="hljs-keyword">SELECT</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">FROM</span> t_area <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = areaid ) <span class="hljs-keyword">FROM</span> t_address <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = addressid ) adrename <br><span class="hljs-keyword">FROM</span><br>t_owners;<br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250708081019128.png" alt="image-20250708081019128"></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;Oracle简介&quot;&gt;&lt;a href=&quot;#Oracle简介&quot; class=&quot;headerlink&quot; title=&quot;Oracle简介&quot;&gt;&lt;/a&gt;Oracle简介&lt;/h1&gt;&lt;h2 id=&quot;Oracle特点&quot;&gt;&lt;a href=&quot;#Oracle特点&quot; class=&quot;headerlink&quot; title=&quot;Oracle特点&quot;&gt;&lt;/a&gt;Oracle特点&lt;/h2&gt;&lt;p&gt;Oracle数据库具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持多用户，大事务量的事务处理&lt;/li&gt;
&lt;li&gt;数据安全性和完整性控制&lt;/li&gt;
&lt;li&gt;支持分布式数据处理&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Oracle体系结构&quot;&gt;&lt;a href=&quot;#Oracle体系结构&quot; class=&quot;headerlink&quot; title=&quot;Oracle体系结构&quot;&gt;&lt;/a&gt;Oracle体系结构&lt;/h2&gt;&lt;h3 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h3&gt;&lt;p&gt;Oracle数据库是数据的物理存储。Oracle的数据库是指一个操作系统只有一个库，可以看做Oracle只有一个大数据库。&lt;/p&gt;
&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;p&gt;一个Oracle实例（Oracle Instance）有一系列的后台进程（Background Processes）和内存结构（Memory Structures）组成。一个数据库可以有多个(n个)实例。&lt;/p&gt;</summary>
    
    
    
    <category term="Oracle" scheme="https://xiaofanshutu.github.io/categories/Oracle/"/>
    
    
  </entry>
  
  <entry>
    <title>事务</title>
    <link href="https://xiaofanshutu.github.io/posts/93ac284c.html"/>
    <id>https://xiaofanshutu.github.io/posts/93ac284c.html</id>
    <published>2025-07-02T22:59:12.930Z</published>
    <updated>2025-07-02T23:06:43.133Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="事务概述"><a href="#事务概述" class="headerlink" title="事务概述"></a>事务概述</h1><ol><li><p>事务是一个最小的工作单元。在数据库当中，事务表示一件完整的事儿。</p></li><li><p>一个业务的完成可能需要多条DML语句共同配合才能完成，例如转账业务，需要执行两条DML语句，先更新张三账户的余额，再更新李四账户的余额，为了保证转账业务不出现问题，就必须保证要么同时成功，要么同时失败，怎么保证同时成功或者同时失败呢？就需要使用事务机制。</p></li><li><p>也就是说用了事务机制之后，在同一个事务当中，多条DML语句会同时成功，或者同时失败，不会出现一部分成功，一部分失败的现象。</p></li><li><p>事务只针对DML语句有效：因为只有这三个语句是改变表中数据的。</p><ol><li>insert</li><li>delete</li><li>update<h1 id="事务四大特性：ACID"><a href="#事务四大特性：ACID" class="headerlink" title="事务四大特性：ACID"></a>事务四大特性：ACID</h1></li></ol></li><li><p>原子性（Atomicity）：是指事务包含的所有操作要么全部成功，要么同时失败。</p></li><li><p>一致性（Consistency）：是指事务开始前，和事务完成后，数据应该是一致的。例如张三和李四的钱加起来是5000，中间不管进行过多少次的转账操作(update)，总量5000是不会变的。这就是事务的一致性。</p></li><li><p>隔离性（Isolation）：隔离性是当多个⽤户并发访问数据库时，⽐如操作同⼀张表时，数据库为每⼀个⽤户开启的事务，不能被其他事务的操作所⼲扰，多个并发事务之间要相互隔离。</p></li><li><p>持久性（Durability）：持久性是指⼀个事务⼀旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><h1 id="演示MySQL事务"><a href="#演示MySQL事务" class="headerlink" title="演示MySQL事务"></a>演示MySQL事务</h1><p>在dos命令窗口中开启MySQL事务：start transaction; 或者：begin;<br>回滚事务：rollback;<br>提交事务：commit;<br>只要执行以上的rollback或者commit，事务都会结束。<br>MySQL默认情况下采用的事务机制是：自动提交。所谓自动提交就是只要执行一条DML语句则提交一次。</p><h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070002096.png"></p></li></ol><p><strong>隔离级别从低到高排序：读未提交 &lt; 读提交 &lt; 可重复读 &lt; 串行化**<br>**不同隔离级别会存在不同的现象，现象按照严重性从高到低排序：脏读 &gt; 不可重复读 &gt; 幻读</strong></p><h2 id="查看与设置隔离级别"><a href="#查看与设置隔离级别" class="headerlink" title="查看与设置隔离级别"></a>查看与设置隔离级别</h2><p>mysql默认的隔离级别：可重复读（REPEATABLE READ）。</p><ul><li>查看当前会话的隔离级别：select @@transaction_isolation;</li><li>查看全局的隔离级别：select @@gobal.transaction_isolation;</li></ul><p>设置事务隔离级别：</p><ul><li>会话级：set session transaction isolation level read committed;</li><li>全局级：set global transaction isolation level read committed;<h2 id="不同现象"><a href="#不同现象" class="headerlink" title="不同现象"></a>不同现象</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3>指的是一个事务读取了另一个事务尚未提交的数据，即读取了另一个事务中的脏数据（Dirty Data）。在此情况下，如果另一个事务回滚了或者修改了这些数据，那么读取这些脏数据的事务所处理的数据就是不准确的。<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3>指在一个事务内，多次读取同一个数据行，得到的结果可能是不一样的。这是由于其他事务对数据行做出了修改操作，导致数据的不一致性。<h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3>指在事务执行过程中，前后两次相同的查询条件得到的结果集不一致，可能会变多或变少。<h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><h3 id="读未提交（READ-UNCOMMITTED）"><a href="#读未提交（READ-UNCOMMITTED）" class="headerlink" title="读未提交（READ UNCOMMITTED）"></a>读未提交（READ UNCOMMITTED）</h3>A事务与B事务，A事务可以读取到B事务未提交的数据。这是最低的隔离级别。几乎两个事务之间没有隔离。这种隔离级别是一种理论层面的，在实际的数据库产品中，没有从这个级别起步的。<br>当事务隔离级别是读未提交时，三种现象都存在：脏读，不可重复读，幻读。<br>我们可以开启两个DOS命令窗口，模拟两个事务，演示一下这种隔离级别。三种现象中最严重的是脏读，我们只需要演示脏读问题即可，因为存在脏读的话，就一定存在不可重复读和幻读问题。</li></ul><p>将全局事务隔离级别设置为：READ UNCOMMITTED</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">isolation</span> <span class="hljs-keyword">level</span> <span class="hljs-keyword">read</span> uncommitted;<br></code></pre></td></tr></tbody></table></figure><p>开启两个DOS命令窗口来模拟两个事务：A事务与B事务。</p><table><thead><tr><th><strong>A事务</strong></th><th><strong>B事务</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070014427.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(4);</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070018545.png"></td><td></td></tr></tbody></table><p>通过以上测试，可以看到，A事务读取到了B事务还没有提交的数据。这种现象就是脏读。</p><h3 id="读提交（READ-COMMITTED）"><a href="#读提交（READ-COMMITTED）" class="headerlink" title="读提交（READ COMMITTED）"></a>读提交（READ COMMITTED）</h3><p>A事务与B事务，A事务可以读取到B事务提交之后的数据。Oracle数据库默认的就是这种隔离级别。</p><p>将数据库的全局事务隔离级别设置为读提交：READ COMMITTED</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">isolation</span> <span class="hljs-keyword">level</span> <span class="hljs-keyword">read</span> committed;<br></code></pre></td></tr></tbody></table></figure><p>演示：</p><table><thead><tr><th><strong>A事务</strong></th><th><strong>B事务</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070023567.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(4);</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070027578.png"></td><td></td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1709004165277-dac7bc73-55ba-4034-bd48-b975689ffb41.png#averageHue=%230f0e0d&amp;clientId=u0fbbe02e-04ac-4&amp;from=paste&amp;height=214&amp;id=ucc8e1eca&amp;originHeight=214&amp;originWidth=298&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4626&amp;status=done&amp;style=shadow&amp;taskId=u2cac7a44-ba45-4bd7-86c2-2d280c9de57&amp;title=&amp;width=298" alt="image.png"></td><td></td></tr></tbody></table><p>通过以上测试看出，A事务只能读取到B事务提交之后的数据。这种隔离级别解决了脏读问题，但肯定是存在不可重复读和幻读问题。因为只要事务B进行了增删改操作之后并提交了，事务A读取到的数据肯定是不同的。即：不可重复读和幻读都存在。</p><h3 id="可重复读（REPEATABLE-READ）"><a href="#可重复读（REPEATABLE-READ）" class="headerlink" title="可重复读（REPEATABLE READ）"></a>可重复读（REPEATABLE READ）</h3><p>这个隔离级别是MySQL数据库默认的。<br>A事务和B事务，A事务开启后，读取了某一条记录，然后B事务对这条记录进行修改并提交，A事务读取到的还是修改前的数据。这种隔离级别称为可重复读。</p><p>将数据库全局隔离级别修改为可重复读：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">isolation</span> <span class="hljs-keyword">level</span> repeatable <span class="hljs-keyword">read</span>;<br></code></pre></td></tr></tbody></table></figure><p>演示：</p><table><thead><tr><th><strong>A事务</strong></th><th><strong>B事务</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select empno,ename,sal from emp where empno=7369;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070032177.png"></td><td></td></tr><tr><td></td><td>mysql&gt; update emp set ename=’SMITH’,sal=8000 where empno=7369;</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select empno,ename,sal from emp where empno=7369;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070035832.png"></td><td></td></tr></tbody></table><p>通过以上测试得知：当事务隔离级别设置为可重复读时，避免了不可重复读问题。</p><p>那么在MySQL当中，当事务隔离级别设置为可重复读时，能够避免幻读问题吗？测试一下：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070040811.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(5);</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070045242.png"></td><td></td></tr></tbody></table><p>通过以上测试得知：<strong>当事务隔离级别设置为可重复读时，也避免了幻读问题。是完全避免了幻读问题吗？并不是。</strong>请看以下测试：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070626277.png" alt="image-20250703070626277"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(6);</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select * from a <strong>for update;</strong></td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070100658.png"></td><td></td></tr></tbody></table><p>通过以上测试得知：<strong>当事务隔离级别设置为可重复读，MySQL会尽最大努力避免幻读问题，但这种隔离级别无法完全避免幻读问题。</strong></p><h3 id="串行化（SERIALIZABLE）"><a href="#串行化（SERIALIZABLE）" class="headerlink" title="串行化（SERIALIZABLE）"></a>串行化（SERIALIZABLE）</h3><p>这种隔离级别最高，避免了所有的问题，缺点是效率低，因为这种隔离级别会导致事务排队处理，不支持并发。</p><p>设置数据库全局隔离级别为串行化：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">isolation</span> <span class="hljs-keyword">level</span> <span class="hljs-keyword">serializable</span>;<br></code></pre></td></tr></tbody></table></figure><p>演示：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070107886.png"></td><td></td></tr><tr><td>mysql&gt; insert into a values(7);</td><td></td></tr><tr><td></td><td>mysql&gt; select * from a;</td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070113102.png"></td><td></td></tr><tr><td>mysql&gt; commit;</td><td></td></tr><tr><td></td><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070117518.png"></td></tr></tbody></table><p>通过以上测试得知：当事务隔离级别设置为串行化时，事务只能排队执行，不支持并发。</p><h2 id="可重复读的幻读问题"><a href="#可重复读的幻读问题" class="headerlink" title="可重复读的幻读问题"></a>可重复读的幻读问题</h2><p>在上面讲解过程中我提到，MySQL默认的隔离级别可重复读，在很大程度上避免了幻读问题（并不能完全解决），那么它是如何解决幻读问题的呢，解决方案包括两种：</p><ul><li><p>针对<strong>快照读</strong>（普通 select 语句），是<strong>通过 MVCC 方式解决了幻读</strong>，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好的避免了幻读问题。</p></li><li><p>针对<strong>当前读</strong>（select … for update 等语句），是<strong>通过 next-key lock（记录锁+间隙锁）方式解决了幻读</strong>，因为当执行 select … for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好的避免了幻读问题。</p><h3 id="快照读是如何解决幻读的"><a href="#快照读是如何解决幻读的" class="headerlink" title="快照读是如何解决幻读的"></a>快照读是如何解决幻读的</h3><p>什么是快照读？普通的select语句都是采用的快照读。顾名思义：在整个事务的处理过程中，执行相同的一个select语句时，每次都是读取的快照。（快照指的是固定的某个时刻的数据，就像现实世界中的拍照一样，把那个美好的时刻留下来）。也就是说，当事务隔离级别是可重复读，并且执行的select语句是一个普通的select语句时，都会采用快照读的方式读取数据，底层实现原理是：</p></li><li><p>底层由 MVCC（多版本并发控制）实现，实现的方式是开始事务后，在执行第一个查询语句后，会创建一个 Read View，后续的查询语句利用这个 Read View，通过这个 Read View 就可以在 undo log 版本链找到事务开始时的数据，所以事务过程中每次查询的数据都是一样的，即使中途有其他事务插入了新纪录，是查询不出来这条数据的，所以就很好的避免了幻读问题。</p></li></ul><p>演示：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a; //快照读</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070123937.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(5);</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select * from a; //快照读</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070128632.png"></td><td></td></tr></tbody></table><h3 id="当前读是如何解决幻读的"><a href="#当前读是如何解决幻读的" class="headerlink" title="当前读是如何解决幻读的"></a>当前读是如何解决幻读的</h3><p>当前读，顾名思义：每一次都读取最新的数据。当前读包括：update、delete、insert、select…for update。这个很好理解，因为增删改的时候都要基于最新的数据进行增删改。<br>而select…for update原理是：对查询范围内的数据进行加锁，不允许其它事务对这个范围内的数据进行增删改。也就是说这个select语句范围内的数据是不允许并发的，只能排队执行，从而避免幻读问题。<br>select…for update加的锁叫做：next-key lock。我们可以称其为：间隙锁 + 记录锁。间隙锁用来保证在锁定的范围内不允许insert操作。记录锁用来保证在锁定的范围内不允许delete和update操作。</p><p>假如有这样的数据：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070133681.png"><br>SQL语句是这样写的：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> a <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">between</span> <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">4</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>;<br></code></pre></td></tr></tbody></table></figure><p>那么id在[2-4]区间的所有记录行被锁定，不能插入3是通过间隙锁来搞定的。不能修改或删除2和4是通过记录锁来搞定的。</p><p>演示：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a where id between 2 and 4 for update; // 当前读</td><td></td></tr><tr><td></td><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070138619.png"></td></tr></tbody></table><h3 id="出现幻读的两种情况"><a href="#出现幻读的两种情况" class="headerlink" title="出现幻读的两种情况"></a>出现幻读的两种情况</h3><p>在同一个事务处理过程中，如果前后两次都采用快照读，或者都采用当前读，则不会出现幻读问题。如果第一次使用快照读，后面使用了当前读，则会出现幻读问题。</p><h4 id="第一种产生幻读的场景"><a href="#第一种产生幻读的场景" class="headerlink" title="第一种产生幻读的场景"></a>第一种产生幻读的场景</h4><p>A事务与B事务。在A事务中第一次查询使用快照读，B事务插入数据。然后在A事务中第二次查询使用当前读。则会产生幻读现象。<br>演示：</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070144039.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(5);</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; select * from a for update; // 产生了幻读</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070150445.png"></td><td></td></tr></tbody></table><h4 id="第二种产生幻读的场景"><a href="#第二种产生幻读的场景" class="headerlink" title="第二种产生幻读的场景"></a>第二种产生幻读的场景</h4><p>事务A与事务B，在事务A中第一次查询使用快照读，在事务B中插入一条数据，然后在事务A中更新事务B插入的那条记录，最后在事务A中再次使用快照读。则会发生幻读现象。</p><table><thead><tr><th><strong>事务A</strong></th><th><strong>事务B</strong></th></tr></thead><tbody><tr><td>mysql&gt; use powernode</td><td></td></tr><tr><td></td><td>mysql&gt; use powernode</td></tr><tr><td>mysql&gt; start transaction;</td><td></td></tr><tr><td></td><td>mysql&gt; start transaction;</td></tr><tr><td>mysql&gt; select * from a;</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070156454.png"></td><td></td></tr><tr><td></td><td>mysql&gt; insert into a values(6);</td></tr><tr><td></td><td>mysql&gt; commit;</td></tr><tr><td>mysql&gt; update a set id=100 where id=6; //主要是因为这个SQL语句的执行触发了当前读</td><td></td></tr><tr><td>mysql&gt; select * from a; // 产生了幻读</td><td></td></tr><tr><td><img src="C:\Users\winner\AppData\Roaming\Typora\typora-user-images\image-20250703070201823.png"></td><td></td></tr></tbody></table><h3 id="总结可重复读的幻读问题"><a href="#总结可重复读的幻读问题" class="headerlink" title="总结可重复读的幻读问题"></a>总结可重复读的幻读问题</h3><p>MySQL的可重复读隔离级别（默认隔离级），根据不同的查询方式，分别提出了避免幻读的方案：</p><ul><li>针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读。</li><li>针对当前读（select … for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读。</li></ul><p>我举例了两个发生幻读场景的例子。</p><ul><li>第一个例子：对于快照读， MVCC 并不能完全避免幻读现象。因为当事务 A 更新了一条事务 B 插入的记录，那么事务 A 前后两次查询的记录条目就不一样了，所以就发生幻读。</li><li>第二个例子：对于当前读，如果事务开启后，并没有执行当前读，而是先快照读，然后这期间如果其他事务插入了一条记录，那么事务后续使用当前读进行查询的时候，就会发现两次查询的记录条目就不一样了，所以就发生幻读。</li></ul><p>所以，MySQL 可重复读隔离级别并没有彻底解决幻读，只是很大程度上避免了幻读现象的发生。<br>要避免这类特殊场景下发生幻读的现象的话，就是尽量在开启事务之后，马上执行 select … for update 这类当前读的语句，因为它会对记录加 next-key lock，从而避免其他事务插入一条新记录。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;事务概述&quot;&gt;&lt;a href=&quot;#事务概述&quot; class=&quot;headerlink&quot; title=&quot;事务概述&quot;&gt;&lt;/a&gt;事务概述&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;事务是一个最小的工作单元。在数据库当中，事务表示一件完整的事儿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个业务的完成可能需要多条DML语句共同配合才能完成，例如转账业务，需要执行两条DML语句，先更新张三账户的余额，再更新李四账户的余额，为了保证转账业务不出现问题，就必须保证要么同时成功，要么同时失败，怎么保证同时成功或者同时失败呢？就需要使用事务机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也就是说用了事务机制之后，在同一个事务当中，多条DML语句会同时成功，或者同时失败，不会出现一部分成功，一部分失败的现象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事务只针对DML语句有效：因为只有这三个语句是改变表中数据的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;insert&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;li&gt;update&lt;h1 id=&quot;事务四大特性：ACID&quot;&gt;&lt;a href=&quot;#事务四大特性：ACID&quot; class=&quot;headerlink&quot; title=&quot;事务四大特性：ACID&quot;&gt;&lt;/a&gt;事务四大特性：ACID&lt;/h1&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原子性（Atomicity）：是指事务包含的所有操作要么全部成功，要么同时失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一致性（Consistency）：是指事务开始前，和事务完成后，数据应该是一致的。例如张三和李四的钱加起来是5000，中间不管进行过多少次的转账操作(update)，总量5000是不会变的。这就是事务的一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隔离性（Isolation）：隔离性是当多个⽤户并发访问数据库时，⽐如操作同⼀张表时，数据库为每⼀个⽤户开启的事务，不能被其他事务的操作所⼲扰，多个并发事务之间要相互隔离。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;持久性（Durability）：持久性是指⼀个事务⼀旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。&lt;/p&gt;
&lt;h1 id=&quot;演示MySQL事务&quot;&gt;&lt;a href=&quot;#演示MySQL事务&quot; class=&quot;headerlink&quot; title=&quot;演示MySQL事务&quot;&gt;&lt;/a&gt;演示MySQL事务&lt;/h1&gt;&lt;p&gt;在dos命令窗口中开启MySQL事务：start transaction; 或者：begin;&lt;br&gt;回滚事务：rollback;&lt;br&gt;提交事务：commit;&lt;br&gt;只要执行以上的rollback或者commit，事务都会结束。&lt;br&gt;MySQL默认情况下采用的事务机制是：自动提交。所谓自动提交就是只要执行一条DML语句则提交一次。&lt;/p&gt;
&lt;h1 id=&quot;事务隔离级别&quot;&gt;&lt;a href=&quot;#事务隔离级别&quot; class=&quot;headerlink&quot; title=&quot;事务隔离级别&quot;&gt;&lt;/a&gt;事务隔离级别&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250703070002096.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;隔离级别从低到高排序：读未提交 &amp;lt; 读提交 &amp;lt; 可重复读 &amp;lt; 串行化**&lt;br&gt;**不同隔离级别会存在不同的现象，现象按照严重性从高到低排序：脏读 &amp;gt; 不可重复读 &amp;gt; 幻读&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;查看与设置隔离级别&quot;&gt;&lt;a href=&quot;#查看与设置隔离级别&quot; class=&quot;headerlink&quot; title=&quot;查看与设置隔离级别&quot;&gt;&lt;/a&gt;查看与设置隔离级别&lt;/h2&gt;&lt;p&gt;mysql默认的隔离级别：可重复读（REPEATABLE READ）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看当前会话的隔离级别：select @@transaction_isolation;&lt;/li&gt;
&lt;li&gt;查看全局的隔离级别：select @@gobal.transaction_isolation;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置事务隔离级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会话级：set session transaction isolation level read committed;&lt;/li&gt;
&lt;li&gt;全局级：set global transaction isolation level read committed;&lt;h2 id=&quot;不同现象&quot;&gt;&lt;a href=&quot;#不同现象&quot; class=&quot;headerlink&quot; title=&quot;不同现象&quot;&gt;&lt;/a&gt;不同现象&lt;/h2&gt;&lt;h3 id=&quot;脏读&quot;&gt;&lt;a href=&quot;#脏读&quot; class=&quot;headerlink&quot; title=&quot;脏读&quot;&gt;&lt;/a&gt;脏读&lt;/h3&gt;指的是一个事务读取了另一个事务尚未提交的数据，即读取了另一个事务中的脏数据（Dirty Data）。在此情况下，如果另一个事务回滚了或者修改了这些数据，那么读取这些脏数据的事务所处理的数据就是不准确的。&lt;h3 id=&quot;不可重复读&quot;&gt;&lt;a href=&quot;#不可重复读&quot; class=&quot;headerlink&quot; title=&quot;不可重复读&quot;&gt;&lt;/a&gt;不可重复读&lt;/h3&gt;指在一个事务内，多次读取同一个数据行，得到的结果可能是不一样的。这是由于其他事务对数据行做出了修改操作，导致数据的不一致性。&lt;h3 id=&quot;幻读&quot;&gt;&lt;a href=&quot;#幻读&quot; class=&quot;headerlink&quot; title=&quot;幻读&quot;&gt;&lt;/a&gt;幻读&lt;/h3&gt;指在事务执行过程中，前后两次相同的查询条件得到的结果集不一致，可能会变多或变少。&lt;h2 id=&quot;隔离级别&quot;&gt;&lt;a href=&quot;#隔离级别&quot; class=&quot;headerlink&quot; title=&quot;隔离级别&quot;&gt;&lt;/a&gt;隔离级别&lt;/h2&gt;&lt;h3 id=&quot;读未提交（READ-UNCOMMITTED）&quot;&gt;&lt;a href=&quot;#读未提交（READ-UNCOMMITTED）&quot; class=&quot;headerlink&quot; title=&quot;读未提交（READ UNCOMMITTED）&quot;&gt;&lt;/a&gt;读未提交（READ UNCOMMITTED）&lt;/h3&gt;A事务与B事务，A事务可以读取到B事务未提交的数据。这是最低的隔离级别。几乎两个事务之间没有隔离。这种隔离级别是一种理论层面的，在实际的数据库产品中，没有从这个级别起步的。&lt;br&gt;当事务隔离级别是读未提交时，三种现象都存在：脏读，不可重复读，幻读。&lt;br&gt;我们可以开启两个DOS命令窗口，模拟两个事务，演示一下这种隔离级别。三种现象中最严重的是脏读，我们只需要演示脏读问题即可，因为存在脏读的话，就一定存在不可重复读和幻读问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将全局事务隔离级别设置为：READ UNCOMMITTED&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://xiaofanshutu.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>视图</title>
    <link href="https://xiaofanshutu.github.io/posts/50a54d3c.html"/>
    <id>https://xiaofanshutu.github.io/posts/50a54d3c.html</id>
    <published>2025-07-02T22:46:02.851Z</published>
    <updated>2025-07-02T22:53:57.145Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>只能将select语句创建为视图。</p></li><li><p>创建视图</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">replace</span> <span class="hljs-keyword">view</span> v_emp <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> e.ename,d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno;<br></code></pre></td></tr></tbody></table></figure></li><li><p>视图作用</p><ol><li>如果开发中有一条非常复杂的SQL，而这个SQL在多处使用，会给开发和维护带来成本。使用视图可以降低开发和维护的成本。</li><li>视图可以隐藏表的字段名。</li></ol></li><li><p>修改视图</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">view</span> v_emp <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> e.ename,d.dname,d.deptno <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno;<br></code></pre></td></tr></tbody></table></figure></li><li><p>删除视图</p><ol><li>drop view if exists v_emp;</li></ol></li><li><p>对视图增删改（DML：insert delete update）可以影响到原表数据。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;只能将select语句创建为视图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建视图&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;view&lt;/span&gt; v_emp &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; e.ename,d.dname &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; emp e &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; dept d &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; e.deptno = d.deptno;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;视图作用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果开发中有一条非常复杂的SQL，而这个SQL在多处使用，会给开发和维护带来成本。使用视图可以降低开发和维护的成本。&lt;/li&gt;
&lt;li&gt;视图可以隐藏表的字段名。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改视图&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;view&lt;/span&gt; v_emp &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; e.ename,d.dname,d.deptno &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; emp e &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; dept d &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; e.deptno = d.deptno;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除视图&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;drop view if exists v_emp;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对视图增删改（DML：insert delete update）可以影响到原表数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary>
    
    
    
    <category term="MySQL" scheme="https://xiaofanshutu.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库设计三范式</title>
    <link href="https://xiaofanshutu.github.io/posts/80436e1d.html"/>
    <id>https://xiaofanshutu.github.io/posts/80436e1d.html</id>
    <published>2025-07-02T13:41:22.456Z</published>
    <updated>2025-07-02T13:45:23.490Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是数据库设计三范式"><a href="#什么是数据库设计三范式" class="headerlink" title="什么是数据库设计三范式"></a>什么是数据库设计三范式</h1><p>数据库表设计的原则。教你怎么设计数据库表有效，并且节省空间。</p><h1 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h1><ol><li>第一范式：任何一张表都应该有主键，每个字段是原子性的不能再分<ol><li>以下表的设计不符合第一范式：无主键，并且联系方式可拆分。</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214226489.png"></p><ol start="2"><li>应该这样设计：</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214230960.png"></p><ol start="2"><li>第二范式：建立在第一范式基础上的，另外要求所有非主键字段完全依赖主键，不能产生部分依赖<ol><li>以下表存储了学生和老师的信息</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214234959.png"><br>虽然符合第一范式，但是违背了第二范式，学生姓名、老师姓名都产生了部分依赖。导致数据冗余。</p><ol start="2"><li>以下这种设计方式就是符合第二范式的：</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214239651.png"></p><ol start="3"><li>第三范式：建立在第二范式基础上的，非主键字段不能传递依赖于主键字段<ol><li>以下设计方式就是违背第三范式的</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214244205.png"><br>以上因为产生了传递依赖，导致班级名称冗余。</p><ol start="2"><li>以下这种方式就是符合第三范式的：</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214248100.png"></p><h1 id="一对多怎么设计"><a href="#一对多怎么设计" class="headerlink" title="一对多怎么设计"></a>一对多怎么设计</h1><p>口诀：一对多两张表，多的表加外键。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214252987.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214259929.png"></p><h1 id="多对多怎么设计"><a href="#多对多怎么设计" class="headerlink" title="多对多怎么设计"></a>多对多怎么设计</h1><p>多对多三张表，关系表添加外键。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214304436.png"></p><h1 id="一对一怎么设计"><a href="#一对一怎么设计" class="headerlink" title="一对一怎么设计"></a>一对一怎么设计</h1><p>两种方案：</p><ol><li>第一种：主键共享</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214308522.png"></p><ol start="2"><li>第二种：外键唯一</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214312778.png"></p><h1 id="最终的设计"><a href="#最终的设计" class="headerlink" title="最终的设计"></a>最终的设计</h1><p>最终以满足客户需求为原则，有的时候会拿空间换速度。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;什么是数据库设计三范式&quot;&gt;&lt;a href=&quot;#什么是数据库设计三范式&quot; class=&quot;headerlink&quot; title=&quot;什么是数据库设计三范式&quot;&gt;&lt;/a&gt;什么是数据库设计三范式&lt;/h1&gt;&lt;p&gt;数据库表设计的原则。教你怎么设计数据库表有效，并且节省空间。&lt;/p&gt;
&lt;h1 id=&quot;三范式&quot;&gt;&lt;a href=&quot;#三范式&quot; class=&quot;headerlink&quot; title=&quot;三范式&quot;&gt;&lt;/a&gt;三范式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;第一范式：任何一张表都应该有主键，每个字段是原子性的不能再分&lt;ol&gt;
&lt;li&gt;以下表的设计不符合第一范式：无主键，并且联系方式可拆分。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214226489.png&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;应该这样设计：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214230960.png&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;第二范式：建立在第一范式基础上的，另外要求所有非主键字段完全依赖主键，不能产生部分依赖&lt;ol&gt;
&lt;li&gt;以下表存储了学生和老师的信息&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250702214234959.png&quot;&gt;&lt;br&gt;虽然符合第一范式，但是违背了第二范式，学生姓名、老师姓名都产生了部分依赖。导致数据冗余。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://xiaofanshutu.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL表相关</title>
    <link href="https://xiaofanshutu.github.io/posts/31637be2.html"/>
    <id>https://xiaofanshutu.github.io/posts/31637be2.html</id>
    <published>2025-06-30T23:16:56.277Z</published>
    <updated>2025-07-01T00:07:26.004Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>  字段名<span class="hljs-number">1</span> 数据类型,<br>  字段名<span class="hljs-number">2</span> 数据类型,<br>  字段名<span class="hljs-number">3</span> 数据类型,<br>  ......<br>);<br></code></pre></td></tr></tbody></table></figure><p>例如：创建学生表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>,<br>  gender <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">'男'</span><br>);<br></code></pre></td></tr></tbody></table></figure><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>, 字段名<span class="hljs-number">2</span>, 字段名<span class="hljs-number">3</span>,......) <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3</span>,......);<br></code></pre></td></tr></tbody></table></figure><p>字段名和值要一一对应。类型要一一对应，数量要一一对应。<br>字段名也可以省略，如果字段名省略就表示把所有字段名都写上去了，并且顺序和建表时的顺序相同。</p><h1 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h1><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> 表名;<br></code></pre></td></tr></tbody></table></figure><p>判断是否存在这个表，如果存在则删除。避免不存在时的报错。</p><h1 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h1><p>数据类型（data_type）是指系统中所允许的数据的类型。数据库中的每个列都应该有适当的数据类型，用于限制或允许该列中存储的数据。例如，列中存储的为数字，则相应的数据类型应该为数值类型。<br>如果使用错误的数据类型可能会严重影响应用程序的功能和性能，所以在设计表时，应该特别重视数据列所用的数据类型。更改包含数据的列不是一件小事，这样做可能会导致数据丢失。因此，在创建表时必须为每个列设置正确的数据类型和长度。<br>MySQL 的数据类型可以分为整数类型、浮点数类型、定点数类型、日期和时间类型、字符串类型、二进制类型等。</p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p>tinyint：1个字节（微小整数）<br>smallint：2个字节（小整数）<br>mediumint：3个字节（中等大小的整数）<br><strong>int（integer）：4个字节（普通大小整数）</strong><br><strong>bigint：8个字节（大整数）</strong></p><h2 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h2><p>float：4个字节，单精度（最多5位小数）<br><strong>double：8个字节，双精度（最多16位小数）</strong></p><h2 id="定点数类型"><a href="#定点数类型" class="headerlink" title="定点数类型"></a>定点数类型</h2><p>decimal：定点数类型。底层实际上采用字符串的形式存储数字。<br>语法：decimal(m, d)<br>例如：decimal(3, 2) 表示3个有效数字，2个小数。（有效数字最多65个，小数位最多30个）</p><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><p>year：1个字节，只存储年，格式YYYY<br>time：3个字节，只存储时间，格式HH:MM:SS / HHMMSS<br>date：3个字节，只存储年月日，格式：YYYY-MM-DD<br>datetime：8个字节，存储年月日+时分秒，格式：YYYY-MM-DD HH:MM:SS（从公元1000年<del>公元9999年）<br>timestamp：4个字节，存储年月日+时分秒，格式：YYYY-MM-DD HH:MM:SS（从公元1980年</del>公元2040年）或者格式为 YYYYMMDDHHMMSS（采用这种格式不需要使用单引号，当然你使用单引号也可以）</p><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p><strong>char(m)：</strong>m长度是0~255个字符。<br>固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。m表示列的长度，范围是 0～255 个字符。<br>例如，CHAR(4) 定义了一个固定长度的字符串列，包含的字符个数最大为 4。当插入的字符长度大于4，则报错（除非超过4个长度之后都是空格字符，则空格字符会自动被删除用来保证插入的成功）。</p><h3 id="varchar"><a href="#varchar" class="headerlink" title="varchar"></a>varchar</h3><p><strong>varchar(m)：</strong>m长度是0~16383个字符<br>长度可变的字符串。varchar 的最大实际长度由最长的行的大小和使用的字符集确定，而实际占用的空间为字符串的实际长度加 1。<br>例如，varchar(50) 定义了一个最大长度为 50 的字符串，如果插入的字符串只有 10 个字符，则实际存储的字符串为 10 个字符和一个字符串结束字符。varchar在值保存和检索时尾部的空格仍保留。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701072008930.png"></p><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p><strong>text类型：</strong></p><ul><li>tinytext 表示长度为 255字符的 TEXT 列。</li><li>text 表示长度为 65535字符的 TEXT 列。</li><li>mediumtext 表示长度为 16777215字符的 TEXT 列。</li><li>longtext 表示长度为 4294967295 或 4GB 字符的 TEXT 列。<h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3></li></ul><p><strong>enum类型：</strong></p><ul><li><p>语法：&lt;字段名&gt; enum(‘值1’,’值2’,…)</p></li><li><p>该字段插入值时，只能是指定的枚举值。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701080656297.png" alt="image-20250701080656297"></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3></li></ul><p><strong>set类型：</strong></p><ul><li><p>语法：&lt;字段名&gt; set(‘值1’,’值2’,’值3’,…)   注意：值不可重复。</p></li><li><p>该字段插入值时，只能是指定的值。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701080722000.png" alt="image-20250701080722000"></p></li></ul><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><p>BLOB（Binary Large Object）类型：二进制大对象，可以存储图片、声音、视频等文件。</p><ul><li>blob：小的，最大长度65535个字节</li><li>mediumblob：中等的，最大长度16777215个字节</li><li>longblob：大的，最大长度4GB的字节<h1 id="增删改表结构DDL"><a href="#增删改表结构DDL" class="headerlink" title="增删改表结构DDL"></a>增删改表结构DDL</h1><h2 id="创建一个学生表"><a href="#创建一个学生表" class="headerlink" title="创建一个学生表"></a>创建一个学生表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">bigint</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  age <span class="hljs-built_in">int</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'年龄'</span><br>);<br></code></pre></td></tr></tbody></table></figure><h2 id="查看建表语句"><a href="#查看建表语句" class="headerlink" title="查看建表语句"></a>查看建表语句</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></tbody></table></figure><h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">rename</span> 新表名;<br></code></pre></td></tr></tbody></table></figure><h2 id="新增字段"><a href="#新增字段" class="headerlink" title="新增字段"></a>新增字段</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> 字段名 数据类型;<br></code></pre></td></tr></tbody></table></figure><h2 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">change</span> 旧字段名 新字段名 数据类型;<br></code></pre></td></tr></tbody></table></figure><h2 id="修改字段数据类型"><a href="#修改字段数据类型" class="headerlink" title="修改字段数据类型"></a>修改字段数据类型</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">modify</span> <span class="hljs-keyword">column</span> 字段名 数据类型;<br></code></pre></td></tr></tbody></table></figure><h2 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> 字段名;<br></code></pre></td></tr></tbody></table></figure></li></ul><h1 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h1><p>当我们对表中的数据进行增删改的时候，称它为DML语句。（数据操纵语言），主要包括：insert、delete、update</p><h2 id="insert-增"><a href="#insert-增" class="headerlink" title="insert 增"></a>insert 增</h2><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,...) <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3</span>,...);<br></code></pre></td></tr></tbody></table></figure><p>表名后面的小括号当中的字段名如果省略掉，表示自动将所有字段都列出来了，并且字段的顺序和建表时的顺序一致。<br>一般为了可读性强，建议把字段名写上。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3</span>,...);<br></code></pre></td></tr></tbody></table></figure><p>一次可以插入多条记录：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_stu(<span class="hljs-keyword">no</span>,<span class="hljs-keyword">name</span>,age) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">'jack'</span>,<span class="hljs-number">20</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">'lucy'</span>,<span class="hljs-number">30</span>);<br></code></pre></td></tr></tbody></table></figure><h2 id="delete-删"><a href="#delete-删" class="headerlink" title="delete 删"></a>delete 删</h2><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 将所有记录全部删除</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名;<br><br><span class="hljs-comment"># 删除符合条件的记录</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件;<br></code></pre></td></tr></tbody></table></figure><p>以上的删除属于DML的方式删除，这种删除的数据是可以通过事务回滚的方式重新恢复的，但是删除的效率较低。（这种删除是支持事务的。）<br>另外还有一种删除表中数据的方式，但是这种方式不支持事务，不可以回滚，删了之后数据是永远也找不回来了。这种删除叫做：表被截断。<br>注意：这个语句删除效率非常高，巨大的表，瞬间干掉所有数据。但不可恢复。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></tbody></table></figure><h2 id="update-改"><a href="#update-改" class="headerlink" title="update 改"></a>update 改</h2><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span>=值<span class="hljs-number">1</span>, 字段名<span class="hljs-number">2</span>=值<span class="hljs-number">2</span>, 字段名<span class="hljs-number">3</span>=值<span class="hljs-number">3</span> <span class="hljs-keyword">where</span> 条件;<br></code></pre></td></tr></tbody></table></figure><p>如果没有更新条件的话，所有记录全部更新。</p><h1 id="约束constraint"><a href="#约束constraint" class="headerlink" title="约束constraint"></a>约束constraint</h1><p>创建表时，可以给表的字段添加约束，可以保证数据的完整性、有效性。比如大家上网注册用户时常见的：用户名不能为空。对不起，用户名已存在。等提示信息。<br>约束通常包括：</p><ul><li>非空约束：not null</li><li>检查约束：check</li><li>唯一性约束：unique</li><li>主键约束：primary key</li><li>外键约束：foreign key<h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2>语法格式：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>  age <span class="hljs-built_in">int</span><br>);<br></code></pre></td></tr></tbody></table></figure>name字段不能为空。插入数据时如果没有给name指定值，则报错。</li></ul><h2 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  age <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">check</span>(age &gt; <span class="hljs-number">18</span>)<br>);<br></code></pre></td></tr></tbody></table></figure><h2 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h2><p>语法格式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  email <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">unique</span><br>);<br></code></pre></td></tr></tbody></table></figure><p>email字段设置为唯一性，唯一性的字段值是可以为NULL的。但不能重复。以上在字段后面添加的约束，叫做列级约束。<br>当然，添加约束还有另一种方式：表级约束：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  email <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  <span class="hljs-keyword">unique</span>(email)<br>);<br></code></pre></td></tr></tbody></table></figure><p>使用表级约束可以为多个字段添加联合唯一。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  email <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  <span class="hljs-keyword">unique</span>(<span class="hljs-keyword">name</span>,email)<br>);<br></code></pre></td></tr></tbody></table></figure><p>创建约束时也可以给约束起名字，将来可以通过约束的名字来删除约束：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_stu(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  email <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  <span class="hljs-keyword">constraint</span> t_stu_name_email_unique <span class="hljs-keyword">unique</span>(<span class="hljs-keyword">name</span>,email)<br>);<br></code></pre></td></tr></tbody></table></figure><p>所有的约束都存储在一个系统表当中：table_constraints。这个系统表在这个数据库当中：information_schema</p><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><ol><li><p>主键：primary key，简称PK</p></li><li><p>主键约束的字段不能为NULL，并且不能重复。</p></li><li><p>任何一张表都应该有主键，没有主键的表可以视为无效表。</p></li><li><p>主键值是这行记录的身份证号，是唯一标识。在数据库表中即使两条数据一模一样，但由于主键值不同，我们也会认为是两条完全的不同的数据。</p></li><li><p>主键分类：</p><ol><li>根据字段数量分类：<ol><li>单一主键（1个字段作为主键）==&gt;建议的</li><li>复合主键（2个或2个以上的字段作为主键）</li></ol></li><li>根据业务分类：<ol><li>自然主键（主键和任何业务都无关，只是一个单纯的自然数据）===&gt;建议的</li><li>业务主键（主键和业务挂钩，例如：银行卡账号作为主键）</li></ol></li></ol></li><li><p>单一主键（建议使用这种方式）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br>  <span class="hljs-keyword">id</span> <span class="hljs-built_in">bigint</span> primary <span class="hljs-keyword">key</span>,<br>  sno <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">unique</span>,<br>  sname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span><br>)<br></code></pre></td></tr></tbody></table></figure></li><li><p>复合主键（很少用，了解）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_user(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  age <span class="hljs-built_in">int</span>,<br>  primary <span class="hljs-keyword">key</span>(<span class="hljs-keyword">no</span>,<span class="hljs-keyword">name</span>)<br>);<br></code></pre></td></tr></tbody></table></figure></li><li><p>主键自增：既然主键值是一个自然的数字，mysql为主键值提供了一种自增机制，不需要我们程序员维护，mysql自动维护该字段</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_vip(<br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span> auto_increment,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>)<br>);<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><ol><li>有这样一个需求：要求设计表，能够存储学生以及学校信息。<ol><li>第一种方案：一张表</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071955954.png"><br>这种方式会导致数据冗余，浪费空间。</p><ol start="2"><li>第二种方案：两张表：一张存储学生，一张存储学校</li></ol><p>t_school 表<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071952148.png"><br>t_student 表<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071948405.png"><br>如果采用以上两张表存储数据，对于学生表来说，sno这个字段的值是不能随便填的，这个sno是学校编号，必须要求这个字段中的值来自学校表的sno。<br>为了达到要求，此时就必须要给t_student表的sno字段添加外键约束了。</p><ol start="2"><li>外键约束：foreign key，简称FK。</li><li>添加了外键约束的字段中的数据必须来自其他字段，不能随便填。</li><li>假设给a字段添加了外键约束，要求a字段中的数据必须来自b字段，b字段不一定是主键，但至少要有唯一性。</li><li>外键约束可以给单个字段添加，叫做单一外键。也可以给多个字段联合添加，叫做复合外键。复合外键很少用。</li><li>a表如果引用b表中的数据，可以把b表叫做父表，把a表叫做子表。<ol><li>创建表时，先创建父表，再创建子表。</li><li>插入数据时，先插入父表，在插入子表。</li><li>删除数据时，先删除子表，再删除父表。</li><li>删除表时，先删除子表，再删除父表。</li></ol></li><li>如何添加外键：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_school( <br>  sno <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>, <br>  sname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <br>); <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student( <br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>, <br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>), <br>  age <span class="hljs-built_in">int</span>, <br>  sno <span class="hljs-built_in">int</span>, <br>  <span class="hljs-keyword">constraint</span> t_school_sno_fk <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(sno) <span class="hljs-keyword">references</span> t_school(sno) <br>);<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="8"><li>级联删除</li></ol><p>创建子表时，外键可以添加：on delete cascade，这样在删除父表数据时，子表会级联删除。谨慎使用。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student( <br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>, <br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>), <br>  age <span class="hljs-built_in">int</span>, <br>  sno <span class="hljs-built_in">int</span>, <br>  <span class="hljs-keyword">constraint</span> t_school_sno_fk <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(sno) <span class="hljs-keyword">references</span> t_school(sno) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">cascade</span> <br>);<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">###删除约束</span><br>alert table t_student <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> t_student_sno_fk;<br><span class="hljs-comment">###添加约束</span><br>alert table t_student add constraint t_student_sno_fk foreign key(sno) references t_school(sno) on <span class="hljs-keyword">delete</span> <span class="hljs-keyword">cascade</span>;<br></code></pre></td></tr></tbody></table></figure><ol start="9"><li><p>级联更新 </p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student( <br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>, <br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>), <br>  age <span class="hljs-built_in">int</span>, <br>  sno <span class="hljs-built_in">int</span>, <br>  <span class="hljs-keyword">constraint</span> t_school_sno_fk <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(sno) <span class="hljs-keyword">references</span> t_school(sno) <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">cascade</span> <br>);<br></code></pre></td></tr></tbody></table></figure></li><li><p>级联置空</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student( <br>  <span class="hljs-keyword">no</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span>, <br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>), <br>  age <span class="hljs-built_in">int</span>, <br>  sno <span class="hljs-built_in">int</span>, <br>  <span class="hljs-keyword">constraint</span> t_school_sno_fk <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(sno) <span class="hljs-keyword">references</span> t_school(sno) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">set</span> <span class="hljs-literal">null</span> <br>);<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h1&gt;&lt;p&gt;语法格式：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; 表名(&lt;br&gt;  字段名&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 数据类型,&lt;br&gt;  字段名&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 数据类型,&lt;br&gt;  字段名&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; 数据类型,&lt;br&gt;  ......&lt;br&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如：创建学生表&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; t_student(&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;,&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;varchar&lt;/span&gt;,&lt;br&gt;  gender &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;br&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;插入数据&quot;&gt;&lt;a href=&quot;#插入数据&quot; class=&quot;headerlink&quot; title=&quot;插入数据&quot;&gt;&lt;/a&gt;插入数据&lt;/h1&gt;&lt;p&gt;语法格式：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; 表名(字段名&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, 字段名&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, 字段名&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,......) &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (值&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,值&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,值&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,......);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字段名和值要一一对应。类型要一一对应，数量要一一对应。&lt;br&gt;字段名也可以省略，如果字段名省略就表示把所有字段名都写上去了，并且顺序和建表时的顺序相同。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://xiaofanshutu.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL数据库概述</title>
    <link href="https://xiaofanshutu.github.io/posts/ca9a1c2c.html"/>
    <id>https://xiaofanshutu.github.io/posts/ca9a1c2c.html</id>
    <published>2025-06-29T23:08:23.981Z</published>
    <updated>2025-06-29T23:37:55.231Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h1><ul><li>数据库是一门独立的学科，只要是做软件开发的，数据库都要学。</li><li>数据库（电子化的文件柜）是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</li><li>它的存储空间很大，可以存放百万条、千万条、上亿条数据。</li><li>数据库并不是随意地将数据进行存放，是有一定的规则的，否则查询的效率会很低。</li><li>当今世界是一个充满着数据的互联网世界，充斥着大量的数据。即这个互联网世界就是数据世界。数据的来源有很多，比如出行记录、消费记录、浏览的网页、发送的消息等等。除了文本类型的数据，图像、音乐、声音都是数据。</li><li>数据库对应的英文单词是DataBase，简称DB。</li></ul><h1 id="数据库类型"><a href="#数据库类型" class="headerlink" title="数据库类型"></a>数据库类型</h1><ul><li>关系型数据库<ul><li>关系型数据库是依据关系模型来创建的数据库。所谓关系模型就是“一对一、一对多、多对多”等关系模型，关系模型就是指二维表格模型，因而一个关系型数据库就是由二维表及其之间的联系组成的一个数据组织。</li><li>关系型数据可以很好地存储一些关系模型的数据，比如一个老师对应多个学生的数据（“多对多”），一本书对应多个作者（“一对多”），一本书对应一个出版日期（“一对一”）。</li><li>关系模型包括数据结构（数据存储的问题，二维表）、操作指令集合（SQL语句）、完整性约束(表内数据约束、表与表之间的约束)。</li></ul></li><li>非关系型数据库（NoSQL）<ul><li>NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。</li><li>NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。NoSQL最常见的解释是“non-relational”， “Not Only SQL”也被很多人接受。</li><li>NoSQL仅仅是一个概念，泛指非关系型的数据库，区别于关系数据库，它们不保证关系数据的ACID特性。NoSQL是一项全新的数据库革命性运动，其拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</li><li>NoSQL有如下优点：易扩展，NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间也在架构的层面上带来了可扩展的能力。大数据量，高性能，NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。<h1 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h1></li></ul></li></ul><ul><li>数据库管理系统（Database Management System，简称DBMS）是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能。</li><li>数据库管理系统是数据库系统的核心组成部分，主要完成对数据库的操作与管理功能，实现数据库对象的创建、数据库存储数据的查询、添加、修改与删除操作和数据库的用户管理、权限管理等。</li><li>常见的数据库管理系统有：MySQL、Oracle、DB2、MS SQL Server、SQLite、PostgreSQL、Sybase等。</li></ul><h1 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h1><ul><li>结构化查询语言（Structured Query Language）简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</li><li>结构化查询语言是高级的非过程化编程语言，允许用户在高层数据结构上工作。它不要求用户指定对数据的存放方法，也不需要用户了解具体的数据存放方式，所以具有完全不同底层结构的不同数据库系统, 可以使用相同的结构化查询语言作为数据输入与管理的接口。结构化查询语言语句可以嵌套，这使它具有极大的灵活性和强大的功能。</li><li>SQL的分类<ul><li>DQL<ul><li>数据查询语言（Data Query Language, DQL）是SQL语言中，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有FROM，WHERE，GROUP BY，HAVING和ORDER BY。这些DQL保留字常与其他类型的SQL语句一起使用。</li></ul></li><li>DDL<ul><li>数据定义语言 (Data Definition Language, DDL) 是SQL语言集中，负责数据结构定义与数据库对象定义的语言，由CREATE、ALTER与DROP三个语法所组成，最早是由 Codasyl (Conference on Data Systems Languages) 数据模型开始，现在被纳入 SQL 指令中作为其中一个子集。</li></ul></li><li>DML<ul><li>数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除。</li></ul></li><li>DCL<ul><li>数据控制语言 (Data Control Language) 在SQL语言中，是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。DCL以控制用户的访问权限为主，GRANT为授权语句，对应的REVOKE是撤销授权语句。</li></ul></li><li>TPL<ul><li>数据事务管理语言（Transaction Processing Language）它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。</li></ul></li><li>CCL<ul><li>指针控制语言（Cursor Control Language），它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</li></ul></li></ul></li><li>DBMS、SQL、DB之间的关系<ul><li>DBMS通过执行SQL来操作DB中的数据。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;什么是数据库&quot;&gt;&lt;a href=&quot;#什么是数据库&quot; class=&quot;headerlink&quot; title=&quot;什么是数据库&quot;&gt;&lt;/a&gt;什么是数据库&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;数据库是一门独立的学科，只要是做软件开发的，数据库都要学。&lt;/li&gt;
&lt;li&gt;数据库（电子化的文件柜）是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。&lt;/li&gt;
&lt;li&gt;它的存储空间很大，可以存放百万条、千万条、上亿条数据。&lt;/li&gt;
&lt;li&gt;数据库并不是随意地将数据进行存放，是有一定的规则的，否则查询的效率会很低。&lt;/li&gt;
&lt;li&gt;当今世界是一个充满着数据的互联网世界，充斥着大量的数据。即这个互联网世界就是数据世界。数据的来源有很多，比如出行记录、消费记录、浏览的网页、发送的消息等等。除了文本类型的数据，图像、音乐、声音都是数据。&lt;/li&gt;
&lt;li&gt;数据库对应的英文单词是DataBase，简称DB。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;数据库类型&quot;&gt;&lt;a href=&quot;#数据库类型&quot; class=&quot;headerlink&quot; title=&quot;数据库类型&quot;&gt;&lt;/a&gt;数据库类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;关系型数据库&lt;ul&gt;
&lt;li&gt;关系型数据库是依据关系模型来创建的数据库。所谓关系模型就是“一对一、一对多、多对多”等关系模型，关系模型就是指二维表格模型，因而一个关系型数据库就是由二维表及其之间的联系组成的一个数据组织。&lt;/li&gt;
&lt;li&gt;关系型数据可以很好地存储一些关系模型的数据，比如一个老师对应多个学生的数据（“多对多”），一本书对应多个作者（“一对多”），一本书对应一个出版日期（“一对一”）。&lt;/li&gt;
&lt;li&gt;关系模型包括数据结构（数据存储的问题，二维表）、操作指令集合（SQL语句）、完整性约束(表内数据约束、表与表之间的约束)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非关系型数据库（NoSQL）&lt;ul&gt;
&lt;li&gt;NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。&lt;/li&gt;
&lt;li&gt;NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。NoSQL最常见的解释是“non-relational”， “Not Only SQL”也被很多人接受。&lt;/li&gt;
&lt;li&gt;NoSQL仅仅是一个概念，泛指非关系型的数据库，区别于关系数据库，它们不保证关系数据的ACID特性。NoSQL是一项全新的数据库革命性运动，其拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。&lt;/li&gt;
&lt;li&gt;NoSQL有如下优点：易扩展，NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间也在架构的层面上带来了可扩展的能力。大数据量，高性能，NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。&lt;h1 id=&quot;数据库管理系统&quot;&gt;&lt;a href=&quot;#数据库管理系统&quot; class=&quot;headerlink&quot; title=&quot;数据库管理系统&quot;&gt;&lt;/a&gt;数据库管理系统&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;数据库管理系统（Database Management System，简称DBMS）是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能。&lt;/li&gt;
&lt;li&gt;数据库管理系统是数据库系统的核心组成部分，主要完成对数据库的操作与管理功能，实现数据库对象的创建、数据库存储数据的查询、添加、修改与删除操作和数据库的用户管理、权限管理等。&lt;/li&gt;
&lt;li&gt;常见的数据库管理系统有：MySQL、Oracle、DB2、MS SQL Server、SQLite、PostgreSQL、Sybase等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;什么是SQL&quot;&gt;&lt;a href=&quot;#什么是SQL&quot; class=&quot;headerlink&quot; title=&quot;什么是SQL&quot;&gt;&lt;/a&gt;什么是SQL&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;结构化查询语言（Structured Query Language）简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。&lt;/li&gt;
&lt;li&gt;结构化查询语言是高级的非过程化编程语言，允许用户在高层数据结构上工作。它不要求用户指定对数据的存放方法，也不需要用户了解具体的数据存放方式，所以具有完全不同底层结构的不同数据库系统, 可以使用相同的结构化查询语言作为数据输入与管理的接口。结构化查询语言语句可以嵌套，这使它具有极大的灵活性和强大的功能。&lt;/li&gt;
&lt;li&gt;SQL的分类&lt;ul&gt;
&lt;li&gt;DQL&lt;ul&gt;
&lt;li&gt;数据查询语言（Data Query Language, DQL）是SQL语言中，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有FROM，WHERE，GROUP BY，HAVING和ORDER BY。这些DQL保留字常与其他类型的SQL语句一起使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DDL&lt;ul&gt;
&lt;li&gt;数据定义语言 (Data Definition Language, DDL) 是SQL语言集中，负责数据结构定义与数据库对象定义的语言，由CREATE、ALTER与DROP三个语法所组成，最早是由 Codasyl (Conference on Data Systems Languages) 数据模型开始，现在被纳入 SQL 指令中作为其中一个子集。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DML&lt;ul&gt;
&lt;li&gt;数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DCL&lt;ul&gt;
&lt;li&gt;数据控制语言 (Data Control Language) 在SQL语言中，是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。DCL以控制用户的访问权限为主，GRANT为授权语句，对应的REVOKE是撤销授权语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TPL&lt;ul&gt;
&lt;li&gt;数据事务管理语言（Transaction Processing Language）它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CCL&lt;ul&gt;
&lt;li&gt;指针控制语言（Cursor Control Language），它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DBMS、SQL、DB之间的关系&lt;ul&gt;
&lt;li&gt;DBMS通过执行SQL来操作DB中的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    <category term="MySQL" scheme="https://xiaofanshutu.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL数据库安装</title>
    <link href="https://xiaofanshutu.github.io/posts/1bbb3b3c.html"/>
    <id>https://xiaofanshutu.github.io/posts/1bbb3b3c.html</id>
    <published>2025-06-29T23:08:23.981Z</published>
    <updated>2025-06-30T14:07:52.359Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL概述"><a href="#MySQL概述" class="headerlink" title="MySQL概述"></a>MySQL概述</h1><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630215621242.png" alt="image-20250630215621242"></p><ul><li>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，MySQL AB公司被Sun公司收购，Sun公司又被Oracle公司收购，目前属于Oracle公司。</li><li>MySQL是目前最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的RDBMS应用软件之一。 国内淘宝网站就使用的是MySQL集群。</li><li>MySQL特点<ul><li>MySQL有开源版本和收费版本，你使用开源版本是不收费的。</li><li>MySQL支持大型数据库，可以处理上千万记录的大型数据库。</li><li>MySQL使用标准的SQL数据库语言形式。</li><li>MySQL在很多系统上面都支持。</li><li>MySQL对Java，C都有很好的支持，当然其他的语言也支持比如Python、PHP。</li><li>MySQL是可以定制的，采用了GPL协议，你可以修改源码来开发自己的MySQL系统。</li></ul></li></ul><h1 id="MySQL的下载"><a href="#MySQL的下载" class="headerlink" title="MySQL的下载"></a>MySQL的下载</h1><h2 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h2><ul><li>第一步：打开MySQL官网<a href="https://www.mysql.com/">https://www.mysql.com/</a></li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630215717943.png" alt="image-20250630215717943"></p><ul><li>第二步：点击”DOWNLOADS”</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220059394.png" alt="image-20250630220059394"></p><ul><li>第三步：当前页继续下拉，直到找到下图链接</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220645283.png" alt="image-20250630220645283"></p><ul><li>第四步：点击上图链接，进入下面页面，其中“MySQL Community Server”是解压版mysql，“MySQL Installer for Windows”是安装版，这里我们选择解压版</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220635582.png" alt="image-20250630220635582"></p><ul><li>第五步：点击上图“MySQL Community Server”</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220628384.png" alt="image-20250630220628384"></p><ul><li>第六步：点击上图第1个“Download”</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220621251.png" alt="image-20250630220621251"></p><ul><li>第七步：点击上图“No thanks, just start my download.”开始下载，直到下载完毕。</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220612749.png" alt="image-20250630220612749"></p><h2 id="网盘下载"><a href="#网盘下载" class="headerlink" title="网盘下载"></a>网盘下载</h2><p>链接：<a href="https://pan.baidu.com/s/1lRWC069K8GE-8rxr259ArQ?pwd=2009">https://pan.baidu.com/s/1lRWC069K8GE-8rxr259ArQ?pwd=2009</a> 提取码：2009</p><h1 id="MySQL安装与配置"><a href="#MySQL安装与配置" class="headerlink" title="MySQL安装与配置"></a>MySQL安装与配置</h1><ul><li>将下载的zip压缩包解压，我这里直接解压到C盘的根目录下</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220604822.png" alt="image-20250630220604822"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220548051.png" alt="image-20250630220548051"></p><p>mysql的根目录为：C:\mysql-8.0.24-winx64</p><ul><li>将C:\mysql-8.0.24-winx64\bin目录配置到环境变量path当中</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220536490.png" alt="image-20250630220536490"></p><ul><li>初始化data目录</li></ul><p>使用管理员身份打开dos命令窗口（按win键，输入cmd，点击管理员身份运行）</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220529460.png" alt="image-20250630220529460"></p><p>cd命令切换到mysql的bin目录下，执行mysqld –initialize –console进行data目录初始化，此时会在控制台生成一个随机密码，下图红框中就是随机密码</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220520282.png" alt="image-20250630220520282"></p><p>技巧：左键选中密码，直接点击右键，此时密码已经复制到剪贴板中了，<br>然后随便找一个文件，将密码粘贴到文件中保存起来。</p><ul><li>安装MySQL服务：cd命令切换到bin目录下，执行命令mysqld -install</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220508206.png" alt="image-20250630220508206"></p><ul><li>查看mysql服务名称：此电脑-右键-管理-服务和应用程序-服务-找MySQL服务，如下图mysql服务名称：MySQL</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220501421.png" alt="image-20250630220501421"></p><ul><li>启动MySQL服务：net start mysql，注意start后面是mysql服务的名称</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220453540.png" alt="image-20250630220453540"></p><p>停止mysql服务的命令：net stop mysql<br>注意：启停mysql服务也可以在上一步的图中点击右键进行启停服务。</p><ul><li>登录mysql：输入mysql -uroot -p，然后回车，输入刚才的随机密码，然后回车，看到下图表示成功登录mysql</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220441823.png" alt="image-20250630220441823"></p><ul><li>修改MySQL的root账户密码：ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘新密码’;</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220435007.png" alt="image-20250630220435007"></p><ul><li>使用新密码登录mysql</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220426928.png" alt="image-20250630220426928"></p><h1 id="MySQL卸载"><a href="#MySQL卸载" class="headerlink" title="MySQL卸载"></a>MySQL卸载</h1><ul><li>停止mysql的服务</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220419488.png" alt="image-20250630220419488"></p><ul><li>删除mysql服务</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220410118.png" alt="image-20250630220410118"></p><ul><li>删除mysql的目录</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220402191.png" alt="image-20250630220402191"></p><h1 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h1><h2 id="本地登录"><a href="#本地登录" class="headerlink" title="本地登录"></a>本地登录</h2><ul><li>如果mysql的服务是启动的，打开dos命令窗口，输入：mysql -uroot -p，回车，然后输入root账户的密码</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220345579.png" alt="image-20250630220345579"></p><p>解释“mysql -uroot -p”：<br>mysql是一个命令，在bin目录下，对应的命令文件是mysql.exe，如果将bin目录配置到环境<br>变量path中，才可以在以上位置使用该命令。<br>-uroot 表示登录的用户是root，u实际上是user单词的首字母。<br>-p 表示登录时使用密码，p实际上是password单词的首字母。</p><ul><li>也可以将密码以明文的形式写到-p后面，这样做可能会导致你的密码泄露</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220335977.png" alt="image-20250630220335977"></p><h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><ul><li>假设mysql安装在A机器上，现在你要在B机器上连接mysql数据库，此时需要使用远程登录，远程登录时加上远程机器的ip地址即可</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220318198.png" alt="image-20250630220318198"></p><p>-h中的h实际上是host单词的首字母。在-h后面的是远程计算机的ip地址。<br>127.0.0.1是计算机默认的本机IP地址。<br>127.0.0.1又可以写作：localhost，他们是等效的。<br>注意：mysql默认情况下root账户是不支持远程登录的，其实这是一种安全策略，<br>为了保护root账户的安全。如果希望root账户支持远程登录，这是需要进行设置的。</p><ul><li><p>mysql8 开放root账户远程登录权限（危险动作）</p><p>第一步：现在本地使用root账户登录mysql</p><p>第二步：use mysql;</p><p>第三步：update user set host = ‘%’ where user = ‘root’;</p><p>第四步：flush privileges;</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;MySQL概述&quot;&gt;&lt;a href=&quot;#MySQL概述&quot; class=&quot;headerlink&quot; title=&quot;MySQL概述&quot;&gt;&lt;/a&gt;MySQL概述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630215621242.png&quot; alt=&quot;image-20250630215621242&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，MySQL AB公司被Sun公司收购，Sun公司又被Oracle公司收购，目前属于Oracle公司。&lt;/li&gt;
&lt;li&gt;MySQL是目前最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的RDBMS应用软件之一。 国内淘宝网站就使用的是MySQL集群。&lt;/li&gt;
&lt;li&gt;MySQL特点&lt;ul&gt;
&lt;li&gt;MySQL有开源版本和收费版本，你使用开源版本是不收费的。&lt;/li&gt;
&lt;li&gt;MySQL支持大型数据库，可以处理上千万记录的大型数据库。&lt;/li&gt;
&lt;li&gt;MySQL使用标准的SQL数据库语言形式。&lt;/li&gt;
&lt;li&gt;MySQL在很多系统上面都支持。&lt;/li&gt;
&lt;li&gt;MySQL对Java，C都有很好的支持，当然其他的语言也支持比如Python、PHP。&lt;/li&gt;
&lt;li&gt;MySQL是可以定制的，采用了GPL协议，你可以修改源码来开发自己的MySQL系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;MySQL的下载&quot;&gt;&lt;a href=&quot;#MySQL的下载&quot; class=&quot;headerlink&quot; title=&quot;MySQL的下载&quot;&gt;&lt;/a&gt;MySQL的下载&lt;/h1&gt;&lt;h2 id=&quot;官网下载&quot;&gt;&lt;a href=&quot;#官网下载&quot; class=&quot;headerlink&quot; title=&quot;官网下载&quot;&gt;&lt;/a&gt;官网下载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;第一步：打开MySQL官网&lt;a href=&quot;https://www.mysql.com/&quot;&gt;https://www.mysql.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630215717943.png&quot; alt=&quot;image-20250630215717943&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二步：点击”DOWNLOADS”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630220059394.png&quot; alt=&quot;image-20250630220059394&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://xiaofanshutu.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL初始化数据</title>
    <link href="https://xiaofanshutu.github.io/posts/f4fc1fe7.html"/>
    <id>https://xiaofanshutu.github.io/posts/f4fc1fe7.html</id>
    <published>2025-06-29T23:08:23.981Z</published>
    <updated>2025-06-30T14:17:31.084Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL命令行基本命令"><a href="#MySQL命令行基本命令" class="headerlink" title="MySQL命令行基本命令"></a>MySQL命令行基本命令</h1><ol><li>列出当前数据库管理系统中有哪些数据库。<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221212047.png" alt="image-20250630221212047"></p><ol start="2"><li><p>创建数据库，起名bjpowernode。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> bjpowernode1;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221358468.png" alt="image-20250630221358468"></p></li><li><p> 使用bjpowernode数据库。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">use</span> bjpowernode;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221518167.png" alt="image-20250630221518167"></p></li></ol><ol start="4"><li><p>查看当前用的是哪个数据库。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>();<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221529447.png" alt="image-20250630221529447"></p></li><li><p> 查看当前数据库中有哪些表。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221541925.png" alt="image-20250630221541925"></p></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221552087.png" alt="image-20250630221552087"></p><ol start="6"><li><p> 删除数据库bjpowernode。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> bjpowernode;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221610116.png" alt="image-20250630221610116"></p></li><li><p>退出mysql</p><ol><li>exit</li><li>quit</li><li>ctrl + c</li></ol></li><li><p>查看当前mysql版本</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">version</span>();<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221615405.png" alt="image-20250630221615405"><br>还可以使用mysql.exe命令来查看版本信息（在没有登录mysql之前使用）：mysql –version<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221633302.png" alt="image-20250630221633302"></p></li></ol><h1 id="数据库表的概述"><a href="#数据库表的概述" class="headerlink" title="数据库表的概述"></a>数据库表的概述</h1><table><thead><tr><th>name</th><th>age</th><th>gender</th></tr></thead><tbody><tr><td>张三</td><td>20</td><td>男</td></tr><tr><td>李四</td><td>22</td><td>女</td></tr></tbody></table><ul><li>以上就是数据库表格的直观展示形式。</li><li>表格英文单词table。</li><li>表是数据库存储数据的基本单元，数据库存储数据的时候，是将数据存储在表对象当中的。为什么将数据存储在表中呢？因为表存储数据非常直观。</li><li>任何一张表都有行和列：<ul><li>行：记录（一行就是一条数据）</li><li>列：字段（name字段、age字段、gender字段）</li></ul></li><li>每个字段包含以下属性：<ul><li>字段名：name、age、gender都是字段的名字</li><li>字段的数据类型：每个字段都有数据类型，比如：字符类型、数字类型、日期类型</li><li>字段的数据长度：每个字段有可能会有长度的限制</li><li>字段的约束：比如某些字段要求该字段下的数据不能重复、不能为空等，用来保证表格中数据合法有效</li></ul></li></ul><h1 id="初始化测试数据"><a href="#初始化测试数据" class="headerlink" title="初始化测试数据"></a>初始化测试数据</h1><p>为了方便后面内容的学习，老师提前准备了表以及表中的测试数据，以下是建表并且初始化数据的sql脚本</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> EMP;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> DEPT;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> SALGRADE;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> DEPT(DEPTNO <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> ,<br>DNAME <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">14</span>) ,<br>LOC <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">13</span>),<br>primary <span class="hljs-keyword">key</span> (DEPTNO)<br>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> EMP(EMPNO <span class="hljs-built_in">int</span>(<span class="hljs-number">4</span>)  <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> ,<br>ENAME <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">10</span>),<br>JOB <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">9</span>),<br>MGR <span class="hljs-built_in">INT</span>(<span class="hljs-number">4</span>),<br>HIREDATE <span class="hljs-built_in">DATE</span>  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>SAL <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>COMM <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>primary <span class="hljs-keyword">key</span> (EMPNO),<br>DEPTNO <span class="hljs-built_in">INT</span>(<span class="hljs-number">2</span>) <br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> SALGRADE( GRADE <span class="hljs-built_in">INT</span>,<br>LOSAL <span class="hljs-built_in">INT</span>,<br>HISAL <span class="hljs-built_in">INT</span><br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">10</span>, <span class="hljs-string">'ACCOUNTING'</span>, <span class="hljs-string">'NEW YORK'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">20</span>, <span class="hljs-string">'RESEARCH'</span>, <span class="hljs-string">'DALLAS'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">30</span>, <span class="hljs-string">'SALES'</span>, <span class="hljs-string">'CHICAGO'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">40</span>, <span class="hljs-string">'OPERATIONS'</span>, <span class="hljs-string">'BOSTON'</span>); <br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7369</span>, <span class="hljs-string">'SMITH'</span>, <span class="hljs-string">'CLERK'</span>, <span class="hljs-number">7902</span>,  <span class="hljs-string">'1980-12-17'</span>, <span class="hljs-number">800</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7499</span>, <span class="hljs-string">'ALLEN'</span>, <span class="hljs-string">'SALESMAN'</span>, <span class="hljs-number">7698</span>,  <span class="hljs-string">'1981-02-20'</span>, <span class="hljs-number">1600</span>, <span class="hljs-number">300</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7521</span>, <span class="hljs-string">'WARD'</span>, <span class="hljs-string">'SALESMAN'</span>, <span class="hljs-number">7698</span>,  <span class="hljs-string">'1981-02-22'</span>, <span class="hljs-number">1250</span>, <span class="hljs-number">500</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7566</span>, <span class="hljs-string">'JONES'</span>, <span class="hljs-string">'MANAGER'</span>, <span class="hljs-number">7839</span>,  <span class="hljs-string">'1981-04-02'</span>, <span class="hljs-number">2975</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7654</span>, <span class="hljs-string">'MARTIN'</span>, <span class="hljs-string">'SALESMAN'</span>, <span class="hljs-number">7698</span>,  <span class="hljs-string">'1981-09-28'</span>, <span class="hljs-number">1250</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7698</span>, <span class="hljs-string">'BLAKE'</span>, <span class="hljs-string">'MANAGER'</span>, <span class="hljs-number">7839</span>,  <span class="hljs-string">'1981-05-01'</span>, <span class="hljs-number">2850</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7782</span>, <span class="hljs-string">'CLARK'</span>, <span class="hljs-string">'MANAGER'</span>, <span class="hljs-number">7839</span>,  <span class="hljs-string">'1981-06-09'</span>, <span class="hljs-number">2450</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7788</span>, <span class="hljs-string">'SCOTT'</span>, <span class="hljs-string">'ANALYST'</span>, <span class="hljs-number">7566</span>,  <span class="hljs-string">'1987-04-19'</span>, <span class="hljs-number">3000</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7839</span>, <span class="hljs-string">'KING'</span>, <span class="hljs-string">'PRESIDENT'</span>, <span class="hljs-literal">NULL</span>,  <span class="hljs-string">'1981-11-17'</span>, <span class="hljs-number">5000</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7844</span>, <span class="hljs-string">'TURNER'</span>, <span class="hljs-string">'SALESMAN'</span>, <span class="hljs-number">7698</span>,  <span class="hljs-string">'1981-09-08'</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">0</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7876</span>, <span class="hljs-string">'ADAMS'</span>, <span class="hljs-string">'CLERK'</span>, <span class="hljs-number">7788</span>,  <span class="hljs-string">'1987-05-23'</span>, <span class="hljs-number">1100</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7900</span>, <span class="hljs-string">'JAMES'</span>, <span class="hljs-string">'CLERK'</span>, <span class="hljs-number">7698</span>,  <span class="hljs-string">'1981-12-03'</span>, <span class="hljs-number">950</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7902</span>, <span class="hljs-string">'FORD'</span>, <span class="hljs-string">'ANALYST'</span>, <span class="hljs-number">7566</span>,  <span class="hljs-string">'1981-12-03'</span>, <span class="hljs-number">3000</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">7934</span>, <span class="hljs-string">'MILLER'</span>, <span class="hljs-string">'CLERK'</span>, <span class="hljs-number">7782</span>,  <span class="hljs-string">'1982-01-23'</span>, <span class="hljs-number">1300</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>); <br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">1</span>, <span class="hljs-number">700</span>, <span class="hljs-number">1200</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">2</span>, <span class="hljs-number">1201</span>, <span class="hljs-number">1400</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">3</span>, <span class="hljs-number">1401</span>, <span class="hljs-number">2000</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">4</span>, <span class="hljs-number">2001</span>, <span class="hljs-number">3000</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">5</span>, <span class="hljs-number">3001</span>, <span class="hljs-number">9999</span>); <br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></tbody></table></figure><ul><li>什么是sql脚本：文件名是.sql，并且该文件中编写了大量的SQL语句，执行sql脚本程序就相当于批量执行SQL语句。</li><li>你入职的时候，项目一般都是进展了一部分，多数情况下你进项目组的时候数据库的表以及数据都是有的，项目经理第一天可能会给你一个较大的sql脚本文件，你需要执行这个脚本文件来初始化你的本地数据库。（当然，也有可能数据库是共享的。）</li><li>创建文件：bjpowernode.sql，把以上SQL语句全部复制到sql脚本文件中。</li><li>执行SQL脚本文件，初始化数据库<ul><li>第一步：命令窗口登录mysql</li><li>第二步：创建数据库bjpowernode（如果之前已经创建就不需要再创建了）：create database bjpowernode;</li><li>第三步：使用数据库bjpowernode：use bjpowernode;</li><li>第四步：source命令执行sql脚本，注意：source命令后面是sql脚本文件的绝对路径。</li></ul></li></ul><p>&nbsp;       <img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221644143.png" alt="image-20250630221644143"></p><ul><li>第五步：查看是否初始化成功，执行：show tables;</li></ul><p>&nbsp;       <img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221703872.png" alt="image-20250630221703872"></p><ul><li>使用其他的mysql客户端工具也可以执行sql脚本，比如navicat。使用source命令执行sql脚本的优点：<strong>可支持大文件</strong>。</li></ul><h1 id="熟悉测试数据"><a href="#熟悉测试数据" class="headerlink" title="熟悉测试数据"></a>熟悉测试数据</h1><p>emp dept salgrade三张表分别存储什么信息</p><ul><li>emp：员工信息</li><li>dept：部门信息</li><li>salgrade：工资等级信息</li></ul><p>查看表结构：desc或describe，语法格式：desc或describe +表名<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221713009.png" alt="image-20250630221713009"><br>以上的结果展示的不是表中的数据，而是表的结构。</p><ul><li>Field是字段名</li><li>Type是这个字段的数据类型</li><li>Null是这个字段是否允许为空</li><li>Key是这个字段是否为主键或外键</li><li>Default是这个字段的默认值</li></ul><p>对以上表结构进行解释说明：</p><ul><li>emp表<ul><li>empno：员工编号，int类型（整数），不能为空，主键（主键后期学习约束时会进行说明）</li><li>ename：员工姓名，varchar类型（字符串）</li><li>job：工作岗位，varchar类型</li><li>mgr：上级领导编号，int类型</li><li>hiredate：雇佣日期，date类型（日期类型）</li><li>sal：月薪，double类型（带有浮点的数字）</li><li>comm：补助津贴，double类型</li><li>deptno：部门编号，int类型</li></ul></li><li>dept表<ul><li>deptno：部门编号，int类型，主键</li><li>dname：部门名称，varchar类型</li><li>loc：位置，varchar类型</li></ul></li><li>salgrade表<ul><li>grade：等级，int类型</li><li>losal：最低工资，int类型</li><li>hisal：最高工资，int类型</li></ul></li></ul><p>对于以上表结构要提前了解，后面学习的内容需要你马上反应出：哪个字段是什么意思。<br>查看一下表中的数据，来加深一下印象（以下SQL语句会在后面课程中学习）：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221723278.png" alt="image-20250630221723278"></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;MySQL命令行基本命令&quot;&gt;&lt;a href=&quot;#MySQL命令行基本命令&quot; class=&quot;headerlink&quot; title=&quot;MySQL命令行基本命令&quot;&gt;&lt;/a&gt;MySQL命令行基本命令&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;列出当前数据库管理系统中有哪些数据库。&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;databases&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;




&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221212047.png&quot; alt=&quot;image-20250630221212047&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;创建数据库，起名bjpowernode。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;database&lt;/span&gt; bjpowernode1;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221358468.png&quot; alt=&quot;image-20250630221358468&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt; 使用bjpowernode数据库。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; bjpowernode;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221518167.png&quot; alt=&quot;image-20250630221518167&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;p&gt;查看当前用的是哪个数据库。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;database&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221529447.png&quot; alt=&quot;image-20250630221529447&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt; 查看当前数据库中有哪些表。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;tables&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221541925.png&quot; alt=&quot;image-20250630221541925&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221552087.png&quot; alt=&quot;image-20250630221552087&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;&lt;p&gt; 删除数据库bjpowernode。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;database&lt;/span&gt; bjpowernode;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221610116.png&quot; alt=&quot;image-20250630221610116&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;退出mysql&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;exit&lt;/li&gt;
&lt;li&gt;quit&lt;/li&gt;
&lt;li&gt;ctrl + c&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看当前mysql版本&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;version&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221615405.png&quot; alt=&quot;image-20250630221615405&quot;&gt;&lt;br&gt;还可以使用mysql.exe命令来查看版本信息（在没有登录mysql之前使用）：mysql –version&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221633302.png&quot; alt=&quot;image-20250630221633302&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;数据库表的概述&quot;&gt;&lt;a href=&quot;#数据库表的概述&quot; class=&quot;headerlink&quot; title=&quot;数据库表的概述&quot;&gt;&lt;/a&gt;数据库表的概述&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;th&gt;gender&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;男&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;女&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://xiaofanshutu.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL查询DQL专题</title>
    <link href="https://xiaofanshutu.github.io/posts/5d301c0f.html"/>
    <id>https://xiaofanshutu.github.io/posts/5d301c0f.html</id>
    <published>2025-06-29T23:08:23.976Z</published>
    <updated>2025-06-30T23:15:59.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h1><p>查询是SQL语言的核心，用于表达SQL查询的select查询命令是功能最强也是最为复杂的SQL语句，它的作用就是从数据库中检索数据，并将查询结果返回给用户。 select语句由：select子句(查询内容)、from子句(查询对象)、where子句(查询条件)、order by子句(排序方式)、group by子句(分组方式)等组成。查询语句属于SQL语句中的DQL语句，是所有SQL语句中最为复杂也是最重要的语句，所以必须掌握。接下来我们先从简单查询语句开始学习。</p><h2 id="查一个字段"><a href="#查一个字段" class="headerlink" title="查一个字段"></a>查一个字段</h2><p>查询一个字段说的是：一个表有多列，查询其中的一列。<br>语法格式：select 字段名 from 表名;</p><ul><li>select和from是关键字，不能随便写</li><li><strong>一条SQL语句必须以“;”结尾</strong></li><li><strong>对于SQL语句来说，大小写都可以</strong></li><li>字段名和表名属于标识符，按照表的实际情况填写，不知道字段名的，可以使用desc命令查看表结构</li></ul><p>案例1：查询公司中所有员工编号</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno <span class="hljs-keyword">from</span> emp; <br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221738866.png" alt="image-20250630221738866"><br>案例2：查询公司中所有员工姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ENAME <span class="hljs-keyword">FROM</span> EMP;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221748076.png" alt="image-20250630221748076"></p><p>在mysql命令行客户端中，sql语句没有分号是不会执行的：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221756361.png" alt="image-20250630221756361"><br>末尾加上“;”就执行了：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221805370.png" alt="image-20250630221805370"><br>以上sql虽然以分号结尾之后执行了，但是报错了，错误信息显示：语法错误。<br>假设一个SQL语句在书写过程中出错了，怎么终止这条SQL呢？\c<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221815238.png" alt="image-20250630221815238"></p><ul><li><input disabled="" type="checkbox"> 任务1：查询所有部门名称。</li><li><input disabled="" type="checkbox"> 任务2：查询所有薪资等级。</li></ul><h2 id="查多个字段"><a href="#查多个字段" class="headerlink" title="查多个字段"></a>查多个字段</h2><p>查询多个字段时，在字段名和字段名之间添加“,”即可。<br>语法格式：select 字段名1,字段名2,字段名3 from 表名;<br>案例1：查询员工编号以及员工姓名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno, ename <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221822818.png" alt="image-20250630221822818"></p><p>字段的前后顺序无所谓（只是显示结果列的时候顺序变了)：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, empno <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221830185.png" alt="image-20250630221830185"></p><ul><li><input disabled="" type="checkbox"> 任务1：查询部门编号、部门名称以及位置。</li><li><input disabled="" type="checkbox"> 任务2：查询员工的名字以及工作岗位。</li></ul><h2 id="查所有字段"><a href="#查所有字段" class="headerlink" title="查所有字段"></a>查所有字段</h2><p>查询所有字段的可以将每个字段都列出来查询，也可以采用“*”来代表所有字段<br>案例1：查询员工的所有信息</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221844093.png" alt="image-20250630221844093"><br>案例2：查询所有部门信息</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dept;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070342364.png"><br>采用“*”进行查询存在的缺点：</p><ul><li>select * from dept; 在执行的时候会被解析为 select DEPTNO, DNAME, LOC from dept; 再执行，所以这种效率方面弱一些。</li><li>采用“<em>”的可读性较差，通过“</em>”很难看出都有哪些具体的字段。</li></ul><p>什么时候使用“*”？</p><ul><li><p>这个SQL语句不在项目编码中使用，如果平时自己想快速查看表中所有数据的话，这种写法还是很给力的。</p></li><li><p><input disabled="" type="checkbox">  任务1：查询所有的薪资等级以及每个薪资等级的最低工资和最高工资。</p></li></ul><h2 id="查询时字段可参与数学运算"><a href="#查询时字段可参与数学运算" class="headerlink" title="查询时字段可参与数学运算"></a>查询时字段可参与数学运算</h2><p>在进行查询操作的时候，字段是可以参与数学运算的，例如加减乘除等。<br>案例1：查询每个员工的月薪</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070355554.png"></p><p>案例2：查询每个员工的年薪（月薪 * 12)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070404499.png"></p><ul><li><input disabled="" type="checkbox"> 任务1：查询每个员工月薪加1000之后的月薪</li><li><input disabled="" type="checkbox"> 任务2：查询每个员工月薪加1000之后的年薪</li></ul><h2 id="查询时字段可起别名"><a href="#查询时字段可起别名" class="headerlink" title="查询时字段可起别名"></a>查询时字段可起别名</h2><p>我们借用一下之前的SQL语句</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070414034.png"><br>以上的查询结果列名“sal * 12”可读性较差，是否可以给查询结果的列名进行重命名呢？</p><h3 id="as关键字"><a href="#as关键字" class="headerlink" title="as关键字"></a>as关键字</h3><ul><li>使用as关键字<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-keyword">as</span> yearsal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071552173.png"><br>通过as关键字起别名后，查询结果列显示yearsal，可读性增强。</li></ul><h3 id="省略as关键字"><a href="#省略as关键字" class="headerlink" title="省略as关键字"></a>省略as关键字</h3><ul><li><p>其实as关键字可以省略，只要使用空格即可</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> yearsal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071547735.png"></p></li><li><p>通过以上测试，得知as可以省略，可以使用空格代替as，但如果别名中有空格呢？</p><h3 id="别名中有空格"><a href="#别名中有空格" class="headerlink" title="别名中有空格"></a>别名中有空格</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-keyword">year</span> sal <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071542621.png"><br>可以看出，执行报错了，说语法有问题，这是为什么？分析一下：SQL语句编译器在检查该语句的时候，在year后面遇到了空格，会继续找from关键字，但year后面不是from关键字，所以编译器报错了。怎么解决这个问题？记住：如果别名中有空格的话，可以将这个别名使用双引号或者单引号将其括起来。</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-string">"year sal"</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> <span class="hljs-string">'year sal'</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071537169.png"><br><strong>在mysql中，字符串既可以使用双引号也可以使用单引号，但还是建议使用单引号，因为单引号属于标准SQL。</strong></p><h3 id="别名中有中文"><a href="#别名中有中文" class="headerlink" title="别名中有中文"></a>别名中有中文</h3><ul><li>如果别名采用中文呢？<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal * <span class="hljs-number">12</span> 年薪 <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071530100.png"></li></ul><p><strong>别名是中文是可以的，但是对于低版本的mysql来说会报错，需要添加双引号或单引号。</strong>我们当前使用的mysql版本是：8.0.24</p><ul><li><input disabled="" type="checkbox"> 任务：查询所有员工的信息，要求每个字段名采用中文显示。</li></ul><h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><p>通常在进行查询操作的时候，都是查询符合某些条件的数据，很少将表中所有数据都取出来。怎么取出表的部分数据？需要在查询语句中添加条件进行数据的过滤。常见的过滤条件如下：</p><table><thead><tr><th><strong>条件</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;或!=</td><td>不等于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>between…and…</td><td>等同于 &gt;= and &lt;=</td></tr><tr><td>is null</td><td>为空</td></tr><tr><td>is not null</td><td>不为空</td></tr><tr><td>&lt;=&gt;</td><td>安全等于（可读性差，很少使用了）。</td></tr><tr><td>and 或 &amp;&amp;</td><td>并且</td></tr><tr><td>or 或 ||</td><td>或者</td></tr><tr><td>in</td><td>在指定的值当中</td></tr><tr><td>not in</td><td>不在指定的值当中</td></tr><tr><td>exists</td><td></td></tr><tr><td>not exists</td><td></td></tr><tr><td>like</td><td>模糊查询</td></tr></tbody></table><h2 id="条件查询语法格式"><a href="#条件查询语法格式" class="headerlink" title="条件查询语法格式"></a>条件查询语法格式</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ...<br><span class="hljs-keyword">from</span><br>  ...<br><span class="hljs-keyword">where</span><br>  过滤条件;<br></code></pre></td></tr></tbody></table></figure><p>过滤条件放在where子句当中，以上语句的执行顺序是：<br>    第一步：先执行from<br>    第二步：再通过where条件过滤<br>    第三步：最后执行select，查询并将结果展示到控制台</p><h2 id="等于、不等于"><a href="#等于、不等于" class="headerlink" title="等于、不等于"></a>等于、不等于</h2><h3 id="等于"><a href="#等于" class="headerlink" title="等于 ="></a>等于 =</h3><p>判断等量关系，支持多种数据类型，比如：数字、字符串、日期等。<br>案例1：查询月薪3000的员工编号及姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  empno,ename<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal = <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071523402.png"><br>案例2：查询员工FORD的岗位及月薪</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>job, sal<br><span class="hljs-keyword">from</span><br>emp<br><span class="hljs-keyword">where</span><br>ename = <span class="hljs-string">'FORD'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071518435.png"><br>存储在表emp中的员工姓名是FORD，全部大写，如果在查询的时候，写成全部小写会怎样呢？</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>job, sal<br><span class="hljs-keyword">from</span><br>emp<br><span class="hljs-keyword">where</span><br>ename = <span class="hljs-string">'ford'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071514136.png"></p><p>通过测试发现，即使写成小写ford，也是可以查询到结果的，<strong>不过这里需要注意的是：在Oracle数据库当中是查询不到数据的，Oracle的语法要比MySQL的语法严谨。对于SQL语句本身来说是不区分大小写的，但是对于表中真实存储的数据，大写A和小写a还是不一样的，这一点Oracle做的很好。MySQL的语法更随性。另外在Oracle当中，字符串是必须使用单引号括起来的，但在MySQL当中，字符串可以使用单引号，也可以使用双引号</strong>，如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>job, sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  ename = <span class="hljs-string">"FORD"</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071509627.png"><br>案例3：查询岗位是MANAGER的员工编号及姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  empno, ename<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job = <span class="hljs-string">'MANAGER'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071504317.png"></p><ul><li><input disabled="" type="checkbox"> 任务：查询工资级别是1的最低工资以及最高工资</li></ul><h3 id="不等于-lt-gt-或"><a href="#不等于-lt-gt-或" class="headerlink" title="不等于 <> 或 !="></a>不等于 &lt;&gt; 或 !=</h3><p>判断非等量关系，支持字符串、数字、日期类型等。不等号有两种写法，第一种&lt;&gt;，第二种!=，第二种写法和Java程序中的不等号相同，第一种写法比较诡异，不过也很好理解，比如&lt;&gt;3，表示小于3、大于3，就是不等于3。你get到了吗？<br>案例1：查询工资不是3000的员工编号、姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  empno,ename,sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &lt;&gt; <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071458135.png"><br>案例2：查询工作岗位不是MANAGER的员工姓名和岗位</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,job<br><span class="hljs-keyword">from</span><br>emp<br><span class="hljs-keyword">where</span><br>job &lt;&gt; <span class="hljs-string">'MANAGER'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071453294.png"></p><ul><li><input disabled="" type="checkbox"> 任务：查询不在部门编号为10的部门工作的员工信息</li></ul><h2 id="大于、大于等于、小于、小于等于"><a href="#大于、大于等于、小于、小于等于" class="headerlink" title="大于、大于等于、小于、小于等于"></a>大于、大于等于、小于、小于等于</h2><h3 id="大于-gt"><a href="#大于-gt" class="headerlink" title="大于 >"></a>大于 &gt;</h3><p>案例：找出薪资大于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &gt; <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071449077.png"></p><h3 id="大于等于-gt"><a href="#大于等于-gt" class="headerlink" title="大于等于 >="></a>大于等于 &gt;=</h3><p>案例：找出薪资大于等于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &gt;= <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071445184.png"></p><h3 id="小于-lt"><a href="#小于-lt" class="headerlink" title="小于 <"></a>小于 &lt;</h3><p>案例：找出薪资小于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &lt; <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071440119.png"></p><h3 id="小于等于-lt"><a href="#小于等于-lt" class="headerlink" title="小于等于 <="></a>小于等于 &lt;=</h3><p>案例：找出薪资小于等于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &lt;= <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071435498.png"></p><h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><p>and表示并且，还有另一种写法：&amp;&amp;<br>案例：找出薪资大于等于3000并且小于等于5000的员工姓名、薪资。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &gt;= <span class="hljs-number">3000</span> <span class="hljs-keyword">and</span> sal &lt;= <span class="hljs-number">5000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071430220.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071426239.png"></p><ul><li><input disabled="" type="checkbox"> 任务：找出工资级别为2~4（包含2和4）的最低工资和最高工资。</li></ul><h2 id="or"><a href="#or" class="headerlink" title="or"></a>or</h2><p>or表示或者，还有另一种写法：||<br>案例：找出工作岗位是MANAGER和SALESMAN的员工姓名、工作岗位</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job = <span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">or</span> job = <span class="hljs-string">'SALESMAN'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071421204.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071416782.png"></p><p>注意：这个题目描述中有这样一句话：MANAGER和SALESMAN，有的同学一看到“和”，就直接使用“and”了，因为“和”对应的英文单词是“and”，如果是这样的话，就大错特错了，因为and表示并且，使用and表示工作岗位既是MANAGER又是SALESMAN的员工，这样的员工是不存在的，因为每一个员工只有一个岗位，不可能同时从事两个岗位。所以使用and是查询不到任何结果的。如下</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename, job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job = <span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">and</span> job = <span class="hljs-string">'SALESMAN'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071411789.png"></p><ul><li><input disabled="" type="checkbox"> 任务：查询20和30部门的员工信息。</li></ul><h2 id="and和or的优先级问题"><a href="#and和or的优先级问题" class="headerlink" title="and和or的优先级问题"></a>and和or的优先级问题</h2><p>and和or同时出现时，and优先级较高，会先执行，如果希望or先执行，这个时候需要给or条件添加小括号。另外，以后遇到不确定的优先级时，可以通过添加小括号的方式来解决。对于优先级问题没必要记忆。<br>案例：找出薪资小于1500，并且部门编号是20或30的员工姓名、薪资、部门编号。<br>先来看一下错误写法：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,deptno<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &lt; <span class="hljs-number">1500</span> <span class="hljs-keyword">and</span> deptno = <span class="hljs-number">20</span> <span class="hljs-keyword">or</span> deptno = <span class="hljs-number">30</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071407010.png"><br>认真解读题意得知：薪资小于1500是一个大前提，要找出的是薪资小于1500的，满足这个条件的前提下，再找部门编号是20或30的，显然以上的运行结果中出现了薪资为1600的，为什么1600的会出现呢？这是因为“sal &lt; 1500 and deptno = 20”结合在一起了，“depnto = 30”成了一个独立的条件。会导致部门编号为30的所有员工全部查询出来。我们应该让“deptno = 20 or deptno = 30”结合在一起，正确写法如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,deptno<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal &lt; <span class="hljs-number">1500</span> <span class="hljs-keyword">and</span> (deptno = <span class="hljs-number">20</span> <span class="hljs-keyword">or</span> deptno = <span class="hljs-number">30</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071402751.png"></p><ul><li><input disabled="" type="checkbox"> 任务：找出薪资小于1500的，并且工作岗位是CLERK和SALESMAN的员工姓名、薪资、岗位。</li></ul><h2 id="between…and…"><a href="#between…and…" class="headerlink" title="between…and…"></a>between…and…</h2><p>between…and…等同于 &gt;= and &lt;=<br>做区间判断的，包含左右两个边界值。<br>它支持数字、日期、字符串等数据类型。<br>between…and…在使用时一定是**左小右大**。左大右小时无法查询到数据。<br>between…and… 和 &gt;= and &lt;=只是在写法结构上有区别，执行原理和效率方面没有区别。<br>案例：找出薪资在1600到3000的员工姓名、薪资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename,sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>sal <span class="hljs-keyword">between</span> <span class="hljs-number">1600</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071357262.png"><br>采用左大右小的方式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename,sal<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>sal <span class="hljs-keyword">between</span> <span class="hljs-number">3000</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1600</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071352019.png"><br>没有查询到任何数据，所以在使用的时候一定要注意：<strong>左小右大</strong>。</p><ul><li><input disabled="" type="checkbox"> 任务：查询在1982-01-23到1987-04-19之间入职的员工</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071347380.png"><br>注意：以上SQL语句中日期需要加上单引号。</p><h2 id="is-null、is-not-null"><a href="#is-null、is-not-null" class="headerlink" title="is null、is not null"></a>is null、is not null</h2><p>判断某个数据是否为null，不能使用等号，只能使用 is null<br>判断某个数据是否不为null，不能使用不等号，只能使用 is not null<br>在数据库中null不是一个值，不能用等号和不等号衡量，null代表什么也没有，没有数据，没有值</p><h3 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h3><p>案例1：找出津贴为空的员工姓名、薪资、津贴。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,comm<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  comm <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071342073.png"><br>我们使用等号，尝试一下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,comm<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  comm = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071337122.png"><br>查询不到任何数据，所以判断是否为空，不能用等号。</p><h3 id="is-not-null"><a href="#is-not-null" class="headerlink" title="is not null"></a>is not null</h3><p>案例2：找出津贴不为空的员工姓名、薪资、津贴</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,comm<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071332925.png"></p><h2 id="in、not-in"><a href="#in、not-in" class="headerlink" title="in、not in"></a>in、not in</h2><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>job in(‘MANAGER’,’SALESMAN’,’CLERK’) 等同于 job = ‘MANAGER’ or job = ‘SALESMAN’ or job = ‘CLERK’<br>sal in(1600, 3000, 5000) 等同于 sal = 1600 or sal = 3000 or sal = 5000<br>in后面有一个小括号，小括号当中有多个值，值和值之间采用逗号隔开<br>sal in(1500, 5000)，需要注意的是：这个并不是说薪资在1500到5000之间，in不代表区间，表示sal是1500的和sal是5000的<br>案例1：找出工作岗位是MANAGER和SALESMAN的员工姓名、薪资、工作岗位<br>第一种：使用or</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job = <span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">or</span> job = <span class="hljs-string">'SALESMAN'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071327240.png"><br>第二种：使用in</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,sal,job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job <span class="hljs-keyword">in</span>(<span class="hljs-string">'MANAGER'</span>, <span class="hljs-string">'SALESMAN'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071321867.png"><br>案例2：找出薪资是1500/1600/3000的员工姓名、工作岗位</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  ename,job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  sal <span class="hljs-keyword">in</span>(<span class="hljs-number">1500</span>, <span class="hljs-number">1600</span>, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071316721.png"></p><ul><li><input disabled="" type="checkbox"> 任务：找出部门编号是10和20的员工编号、姓名。（要求使用两种方案）</li></ul><h3 id="not-in"><a href="#not-in" class="headerlink" title="not in"></a>not in</h3><p>job not in(‘MANAGER’,’SALESMAN’) 等同于 job &lt;&gt; ‘MANAGER’ and job &lt;&gt; ‘SALESMAN’<br>sal not in(1600, 5000) 等同于 sal &lt;&gt; 1600 and sal &lt;&gt; 5000<br>案例：找出工作岗位不是MANAGER和SALESMAN的员工姓名、工作岗位<br>第一种：使用and</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename,job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job &lt;&gt; <span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">and</span> job &lt;&gt; <span class="hljs-string">'SALESMAN'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071311768.png"><br>第二种：使用not in</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  ename,job<br><span class="hljs-keyword">from</span><br>  emp<br><span class="hljs-keyword">where</span><br>  job <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-string">'MANAGER'</span>, <span class="hljs-string">'SALESMAN'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071306928.png"></p><ul><li><input disabled="" type="checkbox"> 任务：找出薪资不是1600和3000的员工姓名、薪资。</li></ul><h3 id="in、not-in-与-NULL"><a href="#in、not-in-与-NULL" class="headerlink" title="in、not in 与 NULL"></a>in、not in 与 NULL</h3><p>先来看一下emp表中的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071301774.png"><br>通过表中数据观察到，有4个员工的津贴不为NULL，剩下10个员工的津贴都是NULL。<br>写这样一条SQL语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">in</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">300</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071256767.png"><br>为什么以上执行结果只有一条记录呢？分析一下：<br>首先你要知道in的执行原理实际上是采用=和or的方式，也就是说，以上SQL语句实际上是：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm = <span class="hljs-literal">NULL</span> <span class="hljs-keyword">or</span> comm = <span class="hljs-number">300</span>;<br></code></pre></td></tr></tbody></table></figure><p>其中NULL不能用等号=进行判断，所以comm = NULL结果是false，然而中间使用的是or，所以comm = NULL被忽略了。所以查询结果就以上一条数据。<br>通过以上的测试得知：<strong>in是自动忽略NULL的</strong>。<br>再写这样一条SQL语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">300</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071252589.png"><br>以上的执行结果奇怪了，为什么没有查到任何数据呢？我们分析一下：<br>首先你要知道not in的执行原理实际上是采用&lt;&gt;和and的方式，也就是说，以上SQL语句实际上是：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm &lt;&gt; <span class="hljs-literal">NULL</span> <span class="hljs-keyword">and</span> comm &lt;&gt; <span class="hljs-number">300</span>;<br></code></pre></td></tr></tbody></table></figure><p>其中NULL的判断不能使用&lt;&gt;，所以comm &lt;&gt; NULL结果是false，由于后面是and，and表示并且，comm &lt;&gt; NULL已经是false了，所以and右边的就没必要运算了，comm &lt;&gt; NULL and comm &lt;&gt; 300的整体运算结果就是false。所以查询不到任何数据。<br>通过以上测试得知，<strong>not in是不会自动忽略NULL的</strong>，所以在使用not in的时候一定要提前过滤掉NULL。</p><h2 id="in和or的效率比拼"><a href="#in和or的效率比拼" class="headerlink" title="in和or的效率比拼"></a>in和or的效率比拼</h2><p>在MySQL当中，如何统计一个SQL语句的执行时长？</p><ul><li>可以使用这个命令：show profiles;  这个命令可以查看在mysql中执行的所有SQL以及命令的耗费时长。</li><li>show profiles; 是在mysql5.0.37之后添加的。所以要确保你的mysql版本没问题。</li><li>如何开启时长统计功能：set profiling = 1;</li><li>查看时长统计功能是否开启：show variables like ‘%pro%’;</li><li>查看每条SQL的耗时：show profiles;</li><li>查看其中某条SQL耗时明细：show profile for query query_id;</li><li>查看最新一条SQL的耗时明细：show profile;</li><li>查看cpu，io等信息：show profile block io, cpu for query query_id; </li></ul><p>or的效率为O(n)，而in的效率为O(log n), 当n越大的时候效率相差越明显（<strong>也就是说数据量越大的时候，in的效率越高</strong>）。以下是测试过程：<br>第一步，创建测试表，并生成测试数据，测试数据为1000万条记录。数据库中关闭了query cache，因此数据库缓存不会对查询造成影响。具体的代码如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">#创建测试的test表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-keyword">test</span>; <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">test</span>( <br>    <span class="hljs-keyword">ID</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>, <br>    <span class="hljs-string">`Name`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>, <br>    PRIMARY <span class="hljs-keyword">KEY</span>( <span class="hljs-keyword">ID</span> ) <br>)<span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span> utf8; <br><br><span class="hljs-comment">#创建生成测试数据的存储过程</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> pre_test; <br>DELIMITER //<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> pre_test() <br><span class="hljs-keyword">BEGIN</span> <br><span class="hljs-keyword">DECLARE</span> i <span class="hljs-built_in">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>; <br><span class="hljs-keyword">SET</span> autocommit = <span class="hljs-number">0</span>; <br>WHILE i&lt;10000000 DO <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">test</span> ( <span class="hljs-keyword">ID</span>,<span class="hljs-string">`Name`</span> ) <span class="hljs-keyword">VALUES</span>( i, <span class="hljs-keyword">CONCAT</span>( <span class="hljs-string">'Carl'</span>, i ) ); <br><span class="hljs-keyword">SET</span> i = i+<span class="hljs-number">1</span>; <br>IF i%2000 = 0 THEN <br><span class="hljs-keyword">COMMIT</span>; <br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>; <br><span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span>; <br><span class="hljs-keyword">END</span>; //<br>DELIMITER ;<br><br><span class="hljs-comment">#执行存储过程生成测试数据</span><br><span class="hljs-keyword">CALL</span> pre_test();<br></code></pre></td></tr></tbody></table></figure><p>以上SQL看不懂没关系，先执行它，进行数据初始化准备工作。<br>第二步：分三种情况进行测试，分别是：<br>第1种情况：in和or所在列为主键的情形。<br>第2种情况：in和or所在列创建有索引的情形。<br>第3种情况：in和or所在列没有索引的情形。<br>每种情况又采用不同的in和or的数量进行测试。由于测试语句的数据量有4种情况，我这里就称为A组、B组、C组、D组，其中A组为3个值，B组为150个值，C组为300个值，D组为1000个值。具体的测试语句如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">#A组</span><br><span class="hljs-comment">#in和or中有3条数据的情况</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">23</span>,<span class="hljs-number">48</span>);<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> =<span class="hljs-number">1</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48</span>;<br><br><span class="hljs-comment">#B组</span><br><span class="hljs-comment">#in和or中有150条数据的情况</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">59617932</span>,<span class="hljs-number">98114476</span>,<span class="hljs-number">89047409</span>,<span class="hljs-number">26968186</span>,<span class="hljs-number">56586105</span>,<span class="hljs-number">35488201</span>,<span class="hljs-number">53251989</span>,<span class="hljs-number">18182139</span>,<span class="hljs-number">71164231</span>,<span class="hljs-number">57655852</span>,<span class="hljs-number">7948544</span>,<span class="hljs-number">60658339</span>,<span class="hljs-number">50758185</span>,<span class="hljs-number">66667117</span>,<span class="hljs-number">34771253</span>,<span class="hljs-number">68699137</span>,<span class="hljs-number">27877290</span>,<span class="hljs-number">44275282</span>,<span class="hljs-number">1585444</span>,<span class="hljs-number">71219424</span>,<span class="hljs-number">90937482</span>,<span class="hljs-number">83928635</span>,<span class="hljs-number">24588528</span>,<span class="hljs-number">81933207</span>,<span class="hljs-number">9607562</span>,<span class="hljs-number">12013895</span>,<span class="hljs-number">84640278</span>,<span class="hljs-number">85549596</span>,<span class="hljs-number">53249244</span>,<span class="hljs-number">8567444</span>,<span class="hljs-number">85402877</span>,<span class="hljs-number">15040223</span>,<span class="hljs-number">54266509</span>,<span class="hljs-number">17718135</span>,<span class="hljs-number">91687882</span>,<span class="hljs-number">22930500</span>,<span class="hljs-number">94756430</span>,<span class="hljs-number">66031097</span>,<span class="hljs-number">13084573</span>,<span class="hljs-number">18137443</span>,<span class="hljs-number">89917778</span>,<span class="hljs-number">46845456</span>,<span class="hljs-number">43939093</span>,<span class="hljs-number">35943480</span>,<span class="hljs-number">18213703</span>,<span class="hljs-number">46362815</span>,<span class="hljs-number">49835919</span>,<span class="hljs-number">83137546</span>,<span class="hljs-number">2101409</span>,<span class="hljs-number">74932951</span>,<span class="hljs-number">11984477</span>,<span class="hljs-number">93113331</span>,<span class="hljs-number">77848222</span>,<span class="hljs-number">68546065</span>,<span class="hljs-number">33728734</span>,<span class="hljs-number">90793684</span>,<span class="hljs-number">44975642</span>,<span class="hljs-number">61387237</span>,<span class="hljs-number">52483391</span>,<span class="hljs-number">97716233</span>,<span class="hljs-number">49449060</span>,<span class="hljs-number">22411182</span>,<span class="hljs-number">30776331</span>,<span class="hljs-number">60597240</span>,<span class="hljs-number">6911731</span>,<span class="hljs-number">45789095</span>,<span class="hljs-number">62075344</span>,<span class="hljs-number">8379933</span>,<span class="hljs-number">97910423</span>,<span class="hljs-number">86861971</span>,<span class="hljs-number">81342386</span>,<span class="hljs-number">93423963</span>,<span class="hljs-number">83852896</span>,<span class="hljs-number">18566482</span>,<span class="hljs-number">22747687</span>,<span class="hljs-number">51420625</span>,<span class="hljs-number">75862064</span>,<span class="hljs-number">26402882</span>,<span class="hljs-number">93958561</span>,<span class="hljs-number">85202979</span>,<span class="hljs-number">97049369</span>,<span class="hljs-number">67674725</span>,<span class="hljs-number">9475653</span>,<span class="hljs-number">92302381</span>,<span class="hljs-number">78133617</span>,<span class="hljs-number">49295001</span>,<span class="hljs-number">36517340</span>,<span class="hljs-number">81387142</span>,<span class="hljs-number">15707241</span>,<span class="hljs-number">60832834</span>,<span class="hljs-number">93157830</span>,<span class="hljs-number">64171432</span>,<span class="hljs-number">58537826</span>,<span class="hljs-number">70141767</span>,<span class="hljs-number">7326025</span>,<span class="hljs-number">36632075</span>,<span class="hljs-number">9639624</span>,<span class="hljs-number">8900056</span>,<span class="hljs-number">99702164</span>,<span class="hljs-number">35108945</span>,<span class="hljs-number">87820933</span>,<span class="hljs-number">57302965</span>,<span class="hljs-number">16652391</span>,<span class="hljs-number">41845132</span>,<span class="hljs-number">62184393</span>,<span class="hljs-number">70136913</span>,<span class="hljs-number">79574630</span>,<span class="hljs-number">32562398</span>,<span class="hljs-number">94616790</span>,<span class="hljs-number">61258220</span>,<span class="hljs-number">73162018</span>,<span class="hljs-number">81644480</span>,<span class="hljs-number">19453596</span>,<span class="hljs-number">97380163</span>,<span class="hljs-number">1204733</span>,<span class="hljs-number">33357040</span>,<span class="hljs-number">84854495</span>,<span class="hljs-number">13888863</span>,<span class="hljs-number">49041868</span>,<span class="hljs-number">89272326</span>,<span class="hljs-number">38405345</span>,<span class="hljs-number">571248</span>,<span class="hljs-number">6349029</span>,<span class="hljs-number">70755321</span>,<span class="hljs-number">79307694</span>,<span class="hljs-number">60619684</span>,<span class="hljs-number">92624181</span>,<span class="hljs-number">73135306</span>,<span class="hljs-number">23279848</span>,<span class="hljs-number">95612954</span>,<span class="hljs-number">55845916</span>,<span class="hljs-number">6223606</span>,<span class="hljs-number">43836918</span>,<span class="hljs-number">37459781</span>,<span class="hljs-number">67969314</span>,<span class="hljs-number">99398872</span>,<span class="hljs-number">7616960</span>,<span class="hljs-number">37189193</span>,<span class="hljs-number">50151920</span>,<span class="hljs-number">62881879</span>,<span class="hljs-number">12364637</span>,<span class="hljs-number">33204320</span>,<span class="hljs-number">27135672</span>,<span class="hljs-number">28441504</span>,<span class="hljs-number">47373461</span>,<span class="hljs-number">87967926</span>,<span class="hljs-number">30631796</span>,<span class="hljs-number">20053540</span>,<span class="hljs-number">18735984</span>,<span class="hljs-number">83406724</span>);<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59617932</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98114476</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89047409</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26968186</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56586105</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35488201</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53251989</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18182139</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71164231</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57655852</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7948544</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60658339</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50758185</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66667117</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34771253</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68699137</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27877290</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44275282</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1585444</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71219424</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90937482</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83928635</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24588528</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81933207</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9607562</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12013895</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84640278</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85549596</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53249244</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8567444</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85402877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15040223</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54266509</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17718135</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91687882</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22930500</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94756430</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66031097</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13084573</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18137443</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89917778</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46845456</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43939093</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35943480</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18213703</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46362815</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49835919</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83137546</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2101409</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74932951</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11984477</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93113331</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77848222</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68546065</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33728734</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90793684</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44975642</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61387237</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52483391</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97716233</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49449060</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22411182</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30776331</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60597240</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6911731</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45789095</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62075344</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8379933</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97910423</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86861971</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81342386</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93423963</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83852896</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18566482</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22747687</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51420625</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75862064</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26402882</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93958561</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85202979</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97049369</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67674725</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9475653</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92302381</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78133617</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49295001</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36517340</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81387142</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15707241</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60832834</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93157830</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64171432</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58537826</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70141767</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7326025</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36632075</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9639624</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8900056</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99702164</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35108945</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87820933</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57302965</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16652391</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41845132</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62184393</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70136913</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79574630</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32562398</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94616790</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61258220</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73162018</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81644480</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19453596</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97380163</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1204733</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33357040</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84854495</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13888863</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49041868</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89272326</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38405345</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">571248</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6349029</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70755321</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79307694</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60619684</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92624181</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73135306</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23279848</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95612954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55845916</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6223606</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43836918</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37459781</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67969314</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99398872</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7616960</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37189193</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50151920</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62881879</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12364637</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33204320</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27135672</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28441504</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47373461</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87967926</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30631796</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20053540</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18735984</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83406724</span>;<br><br><br><span class="hljs-comment">#C组</span><br><span class="hljs-comment">#in和or中有300条数据的情况</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">37092877</span>,<span class="hljs-number">94859722</span>,<span class="hljs-number">74276090</span>,<span class="hljs-number">8763830</span>,<span class="hljs-number">38727241</span>,<span class="hljs-number">95732954</span>,<span class="hljs-number">93414819</span>,<span class="hljs-number">55070016</span>,<span class="hljs-number">3591352</span>,<span class="hljs-number">73857925</span>,<span class="hljs-number">92290525</span>,<span class="hljs-number">15210159</span>,<span class="hljs-number">83905516</span>,<span class="hljs-number">54934589</span>,<span class="hljs-number">83004136</span>,<span class="hljs-number">31442143</span>,<span class="hljs-number">6060569</span>,<span class="hljs-number">22209206</span>,<span class="hljs-number">27649629</span>,<span class="hljs-number">11464943</span>,<span class="hljs-number">77822402</span>,<span class="hljs-number">28714780</span>,<span class="hljs-number">10058522</span>,<span class="hljs-number">62252663</span>,<span class="hljs-number">13751461</span>,<span class="hljs-number">38997875</span>,<span class="hljs-number">47320577</span>,<span class="hljs-number">64507359</span>,<span class="hljs-number">36137908</span>,<span class="hljs-number">54297630</span>,<span class="hljs-number">97411161</span>,<span class="hljs-number">56542672</span>,<span class="hljs-number">22017966</span>,<span class="hljs-number">55190708</span>,<span class="hljs-number">70072386</span>,<span class="hljs-number">24300664</span>,<span class="hljs-number">93413617</span>,<span class="hljs-number">23621629</span>,<span class="hljs-number">74772508</span>,<span class="hljs-number">62774612</span>,<span class="hljs-number">43001947</span>,<span class="hljs-number">46161388</span>,<span class="hljs-number">85563006</span>,<span class="hljs-number">70177147</span>,<span class="hljs-number">63960440</span>,<span class="hljs-number">18001207</span>,<span class="hljs-number">81734850</span>,<span class="hljs-number">10635060</span>,<span class="hljs-number">6551152</span>,<span class="hljs-number">54877885</span>,<span class="hljs-number">44426798</span>,<span class="hljs-number">73950635</span>,<span class="hljs-number">18713144</span>,<span class="hljs-number">21690065</span>,<span class="hljs-number">82153543</span>,<span class="hljs-number">26048520</span>,<span class="hljs-number">79954773</span>,<span class="hljs-number">22411093</span>,<span class="hljs-number">97307339</span>,<span class="hljs-number">74193176</span>,<span class="hljs-number">1413532</span>,<span class="hljs-number">88006544</span>,<span class="hljs-number">36062746</span>,<span class="hljs-number">24043946</span>,<span class="hljs-number">17132007</span>,<span class="hljs-number">95958217</span>,<span class="hljs-number">26112542</span>,<span class="hljs-number">27303972</span>,<span class="hljs-number">17247403</span>,<span class="hljs-number">56778979</span>,<span class="hljs-number">60928031</span>,<span class="hljs-number">69369613</span>,<span class="hljs-number">90584759</span>,<span class="hljs-number">86234538</span>,<span class="hljs-number">41726089</span>,<span class="hljs-number">25315005</span>,<span class="hljs-number">27568726</span>,<span class="hljs-number">25091624</span>,<span class="hljs-number">15307765</span>,<span class="hljs-number">83130887</span>,<span class="hljs-number">42726438</span>,<span class="hljs-number">75872353</span>,<span class="hljs-number">18991223</span>,<span class="hljs-number">47819224</span>,<span class="hljs-number">75457713</span>,<span class="hljs-number">54659391</span>,<span class="hljs-number">54889687</span>,<span class="hljs-number">65229322</span>,<span class="hljs-number">17124556</span>,<span class="hljs-number">38376043</span>,<span class="hljs-number">1989975</span>,<span class="hljs-number">45973571</span>,<span class="hljs-number">48597804</span>,<span class="hljs-number">58632319</span>,<span class="hljs-number">43388664</span>,<span class="hljs-number">97010450</span>,<span class="hljs-number">94745635</span>,<span class="hljs-number">13217373</span>,<span class="hljs-number">40472912</span>,<span class="hljs-number">40220510</span>,<span class="hljs-number">58319808</span>,<span class="hljs-number">48228318</span>,<span class="hljs-number">48936085</span>,<span class="hljs-number">86281500</span>,<span class="hljs-number">65466706</span>,<span class="hljs-number">96815281</span>,<span class="hljs-number">11751559</span>,<span class="hljs-number">50188155</span>,<span class="hljs-number">76649755</span>,<span class="hljs-number">35315411</span>,<span class="hljs-number">20360954</span>,<span class="hljs-number">17739218</span>,<span class="hljs-number">10918461</span>,<span class="hljs-number">51429591</span>,<span class="hljs-number">41447650</span>,<span class="hljs-number">65170472</span>,<span class="hljs-number">26810295</span>,<span class="hljs-number">80912347</span>,<span class="hljs-number">17157209</span>,<span class="hljs-number">75851858</span>,<span class="hljs-number">61150903</span>,<span class="hljs-number">4408208</span>,<span class="hljs-number">61200404</span>,<span class="hljs-number">6655467</span>,<span class="hljs-number">66863737</span>,<span class="hljs-number">51549112</span>,<span class="hljs-number">61951371</span>,<span class="hljs-number">14368308</span>,<span class="hljs-number">14663119</span>,<span class="hljs-number">8762531</span>,<span class="hljs-number">31765056</span>,<span class="hljs-number">30560647</span>,<span class="hljs-number">41048147</span>,<span class="hljs-number">95526521</span>,<span class="hljs-number">94929131</span>,<span class="hljs-number">56881239</span>,<span class="hljs-number">79014587</span>,<span class="hljs-number">62705983</span>,<span class="hljs-number">15892901</span>,<span class="hljs-number">66151473</span>,<span class="hljs-number">98846144</span>,<span class="hljs-number">79336731</span>,<span class="hljs-number">35949035</span>,<span class="hljs-number">26250054</span>,<span class="hljs-number">97536202</span>,<span class="hljs-number">40575682</span>,<span class="hljs-number">6965144</span>,<span class="hljs-number">91059908</span>,<span class="hljs-number">97939380</span>,<span class="hljs-number">30854180</span>,<span class="hljs-number">1965937</span>,<span class="hljs-number">17193347</span>,<span class="hljs-number">76584991</span>,<span class="hljs-number">70467475</span>,<span class="hljs-number">6559872</span>,<span class="hljs-number">97386594</span>,<span class="hljs-number">13939914</span>,<span class="hljs-number">20379091</span>,<span class="hljs-number">84906436</span>,<span class="hljs-number">45989448</span>,<span class="hljs-number">17337270</span>,<span class="hljs-number">4949675</span>,<span class="hljs-number">96963499</span>,<span class="hljs-number">12561575</span>,<span class="hljs-number">77153018</span>,<span class="hljs-number">73213368</span>,<span class="hljs-number">68283041</span>,<span class="hljs-number">33977574</span>,<span class="hljs-number">86290771</span>,<span class="hljs-number">70381017</span>,<span class="hljs-number">73095085</span>,<span class="hljs-number">454900</span>,<span class="hljs-number">44614195</span>,<span class="hljs-number">48171334</span>,<span class="hljs-number">49603342</span>,<span class="hljs-number">7430998</span>,<span class="hljs-number">29447060</span>,<span class="hljs-number">47643508</span>,<span class="hljs-number">82393912</span>,<span class="hljs-number">83169846</span>,<span class="hljs-number">94256496</span>,<span class="hljs-number">35275444</span>,<span class="hljs-number">40024984</span>,<span class="hljs-number">25377535</span>,<span class="hljs-number">46571333</span>,<span class="hljs-number">32510994</span>,<span class="hljs-number">70927802</span>,<span class="hljs-number">92017916</span>,<span class="hljs-number">97302502</span>,<span class="hljs-number">22859741</span>,<span class="hljs-number">32726786</span>,<span class="hljs-number">79071601</span>,<span class="hljs-number">93977472</span>,<span class="hljs-number">47409421</span>,<span class="hljs-number">49311618</span>,<span class="hljs-number">77366144</span>,<span class="hljs-number">84838598</span>,<span class="hljs-number">59401507</span>,<span class="hljs-number">67110877</span>,<span class="hljs-number">42075938</span>,<span class="hljs-number">76962007</span>,<span class="hljs-number">27984930</span>,<span class="hljs-number">72982484</span>,<span class="hljs-number">81363683</span>,<span class="hljs-number">75017478</span>,<span class="hljs-number">88624177</span>,<span class="hljs-number">67220235</span>,<span class="hljs-number">88290070</span>,<span class="hljs-number">26311443</span>,<span class="hljs-number">87681081</span>,<span class="hljs-number">77960250</span>,<span class="hljs-number">4996033</span>,<span class="hljs-number">68448074</span>,<span class="hljs-number">67762279</span>,<span class="hljs-number">99650583</span>,<span class="hljs-number">36766422</span>,<span class="hljs-number">27233152</span>,<span class="hljs-number">71436659</span>,<span class="hljs-number">25428777</span>,<span class="hljs-number">81481679</span>,<span class="hljs-number">51070397</span>,<span class="hljs-number">88351803</span>,<span class="hljs-number">78755075</span>,<span class="hljs-number">26783938</span>,<span class="hljs-number">83610840</span>,<span class="hljs-number">45650662</span>,<span class="hljs-number">86305644</span>,<span class="hljs-number">1717314</span>,<span class="hljs-number">66176062</span>,<span class="hljs-number">6507047</span>,<span class="hljs-number">45084786</span>,<span class="hljs-number">74402982</span>,<span class="hljs-number">55661367</span>,<span class="hljs-number">35721238</span>,<span class="hljs-number">40424913</span>,<span class="hljs-number">24294239</span>,<span class="hljs-number">30223531</span>,<span class="hljs-number">55367671</span>,<span class="hljs-number">56777532</span>,<span class="hljs-number">12604154</span>,<span class="hljs-number">4870493</span>,<span class="hljs-number">14750488</span>,<span class="hljs-number">74039611</span>,<span class="hljs-number">42549918</span>,<span class="hljs-number">70710424</span>,<span class="hljs-number">56247316</span>,<span class="hljs-number">63002053</span>,<span class="hljs-number">71117605</span>,<span class="hljs-number">16510883</span>,<span class="hljs-number">67417211</span>,<span class="hljs-number">34057637</span>,<span class="hljs-number">74185092</span>,<span class="hljs-number">58603491</span>,<span class="hljs-number">66987830</span>,<span class="hljs-number">73584171</span>,<span class="hljs-number">9178319</span>,<span class="hljs-number">47096502</span>,<span class="hljs-number">1554825</span>,<span class="hljs-number">37756804</span>,<span class="hljs-number">85168245</span>,<span class="hljs-number">92690138</span>,<span class="hljs-number">6120773</span>,<span class="hljs-number">99586029</span>,<span class="hljs-number">74696745</span>,<span class="hljs-number">61803307</span>,<span class="hljs-number">56631845</span>,<span class="hljs-number">42681796</span>,<span class="hljs-number">58965644</span>,<span class="hljs-number">68703695</span>,<span class="hljs-number">69660559</span>,<span class="hljs-number">15879062</span>,<span class="hljs-number">26713059</span>,<span class="hljs-number">85186928</span>,<span class="hljs-number">63117471</span>,<span class="hljs-number">53007808</span>,<span class="hljs-number">74576547</span>,<span class="hljs-number">32187857</span>,<span class="hljs-number">13701205</span>,<span class="hljs-number">88645881</span>,<span class="hljs-number">24507258</span>,<span class="hljs-number">87453800</span>,<span class="hljs-number">39624977</span>,<span class="hljs-number">75862710</span>,<span class="hljs-number">62419627</span>,<span class="hljs-number">70804059</span>,<span class="hljs-number">10461373</span>,<span class="hljs-number">18265782</span>,<span class="hljs-number">56366177</span>,<span class="hljs-number">68093007</span>,<span class="hljs-number">75760763</span>,<span class="hljs-number">43931574</span>,<span class="hljs-number">65808002</span>,<span class="hljs-number">49148775</span>,<span class="hljs-number">98019987</span>,<span class="hljs-number">71183123</span>,<span class="hljs-number">53762434</span>,<span class="hljs-number">78851856</span>,<span class="hljs-number">37767085</span>,<span class="hljs-number">89124453</span>,<span class="hljs-number">47566746</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37092877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94859722</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74276090</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8763830</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38727241</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95732954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93414819</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55070016</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3591352</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73857925</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92290525</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15210159</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83905516</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54934589</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83004136</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31442143</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6060569</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22209206</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27649629</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11464943</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77822402</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28714780</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10058522</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62252663</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13751461</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38997875</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47320577</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64507359</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36137908</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54297630</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97411161</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56542672</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22017966</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55190708</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70072386</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24300664</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93413617</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23621629</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74772508</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62774612</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43001947</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46161388</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85563006</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70177147</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63960440</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18001207</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81734850</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10635060</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6551152</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54877885</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44426798</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73950635</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18713144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21690065</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82153543</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26048520</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79954773</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22411093</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97307339</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74193176</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1413532</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88006544</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36062746</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24043946</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17132007</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95958217</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26112542</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27303972</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17247403</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56778979</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60928031</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69369613</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90584759</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86234538</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41726089</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25315005</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27568726</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25091624</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15307765</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83130887</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42726438</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75872353</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18991223</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47819224</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75457713</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54659391</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54889687</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65229322</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17124556</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38376043</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1989975</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45973571</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48597804</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58632319</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43388664</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97010450</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94745635</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13217373</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40472912</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40220510</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58319808</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48228318</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48936085</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86281500</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65466706</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96815281</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11751559</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50188155</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76649755</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35315411</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20360954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17739218</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10918461</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51429591</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41447650</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65170472</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26810295</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80912347</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17157209</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75851858</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61150903</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4408208</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61200404</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6655467</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66863737</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51549112</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61951371</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14368308</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14663119</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8762531</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31765056</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30560647</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41048147</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95526521</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94929131</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56881239</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79014587</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62705983</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15892901</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66151473</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98846144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79336731</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35949035</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26250054</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97536202</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40575682</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6965144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91059908</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97939380</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30854180</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1965937</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17193347</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76584991</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70467475</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6559872</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97386594</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13939914</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20379091</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84906436</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45989448</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17337270</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4949675</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96963499</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12561575</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77153018</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73213368</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68283041</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33977574</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86290771</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70381017</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73095085</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">454900</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44614195</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48171334</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49603342</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7430998</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29447060</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47643508</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82393912</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83169846</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94256496</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35275444</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40024984</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25377535</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46571333</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32510994</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70927802</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92017916</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97302502</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22859741</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32726786</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79071601</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93977472</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47409421</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49311618</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77366144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84838598</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59401507</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67110877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42075938</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76962007</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27984930</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72982484</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81363683</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75017478</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88624177</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67220235</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88290070</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26311443</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87681081</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77960250</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4996033</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68448074</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67762279</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99650583</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36766422</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27233152</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71436659</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25428777</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81481679</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51070397</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88351803</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78755075</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26783938</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83610840</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45650662</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86305644</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1717314</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66176062</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6507047</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45084786</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74402982</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55661367</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35721238</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40424913</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24294239</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30223531</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55367671</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56777532</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12604154</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4870493</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14750488</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74039611</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42549918</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70710424</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56247316</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63002053</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71117605</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16510883</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67417211</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34057637</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74185092</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58603491</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66987830</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73584171</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9178319</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47096502</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1554825</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37756804</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85168245</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92690138</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6120773</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99586029</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74696745</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61803307</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56631845</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42681796</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58965644</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68703695</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69660559</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15879062</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26713059</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85186928</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63117471</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53007808</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74576547</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32187857</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13701205</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88645881</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24507258</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87453800</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39624977</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75862710</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62419627</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70804059</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10461373</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18265782</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56366177</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68093007</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75760763</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43931574</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65808002</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49148775</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98019987</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71183123</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53762434</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78851856</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37767085</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89124453</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47566746</span>;<br><br><br><span class="hljs-comment">#D组</span><br><span class="hljs-comment">#in和or中有1000条数据的情况</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">93674701</span>,<span class="hljs-number">9720356</span>,<span class="hljs-number">31732184</span>,<span class="hljs-number">53855095</span>,<span class="hljs-number">33144472</span>,<span class="hljs-number">71864888</span>,<span class="hljs-number">27541768</span>,<span class="hljs-number">27238726</span>,<span class="hljs-number">83648428</span>,<span class="hljs-number">12942332</span>,<span class="hljs-number">26918445</span>,<span class="hljs-number">19781953</span>,<span class="hljs-number">81861032</span>,<span class="hljs-number">74800064</span>,<span class="hljs-number">12286132</span>,<span class="hljs-number">6624397</span>,<span class="hljs-number">64942581</span>,<span class="hljs-number">70512799</span>,<span class="hljs-number">46356598</span>,<span class="hljs-number">88292448</span>,<span class="hljs-number">87069909</span>,<span class="hljs-number">38175756</span>,<span class="hljs-number">98121997</span>,<span class="hljs-number">62570414</span>,<span class="hljs-number">15900806</span>,<span class="hljs-number">51527968</span>,<span class="hljs-number">89092372</span>,<span class="hljs-number">8084203</span>,<span class="hljs-number">53772848</span>,<span class="hljs-number">78871524</span>,<span class="hljs-number">3608561</span>,<span class="hljs-number">85909562</span>,<span class="hljs-number">41702172</span>,<span class="hljs-number">61800503</span>,<span class="hljs-number">57877634</span>,<span class="hljs-number">93407278</span>,<span class="hljs-number">30824340</span>,<span class="hljs-number">13159046</span>,<span class="hljs-number">49055339</span>,<span class="hljs-number">73058078</span>,<span class="hljs-number">983603</span>,<span class="hljs-number">73571456</span>,<span class="hljs-number">51694978</span>,<span class="hljs-number">75136628</span>,<span class="hljs-number">82716874</span>,<span class="hljs-number">83551181</span>,<span class="hljs-number">7964224</span>,<span class="hljs-number">47505945</span>,<span class="hljs-number">92695321</span>,<span class="hljs-number">15885152</span>,<span class="hljs-number">79282709</span>,<span class="hljs-number">18572099</span>,<span class="hljs-number">27392970</span>,<span class="hljs-number">14552787</span>,<span class="hljs-number">19848227</span>,<span class="hljs-number">4518183</span>,<span class="hljs-number">11773920</span>,<span class="hljs-number">22285326</span>,<span class="hljs-number">71605145</span>,<span class="hljs-number">2402625</span>,<span class="hljs-number">63365854</span>,<span class="hljs-number">70973600</span>,<span class="hljs-number">10584706</span>,<span class="hljs-number">83688869</span>,<span class="hljs-number">84268419</span>,<span class="hljs-number">6026005</span>,<span class="hljs-number">36545233</span>,<span class="hljs-number">24462648</span>,<span class="hljs-number">19293921</span>,<span class="hljs-number">17561083</span>,<span class="hljs-number">52105483</span>,<span class="hljs-number">59243514</span>,<span class="hljs-number">35230465</span>,<span class="hljs-number">34650779</span>,<span class="hljs-number">30053489</span>,<span class="hljs-number">24225251</span>,<span class="hljs-number">59642405</span>,<span class="hljs-number">81933853</span>,<span class="hljs-number">94495716</span>,<span class="hljs-number">26364324</span>,<span class="hljs-number">25980634</span>,<span class="hljs-number">5579237</span>,<span class="hljs-number">14569289</span>,<span class="hljs-number">89417845</span>,<span class="hljs-number">71178959</span>,<span class="hljs-number">4143920</span>,<span class="hljs-number">20467990</span>,<span class="hljs-number">53316808</span>,<span class="hljs-number">21288525</span>,<span class="hljs-number">82249537</span>,<span class="hljs-number">37737589</span>,<span class="hljs-number">44712689</span>,<span class="hljs-number">36788133</span>,<span class="hljs-number">15668654</span>,<span class="hljs-number">4697556</span>,<span class="hljs-number">63785060</span>,<span class="hljs-number">11555169</span>,<span class="hljs-number">36401204</span>,<span class="hljs-number">92276179</span>,<span class="hljs-number">4135929</span>,<span class="hljs-number">75453019</span>,<span class="hljs-number">28231031</span>,<span class="hljs-number">8649240</span>,<span class="hljs-number">11576980</span>,<span class="hljs-number">20262028</span>,<span class="hljs-number">56242424</span>,<span class="hljs-number">11305608</span>,<span class="hljs-number">5655216</span>,<span class="hljs-number">90240601</span>,<span class="hljs-number">28569373</span>,<span class="hljs-number">5296027</span>,<span class="hljs-number">10739594</span>,<span class="hljs-number">72751648</span>,<span class="hljs-number">22531251</span>,<span class="hljs-number">12535926</span>,<span class="hljs-number">36347415</span>,<span class="hljs-number">19740655</span>,<span class="hljs-number">69125465</span>,<span class="hljs-number">7523885</span>,<span class="hljs-number">88128548</span>,<span class="hljs-number">88830806</span>,<span class="hljs-number">25010302</span>,<span class="hljs-number">29411467</span>,<span class="hljs-number">99614288</span>,<span class="hljs-number">32646290</span>,<span class="hljs-number">16592563</span>,<span class="hljs-number">69036910</span>,<span class="hljs-number">32604729</span>,<span class="hljs-number">88737786</span>,<span class="hljs-number">90169676</span>,<span class="hljs-number">57646877</span>,<span class="hljs-number">72105460</span>,<span class="hljs-number">40027541</span>,<span class="hljs-number">70362483</span>,<span class="hljs-number">37221415</span>,<span class="hljs-number">25284914</span>,<span class="hljs-number">69691185</span>,<span class="hljs-number">17972978</span>,<span class="hljs-number">1544661</span>,<span class="hljs-number">47324366</span>,<span class="hljs-number">25337670</span>,<span class="hljs-number">91133621</span>,<span class="hljs-number">63697117</span>,<span class="hljs-number">48652228</span>,<span class="hljs-number">18538437</span>,<span class="hljs-number">79966496</span>,<span class="hljs-number">26066529</span>,<span class="hljs-number">65334307</span>,<span class="hljs-number">8305141</span>,<span class="hljs-number">86289387</span>,<span class="hljs-number">20178085</span>,<span class="hljs-number">88836090</span>,<span class="hljs-number">74948034</span>,<span class="hljs-number">14101728</span>,<span class="hljs-number">7837868</span>,<span class="hljs-number">83548120</span>,<span class="hljs-number">65602502</span>,<span class="hljs-number">83129211</span>,<span class="hljs-number">24785681</span>,<span class="hljs-number">65000269</span>,<span class="hljs-number">49140174</span>,<span class="hljs-number">62636621</span>,<span class="hljs-number">31096695</span>,<span class="hljs-number">52276400</span>,<span class="hljs-number">28546681</span>,<span class="hljs-number">83631937</span>,<span class="hljs-number">57100225</span>,<span class="hljs-number">42531528</span>,<span class="hljs-number">28326396</span>,<span class="hljs-number">38641032</span>,<span class="hljs-number">93055463</span>,<span class="hljs-number">20525612</span>,<span class="hljs-number">66073509</span>,<span class="hljs-number">35154065</span>,<span class="hljs-number">29007664</span>,<span class="hljs-number">12600294</span>,<span class="hljs-number">76829494</span>,<span class="hljs-number">73917074</span>,<span class="hljs-number">67226149</span>,<span class="hljs-number">12478806</span>,<span class="hljs-number">39842542</span>,<span class="hljs-number">70312958</span>,<span class="hljs-number">82792046</span>,<span class="hljs-number">49668650</span>,<span class="hljs-number">46280815</span>,<span class="hljs-number">96555182</span>,<span class="hljs-number">22966062</span>,<span class="hljs-number">83158116</span>,<span class="hljs-number">87566530</span>,<span class="hljs-number">66277804</span>,<span class="hljs-number">7944142</span>,<span class="hljs-number">90649884</span>,<span class="hljs-number">64342810</span>,<span class="hljs-number">9881875</span>,<span class="hljs-number">14833854</span>,<span class="hljs-number">82959569</span>,<span class="hljs-number">50523207</span>,<span class="hljs-number">48788762</span>,<span class="hljs-number">3801076</span>,<span class="hljs-number">14677723</span>,<span class="hljs-number">63080506</span>,<span class="hljs-number">96215352</span>,<span class="hljs-number">36302231</span>,<span class="hljs-number">35067168</span>,<span class="hljs-number">11695282</span>,<span class="hljs-number">19447382</span>,<span class="hljs-number">66401373</span>,<span class="hljs-number">40822285</span>,<span class="hljs-number">41406321</span>,<span class="hljs-number">48630216</span>,<span class="hljs-number">78955925</span>,<span class="hljs-number">57194625</span>,<span class="hljs-number">52097877</span>,<span class="hljs-number">16169037</span>,<span class="hljs-number">44834346</span>,<span class="hljs-number">2593695</span>,<span class="hljs-number">29948466</span>,<span class="hljs-number">41842778</span>,<span class="hljs-number">50510473</span>,<span class="hljs-number">39669493</span>,<span class="hljs-number">64590865</span>,<span class="hljs-number">26160800</span>,<span class="hljs-number">94882286</span>,<span class="hljs-number">2703212</span>,<span class="hljs-number">41243905</span>,<span class="hljs-number">89363549</span>,<span class="hljs-number">82819429</span>,<span class="hljs-number">25565895</span>,<span class="hljs-number">86836890</span>,<span class="hljs-number">58385785</span>,<span class="hljs-number">55898457</span>,<span class="hljs-number">99305620</span>,<span class="hljs-number">43332680</span>,<span class="hljs-number">98223672</span>,<span class="hljs-number">4494624</span>,<span class="hljs-number">25408421</span>,<span class="hljs-number">28054121</span>,<span class="hljs-number">48197701</span>,<span class="hljs-number">90633404</span>,<span class="hljs-number">25825550</span>,<span class="hljs-number">90631154</span>,<span class="hljs-number">24867226</span>,<span class="hljs-number">61846156</span>,<span class="hljs-number">38911183</span>,<span class="hljs-number">67826056</span>,<span class="hljs-number">10676975</span>,<span class="hljs-number">57116645</span>,<span class="hljs-number">474292</span>,<span class="hljs-number">82387517</span>,<span class="hljs-number">56211477</span>,<span class="hljs-number">46555785</span>,<span class="hljs-number">49282428</span>,<span class="hljs-number">99468990</span>,<span class="hljs-number">81172472</span>,<span class="hljs-number">26720330</span>,<span class="hljs-number">38692582</span>,<span class="hljs-number">96073680</span>,<span class="hljs-number">88412290</span>,<span class="hljs-number">28829489</span>,<span class="hljs-number">1816508</span>,<span class="hljs-number">75321051</span>,<span class="hljs-number">81650509</span>,<span class="hljs-number">23175973</span>,<span class="hljs-number">42008725</span>,<span class="hljs-number">60743468</span>,<span class="hljs-number">52532114</span>,<span class="hljs-number">731909</span>,<span class="hljs-number">77811415</span>,<span class="hljs-number">86804961</span>,<span class="hljs-number">29675484</span>,<span class="hljs-number">33584929</span>,<span class="hljs-number">180367</span>,<span class="hljs-number">93687804</span>,<span class="hljs-number">41093066</span>,<span class="hljs-number">5987495</span>,<span class="hljs-number">27291494</span>,<span class="hljs-number">78229979</span>,<span class="hljs-number">63194139</span>,<span class="hljs-number">34357776</span>,<span class="hljs-number">9992084</span>,<span class="hljs-number">22643334</span>,<span class="hljs-number">22407822</span>,<span class="hljs-number">69740170</span>,<span class="hljs-number">29581361</span>,<span class="hljs-number">50036776</span>,<span class="hljs-number">88768091</span>,<span class="hljs-number">82537322</span>,<span class="hljs-number">83709895</span>,<span class="hljs-number">55361776</span>,<span class="hljs-number">90616169</span>,<span class="hljs-number">44595355</span>,<span class="hljs-number">9468440</span>,<span class="hljs-number">54552233</span>,<span class="hljs-number">73496954</span>,<span class="hljs-number">46104486</span>,<span class="hljs-number">92947715</span>,<span class="hljs-number">38522993</span>,<span class="hljs-number">88515232</span>,<span class="hljs-number">57725249</span>,<span class="hljs-number">48507967</span>,<span class="hljs-number">25309486</span>,<span class="hljs-number">91597013</span>,<span class="hljs-number">85635814</span>,<span class="hljs-number">69579638</span>,<span class="hljs-number">68775627</span>,<span class="hljs-number">57556546</span>,<span class="hljs-number">77900275</span>,<span class="hljs-number">95965693</span>,<span class="hljs-number">9601780</span>,<span class="hljs-number">5448068</span>,<span class="hljs-number">54075952</span>,<span class="hljs-number">64335883</span>,<span class="hljs-number">80114875</span>,<span class="hljs-number">14793294</span>,<span class="hljs-number">21016639</span>,<span class="hljs-number">1959922</span>,<span class="hljs-number">93176996</span>,<span class="hljs-number">7893733</span>,<span class="hljs-number">51407895</span>,<span class="hljs-number">45849129</span>,<span class="hljs-number">33857790</span>,<span class="hljs-number">30096194</span>,<span class="hljs-number">78021982</span>,<span class="hljs-number">66555961</span>,<span class="hljs-number">15842998</span>,<span class="hljs-number">77678123</span>,<span class="hljs-number">56648395</span>,<span class="hljs-number">8171848</span>,<span class="hljs-number">80152264</span>,<span class="hljs-number">78616680</span>,<span class="hljs-number">80098122</span>,<span class="hljs-number">22882409</span>,<span class="hljs-number">77242219</span>,<span class="hljs-number">3124519</span>,<span class="hljs-number">60865422</span>,<span class="hljs-number">43164198</span>,<span class="hljs-number">43256621</span>,<span class="hljs-number">73261157</span>,<span class="hljs-number">12541949</span>,<span class="hljs-number">49780175</span>,<span class="hljs-number">23167183</span>,<span class="hljs-number">10509251</span>,<span class="hljs-number">41809106</span>,<span class="hljs-number">25655902</span>,<span class="hljs-number">6752559</span>,<span class="hljs-number">39850293</span>,<span class="hljs-number">50992519</span>,<span class="hljs-number">40061483</span>,<span class="hljs-number">84526968</span>,<span class="hljs-number">93056718</span>,<span class="hljs-number">53267125</span>,<span class="hljs-number">53914467</span>,<span class="hljs-number">39404926</span>,<span class="hljs-number">83672449</span>,<span class="hljs-number">21484465</span>,<span class="hljs-number">34147538</span>,<span class="hljs-number">13437853</span>,<span class="hljs-number">74079093</span>,<span class="hljs-number">50400032</span>,<span class="hljs-number">85705998</span>,<span class="hljs-number">7557614</span>,<span class="hljs-number">10300505</span>,<span class="hljs-number">79264856</span>,<span class="hljs-number">65669946</span>,<span class="hljs-number">23899714</span>,<span class="hljs-number">53506926</span>,<span class="hljs-number">36081544</span>,<span class="hljs-number">11113765</span>,<span class="hljs-number">65755643</span>,<span class="hljs-number">5826515</span>,<span class="hljs-number">60392667</span>,<span class="hljs-number">55562374</span>,<span class="hljs-number">98132987</span>,<span class="hljs-number">80904530</span>,<span class="hljs-number">92663352</span>,<span class="hljs-number">7283593</span>,<span class="hljs-number">3709276</span>,<span class="hljs-number">52078745</span>,<span class="hljs-number">84847057</span>,<span class="hljs-number">34235334</span>,<span class="hljs-number">63889320</span>,<span class="hljs-number">70036669</span>,<span class="hljs-number">58603533</span>,<span class="hljs-number">27394053</span>,<span class="hljs-number">54766781</span>,<span class="hljs-number">50920854</span>,<span class="hljs-number">80202681</span>,<span class="hljs-number">67618417</span>,<span class="hljs-number">82912294</span>,<span class="hljs-number">20150728</span>,<span class="hljs-number">20042189</span>,<span class="hljs-number">86403320</span>,<span class="hljs-number">38738266</span>,<span class="hljs-number">58393070</span>,<span class="hljs-number">50887299</span>,<span class="hljs-number">12170654</span>,<span class="hljs-number">16212895</span>,<span class="hljs-number">37361223</span>,<span class="hljs-number">13677457</span>,<span class="hljs-number">19503506</span>,<span class="hljs-number">20213757</span>,<span class="hljs-number">84240441</span>,<span class="hljs-number">39618969</span>,<span class="hljs-number">26401150</span>,<span class="hljs-number">47937678</span>,<span class="hljs-number">55871130</span>,<span class="hljs-number">79189571</span>,<span class="hljs-number">5717133</span>,<span class="hljs-number">12444503</span>,<span class="hljs-number">95283334</span>,<span class="hljs-number">14827147</span>,<span class="hljs-number">22008485</span>,<span class="hljs-number">56345882</span>,<span class="hljs-number">43237192</span>,<span class="hljs-number">56980197</span>,<span class="hljs-number">68699371</span>,<span class="hljs-number">46407250</span>,<span class="hljs-number">72120555</span>,<span class="hljs-number">70694039</span>,<span class="hljs-number">46438829</span>,<span class="hljs-number">17774982</span>,<span class="hljs-number">36484024</span>,<span class="hljs-number">138767</span>,<span class="hljs-number">89563532</span>,<span class="hljs-number">54847019</span>,<span class="hljs-number">7815592</span>,<span class="hljs-number">44909604</span>,<span class="hljs-number">50479084</span>,<span class="hljs-number">17462504</span>,<span class="hljs-number">96594465</span>,<span class="hljs-number">58317102</span>,<span class="hljs-number">92426225</span>,<span class="hljs-number">91894699</span>,<span class="hljs-number">4501659</span>,<span class="hljs-number">43315607</span>,<span class="hljs-number">9442814</span>,<span class="hljs-number">19705166</span>,<span class="hljs-number">87751308</span>,<span class="hljs-number">95588126</span>,<span class="hljs-number">92372510</span>,<span class="hljs-number">20281564</span>,<span class="hljs-number">19251355</span>,<span class="hljs-number">10321183</span>,<span class="hljs-number">34573093</span>,<span class="hljs-number">19074704</span>,<span class="hljs-number">84678191</span>,<span class="hljs-number">24383998</span>,<span class="hljs-number">27670253</span>,<span class="hljs-number">50223562</span>,<span class="hljs-number">34091936</span>,<span class="hljs-number">99304371</span>,<span class="hljs-number">32477827</span>,<span class="hljs-number">54273037</span>,<span class="hljs-number">86525073</span>,<span class="hljs-number">73253547</span>,<span class="hljs-number">33316827</span>,<span class="hljs-number">6724062</span>,<span class="hljs-number">76707318</span>,<span class="hljs-number">78171148</span>,<span class="hljs-number">44729510</span>,<span class="hljs-number">16697684</span>,<span class="hljs-number">68966388</span>,<span class="hljs-number">57448392</span>,<span class="hljs-number">51380186</span>,<span class="hljs-number">35344477</span>,<span class="hljs-number">98153122</span>,<span class="hljs-number">51825492</span>,<span class="hljs-number">27202774</span>,<span class="hljs-number">26901641</span>,<span class="hljs-number">37527637</span>,<span class="hljs-number">88241695</span>,<span class="hljs-number">15100257</span>,<span class="hljs-number">30418000</span>,<span class="hljs-number">21821200</span>,<span class="hljs-number">95511035</span>,<span class="hljs-number">9289513</span>,<span class="hljs-number">83870196</span>,<span class="hljs-number">54628801</span>,<span class="hljs-number">39402988</span>,<span class="hljs-number">88345504</span>,<span class="hljs-number">84232433</span>,<span class="hljs-number">13925255</span>,<span class="hljs-number">70816934</span>,<span class="hljs-number">6822742</span>,<span class="hljs-number">14400466</span>,<span class="hljs-number">430652</span>,<span class="hljs-number">87397095</span>,<span class="hljs-number">89773413</span>,<span class="hljs-number">10883914</span>,<span class="hljs-number">89939310</span>,<span class="hljs-number">39597573</span>,<span class="hljs-number">49356789</span>,<span class="hljs-number">62857680</span>,<span class="hljs-number">93292662</span>,<span class="hljs-number">55644642</span>,<span class="hljs-number">81922551</span>,<span class="hljs-number">94304087</span>,<span class="hljs-number">63705961</span>,<span class="hljs-number">137763</span>,<span class="hljs-number">22392805</span>,<span class="hljs-number">65195561</span>,<span class="hljs-number">39498904</span>,<span class="hljs-number">22576234</span>,<span class="hljs-number">59467794</span>,<span class="hljs-number">46389072</span>,<span class="hljs-number">66341462</span>,<span class="hljs-number">44602153</span>,<span class="hljs-number">18204976</span>,<span class="hljs-number">45366397</span>,<span class="hljs-number">3880945</span>,<span class="hljs-number">98231882</span>,<span class="hljs-number">27999162</span>,<span class="hljs-number">38209350</span>,<span class="hljs-number">10599910</span>,<span class="hljs-number">77139550</span>,<span class="hljs-number">35114264</span>,<span class="hljs-number">57109708</span>,<span class="hljs-number">93064441</span>,<span class="hljs-number">34801782</span>,<span class="hljs-number">24938667</span>,<span class="hljs-number">84955486</span>,<span class="hljs-number">53018874</span>,<span class="hljs-number">37969943</span>,<span class="hljs-number">64372852</span>,<span class="hljs-number">69596670</span>,<span class="hljs-number">21288762</span>,<span class="hljs-number">12774121</span>,<span class="hljs-number">97588451</span>,<span class="hljs-number">23575359</span>,<span class="hljs-number">10954061</span>,<span class="hljs-number">50363988</span>,<span class="hljs-number">56263940</span>,<span class="hljs-number">61520763</span>,<span class="hljs-number">85096643</span>,<span class="hljs-number">36250068</span>,<span class="hljs-number">19807406</span>,<span class="hljs-number">20984386</span>,<span class="hljs-number">24520668</span>,<span class="hljs-number">44631794</span>,<span class="hljs-number">62587890</span>,<span class="hljs-number">44963362</span>,<span class="hljs-number">7663521</span>,<span class="hljs-number">78505677</span>,<span class="hljs-number">98442373</span>,<span class="hljs-number">90280978</span>,<span class="hljs-number">14494324</span>,<span class="hljs-number">16069861</span>,<span class="hljs-number">11397153</span>,<span class="hljs-number">87726305</span>,<span class="hljs-number">26133866</span>,<span class="hljs-number">42024935</span>,<span class="hljs-number">93393929</span>,<span class="hljs-number">72575268</span>,<span class="hljs-number">76384597</span>,<span class="hljs-number">42272046</span>,<span class="hljs-number">81658814</span>,<span class="hljs-number">40811718</span>,<span class="hljs-number">86054463</span>,<span class="hljs-number">35997739</span>,<span class="hljs-number">51075676</span>,<span class="hljs-number">62839927</span>,<span class="hljs-number">68179261</span>,<span class="hljs-number">19292480</span>,<span class="hljs-number">10464999</span>,<span class="hljs-number">6342696</span>,<span class="hljs-number">75842285</span>,<span class="hljs-number">28671096</span>,<span class="hljs-number">30029838</span>,<span class="hljs-number">19617648</span>,<span class="hljs-number">94667632</span>,<span class="hljs-number">75855376</span>,<span class="hljs-number">83477767</span>,<span class="hljs-number">456684</span>,<span class="hljs-number">81197213</span>,<span class="hljs-number">1961395</span>,<span class="hljs-number">79590898</span>,<span class="hljs-number">470693</span>,<span class="hljs-number">64786459</span>,<span class="hljs-number">90138714</span>,<span class="hljs-number">30486571</span>,<span class="hljs-number">75566704</span>,<span class="hljs-number">64467558</span>,<span class="hljs-number">21380112</span>,<span class="hljs-number">17742907</span>,<span class="hljs-number">7733647</span>,<span class="hljs-number">92017</span>,<span class="hljs-number">64615799</span>,<span class="hljs-number">72272722</span>,<span class="hljs-number">66873854</span>,<span class="hljs-number">77198963</span>,<span class="hljs-number">35594848</span>,<span class="hljs-number">42694993</span>,<span class="hljs-number">12431322</span>,<span class="hljs-number">2247181</span>,<span class="hljs-number">11020746</span>,<span class="hljs-number">42416726</span>,<span class="hljs-number">19127785</span>,<span class="hljs-number">95444937</span>,<span class="hljs-number">36842133</span>,<span class="hljs-number">4203521</span>,<span class="hljs-number">48149533</span>,<span class="hljs-number">45322440</span>,<span class="hljs-number">59710953</span>,<span class="hljs-number">38250773</span>,<span class="hljs-number">31370132</span>,<span class="hljs-number">26889920</span>,<span class="hljs-number">45927952</span>,<span class="hljs-number">55298246</span>,<span class="hljs-number">31197238</span>,<span class="hljs-number">44744953</span>,<span class="hljs-number">35531670</span>,<span class="hljs-number">38850041</span>,<span class="hljs-number">29759177</span>,<span class="hljs-number">76433451</span>,<span class="hljs-number">33696500</span>,<span class="hljs-number">2823716</span>,<span class="hljs-number">68574340</span>,<span class="hljs-number">68889919</span>,<span class="hljs-number">35744793</span>,<span class="hljs-number">64772909</span>,<span class="hljs-number">41562277</span>,<span class="hljs-number">72606631</span>,<span class="hljs-number">54617176</span>,<span class="hljs-number">76086087</span>,<span class="hljs-number">61060196</span>,<span class="hljs-number">1593669</span>,<span class="hljs-number">4666059</span>,<span class="hljs-number">44201567</span>,<span class="hljs-number">97015910</span>,<span class="hljs-number">51039786</span>,<span class="hljs-number">47534369</span>,<span class="hljs-number">36899420</span>,<span class="hljs-number">95163693</span>,<span class="hljs-number">34278055</span>,<span class="hljs-number">24361819</span>,<span class="hljs-number">93200909</span>,<span class="hljs-number">29991418</span>,<span class="hljs-number">63172824</span>,<span class="hljs-number">53644148</span>,<span class="hljs-number">61454424</span>,<span class="hljs-number">44726508</span>,<span class="hljs-number">64910883</span>,<span class="hljs-number">31088636</span>,<span class="hljs-number">14005026</span>,<span class="hljs-number">83267869</span>,<span class="hljs-number">28497493</span>,<span class="hljs-number">12406441</span>,<span class="hljs-number">34686539</span>,<span class="hljs-number">70646963</span>,<span class="hljs-number">7687253</span>,<span class="hljs-number">23115957</span>,<span class="hljs-number">64556990</span>,<span class="hljs-number">49701688</span>,<span class="hljs-number">76843379</span>,<span class="hljs-number">22370877</span>,<span class="hljs-number">11199132</span>,<span class="hljs-number">15492661</span>,<span class="hljs-number">72101877</span>,<span class="hljs-number">47154152</span>,<span class="hljs-number">54969058</span>,<span class="hljs-number">96696025</span>,<span class="hljs-number">33567129</span>,<span class="hljs-number">95788960</span>,<span class="hljs-number">13301506</span>,<span class="hljs-number">38695877</span>,<span class="hljs-number">52992551</span>,<span class="hljs-number">37817234</span>,<span class="hljs-number">82136809</span>,<span class="hljs-number">28111091</span>,<span class="hljs-number">84977065</span>,<span class="hljs-number">93404791</span>,<span class="hljs-number">56350318</span>,<span class="hljs-number">27576451</span>,<span class="hljs-number">84170153</span>,<span class="hljs-number">37381626</span>,<span class="hljs-number">22432144</span>,<span class="hljs-number">35119973</span>,<span class="hljs-number">23922989</span>,<span class="hljs-number">98961080</span>,<span class="hljs-number">14336913</span>,<span class="hljs-number">49612713</span>,<span class="hljs-number">47410677</span>,<span class="hljs-number">41559348</span>,<span class="hljs-number">64216475</span>,<span class="hljs-number">75502736</span>,<span class="hljs-number">16203656</span>,<span class="hljs-number">81726720</span>,<span class="hljs-number">64541981</span>,<span class="hljs-number">82181762</span>,<span class="hljs-number">95869963</span>,<span class="hljs-number">1086041</span>,<span class="hljs-number">76856852</span>,<span class="hljs-number">99484886</span>,<span class="hljs-number">47292021</span>,<span class="hljs-number">99746735</span>,<span class="hljs-number">79082859</span>,<span class="hljs-number">67416188</span>,<span class="hljs-number">46391963</span>,<span class="hljs-number">58631281</span>,<span class="hljs-number">80994168</span>,<span class="hljs-number">9464550</span>,<span class="hljs-number">5851058</span>,<span class="hljs-number">16534935</span>,<span class="hljs-number">63307701</span>,<span class="hljs-number">91875109</span>,<span class="hljs-number">18716507</span>,<span class="hljs-number">15870646</span>,<span class="hljs-number">6003995</span>,<span class="hljs-number">836024</span>,<span class="hljs-number">35610568</span>,<span class="hljs-number">39574140</span>,<span class="hljs-number">76244639</span>,<span class="hljs-number">83403189</span>,<span class="hljs-number">51252728</span>,<span class="hljs-number">6516065</span>,<span class="hljs-number">94907007</span>,<span class="hljs-number">81605606</span>,<span class="hljs-number">40398075</span>,<span class="hljs-number">40258386</span>,<span class="hljs-number">6692981</span>,<span class="hljs-number">50852074</span>,<span class="hljs-number">2869416</span>,<span class="hljs-number">97682971</span>,<span class="hljs-number">44427361</span>,<span class="hljs-number">9608914</span>,<span class="hljs-number">58464559</span>,<span class="hljs-number">81806036</span>,<span class="hljs-number">20047387</span>,<span class="hljs-number">66264452</span>,<span class="hljs-number">58063775</span>,<span class="hljs-number">54179837</span>,<span class="hljs-number">48463792</span>,<span class="hljs-number">17877188</span>,<span class="hljs-number">31718426</span>,<span class="hljs-number">64192249</span>,<span class="hljs-number">35574859</span>,<span class="hljs-number">3671766</span>,<span class="hljs-number">88905164</span>,<span class="hljs-number">78137697</span>,<span class="hljs-number">46929619</span>,<span class="hljs-number">21063327</span>,<span class="hljs-number">83078770</span>,<span class="hljs-number">93293821</span>,<span class="hljs-number">41618319</span>,<span class="hljs-number">3832324</span>,<span class="hljs-number">91310612</span>,<span class="hljs-number">79854291</span>,<span class="hljs-number">68734227</span>,<span class="hljs-number">8826717</span>,<span class="hljs-number">80881657</span>,<span class="hljs-number">95208907</span>,<span class="hljs-number">7079422</span>,<span class="hljs-number">30037415</span>,<span class="hljs-number">5494004</span>,<span class="hljs-number">44809486</span>,<span class="hljs-number">97620027</span>,<span class="hljs-number">35689182</span>,<span class="hljs-number">13120783</span>,<span class="hljs-number">26108678</span>,<span class="hljs-number">1537176</span>,<span class="hljs-number">16538727</span>,<span class="hljs-number">50841024</span>,<span class="hljs-number">36515680</span>,<span class="hljs-number">82635278</span>,<span class="hljs-number">11112660</span>,<span class="hljs-number">16276555</span>,<span class="hljs-number">72997511</span>,<span class="hljs-number">93487848</span>,<span class="hljs-number">88201238</span>,<span class="hljs-number">53997085</span>,<span class="hljs-number">15198916</span>,<span class="hljs-number">61214583</span>,<span class="hljs-number">78412499</span>,<span class="hljs-number">3585265</span>,<span class="hljs-number">1402827</span>,<span class="hljs-number">56445518</span>,<span class="hljs-number">47661453</span>,<span class="hljs-number">25615629</span>,<span class="hljs-number">58263458</span>,<span class="hljs-number">62155263</span>,<span class="hljs-number">46608555</span>,<span class="hljs-number">15822703</span>,<span class="hljs-number">82285214</span>,<span class="hljs-number">76021596</span>,<span class="hljs-number">84571697</span>,<span class="hljs-number">45999350</span>,<span class="hljs-number">40074628</span>,<span class="hljs-number">8219220</span>,<span class="hljs-number">5429523</span>,<span class="hljs-number">74024203</span>,<span class="hljs-number">22354037</span>,<span class="hljs-number">17605466</span>,<span class="hljs-number">60436920</span>,<span class="hljs-number">52777032</span>,<span class="hljs-number">65801717</span>,<span class="hljs-number">43656316</span>,<span class="hljs-number">10424270</span>,<span class="hljs-number">48035786</span>,<span class="hljs-number">29493228</span>,<span class="hljs-number">83897372</span>,<span class="hljs-number">62101275</span>,<span class="hljs-number">84793857</span>,<span class="hljs-number">56894828</span>,<span class="hljs-number">70636689</span>,<span class="hljs-number">72497148</span>,<span class="hljs-number">67388694</span>,<span class="hljs-number">68146510</span>,<span class="hljs-number">64298548</span>,<span class="hljs-number">97117498</span>,<span class="hljs-number">25553211</span>,<span class="hljs-number">54226533</span>,<span class="hljs-number">90395845</span>,<span class="hljs-number">24172623</span>,<span class="hljs-number">91712292</span>,<span class="hljs-number">98280822</span>,<span class="hljs-number">54042497</span>,<span class="hljs-number">25032894</span>,<span class="hljs-number">6833135</span>,<span class="hljs-number">39011254</span>,<span class="hljs-number">9837753</span>,<span class="hljs-number">63507766</span>,<span class="hljs-number">26747954</span>,<span class="hljs-number">45941264</span>,<span class="hljs-number">99955245</span>,<span class="hljs-number">80051546</span>,<span class="hljs-number">78510759</span>,<span class="hljs-number">71322333</span>,<span class="hljs-number">92407609</span>,<span class="hljs-number">95809491</span>,<span class="hljs-number">18999217</span>,<span class="hljs-number">23430377</span>,<span class="hljs-number">11861293</span>,<span class="hljs-number">42583098</span>,<span class="hljs-number">24163209</span>,<span class="hljs-number">11358738</span>,<span class="hljs-number">3237302</span>,<span class="hljs-number">3176665</span>,<span class="hljs-number">87151132</span>,<span class="hljs-number">2789150</span>,<span class="hljs-number">63905882</span>,<span class="hljs-number">59864282</span>,<span class="hljs-number">3673596</span>,<span class="hljs-number">19570439</span>,<span class="hljs-number">22883042</span>,<span class="hljs-number">72375525</span>,<span class="hljs-number">51614404</span>,<span class="hljs-number">47526636</span>,<span class="hljs-number">98443133</span>,<span class="hljs-number">99140135</span>,<span class="hljs-number">33855918</span>,<span class="hljs-number">28333489</span>,<span class="hljs-number">81416033</span>,<span class="hljs-number">2670097</span>,<span class="hljs-number">4897577</span>,<span class="hljs-number">24439616</span>,<span class="hljs-number">36643479</span>,<span class="hljs-number">40817600</span>,<span class="hljs-number">76022791</span>,<span class="hljs-number">40072872</span>,<span class="hljs-number">95193435</span>,<span class="hljs-number">96967607</span>,<span class="hljs-number">24983145</span>,<span class="hljs-number">49883271</span>,<span class="hljs-number">94602753</span>,<span class="hljs-number">83555050</span>,<span class="hljs-number">85455145</span>,<span class="hljs-number">34563229</span>,<span class="hljs-number">72328311</span>,<span class="hljs-number">12002151</span>,<span class="hljs-number">71481181</span>,<span class="hljs-number">72998351</span>,<span class="hljs-number">1489188</span>,<span class="hljs-number">38426973</span>,<span class="hljs-number">91893116</span>,<span class="hljs-number">61594591</span>,<span class="hljs-number">89693630</span>,<span class="hljs-number">6268166</span>,<span class="hljs-number">20056665</span>,<span class="hljs-number">62169880</span>,<span class="hljs-number">17143472</span>,<span class="hljs-number">35103925</span>,<span class="hljs-number">22452590</span>,<span class="hljs-number">54272289</span>,<span class="hljs-number">34236829</span>,<span class="hljs-number">78028543</span>,<span class="hljs-number">84474414</span>,<span class="hljs-number">40386926</span>,<span class="hljs-number">50550952</span>,<span class="hljs-number">49413559</span>,<span class="hljs-number">48781941</span>,<span class="hljs-number">22927237</span>,<span class="hljs-number">44447815</span>,<span class="hljs-number">29960478</span>,<span class="hljs-number">47578119</span>,<span class="hljs-number">10192558</span>,<span class="hljs-number">87733936</span>,<span class="hljs-number">88699383</span>,<span class="hljs-number">38808712</span>,<span class="hljs-number">79944807</span>,<span class="hljs-number">84014713</span>,<span class="hljs-number">31865463</span>,<span class="hljs-number">72617685</span>,<span class="hljs-number">19557568</span>,<span class="hljs-number">47865990</span>,<span class="hljs-number">39069638</span>,<span class="hljs-number">20086122</span>,<span class="hljs-number">1777562</span>,<span class="hljs-number">29018078</span>,<span class="hljs-number">78358083</span>,<span class="hljs-number">94561719</span>,<span class="hljs-number">46281152</span>,<span class="hljs-number">99789008</span>,<span class="hljs-number">86929490</span>,<span class="hljs-number">16534451</span>,<span class="hljs-number">55989144</span>,<span class="hljs-number">52455669</span>,<span class="hljs-number">54561585</span>,<span class="hljs-number">97379646</span>,<span class="hljs-number">20416183</span>,<span class="hljs-number">87617750</span>,<span class="hljs-number">76115505</span>,<span class="hljs-number">3282482</span>,<span class="hljs-number">8383619</span>,<span class="hljs-number">45456319</span>,<span class="hljs-number">29576432</span>,<span class="hljs-number">67750627</span>,<span class="hljs-number">61736333</span>,<span class="hljs-number">33745442</span>,<span class="hljs-number">51502165</span>,<span class="hljs-number">35349384</span>,<span class="hljs-number">78106651</span>,<span class="hljs-number">23232822</span>,<span class="hljs-number">94851387</span>,<span class="hljs-number">78254073</span>,<span class="hljs-number">82406754</span>,<span class="hljs-number">10317954</span>,<span class="hljs-number">70125940</span>,<span class="hljs-number">45067526</span>,<span class="hljs-number">27061875</span>,<span class="hljs-number">25640164</span>,<span class="hljs-number">52574899</span>,<span class="hljs-number">93819227</span>,<span class="hljs-number">93789607</span>,<span class="hljs-number">96122951</span>,<span class="hljs-number">31673246</span>,<span class="hljs-number">70431904</span>,<span class="hljs-number">54067896</span>,<span class="hljs-number">37146857</span>,<span class="hljs-number">37817889</span>,<span class="hljs-number">14058940</span>,<span class="hljs-number">60710246</span>,<span class="hljs-number">64844350</span>,<span class="hljs-number">91604383</span>,<span class="hljs-number">71972005</span>,<span class="hljs-number">13888349</span>,<span class="hljs-number">19093493</span>,<span class="hljs-number">27397281</span>,<span class="hljs-number">61085409</span>,<span class="hljs-number">66529387</span>,<span class="hljs-number">82761299</span>,<span class="hljs-number">72236310</span>,<span class="hljs-number">19277077</span>,<span class="hljs-number">96599501</span>,<span class="hljs-number">68304096</span>,<span class="hljs-number">48292937</span>,<span class="hljs-number">97503321</span>,<span class="hljs-number">88011133</span>,<span class="hljs-number">29224803</span>,<span class="hljs-number">79782945</span>,<span class="hljs-number">79965966</span>,<span class="hljs-number">83716914</span>,<span class="hljs-number">90432214</span>,<span class="hljs-number">48938902</span>,<span class="hljs-number">12498489</span>,<span class="hljs-number">30246261</span>,<span class="hljs-number">91624049</span>,<span class="hljs-number">68652396</span>,<span class="hljs-number">23677785</span>,<span class="hljs-number">44084687</span>,<span class="hljs-number">3865123</span>,<span class="hljs-number">37823170</span>,<span class="hljs-number">45287730</span>,<span class="hljs-number">38784682</span>,<span class="hljs-number">28058351</span>,<span class="hljs-number">68226368</span>,<span class="hljs-number">61569897</span>,<span class="hljs-number">44737876</span>,<span class="hljs-number">70575908</span>,<span class="hljs-number">25568463</span>,<span class="hljs-number">24668386</span>,<span class="hljs-number">88650569</span>,<span class="hljs-number">35559584</span>,<span class="hljs-number">1897737</span>,<span class="hljs-number">77844785</span>,<span class="hljs-number">29780669</span>,<span class="hljs-number">84004602</span>,<span class="hljs-number">29029776</span>,<span class="hljs-number">91003545</span>,<span class="hljs-number">48058106</span>,<span class="hljs-number">9463847</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93674701</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9720356</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31732184</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53855095</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33144472</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71864888</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27541768</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27238726</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83648428</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12942332</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26918445</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19781953</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81861032</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74800064</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12286132</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6624397</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64942581</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70512799</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46356598</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88292448</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87069909</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38175756</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98121997</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62570414</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15900806</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51527968</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89092372</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8084203</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53772848</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78871524</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3608561</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85909562</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41702172</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61800503</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57877634</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93407278</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30824340</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13159046</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49055339</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73058078</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">983603</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73571456</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51694978</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75136628</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82716874</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83551181</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7964224</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47505945</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92695321</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15885152</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79282709</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18572099</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27392970</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14552787</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19848227</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4518183</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11773920</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22285326</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71605145</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2402625</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63365854</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70973600</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10584706</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83688869</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84268419</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6026005</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36545233</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24462648</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19293921</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17561083</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52105483</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59243514</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35230465</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34650779</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30053489</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24225251</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59642405</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81933853</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94495716</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26364324</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25980634</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5579237</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14569289</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89417845</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71178959</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4143920</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20467990</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53316808</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21288525</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82249537</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37737589</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44712689</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36788133</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15668654</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4697556</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63785060</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11555169</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36401204</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92276179</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4135929</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75453019</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28231031</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8649240</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11576980</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20262028</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56242424</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11305608</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5655216</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90240601</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28569373</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5296027</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10739594</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72751648</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22531251</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12535926</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36347415</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19740655</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69125465</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7523885</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88128548</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88830806</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25010302</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29411467</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99614288</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32646290</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16592563</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69036910</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32604729</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88737786</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90169676</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57646877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72105460</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40027541</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70362483</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37221415</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25284914</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69691185</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17972978</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1544661</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47324366</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25337670</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91133621</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63697117</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48652228</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18538437</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79966496</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26066529</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65334307</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8305141</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86289387</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20178085</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88836090</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74948034</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14101728</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7837868</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83548120</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65602502</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83129211</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24785681</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65000269</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49140174</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62636621</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31096695</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52276400</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28546681</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83631937</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57100225</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42531528</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28326396</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38641032</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93055463</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20525612</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66073509</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35154065</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29007664</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12600294</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76829494</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73917074</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67226149</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12478806</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39842542</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70312958</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82792046</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49668650</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46280815</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96555182</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22966062</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83158116</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87566530</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66277804</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7944142</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90649884</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64342810</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9881875</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14833854</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82959569</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50523207</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48788762</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3801076</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14677723</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63080506</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96215352</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36302231</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35067168</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11695282</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19447382</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66401373</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40822285</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41406321</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48630216</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78955925</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57194625</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52097877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16169037</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44834346</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2593695</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29948466</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41842778</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50510473</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39669493</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64590865</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26160800</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94882286</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2703212</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41243905</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89363549</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82819429</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25565895</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86836890</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58385785</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55898457</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99305620</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43332680</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98223672</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4494624</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25408421</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28054121</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48197701</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90633404</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25825550</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90631154</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24867226</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61846156</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38911183</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67826056</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10676975</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57116645</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">474292</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82387517</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56211477</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46555785</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49282428</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99468990</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81172472</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26720330</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38692582</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96073680</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88412290</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28829489</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1816508</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75321051</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81650509</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23175973</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42008725</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60743468</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52532114</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">731909</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77811415</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86804961</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29675484</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33584929</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">180367</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93687804</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41093066</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5987495</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27291494</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78229979</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63194139</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34357776</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9992084</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22643334</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22407822</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69740170</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29581361</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50036776</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88768091</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82537322</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83709895</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55361776</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90616169</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44595355</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9468440</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54552233</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73496954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46104486</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92947715</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38522993</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88515232</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57725249</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48507967</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25309486</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91597013</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85635814</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69579638</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68775627</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57556546</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77900275</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95965693</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9601780</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5448068</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54075952</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64335883</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80114875</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14793294</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21016639</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1959922</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93176996</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7893733</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51407895</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45849129</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33857790</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30096194</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78021982</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66555961</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15842998</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77678123</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56648395</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8171848</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80152264</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78616680</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80098122</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22882409</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77242219</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3124519</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60865422</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43164198</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43256621</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73261157</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12541949</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49780175</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23167183</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10509251</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41809106</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25655902</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6752559</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39850293</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50992519</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40061483</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84526968</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93056718</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53267125</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53914467</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39404926</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83672449</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21484465</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34147538</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13437853</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74079093</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50400032</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85705998</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7557614</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10300505</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79264856</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65669946</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23899714</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53506926</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36081544</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11113765</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65755643</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5826515</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60392667</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55562374</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98132987</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80904530</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92663352</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7283593</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3709276</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52078745</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84847057</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34235334</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63889320</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70036669</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58603533</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27394053</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54766781</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50920854</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80202681</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67618417</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82912294</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20150728</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20042189</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86403320</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38738266</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58393070</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50887299</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12170654</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16212895</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37361223</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13677457</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19503506</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20213757</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84240441</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39618969</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26401150</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47937678</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55871130</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79189571</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5717133</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12444503</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95283334</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14827147</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22008485</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56345882</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43237192</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56980197</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68699371</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46407250</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72120555</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70694039</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46438829</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17774982</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36484024</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">138767</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89563532</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54847019</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7815592</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44909604</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50479084</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17462504</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96594465</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58317102</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92426225</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91894699</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4501659</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43315607</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9442814</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19705166</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87751308</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95588126</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92372510</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20281564</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19251355</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10321183</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34573093</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19074704</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84678191</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24383998</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27670253</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50223562</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34091936</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99304371</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">32477827</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54273037</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86525073</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">73253547</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33316827</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6724062</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76707318</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78171148</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44729510</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16697684</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68966388</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57448392</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51380186</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35344477</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98153122</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51825492</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27202774</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26901641</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37527637</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88241695</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15100257</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30418000</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21821200</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95511035</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9289513</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83870196</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54628801</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39402988</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88345504</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84232433</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13925255</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70816934</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6822742</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14400466</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">430652</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87397095</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89773413</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10883914</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89939310</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39597573</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49356789</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62857680</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93292662</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55644642</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81922551</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94304087</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63705961</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">137763</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22392805</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65195561</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39498904</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22576234</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59467794</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46389072</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66341462</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44602153</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18204976</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45366397</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3880945</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98231882</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27999162</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38209350</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10599910</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77139550</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35114264</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">57109708</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93064441</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34801782</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24938667</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84955486</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53018874</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37969943</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64372852</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">69596670</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21288762</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12774121</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97588451</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23575359</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10954061</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50363988</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56263940</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61520763</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85096643</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36250068</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19807406</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20984386</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24520668</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44631794</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62587890</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44963362</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7663521</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78505677</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98442373</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90280978</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14494324</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16069861</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11397153</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87726305</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26133866</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42024935</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93393929</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72575268</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76384597</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42272046</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81658814</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40811718</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86054463</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35997739</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51075676</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62839927</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68179261</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19292480</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10464999</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6342696</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75842285</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28671096</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30029838</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19617648</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94667632</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75855376</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83477767</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">456684</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81197213</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1961395</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79590898</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">470693</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64786459</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90138714</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30486571</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75566704</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64467558</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21380112</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17742907</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7733647</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92017</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64615799</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72272722</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66873854</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77198963</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35594848</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42694993</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12431322</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2247181</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11020746</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42416726</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19127785</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95444937</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36842133</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4203521</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48149533</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45322440</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59710953</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38250773</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31370132</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26889920</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45927952</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55298246</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31197238</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44744953</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35531670</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38850041</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29759177</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76433451</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33696500</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2823716</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68574340</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68889919</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35744793</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64772909</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41562277</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72606631</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54617176</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76086087</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61060196</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1593669</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4666059</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44201567</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97015910</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51039786</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47534369</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36899420</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95163693</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34278055</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24361819</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93200909</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29991418</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63172824</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53644148</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61454424</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44726508</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64910883</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31088636</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14005026</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83267869</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28497493</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12406441</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34686539</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70646963</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7687253</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23115957</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64556990</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49701688</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76843379</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22370877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11199132</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15492661</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72101877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47154152</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54969058</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96696025</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33567129</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95788960</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13301506</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38695877</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52992551</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37817234</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82136809</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28111091</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84977065</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93404791</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56350318</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27576451</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84170153</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37381626</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22432144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35119973</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23922989</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98961080</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14336913</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49612713</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47410677</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41559348</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64216475</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">75502736</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16203656</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81726720</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64541981</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82181762</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95869963</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1086041</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76856852</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99484886</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47292021</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99746735</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79082859</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67416188</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46391963</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58631281</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80994168</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9464550</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5851058</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16534935</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63307701</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91875109</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18716507</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15870646</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6003995</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">836024</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35610568</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39574140</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76244639</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83403189</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51252728</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6516065</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94907007</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81605606</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40398075</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40258386</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6692981</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50852074</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2869416</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97682971</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44427361</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9608914</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58464559</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81806036</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20047387</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66264452</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58063775</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54179837</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48463792</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17877188</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31718426</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64192249</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35574859</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3671766</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88905164</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78137697</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46929619</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">21063327</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83078770</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93293821</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">41618319</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3832324</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91310612</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79854291</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68734227</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8826717</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80881657</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95208907</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">7079422</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30037415</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5494004</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44809486</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97620027</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35689182</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13120783</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26108678</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1537176</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16538727</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50841024</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36515680</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82635278</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11112660</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16276555</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72997511</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93487848</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88201238</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">53997085</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15198916</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61214583</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78412499</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3585265</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1402827</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56445518</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47661453</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25615629</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">58263458</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62155263</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46608555</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">15822703</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82285214</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76021596</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84571697</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45999350</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40074628</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8219220</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5429523</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">74024203</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22354037</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17605466</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60436920</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52777032</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">65801717</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">43656316</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10424270</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48035786</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29493228</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83897372</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62101275</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84793857</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">56894828</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70636689</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72497148</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67388694</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68146510</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64298548</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97117498</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25553211</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54226533</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90395845</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24172623</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91712292</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98280822</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54042497</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25032894</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6833135</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39011254</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9837753</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63507766</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">26747954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45941264</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99955245</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">80051546</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78510759</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71322333</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">92407609</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95809491</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">18999217</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23430377</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11861293</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">42583098</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24163209</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">11358738</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3237302</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3176665</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87151132</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2789150</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">63905882</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">59864282</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3673596</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19570439</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22883042</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72375525</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51614404</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47526636</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">98443133</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99140135</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33855918</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28333489</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">81416033</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2670097</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">4897577</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24439616</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">36643479</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40817600</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76022791</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40072872</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">95193435</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96967607</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24983145</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49883271</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94602753</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83555050</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">85455145</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34563229</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72328311</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12002151</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71481181</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72998351</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1489188</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38426973</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91893116</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61594591</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">89693630</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">6268166</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20056665</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">62169880</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">17143472</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35103925</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22452590</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54272289</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">34236829</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78028543</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84474414</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">40386926</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">50550952</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">49413559</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48781941</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">22927237</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44447815</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29960478</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47578119</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10192558</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87733936</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88699383</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38808712</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79944807</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84014713</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31865463</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72617685</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19557568</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">47865990</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">39069638</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20086122</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1777562</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29018078</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78358083</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94561719</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">46281152</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">99789008</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">86929490</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">16534451</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">55989144</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52455669</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54561585</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97379646</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">20416183</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">87617750</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">76115505</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3282482</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">8383619</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45456319</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29576432</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">67750627</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61736333</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">33745442</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">51502165</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35349384</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78106651</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23232822</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">94851387</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">78254073</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82406754</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">10317954</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70125940</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45067526</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27061875</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25640164</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">52574899</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93819227</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">93789607</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96122951</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">31673246</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70431904</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">54067896</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37146857</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37817889</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">14058940</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">60710246</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">64844350</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91604383</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">71972005</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">13888349</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19093493</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">27397281</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61085409</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">66529387</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">82761299</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">72236310</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">19277077</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">96599501</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68304096</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48292937</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">97503321</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88011133</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29224803</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79782945</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">79965966</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">83716914</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">90432214</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48938902</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">12498489</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">30246261</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91624049</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68652396</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">23677785</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44084687</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">3865123</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">37823170</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">45287730</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">38784682</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">28058351</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">68226368</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">61569897</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">44737876</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">70575908</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">25568463</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">24668386</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">88650569</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">35559584</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1897737</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">77844785</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29780669</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">84004602</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">29029776</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">91003545</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">48058106</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">9463847</span>;<br></code></pre></td></tr></tbody></table></figure><p>测试结果如下：<br>第一种情况，ID列为主键的情况，4组测试执行计划一样，执行的时间也基本没有区别。<br>A组or和in的执行时间： or的执行时间为：0.002s &nbsp; &nbsp; in的执行时间为：0.002s<br>B组or和in的执行时间： or的执行时间为：0.004s &nbsp; &nbsp; in的执行时间为：0.004s<br>C组or和in的执行时间： or的执行时间为：0.006s &nbsp; &nbsp; in的执行时间为：0.005s<br>D组or和in的执行时间： or的执行时间为：0.018s &nbsp; &nbsp; in的执行时间为：0.014s<br>第二种情况，ID列为一般索引的情况，4组测试执行计划一样，执行的时间也基本没有区别。<br>A组or和in的执行时间： or的执行时间为：0.002s &nbsp; &nbsp; in的执行时间为：0.002s<br>B组or和in的执行时间： or的执行时间为：0.006s &nbsp; &nbsp; in的执行时间为：0.005s &nbsp;<br>C组or和in的执行时间： or的执行时间为：0.008s &nbsp; &nbsp; in的执行时间为：0.008s<br>D组or和in的执行时间： or的执行时间为：0.021s &nbsp; &nbsp; in的执行时间为：0.020s &nbsp;<br>第三种情况，ID列没有索引的情况，4组测试执行计划一样，执行的时间有很大的区别。<br>A组or和in的执行时间： or的执行时间为：5.016s &nbsp; &nbsp; &nbsp;in的执行时间为：5.071s<br>B组or和in的执行时间： or的执行时间为：1min 02s &nbsp; &nbsp; in的执行时间为：5.018s<br>C组or和in的执行时间： or的执行时间为：1min 55s &nbsp; &nbsp; in的执行时间为：5.018s<br>D组or和in的执行时间： or的执行时间为：6min 17s &nbsp; &nbsp; in的执行时间为：5.057s</p><p><strong>结论：从上面的测试结果，可以看出如果in和or所在列有索引或者主键的话，or和in没啥差别，执行计划和执行时间都几乎一样。如果in和or所在列没有索引的话，性能差别就很大了。在没有索引的情况下，随着in或者or后面的数据量越多，in的效率不会有太大的下降，但是or会随着记录越多的话性能下降非常厉害，从第三种测试情况中可以很明显地看出了，基本上是指数级增长。因此在给in和or的效率下定义的时候，应该再加上一个条件，就是所在的列是否有索引或者是否是主键。如果有索引或者主键性能没啥差别，如果没有索引，性能差别不是一点点！</strong> </p><h2 id="模糊查询like"><a href="#模糊查询like" class="headerlink" title="模糊查询like"></a>模糊查询like</h2><p>模糊查询又被称为模糊匹配，在实际开发中使用较多，比如：查询公司中所有姓张的，查询岗位中带有经理两个字的职位等等，这些都需要使用模糊查询。<br>模糊查询的语法格式如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> .. <span class="hljs-keyword">from</span> .. <span class="hljs-keyword">where</span> 字段 <span class="hljs-keyword">like</span> <span class="hljs-string">'通配符表达式'</span>;<br></code></pre></td></tr></tbody></table></figure><p>在模糊查询中，通配符主要包括两个：一个是%，一个是下划线_。其中%代表任意多个字符。下划线_代表任意一个字符。<br>案例1：查询员工名字以’S’开始的员工姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">'S%'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071240690.png"><br>案例2：查询员工名字以’T’结尾的员工姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">'%T'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071236651.png"><br>案例3：查询员工名字中含有’O’的员工姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">'%O%'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071232760.png"></p><p>案例4：查询员工名字中第二个字母是’A’的员工姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">'_A%'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071228879.png"><br>案例5：查询学员名字中含有下划线的。<br>执行以下SQL语句，先准备测试数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> student;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  <span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>,<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>)<br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>, <span class="hljs-string">'susan'</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>, <span class="hljs-string">'lucy'</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>, <span class="hljs-string">'jack_son'</span>);<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071224597.png"><br>查询学员名字中含有下划线的，执行以下SQL试试：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">'%_%'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071220713.png"><br>显然这个查询结果不是我们想要的，以上SQL之所以将所有数据全部显示了，因为下划线代表任意单个字符，如果你想让这个下划线变成一个普通的下划线字符，就要使用转义字符了，在mysql当中转义字符是“\”，这个和java语言中的转义字符是一样的：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">'%\_%'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071216797.png"></p><h1 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h1><p>排序操作很常用，比如查询学员成绩，按照成绩降序排列。排序的SQL语法：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> .. <span class="hljs-keyword">from</span> .. <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段 <span class="hljs-keyword">asc</span>/<span class="hljs-keyword">desc</span><br></code></pre></td></tr></tbody></table></figure><h2 id="单一字段升序"><a href="#单一字段升序" class="headerlink" title="单一字段升序"></a>单一字段升序</h2><p>查询员工的编号、姓名、薪资，按照薪资升序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071212451.png"></p><h2 id="单一字段降序"><a href="#单一字段降序" class="headerlink" title="单一字段降序"></a>单一字段降序</h2><p>查询员工的编号、姓名、薪资，按照薪资降序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071207658.png"></p><h2 id="默认采用升序"><a href="#默认采用升序" class="headerlink" title="默认采用升序"></a>默认采用升序</h2><p>查询员工的编号、姓名、薪资，按照薪资升序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071149356.png"><br>查询员工的编号、姓名，按照姓名升序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ename;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071145085.png"></p><h2 id="多个字段排序"><a href="#多个字段排序" class="headerlink" title="多个字段排序"></a>多个字段排序</h2><p>查询员工的编号、姓名、薪资，按照薪资升序排列，如果薪资相同的，再按照姓名升序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> empno,ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">asc</span>, ename <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071140449.png"></p><h2 id="where和order-by的位置"><a href="#where和order-by的位置" class="headerlink" title="where和order by的位置"></a>where和order by的位置</h2><p>找出岗位是MANAGER的员工姓名和薪资，按照薪资升序排列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job = <span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071135663.png"><br><strong>通过这个例子主要是想告诉大家：where先执行，order by语句是最后执行的。</strong></p><h1 id="distinct去重"><a href="#distinct去重" class="headerlink" title="distinct去重"></a>distinct去重</h1><p>查询工作岗位</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> job <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071130155.png"><br>可以看到工作岗位中有重复的记录，如何在显示的时候去除重复记录呢？在字段前添加distinct关键字。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> job <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071126423.png"><br>注意：这个去重只是将显示的结果去重，原表数据不会被更改。<br>接下来测试一下，在distinct关键字前添加其它字段是否可以？</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, <span class="hljs-keyword">distinct</span> job <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p>分析一下：ename是14条记录，distinct job是5条记录，可以同时显示吗？<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071122762.png"><br>报错了，通过测试得知，distinct只能出现在所有字段的最前面。<br><strong>当distinct出现后，后面多个字段一定是联合去重的</strong>，我们来做两个练习就知道了：<br>练习1：找出公司中所有的工作岗位。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071119131.png"></p><p>练习2：找出公司中不同部门的不同工作岗位。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071113773.png"></p><h1 id="数据处理函数"><a href="#数据处理函数" class="headerlink" title="数据处理函数"></a>数据处理函数</h1><p>关于select语句，我们之前都是这样写：select 字段名 from 表名; 其实，这里的字段名可以看做“变量”，select后面既然可以跟变量，那么可以跟常量吗，尝试一下：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071108628.png"><br>通过以上sql的测试得知，select后面既可以跟变量，又可以跟常量。<br>以上三条SQL中前两条中100和’abc’都是常量，最后一条SQL的abc没有添加单引号，它会被当做某个表的字段名，因为没有这个字段所以报错。 </p><h2 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h2><h3 id="转大写upper和ucase"><a href="#转大写upper和ucase" class="headerlink" title="转大写upper和ucase"></a>转大写upper和ucase</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 查询所有员工名字，以大写形式展现</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">upper</span>(ename) <span class="hljs-keyword">as</span> ename <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071102727.png"><br>还有一个和upper函数功能相同的函数ucase，也可以转大写，了解一下即可：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 查询所有员工姓名，以大写形式展现</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">ucase</span>(ename) <span class="hljs-keyword">as</span> ename <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071058673.png"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 查询员工smith的岗位、薪资（假如你不知道数据库表中的人名是大写、小写还是大小写混合）</span><br><span class="hljs-keyword">select</span> ename, job, sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-keyword">upper</span>(ename) = <span class="hljs-string">'SMITH'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071055092.png"></p><h3 id="转小写lower和lcase"><a href="#转小写lower和lcase" class="headerlink" title="转小写lower和lcase"></a>转小写lower和lcase</h3><p><strong>很简单，不再赘述，直接上代码：</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># 查询员工姓名，以小写形式展现</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">lower</span>(ename) <span class="hljs-keyword">as</span> ename <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">lcase</span>(ename) <span class="hljs-keyword">as</span> ename <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071050634.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071047379.png"></p><h3 id="截取字符串substr"><a href="#截取字符串substr" class="headerlink" title="截取字符串substr"></a>截取字符串substr</h3><p>语法：substr(‘被截取的字符串’, 起始下标, 截取长度)<br>有两种写法：<br>第一种：substr(‘被截取的字符串’, 起始下标, 截取长度)<br>第二种：substr(‘被截取的字符串’, 起始下标)，当第三个参数“截取长度”缺失时，截取到字符串末尾<br>注意：起始下标从1开始，不是从0开始。（1表示从左侧开始的第一个位置，-1表示从右侧开始的第一个位置。）<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071042957.png"></p><p>练习：找出员工名字中第二个字母是A的</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-keyword">substr</span>(ename, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) = <span class="hljs-string">'A'</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071039658.png"></p><h3 id="获取字符串长度length"><a href="#获取字符串长度length" class="headerlink" title="获取字符串长度length"></a>获取字符串长度length</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071036575.png"><br>注意：一个汉字是2个长度。</p><h3 id="获取字符的个数char-length"><a href="#获取字符的个数char-length" class="headerlink" title="获取字符的个数char_length"></a>获取字符的个数char_length</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071033198.png"></p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>语法：concat(‘字符串1’, ‘字符串2’, ‘字符串3’….)<br>拼接的字符串数量没有限制。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071022892.png"><br>注意：在mysql8之前，双竖线||也是可以完成字符串拼接的。但在mysql8之后，||只作为逻辑运算符，不能再进行字符串拼接了。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">'abc'</span> || <span class="hljs-string">'def'</span> || <span class="hljs-string">'xyz'</span>;<br></code></pre></td></tr></tbody></table></figure><p>mysql8之后，|| 只作为“或者”运算符，例如：找出工资高于3000或者低于900的员工姓名和薪资：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename, sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt; <span class="hljs-number">3000</span> || sal &lt; <span class="hljs-number">900</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071019150.png"><br>mysql中可以使用+进行字符串的拼接吗？不可以，在mysql中+只作加法运算，在进行加法运算时，会将加号两边的数据尽最大的努力转换成数字再求和，如果无法转换成数字，最终运算结果通通是0</p><h3 id="去除字符串前后空白trim"><a href="#去除字符串前后空白trim" class="headerlink" title="去除字符串前后空白trim"></a>去除字符串前后空白trim</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">concat</span>(<span class="hljs-keyword">trim</span>(<span class="hljs-string">'    abc    '</span>), <span class="hljs-string">'def'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071015562.png"><br>默认是去除前后空白，也可以去除指定的前缀后缀，例如：<br>去除前置0</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">trim</span>(<span class="hljs-keyword">leading</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'000111000'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071011934.png"><br>去除后置0</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">trim</span>(trailing <span class="hljs-string">'0'</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'000111000'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071007892.png"><br>前置0和后置0全部去除</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">trim</span>(<span class="hljs-keyword">both</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'000111000'</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071004324.png"></p><h2 id="数字相关"><a href="#数字相关" class="headerlink" title="数字相关"></a>数字相关</h2><h3 id="rand-和rand-x"><a href="#rand-和rand-x" class="headerlink" title="rand()和rand(x)"></a>rand()和rand(x)</h3><p>rand()生成0到1的随机浮点数。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701071000927.png"><br>rand(x)生成0到1的随机浮点数，通过指定整数x来确定每次获取到相同的浮点值。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070957548.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070954448.png"></p><h3 id="round-x-和round-x-y-四舍五入"><a href="#round-x-和round-x-y-四舍五入" class="headerlink" title="round(x)和round(x,y)四舍五入"></a>round(x)和round(x,y)四舍五入</h3><p>round(x) 四舍五入，保留整数位，舍去所有小数<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070951035.png"><br>round(x,y) 四舍五入，保留y位小数<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070947658.png"></p><h3 id="truncate-x-y-舍去"><a href="#truncate-x-y-舍去" class="headerlink" title="truncate(x, y)舍去"></a>truncate(x, y)舍去</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070944411.png"><br>以上SQL表示保留两位小数，剩下的全部舍去。</p><h3 id="ceil与floor"><a href="#ceil与floor" class="headerlink" title="ceil与floor"></a>ceil与floor</h3><p>数字处理函数除了以上的之外，还有ceil和floor函数：</p><ul><li>ceil函数：返回大于或等于数值x的最小整数</li><li>floor函数：返回小于或等于数值x的最大整数</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070940988.png"></p><h2 id="空处理"><a href="#空处理" class="headerlink" title="空处理"></a>空处理</h2><p>ifnull(x, y)，空处理函数，当x为NULL时，将x当做y处理。<br>ifnull(comm, 0)，表示如果员工的津贴是NULL时当做0处理。<br>在SQL语句中，凡是有NULL参与的数学运算，最终的计算结果都是NULL：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070937319.png"><br>看这样一个需求：查询每个员工的年薪。（年薪 = (月薪 + 津贴) * 12个月。注意：有的员工津贴comm是NULL。）<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070933438.png"></p><p>以上查询结果中显示SMITH等人的年薪是NULL，这是为什么，这是因为SMITH等人的津贴comm是NULL，有NULL参与的数学运算，最终结果都是NULL，显然这个需要空处理，此时就用到了ifnull函数：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070929632.png"></p><h2 id="日期和时间相关函数"><a href="#日期和时间相关函数" class="headerlink" title="日期和时间相关函数"></a>日期和时间相关函数</h2><h3 id="获取当前日期和时间"><a href="#获取当前日期和时间" class="headerlink" title="获取当前日期和时间"></a>获取当前日期和时间</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070926123.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070922856.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070917646.png"><br>now()和sysdate()的区别：</p><ul><li>now()：获取的是执行select语句的时刻。</li><li>sysdate()：获取的是执行sysdate()函数的时刻。</li></ul><h3 id="获取当前日期"><a href="#获取当前日期" class="headerlink" title="获取当前日期"></a>获取当前日期</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070913169.png"><br>获取当前日期有三种写法，掌握任意一种即可：</p><ul><li><p>curdate()</p></li><li><p>current_date()</p></li><li><p>current_date</p><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070908902.png"><br>获取档期时间有三种写法，掌握其中一种即可：</p></li><li><p>curtime()</p></li><li><p>current_time()</p></li><li><p>current_time</p></li></ul><h3 id="获取单独的年、月、日、时、分、秒"><a href="#获取单独的年、月、日、时、分、秒" class="headerlink" title="获取单独的年、月、日、时、分、秒"></a>获取单独的年、月、日、时、分、秒</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070904549.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070900056.png"><br>注意：这些函数在使用的时候，需要传递一个日期参数给它，它可以获取到你给定的这个日期相关的年、月、日、时、分、秒的信息。<br>一次性提取一个给定日期的“年月日”部分，可以使用date()函数，例如：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070856362.png"><br>一次性提取一个给定日期的“时分秒”部分，可以使用time()函数，例如：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070853347.png"></p><h3 id="date-add函数"><a href="#date-add函数" class="headerlink" title="date_add函数"></a>date_add函数</h3><p>date_add函数的作用：给指定的日期添加间隔的时间，从而得到一个新的日期。<br>date_add函数的语法格式：date_add(日期, interval expr 单位)，例如：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070849778.png"><br>以’2023-01-03’为基准，间隔3天之后的日期：’2023-01-06’<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070845401.png"></p><p>以’2023-01-03’为基准，间隔3个月之后的日期：’2023-04-03’<br>详细解释一下这个函数的相关参数：</p><ul><li>日期：一个日期类型的数据</li><li>interval：关键字，翻译为“间隔”，固定写法</li><li>expr：指定具体的间隔量，一般是一个数字。<strong>也可以为负数，如果为负数，效果和date_sub函数相同</strong>。</li><li>单位：<ul><li>year：年</li><li>month：月</li><li>day：日</li><li>hour：时</li><li>minute：分</li><li>second：秒</li><li>microsecond：微秒（1秒等于1000毫秒，1毫秒等于1000微秒）</li><li>week：周</li><li>quarter：季度</li></ul></li></ul><p>请分析下面这条SQL语句所表达的含义：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070837214.png"><br>以上SQL表示：以2022-10-01 10:10:10为基准，在这个时间基础上添加-1微秒，也就是减去1微秒。<br>以上SQL也可以采用date_sub函数完成，例如：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070833644.png"><br>另外，单位也可以采用复合型单位，例如：</p><ul><li>SECOND_MICROSECOND</li><li>MINUTE_MICROSECOND</li><li>MINUTE_SECOND：几分几秒之后</li><li>HOUR_MICROSECOND</li><li>HOUR_SECOND</li><li>HOUR_MINUTE：几小时几分之后</li><li>DAY_MICROSECOND</li><li>DAY_SECOND</li><li>DAY_MINUTE</li><li>DAY_HOUR：几天几小时之后</li><li>YEAR_MONTH：几年几个月之后</li></ul><p>如果单位采用复合型的话，expr该怎么写呢？例如单位采用：day_hour，假设我要表示3天2小时之后，怎么写？<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070828580.png"><br>‘3,2’这个应该很好理解，表示3天2个小时之后。’3,2’和day_hour是对应的。</p><h3 id="date-format日期格式化函数"><a href="#date-format日期格式化函数" class="headerlink" title="date_format日期格式化函数"></a>date_format日期格式化函数</h3><p>将日期转换成具有某种格式的日期字符串，通常用在查询操作当中。（date类型转换成char类型）<br>语法格式：date_format(日期, ‘日期格式’)<br>该函数有两个参数：</p><ul><li>第一个参数：日期。这个参数就是即将要被格式化的日期。类型是date类型。</li><li>第二个参数：指定要格式化的格式字符串。<ul><li>%Y：四位年份</li><li>%y：两位年份</li><li>%m：月份（1..12）</li><li>%d：日（1..30）</li><li>%H：小时（0..23）</li><li>%i：分（0..59）</li><li>%s：秒（0..59）</li></ul></li></ul><p>例如：获取当前系统时间，让其以这个格式展示：2000-10-11 20:15:30<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070823576.png"><br>注意：在mysql当中，默认的日期格式就是：%Y-%m-%d %H:%i:%s，所以当你直接输出日期数据的时候，会自动转换成该格式的字符串：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070818690.png"></p><h3 id="str-to-date函数"><a href="#str-to-date函数" class="headerlink" title="str_to_date函数"></a>str_to_date函数</h3><p>该函数的作用是将char类型的日期字符串转换成日期类型date，通常使用在插入和修改操作当中。（char类型转换成date类型）<br>假设有一个学生表t_student，学生有一个生日的字段，类型是date类型：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> t_student;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br>  <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>),<br>  birth <span class="hljs-built_in">date</span><br>);<br>desc t_student;<br></code></pre></td></tr></tbody></table></figure><p>我们要给这个表插入一条数据：姓名zhangsan，生日85年10月1日，执行以下insert语句：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070813896.png"><br>错误原因：日期值不正确。意思是：birth字段需要一个日期，你给的这个字符串’10/01/1985’我识别不了。这种情况下，我们就可以使用str_to_date函数进行类型转换：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070807662.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070801463.png"><br>当然，如果你提供的日期字符串格式能够被mysql解析，str_to_date函数是可以省略的，底层会自动调用该函数进行类型转换：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070756628.png"><br>如果日期格式符合以上的几种格式，mysql都会自动进行类型转换的。</p><h3 id="dayofweek、dayofmonth、dayofyear函数"><a href="#dayofweek、dayofmonth、dayofyear函数" class="headerlink" title="dayofweek、dayofmonth、dayofyear函数"></a>dayofweek、dayofmonth、dayofyear函数</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070751969.png"><br>dayofweek：一周中的第几天（1<del>7），周日是1，周六是7。<br>dayofmonth：一个月中的第几天（1</del>31）<br>dayofyear：一年中的第几天（1~366)</p><h3 id="last-day函数"><a href="#last-day函数" class="headerlink" title="last_day函数"></a>last_day函数</h3><p>获取给定日期所在月的最后一天的日期：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070746468.png"></p><h3 id="datediff函数"><a href="#datediff函数" class="headerlink" title="datediff函数"></a>datediff函数</h3><p>计算两个日期之间所差天数：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070742829.png"><br>时分秒不算，只计算日期部分相差的天数。</p><h3 id="timediff函数"><a href="#timediff函数" class="headerlink" title="timediff函数"></a>timediff函数</h3><p>计算两个日期所差时间，例如日期1和日期2所差10:20:30，表示差10小时20分钟30秒。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070738685.png"></p><h2 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h2><p>如果条件为TRUE则返回“YES”，如果条件为FALSE则返回“NO”：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">IF</span>(<span class="hljs-number">500</span>&lt;<span class="hljs-number">1000</span>, <span class="hljs-string">"YES"</span>, <span class="hljs-string">"NO"</span>);<br></code></pre></td></tr></tbody></table></figure><p>例如：如果工资高于3000，则输出1，反之则输出0<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070734203.png"><br>再例如：如果名字是SMITH的，工资上调10%，其他员工工资正常显示。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070729532.png"><br>再例如：工作岗位是MANAGER的工资上调10%，是SALESMAN的工资上调20%，其他岗位工资正常。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070724969.png"><br><strong>上面这个需求也可以使用：case.. when.. then.. when.. then.. else.. end来完成：</strong><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070720083.png"></p><h2 id="cast函数"><a href="#cast函数" class="headerlink" title="cast函数"></a>cast函数</h2><p>cast函数用于将值从一种数据类型转换为表达式中指定的另一种数据类型<br>语法：cast(值 as 数据类型)<br>例如：cast(‘2020-10-11’ as date)，表示将字符串’2020-10-11’转换成日期date类型。<br>在使用cast函数时，可用的数据类型包括：</p><ul><li>date：日期类型</li><li>time：时间类型</li><li>datetime：日期时间类型</li><li>signed：有符号的int类型（有符号指的是正数负数）</li><li>char：定长字符串类型</li><li>decimal：浮点型</li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070708940.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070704116.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070656664.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070652672.png"></p><h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><p>md5函数，可以将给定的字符串经过md5算法进行加密处理，字符串经过加密之后会生成一个固定长度32位的字符串，md5加密之后的密文通常是不能解密的：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070643563.png"></p><h1 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h1><p><strong>分组函数的执行原则：先分组，然后对每一组数据执行分组函数。如果没有分组语句group by的话，整张表的数据自成一组。</strong><br>分组函数包括五个：</p><ul><li>max：最大值</li><li>min：最小值</li><li>avg：平均值</li><li>sum：求和</li><li>count：计数</li></ul><h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><p><strong>找出员工的最高薪资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><h2 id="min"><a href="#min" class="headerlink" title="min"></a>min</h2><p><strong>找出员工的最低工资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(sal) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><h2 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h2><p><strong>计算员工的平均薪资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><h2 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h2><p><strong>计算员工的工资和</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">sum</span>(sal) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><strong>计算员工的津贴之和</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">sum</span>(comm) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p>重点：所有的分组函数都是自动忽略NULL的。</p><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><strong>统计员工人数</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(ename) <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p>count(*)和count(1)的效果一样，统计该组中总记录行数。<br>count(ename)统计的是这个ename字段中不为NULL个数总和。<br>例如：count(comm) 结果是 4，而不是14</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(comm) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><p><strong>统计岗位数量</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(<span class="hljs-keyword">distinct</span> job) <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></tbody></table></figure><h2 id="分组函数组合使用"><a href="#分组函数组合使用" class="headerlink" title="分组函数组合使用"></a>分组函数组合使用</h2><p>select count(*),max(sal),min(sal),avg(sal),sum(sal) from emp;</p><h2 id="分组函数注意事项"><a href="#分组函数注意事项" class="headerlink" title="分组函数注意事项"></a>分组函数注意事项</h2><p><strong>分组函数不能直接使用在where子句当中</strong><br>select ename,job from emp where sal &gt; avg(sal); 这个会报错的<br>原因：分组的行为是在where执行之后才开始的。</p><h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><p>按照某个字段分组，或者按照某些字段联合分组。注意：group by的执行是在where之后执行。<br>语法：<br>group by 字段<br>group by 字段1,字段2,字段3….<br><strong>找出每个岗位的平均薪资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> job, <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job;<br></code></pre></td></tr></tbody></table></figure><p><strong>找出每个部门最高工资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure><p><strong>找出每个部门不同岗位的平均薪资</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,job,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job;<br></code></pre></td></tr></tbody></table></figure><p><strong>当select语句中有group by的话，select后面只能跟分组函数或参加分组的字段</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno; // 这个SQL执行后会报错。<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070637605.png"></p><h2 id="having"><a href="#having" class="headerlink" title="having"></a>having</h2><p>having写在group by的后面，当你对分组之后的数据不满意，可以继续通过having对分组之后的数据进行过滤。<br>where的过滤是在分组前进行过滤。<br>使用原则：尽量在where中过滤，实在不行，再使用having。越早过滤效率越高。</p><p><strong>找出除20部分之外，其它部门的平均薪资。</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno&lt;&gt;<span class="hljs-number">20</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno; // 建议<br><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">having</span> deptno &lt;&gt; <span class="hljs-number">20</span>; // 不建议<br></code></pre></td></tr></tbody></table></figure><p><strong>查询每个部门平均薪资，找出平均薪资高于2000的。</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">having</span> <span class="hljs-keyword">avg</span>(sal) &gt; <span class="hljs-number">2000</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="组内排序"><a href="#组内排序" class="headerlink" title="组内排序"></a>组内排序</h2><p>案例：找出每个工作岗位的工资排名在前两名的。<br>substring_index函数的使用：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070633127.png"><br>group_concat函数的使用：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070629747.png"><br>学习了这两个函数之后，自己可以尝试写出来吗？</p><h1 id="总结单表的DQL语句"><a href="#总结单表的DQL语句" class="headerlink" title="总结单表的DQL语句"></a>总结单表的DQL语句</h1><p>select …5<br>from …1<br>where …2<br>group by …3<br>having …4<br>order by …6<br>重点掌握一个完整的DQL语句执行顺序。</p><h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><h2 id="什么是连接查询"><a href="#什么是连接查询" class="headerlink" title="什么是连接查询"></a>什么是连接查询</h2><ol><li><p>从一张表中查询数据称为单表查询。</p></li><li><p>从两张或更多张表中联合查询数据称为多表查询，又叫做连接查询。</p></li><li><p>什么时候需要使用连接查询？</p><ol><li>比如这样的需求：员工表中有员工姓名，部门表中有部门名字，要求查询每个员工所在的部门名字，这个时候就需要连接查询。<h2 id="连接查询的分类"><a href="#连接查询的分类" class="headerlink" title="连接查询的分类"></a>连接查询的分类</h2></li></ol></li><li><p>根据语法出现的年代进行分类：</p><ol><li>SQL92（这种语法很少用，可以不用学。）</li><li>SQL99（我们主要学习这种语法。）</li></ol></li><li><p>根据连接方式的不同进行分类：</p><ol><li>内连接<ol><li>等值连接</li><li>非等值连接</li><li>自连接</li></ol></li><li>外连接<ol><li>左外连接（左连接）</li><li>右外连接（右连接）</li></ol></li><li>全连接</li></ol></li></ol><h2 id="笛卡尔积现象"><a href="#笛卡尔积现象" class="headerlink" title="笛卡尔积现象"></a>笛卡尔积现象</h2><ol><li>当两张表进行连接查询时，如果没有任何条件进行过滤，最终的查询结果条数是两张表条数的乘积。为了避免笛卡尔积现象的发生，需要添加条件进行筛选过滤。</li><li>需要注意：添加条件之后，虽然避免了笛卡尔积现象，但是匹配的次数没有减少。</li><li>为了SQL语句的可读性，为了执行效率，建议给表起别名。<h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><h3 id="什么叫内连接"><a href="#什么叫内连接" class="headerlink" title="什么叫内连接"></a>什么叫内连接</h3><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070622806.png"><br>满足条件的记录才会出现在结果集中。</li></ol><h3 id="内连接之等值连接"><a href="#内连接之等值连接" class="headerlink" title="内连接之等值连接"></a>内连接之等值连接</h3><p>连接时，条件为等量关系。<br>案例：查询每个员工所在的部门名称，要求显示员工名、部门名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>e.ename,d.dname<br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>dept d<br><span class="hljs-keyword">on</span><br>e.deptno = d.deptno;<br></code></pre></td></tr></tbody></table></figure><p>注意：inner可以省略。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070617299.png"></p><h3 id="内连接之非等值连接"><a href="#内连接之非等值连接" class="headerlink" title="内连接之非等值连接"></a>内连接之非等值连接</h3><p>连接时，条件是非等量关系。<br>案例：查询每个员工的工资等级，要求显示员工名、工资、工资等级。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>e.ename,e.sal,s.grade<br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">join</span><br>salgrade s<br><span class="hljs-keyword">on</span><br>e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070612386.png"></p><h3 id="内连接之自连接"><a href="#内连接之自连接" class="headerlink" title="内连接之自连接"></a>内连接之自连接</h3><p>连接时，一张表看做两张表，自己和自己进行连接。<br>案例：找出每个员工的直属领导，要求显示员工名、领导名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>e.ename 员工名, l.ename 领导名<br><span class="hljs-keyword">from</span><br>emp e<br><span class="hljs-keyword">join</span><br>emp l<br><span class="hljs-keyword">on</span><br>e.mgr = l.empno;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070608141.png"><br>思路：<br>将emp表当做员工表 e<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070603762.png"><br>将emp表当做领导表 l<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070559420.png"><br>可以发现连接条件是：e.mgr = l.empno（员工的领导编号=领导的员工编号)<br>注意：KING这个员工没有查询出来。如果想将KING也查询出来，需要使用外连接。</p><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><h3 id="什么叫外连接"><a href="#什么叫外连接" class="headerlink" title="什么叫外连接"></a>什么叫外连接</h3><p>内连接是满足条件的记录查询出来。也就是两张表的交集。<br>外连接是除了满足条件的记录查询出来，再将其中一张表的记录全部查询出来，另一张表如果没有与之匹配的记录，自动模拟出NULL与其匹配。<br>左外连接：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070554170.png"><br>右外连接：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070549590.png"></p><h3 id="外连接之左外连接（左连接）"><a href="#外连接之左外连接（左连接）" class="headerlink" title="外连接之左外连接（左连接）"></a>外连接之左外连接（左连接）</h3><p>案例：查询所有部门信息，并且找出每个部门下的员工。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  d.*,e.ename<br><span class="hljs-keyword">from</span><br>  dept d<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span><br>  emp e<br><span class="hljs-keyword">on</span><br>  d.deptno = e.deptno;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070544556.png"><br>注意：outer可以省略。<br>任何一个左连接都可以写作右连接。</p><h3 id="外连接之右外连接（右连接）"><a href="#外连接之右外连接（右连接）" class="headerlink" title="外连接之右外连接（右连接）"></a>外连接之右外连接（右连接）</h3><p>还是上面的案例，可以写作右连接。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  d.*,e.ename<br><span class="hljs-keyword">from</span><br>  emp e<br><span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span><br>  dept d<br><span class="hljs-keyword">on</span><br>  d.deptno = e.deptno;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070539772.png"><br>案例：找出所有员工的上级领导，要求显示员工名和领导名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  e.ename 员工名,l.ename 领导名 <br><span class="hljs-keyword">from</span> <br>  emp e <br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> <br>  emp l <br><span class="hljs-keyword">on</span><br>  e.mgr = l.empno;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>  e.ename 员工名,l.ename 领导名 <br><span class="hljs-keyword">from</span> <br>  emp l <br><span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> <br>  emp e <br><span class="hljs-keyword">on</span><br>  e.mgr = l.empno;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070532633.png"></p><h2 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h2><p>什么是全连接？<br>MySQL不支持full join。oracle数据库支持。<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070526771.png"><br>两张表数据全部查询出来，没有匹配的记录，各自为对方模拟出NULL进行匹配。<br>客户表：t_customer<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070521539.png"><br>订单表：t_order<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070517678.png"><br>案例：查询所有的客户和订单。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br> c.*,o.* <br><span class="hljs-keyword">from</span> <br> t_customer c <br><span class="hljs-keyword">full</span> <span class="hljs-keyword">join</span> <br> t_order o <br><span class="hljs-keyword">on</span> <br> c.cid = o.cid;<br></code></pre></td></tr></tbody></table></figure><h2 id="多张表连接"><a href="#多张表连接" class="headerlink" title="多张表连接"></a>多张表连接</h2><p>三张表甚至更多张表如何进行表连接<br>案例：找出每个员工的部门，并且要求显示每个员工的薪资等级。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br> e.ename,d.dname,s.grade <br><span class="hljs-keyword">from</span> <br> emp e <br><span class="hljs-keyword">join</span> <br> dept d <br><span class="hljs-keyword">on</span> <br> e.deptno = d.deptno <br><span class="hljs-keyword">join</span> <br> salgrade s <br><span class="hljs-keyword">on</span> <br> e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070512471.png"></p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="什么是子查询"><a href="#什么是子查询" class="headerlink" title="什么是子查询"></a>什么是子查询</h2><ol><li>select语句中嵌套select语句就叫做子查询。</li><li>select语句可以嵌套在哪里？<ol><li>where后面、from后面、select后面都是可以的。</li></ol></li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ..(<span class="hljs-keyword">select</span>)..<br><span class="hljs-keyword">from</span> ..(<span class="hljs-keyword">select</span>)..<br><span class="hljs-keyword">where</span> ..(<span class="hljs-keyword">select</span>)..<br></code></pre></td></tr></tbody></table></figure><h2 id="where后面使用子查询"><a href="#where后面使用子查询" class="headerlink" title="where后面使用子查询"></a>where后面使用子查询</h2><p>案例：找出高于平均薪资的员工姓名和薪资。<br>错误的示范：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt; <span class="hljs-keyword">avg</span>(sal);<br></code></pre></td></tr></tbody></table></figure><p>错误原因：where后面不能直接使用分组函数。<br>可以使用子查询：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt; (<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp);<br></code></pre></td></tr></tbody></table></figure><h2 id="from后面使用子查询"><a href="#from后面使用子查询" class="headerlink" title="from后面使用子查询"></a>from后面使用子查询</h2><p>小窍门：from后面的子查询可以看做一张临时表。<br>案例：找出每个部门的平均工资的等级。<br>第一步：先找出每个部门平均工资。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">avg</span>(sal) avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070458323.png"><br>第二步：将以上查询结果当做临时表t，t表和salgrade表进行连接查询。条件：t.avgsal between s.losal and s.hisal</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.*,s.grade <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">avg</span>(sal) avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> t.avgsal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070454918.png"></p><h2 id="select后面使用子查询"><a href="#select后面使用子查询" class="headerlink" title="select后面使用子查询"></a>select后面使用子查询</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,(<span class="hljs-keyword">select</span> d.dname <span class="hljs-keyword">from</span> dept d <span class="hljs-keyword">where</span> e.deptno = d.deptno) <span class="hljs-keyword">as</span> dname <span class="hljs-keyword">from</span> emp e;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070451163.png"></p><h2 id="exists、not-exists"><a href="#exists、not-exists" class="headerlink" title="exists、not exists"></a>exists、not exists</h2><p>在 MySQL 数据库中，EXISTS（存在）用于检查子查询的查询结果行数是否大于0。如果子查询的查询结果行数大于0，则 EXISTS 条件为真。（即存在查询结果则是true。）</p><p>主要应用场景：</p><ul><li>EXISTS 可以与 SELECT、UPDATE、DELETE 一起使用，用于检查另一个查询是否返回任何行；</li><li>EXISTS 可以用于验证条件子句中的表达式是否存在；</li><li>EXISTS 常用于子查询条件过滤，例如查询有订单的用户等。</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> t_customer;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> t_order;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_customer(<br>  customer_id <span class="hljs-built_in">int</span>,<br>  customer_name <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>)<br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_order(<br>  order_id <span class="hljs-built_in">int</span>,<br>  order_price <span class="hljs-built_in">decimal</span>(<span class="hljs-number">5</span>,<span class="hljs-number">1</span>),<br>  customer_id <span class="hljs-built_in">int</span><br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_customer(customer_id,customer_name) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">'zhangsan'</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_customer(customer_id,customer_name) <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">'lisi'</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_customer(customer_id,customer_name) <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">'wangwu'</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_order(order_id, order_price, customer_id) <span class="hljs-keyword">values</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1000.0</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_order(order_id, order_price, customer_id) <span class="hljs-keyword">values</span>(<span class="hljs-number">20</span>, <span class="hljs-number">2000.0</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_order(order_id, order_price, customer_id) <span class="hljs-keyword">values</span>(<span class="hljs-number">30</span>, <span class="hljs-number">3000.0</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_order(order_id, order_price, customer_id) <span class="hljs-keyword">values</span>(<span class="hljs-number">40</span>, <span class="hljs-number">4000.0</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-keyword">commit</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_customer;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_order;<br></code></pre></td></tr></tbody></table></figure><p>现在我们来看一个简单的案例，假设我们要查询先前有过订单的顾客，而订单信息保存在 t_order 表中，顾客信息保存在 t_customer 表中。我们可以使用以下 sql 语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_customer c <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_order o <span class="hljs-keyword">where</span> o.customer_id=c.customer_id);<br></code></pre></td></tr></tbody></table></figure><p>在这个查询语句中，子查询用于检查是否有订单与每个客户相关联。如果子查询返回至少一行，则表示该顾客已经下过订单，并返回此客户的所有信息，否则该顾客将不被包含在结果中。</p><p>以下是这个查询语句的执行过程：</p><ol><li> 首先查询表 t_customer 中的所有顾客信息（以下简称为顾客表）； </li><li> 对于顾客表中的每一行，都执行一次子查询，子查询查询该顾客有没有订单，如果有，则在结果集中保留该顾客信息；如果没有，则将该顾客排除； </li><li> 最终返回有订单顾客的所有信息。 </li></ol><p>除了 EXISTS，也可以使用 NOT EXISTS 条件从 SELECT、UPDATE、DELETE 语句中获取子查询的返回结果。NOT EXISTS 用于检查一个子查询是否返回任何行，如果没有行返回，那么 NOT EXISTS 将返回 true。</p><p>例如，我们想要查找所有没有下过订单的顾客，可以使用以下 sql 语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_customer c <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_order o <span class="hljs-keyword">where</span> o.customer_id=c.customer_id);<br></code></pre></td></tr></tbody></table></figure><p>在这个查询语句中，如果没有任何与顾客相关联的订单，则 NOT EXISTS 子查询将返回一个空结果集，这时候 WHERE 条件为 true，并将返回所有顾客信息。如果顾客有订单，则 NOT EXISTS 子查询的结果集将不为空，WHERE 条件为 false，则不会返回该顾客的信息。</p><p>总之，无论是 EXISTS 还是 NOT EXISTS，都是非常有用的 SQL 工具。可以通过它们来结合子查询来动态过滤查询结果，使 SQL 查询变得更加灵活和高效。</p><h2 id="in和exists区别"><a href="#in和exists区别" class="headerlink" title="in和exists区别"></a>in和exists区别</h2><p>IN 和 EXISTS 都是用于关系型数据库查询的操作符。不同之处在于：</p><ol><li> IN 操作符是根据指定列表中的值来判断是否满足条件，而 EXISTS 操作符则是根据子查询的结果是否有返回记录集来判断。 </li><li> EXISTS 操作符通常比 IN 操作符更快，尤其是在子查询返回记录数很大的情况下。因为 EXISTS 只需要判断是否存在符合条件的记录，而 IN 操作符需要比对整个列表，因此执行效率相对较低。 </li><li> IN 操作符可同时匹配多个值，而 EXISTS 只能匹配一组条件。 </li></ol><p>下面是一个简单的示例，用于演示 IN 和 EXISTS 之间的区别。假设我们有两个表 orders 和 products，orders 表中记录了订单信息，products 表中记录了商品信息。现在我们想查询所有“手机”和“平板电脑”这两种商品中，至少有一笔订单销售了 $1000 以上的商品：</p><p>使用 IN 操作符：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> product_name <span class="hljs-keyword">IN</span> (<span class="hljs-string">'手机'</span>, <span class="hljs-string">'平板电脑'</span>)<br><span class="hljs-keyword">AND</span> product_id <span class="hljs-keyword">IN</span> (<br>  <span class="hljs-keyword">SELECT</span> product_id<br>  <span class="hljs-keyword">FROM</span> orders<br>  <span class="hljs-keyword">WHERE</span> order_amount &gt; <span class="hljs-number">1000</span><br>);<br></code></pre></td></tr></tbody></table></figure><p>使用 EXISTS 操作符：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> product_name <span class="hljs-keyword">IN</span> (<span class="hljs-string">'手机'</span>, <span class="hljs-string">'平板电脑'</span>)<br><span class="hljs-keyword">AND</span> <span class="hljs-keyword">EXISTS</span> (<br>  <span class="hljs-keyword">SELECT</span> *<br>  <span class="hljs-keyword">FROM</span> orders<br>  <span class="hljs-keyword">WHERE</span> orders.product_id = products.product_id<br>  <span class="hljs-keyword">AND</span> order_amount &gt; <span class="hljs-number">1000</span><br>);<br></code></pre></td></tr></tbody></table></figure><p>总之，IN 和 EXISTS 都是用于条件过滤的操作符，但其实现方式和性能特点都不同，需要根据具体情况进行选择和使用。</p><h1 id="union-amp-union-all"><a href="#union-amp-union-all" class="headerlink" title="union&amp;union all"></a>union&amp;union all</h1><p>不管是union还是union all都可以将两个查询结果集进行合并。<br>union会对合并之后的查询结果集进行去重操作。<br>union all是直接将查询结果集合并，不进行去重操作。（union all和union都可以完成的话，优先选择union all，union all因为不需要去重，所以效率高一些。）<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070442242.png"><br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070437679.png"><br>案例：查询工作岗位是MANAGER和SALESMAN的员工。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job=<span class="hljs-string">'MANAGER'</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job=<span class="hljs-string">'SALESMAN'</span>;<br></code></pre></td></tr></tbody></table></figure><p>以上案例采用or也可以完成，那or和union all有什么区别？考虑走索引优化之类的选择union all，其它选择or。<br>两个结果集合并时，列数量要相同：<br><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250701070433107.png"></p><h1 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h1><ol><li><p>limit作用：查询第几条到第几条的记录。通常是因为表中数据量太大，需要分页显示。</p></li><li><p>limit语法格式：</p><ol><li>limit 开始下标, 长度</li></ol></li><li><p>案例：查询员工表前5条记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>, <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><p>如果下标是从0开始，可以简写为：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>查询工资排名在前5名的员工（limit是在order by执行之后才会执行的）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>通用的分页sql</p></li></ol><p>假设每页显示3条记录：pageSize = 3<br>第1页：limit 0, 3<br>第2页：limit 3, 3<br>第3页：limit 6, 3<br>第pageNo页：limit (pageNo - 1)*pageSize, pageSize</p><h1 id="35个DQL练手题"><a href="#35个DQL练手题" class="headerlink" title="35个DQL练手题"></a>35个DQL练手题</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><ol><li><p>取得每个部门最高薪水的人员名称</p><p>第一步：取得每个部门最高薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">as</span> maxsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：将上面第一步的查询结果当做一张临时表t，进行表连接，条件是：t.deptno=e.deptno and t.maxsal=e.sal</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,t.* <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">as</span> maxsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t <span class="hljs-keyword">on</span> e.deptno = t.deptno <span class="hljs-keyword">and</span> e.sal = t.maxsal;<br></code></pre></td></tr></tbody></table></figure><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><ol start="2"><li><p>哪些人的薪水在部门的平均薪水之上</p><p>第一步：取得每个部门的平均薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：将上面的查询结果当做临时表t，让t和emp e表进行表连接，条件是：t.deptno=e.deptno and e.sal&gt;t.avgsal</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,e.sal,t.* <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t <span class="hljs-keyword">on</span> t.deptno=e.deptno <span class="hljs-keyword">and</span> e.sal&gt;t.avgsal;<br></code></pre></td></tr></tbody></table></figure><h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><ol start="3"><li><p>取得每个部门平均薪水的等级</p><p>第一步：取得每个部门的平均薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：将上面的查询结果当做临时表t，然后t和salgrade s表进行连接，条件是：t.avgsal between s.losal and s.hisal</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.*,s.grade <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> t.avgsal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure><h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><ol start="4"><li><p>取得部门中（所有人的）平均的薪水等级</p><p>第一步：找出每个人的薪水等级</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,e.sal,s.grade <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：在上面的查询结果当中继续按照部门编号进行分组，求平均值。（不需要将上面的查询结果当做临时表，继续基于它进行分组即可。）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>   e.deptno,<span class="hljs-keyword">avg</span>(s.grade) <br><span class="hljs-keyword">from</span> <br>  emp e <br><span class="hljs-keyword">join</span> <br>  salgrade s <br><span class="hljs-keyword">on</span> <br>  e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <br>  e.deptno;<br></code></pre></td></tr></tbody></table></figure><h2 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h2><ol start="5"><li><p>不准用组函数（Max），取得最高薪水（给出两种解决方案）</p><p>第一种方案：按照薪资降序排列，取第一个。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二种方案：采用表的自连接方式。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> a.sal <span class="hljs-keyword">from</span> emp a <span class="hljs-keyword">join</span> emp b <span class="hljs-keyword">on</span> a.sal &lt; b.sal);<br></code></pre></td></tr></tbody></table></figure><h2 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h2><ol start="6"><li><p>取得平均薪水最高的部门的部门编号（至少给出两种解决方案）</p><p>第一种方案：降序排列取第一个</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> avgsal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二种方案：max函数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">having</span> <span class="hljs-keyword">avg</span>(sal)=(<span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(t.avgsal) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t);<br></code></pre></td></tr></tbody></table></figure><h2 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h2><ol start="7"><li><p>取得平均薪水最高的部门的部门名称</p><p>比上面的题目多一个表连接，和dept表连接，按照部门名称进行分组。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.dname,<span class="hljs-keyword">avg</span>(e.sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno=d.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> avgsal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h2></li><li><p>求平均薪水的等级最低的部门的部门名称</p><p>第一步：求每个部门的平均薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.dname,<span class="hljs-keyword">avg</span>(e.sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：求每个部门的平均薪水等级（将以上的执行结果当做临时表t，t和salgrade s表进行连接，条件：t.avgsal between .s.losal and s.hisal）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.*,s.grade <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> d.dname,<span class="hljs-keyword">avg</span>(e.sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname) t <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> t.avgsal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure><p>第三步：找到最低的部门名称（以上结果继续按照grade进行升序，然后limit 1）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.*,s.grade <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> d.dname,<span class="hljs-keyword">avg</span>(e.sal) <span class="hljs-keyword">as</span> avgsal <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname) t <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> t.avgsal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> s.grade <span class="hljs-keyword">asc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h2><ol start="9"><li><p>取得比普通员工(员工代码没有在mgr字段上出现的)的最高薪水还要高的领导人姓名</p><p>第一步：找出所有的普通员工的最高薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> empno <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> mgr <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> mgr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>);<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：大于以上最高薪水的一定是要找的领导人。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt; (<span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> empno <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> mgr <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> mgr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>));<br></code></pre></td></tr></tbody></table></figure><h2 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h2><ol start="10"><li><p>取得薪水最高的前五名员工</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h2></li><li><p>取得薪水最高的第六到第十名员工</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>, <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第12题"><a href="#第12题" class="headerlink" title="第12题"></a>第12题</h2></li><li><p>取得最后入职的5名员工</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal,hiredate <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> hiredate <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第13题"><a href="#第13题" class="headerlink" title="第13题"></a>第13题</h2><ol start="13"><li><p>取得每个薪水等级有多少员工</p><p>第一步：找出每个员工的薪水等级</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,s.grade <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br></code></pre></td></tr></tbody></table></figure></li></ol><p>第二步：基于以上的记录继续根据等级分组，count即可。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s.grade,<span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> s.grade;<br></code></pre></td></tr></tbody></table></figure><h2 id="第14题"><a href="#第14题" class="headerlink" title="第14题"></a>第14题</h2><ol start="14"><li><p>列出所有员工及领导的姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename 员工名, l.ename 领导名 <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.mgr = l.empno;<br></code></pre></td></tr></tbody></table></figure><h2 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h2></li><li><p>列出受雇日期早于其直接上级的所有员工的编号,姓名,部门名称</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename 员工名,e.hiredate, l.ename 领导名,l.hiredate,d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.mgr = l.empno <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">where</span> e.hiredate &lt; l.hiredate;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h2><ol start="16"><li><p>列出部门名称和这些部门的员工信息,同时列出那些没有员工的部门</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.dname,e.ename,e.sal <span class="hljs-keyword">from</span> dept d <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp e <span class="hljs-keyword">on</span> d.deptno = e.deptno;<br></code></pre></td></tr></tbody></table></figure><h2 id="第17题"><a href="#第17题" class="headerlink" title="第17题"></a>第17题</h2></li><li><p>列出至少有5个员工的所有部门</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(*) &gt;= <span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第18题"><a href="#第18题" class="headerlink" title="第18题"></a>第18题</h2></li><li><p>列出薪金比”SMITH”多的所有员工信息</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal &gt; (<span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename = <span class="hljs-string">'SMITH'</span>);<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第19题"><a href="#第19题" class="headerlink" title="第19题"></a>第19题</h2><ol start="19"><li><p>列出所有”CLERK”(办事员)的姓名及其部门名称,部门的人数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t1.ename,t1.dname,t2.total <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> e.ename,d.dname,d.deptno <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">where</span> e.job = <span class="hljs-string">'CLERK'</span>) t1 <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">as</span> total,deptno  <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno) t2 <span class="hljs-keyword">on</span> t1.deptno = t2.deptno;<br></code></pre></td></tr></tbody></table></figure><h2 id="第20题"><a href="#第20题" class="headerlink" title="第20题"></a>第20题</h2></li><li><p>列出最低薪金大于1500的各种工作及从事此工作的全部雇员人数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> job,<span class="hljs-keyword">min</span>(sal),<span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job <span class="hljs-keyword">having</span> <span class="hljs-keyword">min</span>(sal)&gt;<span class="hljs-number">1500</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第21题"><a href="#第21题" class="headerlink" title="第21题"></a>第21题</h2></li><li><p>列出在部门”SALES”&lt;销售部&gt;工作的员工的姓名,假定不知道销售部的部门编号</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">where</span> d.dname=<span class="hljs-string">'sales'</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第22题"><a href="#第22题" class="headerlink" title="第22题"></a>第22题</h2><ol start="22"><li><p>列出薪金高于公司平均薪金的所有员工,所在部门,上级领导,雇员的工资等级</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename 员工,l.ename 领导,d.dname,s.grade <span class="hljs-keyword">from</span> <br>emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.mgr = l.empno <br><span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <br><span class="hljs-keyword">join</span> salgrade s <span class="hljs-keyword">on</span> e.sal <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal <br><span class="hljs-keyword">where</span> e.sal &gt; (<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal) <span class="hljs-keyword">from</span> emp);<br></code></pre></td></tr></tbody></table></figure><h2 id="第23题"><a href="#第23题" class="headerlink" title="第23题"></a>第23题</h2></li><li><p>列出与”SCOTT”从事相同工作的所有员工及部门名称</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,d.dname,e.job <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno=d.deptno <span class="hljs-keyword">where</span> job=(<span class="hljs-keyword">select</span> job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename =<span class="hljs-string">'scott'</span>);<br></code></pre></td></tr></tbody></table></figure><h2 id="第24题"><a href="#第24题" class="headerlink" title="第24题"></a>第24题</h2></li><li><p>列出薪金等于部门30中员工的薪金的其他员工的姓名和薪金</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal,deptno <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno=<span class="hljs-number">30</span>) <span class="hljs-keyword">and</span> deptno &lt;&gt; <span class="hljs-number">30</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第25题"><a href="#第25题" class="headerlink" title="第25题"></a>第25题</h2><ol start="25"><li><p>列出薪金高于在部门30工作的所有员工的薪金的员工姓名和薪金.部门名称</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,e.sal,d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno <span class="hljs-keyword">where</span> sal &gt; (<span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno=<span class="hljs-number">30</span>);<br></code></pre></td></tr></tbody></table></figure><h2 id="第26题"><a href="#第26题" class="headerlink" title="第26题"></a>第26题</h2></li><li><p>列出在每个部门工作的员工数量,平均工资和平均服务期限</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(sal),<span class="hljs-keyword">count</span>(*),deptno,<span class="hljs-keyword">avg</span>(<span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">now</span>(),hiredate)) <span class="hljs-keyword">as</span> avgtime <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></tbody></table></figure><h2 id="第27题"><a href="#第27题" class="headerlink" title="第27题"></a>第27题</h2></li><li><p>列出所有员工的姓名、部门名称和工资</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename,e.sal,d.dname <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno = d.deptno;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第28题"><a href="#第28题" class="headerlink" title="第28题"></a>第28题</h2><ol start="28"><li><p>列出所有部门的详细信息和人数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.deptno,d.dname,d.loc,<span class="hljs-keyword">count</span>(e.deptno) <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno=d.deptno <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>  d.deptno,d.dname,d.loc;<br></code></pre></td></tr></tbody></table></figure><h2 id="第29题"><a href="#第29题" class="headerlink" title="第29题"></a>第29题</h2></li><li><p>列出各种工作的最低工资及从事此工作的雇员姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> t.job,t.minsal,e.ename <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> job,<span class="hljs-keyword">min</span>(sal) <span class="hljs-keyword">as</span> minsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job) t <span class="hljs-keyword">on</span> e.job=t.job <span class="hljs-keyword">and</span> e.sal=t.minsal;<br></code></pre></td></tr></tbody></table></figure><h2 id="第30题"><a href="#第30题" class="headerlink" title="第30题"></a>第30题</h2></li><li><p>列出各个部门的MANAGER(领导)的最低薪金</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-keyword">min</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> job=<span class="hljs-string">'MANAGER'</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第31题"><a href="#第31题" class="headerlink" title="第31题"></a>第31题</h2><ol start="31"><li><p>列出所有员工的年工资,按年薪从低到高排序</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,(sal+<span class="hljs-keyword">ifnull</span>(comm,<span class="hljs-number">0</span>))*<span class="hljs-number">12</span> <span class="hljs-keyword">as</span> yearsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> yearsal <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第32题"><a href="#第32题" class="headerlink" title="第32题"></a>第32题</h2></li><li><p>求出员工领导的薪水超过3000的员工名称与领导名称</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.ename 员工名, l.ename 领导名 <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.mgr = l.empno <span class="hljs-keyword">where</span> l.sal&gt;<span class="hljs-number">3000</span>;<br></code></pre></td></tr></tbody></table></figure><h2 id="第33题"><a href="#第33题" class="headerlink" title="第33题"></a>第33题</h2></li><li><p>求出部门名称中,带’S’字符的部门员工的工资合计、部门人数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.dname,<span class="hljs-keyword">ifnull</span>(<span class="hljs-keyword">sum</span>(sal),<span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> sumsal,<span class="hljs-keyword">count</span>(e.ename) <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptno=d.deptno <span class="hljs-keyword">where</span> d.dname <span class="hljs-keyword">like</span> <span class="hljs-string">'%S%'</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> d.dname;<br></code></pre></td></tr></tbody></table></figure><h2 id="第34题"><a href="#第34题" class="headerlink" title="第34题"></a>第34题</h2></li><li><p>给任职日期超过30年的员工加薪10%</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> emp <span class="hljs-keyword">set</span> sal=sal*<span class="hljs-number">1.1</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">now</span>(),hiredate)/<span class="hljs-number">365</span> &gt; <span class="hljs-number">30</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="第35题"><a href="#第35题" class="headerlink" title="第35题"></a>第35题</h2><ol start="35"><li>某公司面试题</li></ol><p>有3个表S（学生表），C（课程表），SC（学生选课表）<br>S（SNO，SNAME）代表（学号，姓名）<br>C（CNO，CNAME，CTEACHER）代表（课号，课名，教师）<br>SC（SNO，CNO，SCGRADE）代表（学号，课号，成绩）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> SC<br>(<br>  SNO      <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>),<br>  CNO      <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>),<br>  SCGRADE  <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> S<br>(<br>  SNO    <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span> ),<br>  SNAME  <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> C<br>(<br>  CNO       <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>),<br>  CNAME     <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>),<br>  CTEACHER  <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'语文'</span>, <span class="hljs-string">'张'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'政治'</span>, <span class="hljs-string">'王'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'3'</span>, <span class="hljs-string">'英语'</span>, <span class="hljs-string">'李'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'4'</span>, <span class="hljs-string">'数学'</span>, <span class="hljs-string">'赵'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'5'</span>, <span class="hljs-string">'物理'</span>, <span class="hljs-string">'黎明'</span>); <br><span class="hljs-keyword">commit</span>;<br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> S ( SNO, SNAME ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'学生1'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> S ( SNO, SNAME ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'学生2'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> S ( SNO, SNAME ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'3'</span>, <span class="hljs-string">'学生3'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> S ( SNO, SNAME ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'4'</span>, <span class="hljs-string">'学生4'</span>); <br><span class="hljs-keyword">commit</span>;<br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'40'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'30'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'20'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'80'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'1'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'2'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'40'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'60'</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">'3'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'80'</span>); <br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></tbody></table></figure><p>问题：<br>1，找出没选过“黎明”老师的所有学生姓名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname <span class="hljs-keyword">from</span> s <span class="hljs-keyword">where</span> sno <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> sno <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno=(<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> c <span class="hljs-keyword">where</span> cteacher=<span class="hljs-string">'黎明'</span>));<br></code></pre></td></tr></tbody></table></figure><p>2，列出2门以上（含2门）不及格学生姓名及平均成绩。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.*,b.avgscore <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> s.sno,s.sname,<span class="hljs-keyword">count</span>(sc.scgrade) <span class="hljs-keyword">as</span> <span class="hljs-keyword">num</span> <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">join</span> s <span class="hljs-keyword">on</span> sc.sno=s.sno <span class="hljs-keyword">where</span> sc.scgrade &lt; <span class="hljs-number">60</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> s.sname,s.sno <span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(sc.scgrade) &gt;= <span class="hljs-number">2</span>) a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> sno,<span class="hljs-keyword">avg</span>(scgrade) avgscore <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno) b <span class="hljs-keyword">on</span> a.sno = b.sno;<br></code></pre></td></tr></tbody></table></figure><p>3，既学过1号课程又学过2号课所有学生的姓名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sc.sno,s.sname <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">join</span> s <span class="hljs-keyword">on</span> sc.sno=s.sno <span class="hljs-keyword">where</span> sc.cno=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sc.sno <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> sno <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno=<span class="hljs-number">2</span>);<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;简单查询&quot;&gt;&lt;a href=&quot;#简单查询&quot; class=&quot;headerlink&quot; title=&quot;简单查询&quot;&gt;&lt;/a&gt;简单查询&lt;/h1&gt;&lt;p&gt;查询是SQL语言的核心，用于表达SQL查询的select查询命令是功能最强也是最为复杂的SQL语句，它的作用就是从数据库中检索数据，并将查询结果返回给用户。 select语句由：select子句(查询内容)、from子句(查询对象)、where子句(查询条件)、order by子句(排序方式)、group by子句(分组方式)等组成。查询语句属于SQL语句中的DQL语句，是所有SQL语句中最为复杂也是最重要的语句，所以必须掌握。接下来我们先从简单查询语句开始学习。&lt;/p&gt;
&lt;h2 id=&quot;查一个字段&quot;&gt;&lt;a href=&quot;#查一个字段&quot; class=&quot;headerlink&quot; title=&quot;查一个字段&quot;&gt;&lt;/a&gt;查一个字段&lt;/h2&gt;&lt;p&gt;查询一个字段说的是：一个表有多列，查询其中的一列。&lt;br&gt;语法格式：select 字段名 from 表名;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select和from是关键字，不能随便写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一条SQL语句必须以“;”结尾&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于SQL语句来说，大小写都可以&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;字段名和表名属于标识符，按照表的实际情况填写，不知道字段名的，可以使用desc命令查看表结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;案例1：查询公司中所有员工编号&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; empno &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; emp; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250630221738866.png&quot; alt=&quot;image-20250630221738866&quot;&gt;&lt;br&gt;案例2：查询公司中所有员工姓名&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; ENAME &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; EMP;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://xiaofanshutu.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Java异常</title>
    <link href="https://xiaofanshutu.github.io/posts/f495a96f.html"/>
    <id>https://xiaofanshutu.github.io/posts/f495a96f.html</id>
    <published>2025-06-25T22:56:00.318Z</published>
    <updated>2025-06-29T23:23:29.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="异常继承结构"><a href="#异常继承结构" class="headerlink" title="异常继承结构"></a>异常继承结构</h2><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626065730758.png" alt="image-20250626065730758"></p><ol><li>所有的异常和错误都是可抛出的。都继承了Throwable类。</li><li>Error是无法处理的，出现后只有一个结果：JVM终止。</li><li>Exception是可以处理的。</li><li>Exception的分类：<ul><li>所有的RuntimeException的子类：运行时异常/未检查异常(UncheckedException)/非受控异常</li><li>Exception的子类（除RuntimeException之外）：编译时异常/检查异常(CheckedException)/受控异常</li></ul></li><li>编译时异常和运行时异常区别：<ul><li>编译时异常特点：在编译阶段必须提前处理，如果不处理编译器报错。</li><li>运行时异常特点：在编译阶段可以选择处理，也可以不处理，没有硬性要求。</li><li>编译时异常一般是由外部环境或外在条件引起的，如网络故障、磁盘空间不足、文件找不到等</li><li>运行时异常一般是由程序员的错误引起的，并且不需要强制进行异常处理</li><li>注意：编译时异常并不是在编译阶段发生的异常，所有的异常发生都是在运行阶段的，因为每个异常发生都是会new异常对象的，new异常对象只能在运行阶段完成。那为什么叫做编译时异常呢？这是因为这种异常必须在编译阶段提前预处理，如果不处理编译器报错，因此而得名编译时异常。</li></ul></li></ol><h2 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h2><p>异常的处理包括两种方式：</p><ul><li>声明异常：类似于推卸责任的处理方式<ul><li>在方法定义时使用throws关键字声明异常，告知调用者，调用这个方法可能会出现异常。这种处理方式的态度是：如果出现了异常则会抛给调用者来处理。</li></ul></li><li>捕捉异常：真正的处理捕捉异常<ul><li>在可能出现异常的代码上使用try..catch进行捕捉处理。这种处理方式的态度是：把异常抓住。其它方法如果调用这个方法，对于调用者来说是不知道这个异常发生的。因为这个异常被抓住并处理掉了。</li></ul></li><li>异常在处理的整个过程中应该是：声明和捕捉联合使用。</li><li>什么时候捕捉？什么时候声明？如果异常发生后需要调用者来处理的，需要调用者知道的，则采用声明方式。否则采用捕捉。</li></ul><h3 id="声明异常-throws-关键字"><a href="#声明异常-throws-关键字" class="headerlink" title="声明异常(throws 关键字)"></a>声明异常(throws 关键字)</h3><ol><li><p>如果一个异常发生后希望调用者来处理的，使用声明异常（俗话说：交给上级处理）</p><p><code>public void m() throws AException, BException... {}</code></p></li><li><p>如果AException和BException都继承了XException，那么也可以这样写：</p><p><code>public void m() throws XException{}</code></p></li><li><p>调用者在调用m()方法时，编译器会检测到该方法上用throws声明了异常，表示可能会抛出异常，编译器会继续检测该异常是否为编译时异常，如果为编译时异常则必须在编译阶段进行处理，如果不处理编译器就会报错。</p></li><li><p>如果所有位置都采用throws，包括main方法的处理态度也是throws，如果运行时出现了异常，最终异常是抛给了main方法的调用者（JVM），JVM则会终止程序的执行。因此为了保证程序在出现异常后不被中断，至少main方法不要再使用throws进行声明了。</p></li><li><p>发生异常后，在发生异常的位置上，往下的代码是不会执行的，除非进行了异常的捕捉。</p></li></ol><h3 id="捕捉异常-try…catch…关键字"><a href="#捕捉异常-try…catch…关键字" class="headerlink" title="捕捉异常 (try…catch…关键字)"></a>捕捉异常 (try…catch…关键字)</h3><ol><li><p>如果一个异常发生后，不需要调用者知道，也不需要调用者来处理，选择使用捕捉方式处理。</p><p>try{</p><p>// 尝试执行可能会出现异常的代码</p><p>// try块中的代码如果执行出现异常，出现异常的位置往下的代码是不会执行的，直接进入catch块执行</p><p>}catch(AException e){</p><p>// 如果捕捉到AException类型的异常，在这里处理</p><p>}catch(BException e){</p><p>// 如果捕捉到BException类型的异常，在这里处理</p><p>}catch(XException e){</p><p>// 如果捕捉到XException类型的异常，在这里处理}</p><p>// 当try..catch..将所有发生的异常捕捉后，这里的代码是会继续往下执行的。</p></li><li><p>catch可以写多个。并且遵循自上而下，从小到大。</p></li><li><p>Java7新特性：catch后面小括号中可以编写多个异常，使用运算符“|”隔开。</p></li></ol><h2 id="异常的常用方法"><a href="#异常的常用方法" class="headerlink" title="异常的常用方法"></a>异常的常用方法</h2><ol><li>获取异常的简单描述信息：<ol><li>exception.getMessage();</li><li>获取的message是通过构造方法创建异常对象时传递过去的message。</li></ol></li><li>打印异常堆栈信息：<ol><li>exception.printStackTrace();</li></ol></li><li>要会看异常的堆栈信息：<ol><li>异常信息的打印是符合栈数据结构的。</li><li>看异常信息主要看最开始的描述信息。看栈顶信息。</li></ol></li></ol><h2 id="finally语句块"><a href="#finally语句块" class="headerlink" title="finally语句块"></a>finally语句块</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>finally语句块中的代码是一定会执行的。</li><li>finally语句块不能单独使用，至少需要配合try语句块一起使用：<ol><li>try…finally</li><li>try…catch…finally</li><li>资源释放的工作比较重要，如果资源没有释放会一直占用内存。</li><li>为了保证资源的关闭，也就是说：不管程序是否出现异常，关闭资源的代码一定要保证执行。</li><li>因此在finally语句块中通常进行资源的释放。</li></ol></li><li>final、finally、finalize分别是什么？<ol><li>final是一个关键字，修饰的类无法继承，修饰的方法无法覆盖，修饰的变量不能修改。</li><li>finally是一个关键字，和try一起使用，finally语句块中的代码一定会执行。</li><li>finalize是一个标识符，它是Object类中的一个方法名。</li></ol></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>以下程序的执行结果？</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626070934605.png" alt="image-20250626070934605"></p><p>以下程序的执行结果？</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626070946473.png" alt="image-20250626070946473"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626070955746.png" alt="image-20250626070955746"></p><h2 id="方法覆盖与异常"><a href="#方法覆盖与异常" class="headerlink" title="方法覆盖与异常"></a>方法覆盖与异常</h2><p>方法重写之后，不能比父类方法抛出更多的异常，可以更少。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626071036017.png" alt="image-20250626071036017"></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;异常继承结构&quot;&gt;&lt;a href=&quot;#异常继承结构&quot; class=&quot;headerlink&quot; title=&quot;异常继承结构&quot;&gt;&lt;/a&gt;异常继承结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250626065730758.png&quot; alt=&quot;image-20250626065730758&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有的异常和错误都是可抛出的。都继承了Throwable类。&lt;/li&gt;
&lt;li&gt;Error是无法处理的，出现后只有一个结果：JVM终止。&lt;/li&gt;
&lt;li&gt;Exception是可以处理的。&lt;/li&gt;
&lt;li&gt;Exception的分类：&lt;ul&gt;
&lt;li&gt;所有的RuntimeException的子类：运行时异常/未检查异常(UncheckedException)/非受控异常&lt;/li&gt;
&lt;li&gt;Exception的子类（除RuntimeException之外）：编译时异常/检查异常(CheckedException)/受控异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编译时异常和运行时异常区别：&lt;ul&gt;
&lt;li&gt;编译时异常特点：在编译阶段必须提前处理，如果不处理编译器报错。&lt;/li&gt;
&lt;li&gt;运行时异常特点：在编译阶段可以选择处理，也可以不处理，没有硬性要求。&lt;/li&gt;
&lt;li&gt;编译时异常一般是由外部环境或外在条件引起的，如网络故障、磁盘空间不足、文件找不到等&lt;/li&gt;
&lt;li&gt;运行时异常一般是由程序员的错误引起的，并且不需要强制进行异常处理&lt;/li&gt;
&lt;li&gt;注意：编译时异常并不是在编译阶段发生的异常，所有的异常发生都是在运行阶段的，因为每个异常发生都是会new异常对象的，new异常对象只能在运行阶段完成。那为什么叫做编译时异常呢？这是因为这种异常必须在编译阶段提前预处理，如果不处理编译器报错，因此而得名编译时异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;异常的处理&quot;&gt;&lt;a href=&quot;#异常的处理&quot; class=&quot;headerlink&quot; title=&quot;异常的处理&quot;&gt;&lt;/a&gt;异常的处理&lt;/h2&gt;&lt;p&gt;异常的处理包括两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明异常：类似于推卸责任的处理方式&lt;ul&gt;
&lt;li&gt;在方法定义时使用throws关键字声明异常，告知调用者，调用这个方法可能会出现异常。这种处理方式的态度是：如果出现了异常则会抛给调用者来处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;捕捉异常：真正的处理捕捉异常&lt;ul&gt;
&lt;li&gt;在可能出现异常的代码上使用try..catch进行捕捉处理。这种处理方式的态度是：把异常抓住。其它方法如果调用这个方法，对于调用者来说是不知道这个异常发生的。因为这个异常被抓住并处理掉了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异常在处理的整个过程中应该是：声明和捕捉联合使用。&lt;/li&gt;
&lt;li&gt;什么时候捕捉？什么时候声明？如果异常发生后需要调用者来处理的，需要调用者知道的，则采用声明方式。否则采用捕捉。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;声明异常-throws-关键字&quot;&gt;&lt;a href=&quot;#声明异常-throws-关键字&quot; class=&quot;headerlink&quot; title=&quot;声明异常(throws 关键字)&quot;&gt;&lt;/a&gt;声明异常(throws 关键字)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果一个异常发生后希望调用者来处理的，使用声明异常（俗话说：交给上级处理）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public void m() throws AException, BException... {}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果AException和BException都继承了XException，那么也可以这样写：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public void m() throws XException{}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调用者在调用m()方法时，编译器会检测到该方法上用throws声明了异常，表示可能会抛出异常，编译器会继续检测该异常是否为编译时异常，如果为编译时异常则必须在编译阶段进行处理，如果不处理编译器就会报错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果所有位置都采用throws，包括main方法的处理态度也是throws，如果运行时出现了异常，最终异常是抛给了main方法的调用者（JVM），JVM则会终止程序的执行。因此为了保证程序在出现异常后不被中断，至少main方法不要再使用throws进行声明了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发生异常后，在发生异常的位置上，往下的代码是不会执行的，除非进行了异常的捕捉。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;捕捉异常-try…catch…关键字&quot;&gt;&lt;a href=&quot;#捕捉异常-try…catch…关键字&quot; class=&quot;headerlink&quot; title=&quot;捕捉异常 (try…catch…关键字)&quot;&gt;&lt;/a&gt;捕捉异常 (try…catch…关键字)&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="https://xiaofanshutu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java数组</title>
    <link href="https://xiaofanshutu.github.io/posts/e3345db4.html"/>
    <id>https://xiaofanshutu.github.io/posts/e3345db4.html</id>
    <published>2025-06-19T13:25:52.900Z</published>
    <updated>2025-06-25T22:53:49.990Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h2><ul><li>什么是数组？<ol><li>在Java中，数组是一种用于存储多个相同数据类型元素的容器。</li><li>例如一个存储整数的数组：int[] nums = {100, 200, 300};</li><li>例如一个存储字符串的数组：String[] names = {“jack”,“lucy”,“lisi”};</li><li>数组是一种引用数据类型，隐式继承Object。因此数组也可以调用Object类中的方法。</li><li>数组对象存储在堆内存中。</li></ol></li><li>数组的分类？<ol><li>根据维数进行分类：一维数组，二维数组，三维数组，多维数组。</li><li>根据数组中存储的元素类型分类：基本类型数组，引用类型数组。</li><li>根据数组初始化方式不同分类：静态数组，动态数组。</li></ol></li><li>Java数组存储元素的特点？<ol><li>数组长度一旦确定不可变。</li><li>数组中元素数据类型一致，每个元素占用空间大小相同。</li><li>数组中每个元素在空间存储上，内存地址是连续的。</li><li>每个元素有索引，首元素索引0，以1递增。</li><li>以首元素的内存地址作为数组对象在堆内存中的地址。</li><li>所有数组对象都有length属性用来获取数组元素个数。末尾元素下标：length-1</li></ol></li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619212910246.png" alt="image-20250619212910246"></p><ul><li>数组优点？<ol><li>根据下标查询某个元素的效率极高。数组中有100个元素和有100万个元素，查询效率相同。时间复杂度O(1)。也就是说在数组中根据下标查询某个元素时，不管数组的长短，耗费时间是固定不变的。</li><li>原因：知道首元素内存地址，元素在空间存储上内存地址又是连续的，每个元素占用空间大小相同，只要知道下标，就可以通过数学表达式计算出来要查找元素的内存地址。直接通过内存地址定位元素。</li></ol></li><li>数组缺点？<ol><li>随机增删元素的效率较低。因为随机增删元素时，为了保证数组中元素的内存地址连续，就需要涉及到后续元素的位移问题。时间复杂度O(n)。O(n)表示的是线性阶，随着问题规模n的不断增大，时间复杂度不断增大，算法的执行效率越低。（不过需要注意的是：对数组末尾元素的增删效率是不受影响的。）</li><li>无法存储大量数据，因为很难在内存上找到非常大的一块连续的内存。</li></ol></li></ul><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><ol><li><p>一维数组是线性结构。二维数组，三维数组，多维数组是非线性结构。</p></li><li><p>如何静态初始化一维数组？</p><ul><li>第一种：int[] arr = {55,67,22}; 或者 int arr[] = {55,67,22};</li><li>第二种：int[] arr = new int[]{55,67,22};</li></ul></li><li><p>如何访问数组中的元素？</p><p>​    通过下标来访问。注意ArrayIndexOutOfBoundsException异常的发生。</p></li><li><p>如何遍历数组？</p><p>​    普通for循环遍历</p><p>​    for-each遍历（优点是代码简洁。缺点是没有下标。）</p></li><li><p>如何动态初始化一维数组？</p><p>​    int[] arr = new int[4];</p><p>​    Object[] objs = new Object[5];</p><p>​    数组动态初始化的时候，确定长度，并且数组中每个元素采用默认值。</p></li></ol><ol start="6"><li>一维数组中存储引用时的内存图</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213239940.png" alt="image-20250619213239940"></p><ol start="7"><li><p>关于main方法的形参args？</p><ul><li><p>接收命令行参数</p></li><li><p>在DOS命令窗口中怎么传？在IDEA中怎么传？</p></li></ul></li><li><p>关于方法的可变长度参数？</p><ul><li>可变长参数只能出现在形参列表中的最后一个位置。</li><li>可变长参数可以当做数组来处理。</li></ul></li></ol><h3 id="一维数组的扩容"><a href="#一维数组的扩容" class="headerlink" title="一维数组的扩容"></a>一维数组的扩容</h3><ol><li>数组长度一旦确定不可变。</li><li>那数组应该如何扩容？<ul><li>只能创建一个更大的数组将原数组中的数据全部拷贝到新数组中</li><li>可以使用System.arraycopy()方法完成数组的拷贝。</li></ul></li><li>数组扩容会影响程序的执行效率，因此尽可能预测数据量，创建一个接近数量的数组，减少扩容次数</li></ol><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ol><li>二维数组是一个特殊的一维数组，特殊在：这个一维数组中每个元素是一个一维数组。</li><li>二维数组的静态初始化<ul><li><code>int[][] arr = new int[][]{{},{},{}}</code>;</li><li><code>int[][] arr = {{},{},{}}</code>;</li></ul></li><li>二维数组的动态初始化(等长)<ul><li><code>int[][] arr = new int[3][4]</code>;</li></ul></li><li>二维数组的动态初始化（不等长）<ul><li><code>int[][] arr = new int[3][]</code>;</li></ul></li><li>二维数组中元素的访问<ul><li><code>第一个元素：arr[0][0]</code></li><li><code>最后一个元素：arr[arr.length-1][arr[arr.length-1].length-1]</code></li></ul></li><li>二维数组中元素的遍历</li></ol><h2 id="IDEA中的Debug调试"><a href="#IDEA中的Debug调试" class="headerlink" title="IDEA中的Debug调试"></a>IDEA中的Debug调试</h2><ol><li>在可能出现问题的代码附近添加断点。一般是将断点添加在方法体的某一行代码上。</li><li>断点可以添加多个。点一次添加一个断点。再点一次断点则消失。</li><li>添加断点后，如果想让程序运行到断点处停下来，需要使用Debug模式运行程序。</li><li>Debug窗口中的按钮</li><li>给断点添加条件</li><li>Debug窗口中的隐藏按钮</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213825573.png" alt="image-20250619213825573"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213838455.png" alt="image-20250619213838455"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213850130.png" alt="image-20250619213850130"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213901588.png" alt="image-20250619213901588"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213916165.png" alt="image-20250619213916165"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213926947.png" alt="image-20250619213926947"></p><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><h3 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h3><ul><li>数据结构概述数据结构是指用来存储和组织数据的一种方式，就像在生活中我们用文件柜、书架、衣柜等来整理我们的物品一样，数据结构也可以帮助我们整理和管理程序中的数据。</li><li>数据结构分为：数据的逻辑结构、数据的物理结构<ol><li>逻辑结构是指数据元素之间的逻辑关系，它是从抽象的角度描述数据元素之间的关系，不涉及具体的存储方式或实现细节。逻辑结构主要关注问题的本质、特点和抽象模型，是数据结构的逻辑表示。</li><li>物理结构是指数据结构在计算机内存中实际存储和组织的方式。它是从具体的角度描述数据结构的实现方式和存储结构，包括数据元素在内存中的存储分布和访问方式等。物理结构主要关注问题的具体实现和操作。</li><li>因此，逻辑结构与物理结构的区别在于：逻辑结构是从抽象的角度描述数据元素之间的关系，物理结构是从具体的角度描述内存中数据元素的存储方式和组织形式。逻辑结构主要关注问题的本质和特点，物理结构主要关注问题的具体实现和操作。</li></ol></li><li>逻辑结构的划分？<ol><li>集合结构：数据结构中的元素之间除了在“同属一个集合”的关系外，别无其它关系；</li><li>线性结构：数据结构中的元素存在“一对一”的线性关系，例如冰糖葫芦； </li><li>树形结构：数据结构中的元素存在“一对多”的层次关系，例如公司组织架构； </li><li>图形结构或网状结构：数据结构中的元素存在“多对多”的任意关系，例如地图。 </li></ol></li><li>物理结构的划分？<ol><li>顺序存储结构：用一组连续的存储空间单元来依次的存储数据元素，例如数组。</li><li>链式存储结构：用一组任意的存储单元来存储元素，通过保存地址找到相关联的元素，元素之间的逻辑关系用引用来表示，例如链表。</li><li>散列存储结构：根据节点key计算出该节点的存储地址。例如：java集合中的HashMap采用了散列存储结构，添加、查询速度都很快。</li></ol></li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619214145962.png" alt="image-20250619214145962"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619214158108.png" alt="image-20250619214158108"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619214209590.png" alt="image-20250619214209590"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619214225269.png" alt="image-20250619214225269"></p><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><ul><li><p>什么是算法？</p><p>算法就是解决问题的方法和步骤，可以让计算机完成特定任务，并提高计算机系统的效率和性能。就像烹饪食品需要遵循一定的步骤和配方一样，例如，做牛排需要选择牛排肉、煎炸的方式、烹饪的时间等，按照一定的步骤最终会有一个好的成品。一个良好的算法可以提高程序的执行效率。</p></li><li><p>怎么评价一个算法好不好？</p><p>如何计算1+2+3+…+100的结果？</p><ul><li>算法1：通过循环，依次累加来实现。耗费时间</li><li>算法2：使用递归来实现。耗费内存</li><li>算法3：高斯算法。(1 + 100)*50。既节省时间，又节省空间。</li></ul><p>同一问题可用不同的算法来解决，而一个算法的质量优劣将影响到算法乃至程序的效率。因此，我们学习算法目的在于选择合适算法和改进算法，一个算法的评价主要从时间复杂度和空间复杂度来考虑。</p><ul><li>时间复杂度：评估执行程序所需的时间，可以估算出程序对处理器的使用程度。</li><li>空间复杂度：评估执行程序所需的存储空间，可以估算出程序对计算机内存的使用程度。</li></ul></li></ul><h3 id="数组的排序算法"><a href="#数组的排序算法" class="headerlink" title="数组的排序算法"></a>数组的排序算法</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><strong>核心思想</strong></p><p>相邻两个元素做比较大小，如果前一个元素大于后一个元素，则交换位置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) {<br>            System.out.println(<span class="hljs-string">"============================"</span>);<br>            <span class="hljs-comment">// 两个两个进行比较</span><br>            <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) {<br>                <span class="hljs-keyword">int</span> temp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = temp;<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">============================<br>============================<br>============================<br>============================<br>============================<br>============================<br>============================<br>============================<br>============================<br>============================<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 冒泡排序算法的优化。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {<br>        <span class="hljs-comment">// 默认是排好序的。</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) {<br>            System.out.println(<span class="hljs-string">"======================="</span>);<br>            <span class="hljs-comment">// 两个两个进行比较</span><br>            <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) {<br>                <span class="hljs-keyword">int</span> temp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = temp;<br>                flag = <span class="hljs-keyword">false</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span>(flag){<br>            <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">=======================<br>=======================<br>=======================<br>=======================<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></tbody></table></figure><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p><strong>核心思想</strong></p><p>在未排序的序列中，把未排序第一个元素和未排序的最小元素交换位置。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 选择排序：</span><br><span class="hljs-comment"> *      核心原理：找出参与比较的这些数据中最小的，然后拿着这个最小的数据和参与比较的这堆数据中最左边的元素交换位置。</span><br><span class="hljs-comment"> *      优点：交换的次数比冒泡排序的少。执行效率比冒泡排序高。（冒泡排序中的元素每一次比完之后就交换，这个交换有时是没必要的。）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 原理：</span><br><span class="hljs-comment"> *      (1)参与比较的数据：3, 2, 7, 6, 1</span><br><span class="hljs-comment"> *      第一次循环之后的结果：1, 2, 7, 6, 3</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      (2)参与比较的数据：x, 2, 7, 6, 3</span><br><span class="hljs-comment"> *      第二次循环之后的结果：1, 2, 7, 6, 3</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      (3)参与比较的数据：x, x, 7, 6, 3</span><br><span class="hljs-comment"> *      第三次循环之后的结果：1, 2, 3, 6, 7</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      (4)参与比较的数据：x, x, x, 6, 7</span><br><span class="hljs-comment"> *      第四次循环之后的结果：1, 2, 3, 6, 7</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">80</span>, <span class="hljs-number">870</span>};<br>    selectSort(arr);<br>    System.out.println(Arrays.toString(arr));<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) {<br>        <span class="hljs-comment">// 假定参与比较的这些数据中最左边的是最小的。</span><br>        <span class="hljs-keyword">int</span> min = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++){<br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[min]) {<br>                min = j;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span>(min != i){ <span class="hljs-comment">// 说明有更小的值</span><br>            <span class="hljs-comment">// 交换位置（拿着当下的最小值和参与比较的这些数据中最前面的值交换位置）</span><br>            <span class="hljs-keyword">int</span> temp = arr[min];<br>            arr[min] = arr[i];<br>            arr[i] = temp;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">80</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">870</span>]<br></code></pre></td></tr></tbody></table></figure><h3 id="数组的查找算法"><a href="#数组的查找算法" class="headerlink" title="数组的查找算法"></a>数组的查找算法</h3><h4 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h4><p>①线性查找是一种最简单粗暴的查找法了，采用逐一比对的方式进行对数组的遍历，如果发现了匹配值，返回数组下标即可。</p><p>②线性查找，优点是查找数组无需有序；其缺点是查找的次数多，效率低下。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">102</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">54</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">67</span>,<span class="hljs-number">7</span>,<span class="hljs-number">78</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">87</span>,<span class="hljs-number">67</span>,<span class="hljs-number">6</span>};<br>    <span class="hljs-comment">// 找出以上数组中67元素的下标（67元素第一次出现处的下标）</span><br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">67</span>;<br>    <span class="hljs-keyword">int</span> index = search(arr, num);<br>    System.out.println(index &gt;= <span class="hljs-number">0</span> ? num + <span class="hljs-string">" first occur at: "</span> + index : <span class="hljs-string">"don't have this data"</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> num)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>        <span class="hljs-keyword">if</span>(num == arr[i]){<br>            <span class="hljs-keyword">return</span> i;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">67</span> first occur at: <span class="hljs-number">6</span><br></code></pre></td></tr></tbody></table></figure><h4 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h4><p>①二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；缺点是要求待查数组必须排序，且执行插入和删除操作困难。因此，折半查找方法适用于不经常变动而查找频繁的数组。</p><p>②查找思路：</p><p>假设查找的数组为升序排序，则首先定义两个变量，分别用于保存查找元素（value）所在范围的最小索引值（min）和最大索引值（max）。</p><p>然后开启二分查找，每次查找前都定义一个mid变量，并设置该变量的初始值为：(max + min)/2。在查找的过程中，发生以下三种情况，则做对应的处理。</p><ol><li><p>如果arr[mid]大于value，则证明查找的元素在mid的左侧，那么更新max的值为：mid-1</p></li><li><p>如果arr[mid]小于value，则证明查找的元素在mid的右侧，那么更新min的值为：mid+1</p></li><li><p>如果arr[mid]等于value，则证明查找元素的索引值就是mid，返回mid的值即可！</p></li></ol><p>在以上的操作中，我们不停的更改min和max的值，如果发生min大于max的情况，则证明查找的元素不存在，那么返回-1（表示找不到）即可！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>,<span class="hljs-number">20</span>,<span class="hljs-number">50</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">99</span>,<span class="hljs-number">101</span>,<span class="hljs-number">256</span>,<span class="hljs-number">666</span>,<span class="hljs-number">888</span>};<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">101</span>;<br>    <span class="hljs-keyword">int</span> index = binarySearch(arr, num);<br>    System.out.println(index &gt;= <span class="hljs-number">0</span> ? num + <span class="hljs-string">"'s index is: "</span> + index : <span class="hljs-string">"can't find this data"</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> num)</span> </span>{<br>    <span class="hljs-keyword">int</span> begin = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> end = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(begin &lt;= end){<br>        <span class="hljs-keyword">int</span> mid = (begin + end) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[mid] == num) {<br>            <span class="hljs-keyword">return</span> mid;<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num &gt; arr[mid]){<br>            begin = mid + <span class="hljs-number">1</span>;<br>        }<span class="hljs-keyword">else</span>{<br>            end = mid - <span class="hljs-number">1</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">101</span><span class="hljs-string">'s index is: 6</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h2><p>①Arrays.toString()方法：将数组转换成字符串</p><p>②Arrays.deepToString()方法：可以将二维数组转换成字符串</p><p>③Arrays.equals(int[] arr1, int[] arr2)方法：判断两个数组是否相等</p><p>④Arrays.equals(Object[] arr1, Object[] arr2)方法</p><p>⑤Arrays.deepEquals(Object[] arr1, Object[] arr2)方法：判断两个二维数组是否相等</p><p>⑥Arrays.sort(int[] arr)方法：基于快速排序算法，适合小型数据量排序。</p><p>⑦Arrays.sort(String[] arr)方法</p><p>⑧Arrays.parallelSort(int[] arr)方法：基于分治的归并排序算法，支持多核CPU排序，适合大数据量排序。</p><p>⑨int binarySearch(int[] arr, int elt)方法：二分法查找</p><p>⑩Arrays.fill(int[] arr, int data)方法：填充数组</p><p>⑪Arrays.fill(int[] a, int fromIndex, int toIndex, int val)方法</p><p>⑫int[] Arrays.copyOf(int[] original, int newLength)方法：数组拷贝</p><p>⑬int[] Arrays.copyOfRange(int[] original, int from, int to)</p><p>⑭Arrays.asList(T… data)方法：将一组数据转换成List集合。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testToString</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, <span class="hljs-number">54</span>};<br>    System.out.println(arr); <span class="hljs-comment">// [I@3d3fcdb0</span><br>    System.out.println(Arrays.toString(arr)); <span class="hljs-comment">// [1, 2, 3, 34, 54]</span><br><br>    String[] names = {<span class="hljs-string">"zhangsan"</span>, <span class="hljs-string">"lisi"</span>, <span class="hljs-string">"wangwu"</span>};<br>    System.out.println(names); <span class="hljs-comment">// [Ljava.lang.String;@641147d0</span><br>    System.out.println(Arrays.toString(names)); <span class="hljs-comment">//[zhangsan, lisi, wangwu]</span><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Arrays.deepToString()作用是：适合于将多维数组转换成字符串。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeepToString</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// 适合于二维数组以及多维数组的。</span><br>    <span class="hljs-keyword">int</span>[][] arr = {<br>        {<span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>},<br>        {<span class="hljs-number">4</span>, <span class="hljs-number">45</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>},<br>        {<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>}<br>    };<br>    System.out.println(Arrays.toString(arr)); <span class="hljs-comment">// [[I@641147d0, [I@6e38921c, [I@64d7f7e0]</span><br>    System.out.println(Arrays.deepToString(arr)); <span class="hljs-comment">// [[12, 2, 3, 3], [4, 45, 5, 5], [1, 1, 1, 1, 1, 1]]</span><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testEquals</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr1 = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br>    <span class="hljs-keyword">int</span>[] arr2 = {<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>};<br>    System.out.println(Arrays.equals(arr1, arr2));<br><br>    String[] names1 = <span class="hljs-keyword">new</span> String[]{<span class="hljs-string">"abc"</span>, <span class="hljs-string">"def"</span>, <span class="hljs-string">"xyz"</span>};<br>    String[] names2 = <span class="hljs-keyword">new</span> String[]{<span class="hljs-string">"abc"</span>, <span class="hljs-string">"def"</span>, <span class="hljs-string">"xyz"</span>};<br>    System.out.println(Arrays.equals(names1, names2));<br>}<br></code></pre></td></tr></tbody></table></figure><p>Equals方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testEquals</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr1 = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br>    <span class="hljs-keyword">int</span>[] arr2 = {<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>};<br>    System.out.println(Arrays.equals(arr1, arr2)); <span class="hljs-comment">//false</span><br><br>    String[] names1 = <span class="hljs-keyword">new</span> String[]{<span class="hljs-string">"abc"</span>, <span class="hljs-string">"def"</span>, <span class="hljs-string">"xyz"</span>};<br>    String[] names2 = <span class="hljs-keyword">new</span> String[]{<span class="hljs-string">"abc"</span>, <span class="hljs-string">"def"</span>, <span class="hljs-string">"xyz"</span>};<br>    System.out.println(Arrays.equals(names1, names2)); <span class="hljs-comment">//true</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>Sort方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSort</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">45</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">87</span>, <span class="hljs-number">8</span>};<br>    Arrays.sort(arr);<br>    System.out.println(Arrays.toString(arr));<span class="hljs-comment">//[1, 3, 5, 6, 7, 8, 45, 87]</span><br><br>    String[] strs = {<span class="hljs-string">"a"</span>, <span class="hljs-string">"ac"</span>, <span class="hljs-string">"ab"</span>, <span class="hljs-string">"b"</span>};<br>    <span class="hljs-comment">// 应该是根据字典的顺序排序的。</span><br>    Arrays.sort(strs);<br>    System.out.println(Arrays.toString(strs));<span class="hljs-comment">//[a, ab, ac, b]</span><br><br>    <span class="hljs-comment">// 能不能对Person数组排序</span><br>    Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">20</span>);<br>    Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">22</span>);<br>    Person p3 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">19</span>);<br>    Person p4 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">18</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        java.lang.ClassCastException: class com.powernode.javase.Person cannot be cast to class java.lang.Comparable</span><br><span class="hljs-comment">        猜测，底层一定有这样一行代码：</span><br><span class="hljs-comment">            Comparable c = (Comparable)p1; 为什么会报这样的错误呢？也进一步说明了我们的Person类不是可比较的。</span><br><span class="hljs-comment">            Comparable字面意思：可比较的。</span><br><span class="hljs-comment">         */</span><br>    Person[] persons = {p1, p2, p3, p4};<br>    <span class="hljs-comment">// 排序</span><br>    Arrays.sort(persons);<br>    System.out.println(Arrays.toString(persons));<span class="hljs-comment">//[Person{age=18}, Person{age=19}, Person{age=20}, Person{age=22}]</span><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 凡是自定义的类型要做比较的话，这个自定义类型必须实现一个接口：Comparable接口，并且实现compareTo方法，在这个方法中编写比较规则。</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person{"</span> +<br>                <span class="hljs-string">"age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Object o)</span> </span>{<br>        <span class="hljs-comment">// 编写比较规则。</span><br>        <span class="hljs-comment">// 根据年龄进行比较</span><br>        <span class="hljs-comment">// p1.compareTo(p2) p1和p2之间进行比较。</span><br>        <span class="hljs-comment">// this是p1</span><br>        <span class="hljs-comment">// o是p2</span><br>        <span class="hljs-comment">// 当前对象的年龄</span><br>        <span class="hljs-comment">//this.age;</span><br><br>        <span class="hljs-comment">// 另一个对象的年龄</span><br>        Person person = (Person) o;<br>        <span class="hljs-comment">//person.age;</span><br><br>        <span class="hljs-comment">// 按照年龄进行比较。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age - person.age;<br>        <span class="hljs-comment">//return person.age - this.age;</span><br><br>        <span class="hljs-comment">// 按照字符串进行比较。</span><br>        <span class="hljs-comment">// 升序</span><br>        <span class="hljs-comment">//return this.name.compareTo(person.name);</span><br>        <span class="hljs-comment">// 降序</span><br>        <span class="hljs-comment">//return person.name.compareTo(this.name);</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>Copyof方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCopyOf</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// 数组拷贝</span><br>    <span class="hljs-keyword">int</span>[] arr = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>};<br>    <span class="hljs-keyword">int</span>[] newArr = Arrays.copyOf(arr, <span class="hljs-number">3</span>);<br>    System.out.println(Arrays.toString(newArr));<span class="hljs-comment">//[1, 2, 3]</span><br><br>    <span class="hljs-comment">// to不包含</span><br>    <span class="hljs-keyword">int</span>[] newArr2 = Arrays.copyOfRange(arr, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>    System.out.println(Arrays.toString(newArr2));<span class="hljs-comment">//[3, 4]</span><br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;数组概述&quot;&gt;&lt;a href=&quot;#数组概述&quot; class=&quot;headerlink&quot; title=&quot;数组概述&quot;&gt;&lt;/a&gt;数组概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是数组？&lt;ol&gt;
&lt;li&gt;在Java中，数组是一种用于存储多个相同数据类型元素的容器。&lt;/li&gt;
&lt;li&gt;例如一个存储整数的数组：int[] nums = {100, 200, 300};&lt;/li&gt;
&lt;li&gt;例如一个存储字符串的数组：String[] names = {“jack”,“lucy”,“lisi”};&lt;/li&gt;
&lt;li&gt;数组是一种引用数据类型，隐式继承Object。因此数组也可以调用Object类中的方法。&lt;/li&gt;
&lt;li&gt;数组对象存储在堆内存中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数组的分类？&lt;ol&gt;
&lt;li&gt;根据维数进行分类：一维数组，二维数组，三维数组，多维数组。&lt;/li&gt;
&lt;li&gt;根据数组中存储的元素类型分类：基本类型数组，引用类型数组。&lt;/li&gt;
&lt;li&gt;根据数组初始化方式不同分类：静态数组，动态数组。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Java数组存储元素的特点？&lt;ol&gt;
&lt;li&gt;数组长度一旦确定不可变。&lt;/li&gt;
&lt;li&gt;数组中元素数据类型一致，每个元素占用空间大小相同。&lt;/li&gt;
&lt;li&gt;数组中每个元素在空间存储上，内存地址是连续的。&lt;/li&gt;
&lt;li&gt;每个元素有索引，首元素索引0，以1递增。&lt;/li&gt;
&lt;li&gt;以首元素的内存地址作为数组对象在堆内存中的地址。&lt;/li&gt;
&lt;li&gt;所有数组对象都有length属性用来获取数组元素个数。末尾元素下标：length-1&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619212910246.png&quot; alt=&quot;image-20250619212910246&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组优点？&lt;ol&gt;
&lt;li&gt;根据下标查询某个元素的效率极高。数组中有100个元素和有100万个元素，查询效率相同。时间复杂度O(1)。也就是说在数组中根据下标查询某个元素时，不管数组的长短，耗费时间是固定不变的。&lt;/li&gt;
&lt;li&gt;原因：知道首元素内存地址，元素在空间存储上内存地址又是连续的，每个元素占用空间大小相同，只要知道下标，就可以通过数学表达式计算出来要查找元素的内存地址。直接通过内存地址定位元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数组缺点？&lt;ol&gt;
&lt;li&gt;随机增删元素的效率较低。因为随机增删元素时，为了保证数组中元素的内存地址连续，就需要涉及到后续元素的位移问题。时间复杂度O(n)。O(n)表示的是线性阶，随着问题规模n的不断增大，时间复杂度不断增大，算法的执行效率越低。（不过需要注意的是：对数组末尾元素的增删效率是不受影响的。）&lt;/li&gt;
&lt;li&gt;无法存储大量数据，因为很难在内存上找到非常大的一块连续的内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一维数组&quot;&gt;&lt;a href=&quot;#一维数组&quot; class=&quot;headerlink&quot; title=&quot;一维数组&quot;&gt;&lt;/a&gt;一维数组&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一维数组是线性结构。二维数组，三维数组，多维数组是非线性结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何静态初始化一维数组？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种：int[] arr = {55,67,22}; 或者 int arr[] = {55,67,22};&lt;/li&gt;
&lt;li&gt;第二种：int[] arr = new int[]{55,67,22};&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何访问数组中的元素？&lt;/p&gt;
&lt;p&gt;​    通过下标来访问。注意ArrayIndexOutOfBoundsException异常的发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何遍历数组？&lt;/p&gt;
&lt;p&gt;​    普通for循环遍历&lt;/p&gt;
&lt;p&gt;​    for-each遍历（优点是代码简洁。缺点是没有下标。）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何动态初始化一维数组？&lt;/p&gt;
&lt;p&gt;​    int[] arr = new int[4];&lt;/p&gt;
&lt;p&gt;​    Object[] objs = new Object[5];&lt;/p&gt;
&lt;p&gt;​    数组动态初始化的时候，确定长度，并且数组中每个元素采用默认值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;一维数组中存储引用时的内存图&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250619213239940.png&quot; alt=&quot;image-20250619213239940&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;&lt;p&gt;关于main方法的形参args？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;接收命令行参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在DOS命令窗口中怎么传？在IDEA中怎么传？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于方法的可变长度参数？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可变长参数只能出现在形参列表中的最后一个位置。&lt;/li&gt;
&lt;li&gt;可变长参数可以当做数组来处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://xiaofanshutu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java面向对象</title>
    <link href="https://xiaofanshutu.github.io/posts/5f8d3e42.html"/>
    <id>https://xiaofanshutu.github.io/posts/5f8d3e42.html</id>
    <published>2025-06-08T22:12:58.052Z</published>
    <updated>2025-06-16T13:03:17.002Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h2><p><strong>软件开发方法：面向过程和面向对象</strong></p><ol><li>面向过程：关注点在实现功能的步骤上。<ul><li>PO：Procedure Oriented。代表语言：C语言</li><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</li><li>例如开汽车：启动、踩离合、挂挡、松离合、踩油门、车走了。</li><li>再例如装修房子：做水电、刷墙、贴地砖、做柜子和家具、入住。</li><li>对于简单的流程是适合使用面向过程的方式进行的。复杂的流程不适合使用面向过程的开发方式。</li></ul></li><li>面向对象：关注点在实现功能需要哪些对象的参与。<ul><li>OO：Object Oriented 面向对象。包括OOA,OOD,OOP。OOA：Object Oriented Analysis 面向对象分析。OOD：Object Oriented Design 面向对象设计。OOP：Object Oriented Programming 面向对象编程。代表语言：Java、C#、Python等。</li><li>人类是以面向对象的方式去认知世界的。所以采用面向对象的思想更加容易处理复杂的问题。</li><li>面向对象就是分析出解决这个问题都需要哪些对象的参加，然后让对象与对象之间协作起来形成一个系统。</li><li>例如开汽车：汽车对象、司机对象。司机对象有一个驾驶的行为。司机对象驾驶汽车对象。</li><li>再例如装修房子：水电工对象，油漆工对象，瓦工对象，木工对象。每个对象都有自己的行为动作。最终完成装修。</li><li>面向对象开发方式耦合度低，扩展能力强。例如采用面向过程生产一台电脑，不会分CPU、内存和硬盘，它会按照电脑的工作流程一次成型。采用面向对象生产一台电脑，CPU是一个对象，内存条是一个对象，硬盘是一个对象，如果觉得硬盘容量小，后期是很容易更换的，这就是扩展性。</li></ul></li></ol><p><strong>面向对象三大特征</strong></p><ol><li>封装（Encapsulation）</li><li>继承（Inheritance）</li><li>多态（Polymorphism）</li></ol><p><strong>类与对象</strong></p><ol><li>类<ul><li>现实世界中，事物与事物之间具有共同特征，例如：刘德华和梁朝伟都有姓名、身份证号、身高等状态，都有吃、跑、跳等行为。将这些共同的状态和行为提取出来，形成了一个模板，称为类。</li><li>类实际上是人类大脑思考总结的一个模板，类是一个抽象的概念。</li><li>状态在程序中对应属性。属性通常用变量来表示。</li><li>行为在程序中对应方法。用方法来描述行为动作。</li><li>类 = 属性 + 方法。</li></ul></li><li>对象<ul><li>实际存在的个体。</li><li>对象又称为实例（instance）。</li><li>通过类这个模板可以实例化n个对象。（通过类可以创造多个对象）<ul><li>例如通过“明星类”可以创造出“刘德华对象”和“梁朝伟对象”。</li></ul></li><li>明星类中有一个属性姓名：String name;“</li><li>刘德华对象”和“梁朝伟对象”由于是通过明星类造出来的，所以这两个都有name属性，但是值是不同的。因此这种属性被称为<font color="red">实例变量</font>。</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609065526094.png" alt="image-20250609065526094"></p><p><strong>对象的创建和使用</strong></p><p>类的定义语法格式：</p><p>[修饰符列表] class 类名 {</p><p>​    // 属性（描述状态）</p><p>​    // 方法（描述行为动作）</p><p>}</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>{<br>    <span class="hljs-comment">// 姓名</span><br>    String name; <span class="hljs-comment">// 实例变量</span><br>    <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-comment">// 性别</span><br>    <span class="hljs-keyword">boolean</span> gender;<br>    <span class="hljs-comment">// 学习</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>{ System.out.println(“正在学习”); } <span class="hljs-comment">// 实例方法（实例方法又叫对象方法）</span><br>}<br></code></pre></td></tr></tbody></table></figure><ol><li>对象的创建<ul><li>Student s = new Student();</li><li>在Java中，使用class定义的类，属于引用数据类型。所以Student属于引用数据类型。类型名为：Student。</li><li>Student s; 表示定义一个变量。数据类型是Student。变量名是s。</li></ul></li><li>对象的使用<ul><li>读取属性值：s.name</li><li>修改属性值：s.name = “jackson”;</li></ul></li><li>通过一个类可以实例化多个对象<ul><li>Student s1 = new Student();</li><li>Student s2 = new Student();</li></ul></li></ol><p><strong>对象的内存分析（对象与引用）</strong></p><ol><li><p>new运算符会在JVM的堆内存中分配空间用来存储实例变量。new分配的空间就是Java对象。</p></li><li><p>在JVM中对象创建后会有对应的内存地址，将内存地址赋值给一个变量，这个变量被称为引用。</p></li><li><p>Java中的GC主要针对的是JVM的堆内存。</p></li><li><p>空指针异常是如何发生的？</p><p>程序计数器</p><p>虚拟机栈</p><p>堆</p><p>方法区</p><p>运行时常量池</p><p>本地方法区</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609070610111.png" alt="image-20250609070610111"></p></li></ol><p>   <img src="C:\Users\winner\AppData\Roaming\Typora\typora-user-images\image-20250609070123919.png" alt="image-20250609070123919"></p><ol start="5"><li>方法调用时参数是如何传递的？将变量中保存的值复制一份传递过去。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609070107374.png" alt="image-20250609070107374"></p><ol start="6"><li>初次认识this关键字：出现在实例方法中，代表当前对象。“this.”大部分情况下可以省略。this存储在实例方法栈帧的局部变量表的0号槽位上。任何一个实例方法，局部变量表0号槽位放的是this。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609070055017.png" alt="image-20250609070055017"></p><p>this.用来区分局部变量和实例变量的时候不能省略。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609234419797.png" alt="image-20250609234419797"></p><p><font color="red"><strong>传递的是u变量保存的那个地址</strong></font></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609070219176.png" alt="image-20250609070219176"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609070232517.png" alt="image-20250609070232517"></p><h2 id="面向对象的封装特性"><a href="#面向对象的封装特性" class="headerlink" title="面向对象的封装特性"></a>面向对象的封装特性</h2><p>什么是封装？</p><p>​    封装是一种将数据和方法加以包装，使之成为一个独立的实体，并且把它与外部对象隔离开来的机制。具体来说，封装是将一个对象的所有“状态（属性）”以及“行为（方法）”统一封装到一个类中，从而隐藏了对象内部的具体实现细节，向外界提供了有限的访问接口，以实现对对象的保护和隔离。</p><p>实现封装的步骤：</p><p>第一步：属性私有化</p><p>第二步：对外提供getter setter方法</p><p>封装保证安全性，提高复用性</p><h2 id="实例方法中调用实例方法"><a href="#实例方法中调用实例方法" class="headerlink" title="实例方法中调用实例方法"></a>实例方法中调用实例方法</h2><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609234658995.png" alt="image-20250609234658995"></p><h2 id="构造方法Constructor-构造器-的语法"><a href="#构造方法Constructor-构造器-的语法" class="headerlink" title="构造方法Constructor(构造器)的语法"></a>构造方法Constructor(构造器)的语法</h2><ol><li><p>构造方法有什么作用？</p><ul><li>构造方法的执行分为两个阶段：对象的创建和对象的初始化。这两个阶段不能颠倒，也不可分割。</li><li>在Java中，当我们使用关键字new时，就会在内存中创建一个新的对象，虽然对象已经被创建出来了，但还没有被初始化。而初始化则是在执行构造方法体时进行的。</li></ul></li><li><p>构造方法如何定义？</p><ul><li>[修饰符列表] 构造方法名(形参){}</li></ul></li><li><p>构造方法如何调用？</p><p> new 构造方法名(实参);</p></li><li><p>关于无参数构造方法：</p><ul><li>如果一个类没有显示的定义任何构造方法，系统会默认提供一个无参数构造方法，也被称为缺省构造器。一旦显示的定义了构造方法，则缺省构造器将不存在。为了方便对象的创建，建议将缺省构造器显示的定义出来。</li></ul></li><li><p>构造方法支持重载机制。</p></li><li><p>关于构造代码块。对象的创建和初始化过程梳理：</p><ul><li>new的时候在堆内存中开辟空间，给所有属性赋默认值</li><li>执行构造代码块进行初始化</li><li>执行构造方法体进行初始化</li><li>构造方法执行结束，对象初始化完毕。</li></ul></li></ol><p>构造方法/Constructor/构造器</p><ol><li><p>构造方法有什么作用？</p><p>作用1：对象的创建（通过调用构造方法可以完成对象的创建）</p><p>作用2：对象的初始化（给对象的所有属性赋值就是对象的初始化）</p></li><li><p>怎么定义构造方法呢？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] 构造方法名(形参列表){<br>    构造方法体;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><p>注意：</p><ul><li><p>构造方法名必须和类名一致。</p></li><li><p>构造方法不需要提供返回值类型。</p></li><li><p>如果提供了返回值类型，那么这个方法就不是构造方法了，就变成普通方法了。</p></li></ul><ol start="3"><li><p>构造方法怎么调用呢？</p><ul><li>使用new运算符来调用。</li><li>语法：new 构造方法名(实参);</li><li>注意：构造方法最终执行结束之后，会自动将创建的对象的内存地址返回。但构造方法体中不需要提供“return 值;”这样的语句。</li></ul></li><li><p>在java语言中，如果一个类没有显示的去定义构造方法，系统会默认提供一个无参数的构造方法。（通常把这个构造方法叫做缺省构造器。）</p></li><li><p>一个类中如果显示的定义了构造方法，系统则不再提供缺省构造器。所以，为了对象创建更加方便，建议把无参数构造方法手动的写出来。</p></li><li><p>在java中，一个类中可以定义多个构造方法，而且这些构造方法自动构成了方法的重载(overload)。</p></li><li><p>构造方法中给属性赋值了？为什么还需要单独定义set方法给属性赋值呢？</p><ul><li><p>在构造方法中赋值是对象第一次创建时属性赋的值。set方法可以在后期的时候调用，来完成属性值的修改。</p></li><li><p>时机不一样</p><p>set方法是出生之后想改内容，调用构造方法</p><p>构造方法里面设置属性内容是在创建对象的时候给属性赋值</p></li></ul></li></ol><ol start="8"><li><p>构造方法执行原理？</p><ul><li>构造方法执行包括两个重要的阶段：<ul><li> 第一阶段：对象的创建</li><li>第二阶段：对象的初始化</li></ul></li><li>对象在什么时候创建的？<ul><li>new的时候，会直接在堆内存中开辟空间。然后给所有属性赋默认值，完成对象的创建。（这个过程是在构造方法体执行之前就完成了。）</li></ul></li><li>对象初始化在什么时候完成的？<ul><li>构造方法体开始执行，标志着开始进行对象初始化。构造方法体执行完毕，表示对象初始化完毕。</li></ul></li></ul></li><li><p>构造代码块？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//语法格式</span><br>{<br>    <span class="hljs-comment">//构造代码块</span><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">{<br>构造代码块：<span class="hljs-keyword">new</span>一次就会执行一次这个，每次执行构造方法前会执行一次（构造代码块执行之前对象已经创建好了）<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ul><li>构造代码块什么时候执行，执行几次？<ul><li>每一次在new的时候，都会先执行一次构造代码块。</li><li>构造代码块是在构造方法执行之前执行的。</li></ul></li></ul><ol start="10"><li><p>构造代码块有什么用？</p><p>如果所有的构造方法在最开始的时候有相同的一部分代码，不妨将这个公共的代码提取到构造代码块当中，这样代码可以得到复用。</p></li></ol><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><ol><li>this是一个关键字</li><li>this出现在实例方法中，代表当前对象。语法是：<strong>this.</strong></li><li>this本质上是一个引用，该引用保存当前对象的内存地址。</li><li>通过“this.”可以访问实例变量，可以调用实例方法。</li><li>this存储在：栈帧的局部变量表的第0个槽位上。</li><li>this. 大部分情况下可以省略，用于区分局部变量和实例变量时不能省略。</li><li>this不能出现在静态方法中。</li><li>“this(实参)”语法：<ul><li>只能出现在构造方法的第一行。</li><li>通过当前构造方法去调用本类中其他的构造方法。</li><li>作用是：代码复用。</li></ul></li></ol><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">this(实参)：<br>1. 通过这种语法可以在构造方法中调用本类中其他的构造方法。<br>2. 作用：代码复用。<br>3. this(实参); 只能出现在构造方法第一行。<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        this.year = 1970;</span><br><span class="hljs-comment">        this.month = 1;</span><br><span class="hljs-comment">        this.day = 1;</span><br><span class="hljs-comment">         */</span><br><br>    <span class="hljs-comment">// 不要这么写，这样会导致再创建一个新的对象。</span><br>    <span class="hljs-comment">//new Date(1970,1,1);</span><br><br>    <span class="hljs-comment">// 不会创建新对象。只是通过一个构造方法去调用另一个构造方法。</span><br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">1970</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><br>    System.out.println(<span class="hljs-string">"日期创建成功！~"</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day)</span> </span>{<br>    <span class="hljs-keyword">this</span>.year = year;<br>    <span class="hljs-keyword">this</span>.month = month;<br>    <span class="hljs-keyword">this</span>.day = day;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><ol><li>static是一个关键字，翻译为：静态的。</li><li>static修饰的变量叫做静态变量。当所有对象的某个属性的值是相同的，建议将该属性定义为静态变量，来节省内存的开销。</li><li>静态变量在类加载时初始化，存储在堆中。</li><li>static修饰的方法叫做静态方法。</li><li>所有静态变量和静态方法，统一使用“类名.”调用。虽然可以使用“引用.”来调用，但实际运行时和对象无关，所以不建议这样写，因为这样写会给其他人造成疑惑。</li><li>使用“引用.”访问静态相关的，即使引用为null，也不会出现空指针异常。</li><li>静态方法中不能使用this关键字。因此无法直接访问实例变量和调用实例方法。</li><li>静态代码块在类加载时执行，一个类中可以编写多个静态代码块，遵循自上而下的顺序依次执行。</li><li>静态代码块代表了类加载时刻，如果你有代码需要在此时刻执行，可以将该代码放到静态代码块中。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000917927.png" alt="image-20250610000917927"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000944986.png" alt="image-20250610000944986"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000027814.png" alt="image-20250610000027814"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000020447.png" alt="image-20250610000020447"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * static关键字：</span><br><span class="hljs-comment"> *      1. static翻译为静态的</span><br><span class="hljs-comment"> *      2. static修饰的变量：静态变量</span><br><span class="hljs-comment"> *      3. static修饰的方法：静态方法</span><br><span class="hljs-comment"> *      4. 所有static修饰的，访问的时候，直接采用“类名.”，不需要new对象。</span><br><span class="hljs-comment"> *      5. 什么情况下把成员变量定义为静态成员变量？</span><br><span class="hljs-comment"> *          当一个属性是对象级别的，这个属性通常定义为实例变量。（实例变量是一个对象一份。100个对象就应该有100个空间）</span><br><span class="hljs-comment"> *          当一个属性是类级别的（所有对象都有这个属性，并且这个属性的值是一样的），建议将其定义为静态变量，在内存空间上只有一份。节省内存开销。</span><br><span class="hljs-comment"> *          这种类级别的属性，不需要new对象，直接通过类名访问。</span><br><span class="hljs-comment"> *      6. 静态变量存储在哪里？静态变量在什么时候初始化？（什么时候开辟空间）</span><br><span class="hljs-comment"> *          JDK8之后：静态变量存储在堆内存当中。</span><br><span class="hljs-comment"> *          类加载时初始化。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><h3 id="静态变量的内存图"><a href="#静态变量的内存图" class="headerlink" title="静态变量的内存图"></a>静态变量的内存图</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000422264.png" alt="image-20250610000422264"></p><p>类加载的时候会去检查类中有没有静态变量，有静态变量的话就将其放在类的静态变量中</p><p>类加载是在main方法执行之前执行的</p><h3 id="空指针异常何时发生"><a href="#空指针异常何时发生" class="headerlink" title="空指针异常何时发生"></a>空指针异常何时发生</h3><p>实例相关：实例变量 实例方法</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000511236.png" alt="image-20250610000511236"></p><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>i可以访问，j不能访问</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610000559552.png" alt="image-20250610000559552"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * static关键字还可以定义静态代码块：</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1.语法格式：</span><br><span class="hljs-comment"> *      static {</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      }</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2. 静态代码块什么时候执行？执行几次？</span><br><span class="hljs-comment"> *      静态代码块在类加载时执行，并且只执行一次。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3. 静态代码块可以编写多个，并且遵循自上而下的顺序依次执行。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 4. 静态代码块什么时候使用？</span><br><span class="hljs-comment"> *      本质上，静态代码块就是为程序员预留的一个特殊的时间点：类加载时刻</span><br><span class="hljs-comment"> *      如果你需要再类加载时刻执行一段程序的话，这段代码就可以写到静态代码块当中。</span><br><span class="hljs-comment"> *      例如，有这样一个需求：请在类加载时，记录日志。那么记录日志的代码就可以编写到静态代码块当中。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Java虚拟机规范"><a href="#Java虚拟机规范" class="headerlink" title="Java虚拟机规范"></a>Java虚拟机规范</h2><h3 id="JVM对应了一套规范（Java虚拟机规范），它可以有不同的实现"><a href="#JVM对应了一套规范（Java虚拟机规范），它可以有不同的实现" class="headerlink" title="JVM对应了一套规范（Java虚拟机规范），它可以有不同的实现"></a>JVM对应了一套规范（Java虚拟机规范），它可以有不同的实现</h3><p>JVM规范是一种抽象的概念，它可以有多种不同的实现。例如：</p><ol><li>HotSpot：HotSpot 由 Oracle 公司开发，是目前最常用的虚拟机实现，也是默认的 Java 虚拟机，默认包含在 Oracle JDK 和 OpenJDK 中</li><li>JRockit：JRockit 也是由 Oracle 公司开发。它是一款针对生产环境优化的 JVM 实现，能够提供高性能和可伸缩性</li><li>IBM JDK：IBM JDK 是 IBM 公司开发的 Java 环境，采用了与 HotSpot 不同的 J9 VM，能够提供更小的内存占用和更迅速的启动时间</li><li>Azul Zing：Azul Zing 是针对生产环境优化的虚拟机实现，能够提供高性能和实时处理能力，适合于高负载的企业应用和实时分析等场景</li><li>OpenJ9：OpenJ9 是由 IBM 开发的优化的 Java 虚拟机实现，支持高度轻量级、低时延的 GC、优化的 JIT 编译器和用于健康度测试的可观察性仪表板</li></ol><p>Oracle官网上Java虚拟机规范的一部分</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610081313410.png" alt="image-20250610081313410"></p><h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><ol><li><p>The pc Register（程序计数器）</p><p>是一块较小的内存空间，此计数器记录的是正在执行的虚拟机字节码指令的地址；</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610082447152.png" alt="image-20250610082447152"></p></li><li><p>Java Virtual Machine Stacks（Java虚拟机栈）</p><p>Java虚拟机栈用于存储栈帧。栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p></li><li><p>Heap（堆）</p><p>是Java虚拟机所管理的最大的一块内存。堆内存用于存放Java对象实例以及数组。堆是垃圾收集器收集垃圾的主要区域。</p></li><li><p>Method Area（方法区）</p><p>用于存储已被虚拟机加载的类信息、常量、<strong>静态变量</strong>、即时编译器编译后的代码等数据。</p><p><strong>规范上静态变量在方法区，但是实际上在堆中</strong></p></li><li><p>Run-Time Constant Pool（运行时常量池）</p><p>是方法区的一部分，用于存放编译期生成的各种字面量与符号引用。</p><p>符号引用：类名，方法名，属性名，字面量，都存在于运行时常量池</p></li><li><p>Native Method Stacks（本地方法栈）</p><p>在本地方法的执行过程中，会使用到本地方法栈。和 Java 虚拟机栈十分相似。</p><p>压栈是给本地方法栈压。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610082609041.png" alt="image-20250610082609041"></p></li></ol><p>总结：这些运行时数据区虽然在功能上有所区别，但在整个 Java 虚拟机启动时都需要被创建，并且在虚拟机运行期间始终存在，直到虚拟机停止运行时被销毁。同时，不同的 JVM 实现对运行时数据区的分配和管理方式也可能不同，会对性能和功能产生影响。</p><h3 id="JVM体系结构图（该图属于JVM规范，不是具体的实现）"><a href="#JVM体系结构图（该图属于JVM规范，不是具体的实现）" class="headerlink" title="JVM体系结构图（该图属于JVM规范，不是具体的实现）"></a>JVM体系结构图（该图属于JVM规范，不是具体的实现）</h3><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610081647995.png" alt="image-20250610081647995"></p><h3 id="JVM规范的实现：HotSpot（Oracle-JDK-Open-JDK内部使用的JVM就是HotSpot）"><a href="#JVM规范的实现：HotSpot（Oracle-JDK-Open-JDK内部使用的JVM就是HotSpot）" class="headerlink" title="JVM规范的实现：HotSpot（Oracle JDK/Open JDK内部使用的JVM就是HotSpot）"></a>JVM规范的实现：HotSpot（Oracle JDK/Open JDK内部使用的JVM就是HotSpot）</h3><h4 id="JDK6的HotSpot"><a href="#JDK6的HotSpot" class="headerlink" title="JDK6的HotSpot"></a>JDK6的HotSpot</h4><ul><li><p>年轻代：刚new出来的对象放在这里。</p></li><li><p>老年代：经过垃圾回收之后仍然存活的对象。</p></li><li><p>符号引用：类全名，字段全名，方法全名等。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610082727228.png" alt="image-20250610082727228"></p></li><li><p>这个时期的永久代和堆是相邻的，使用连续的物理内存，但是内存空间是隔离的。</p></li><li><p>永久代的垃圾收集是和老年代捆绑在一起的，因此无论谁满了，都会触发永久代和老年代的垃圾收集。</p></li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610081802767.png" alt="image-20250610081802767"></p><h4 id="JDK7的HotSpot"><a href="#JDK7的HotSpot" class="headerlink" title="JDK7的HotSpot"></a>JDK7的HotSpot</h4><p>这是一个过渡的版本，该版本相对于JDK6来说，变化如下：</p><ol><li>类的静态变量转移到堆中了</li><li>字符串常量池转移到堆中了</li><li>运行时常量池中的符号引用转移到本地内存了</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610081912927.png" alt="image-20250610081912927"></p><h4 id="JDK8及更高版本的HotSpot"><a href="#JDK8及更高版本的HotSpot" class="headerlink" title="JDK8及更高版本的HotSpot"></a>JDK8及更高版本的HotSpot</h4><p>相对于JDK7来说发生了如下变化：</p><ol><li>彻底删除永久代（为了避免OOM错误的发生）</li><li>将方法区的实现转移到本地内存</li><li>将符号引用重新放回运行时常量池</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250610081955826.png" alt="image-20250610081955826"></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h3><ul><li>什么是设计模式？</li></ul><p>设计模式（Design Pattern）是一套被广泛接受的、经过试验验证的、可反复使用的基于面向对象的软件设计经验总结，它是软件开发人员在软件设计中，对常见问题的解决方案的总结和抽象。设计模式是针对软件开发中常见问题和模式的通用解决方案</p><ul><li>设计模式有哪些？<ol><li><font color="red">GoF设计模式</font>：《Design Patterns: Elements of Reusable Object-Oriented Software》（即后述《设计模式》一书），由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 合著（Addison-Wesley，1995）。这几位作者常被称为四人组（Gang of Four）。</li><li>架构设计模式（Architectural Pattern）：主要用于软件系统的整体架构设计，包括多层架构、MVC架构、微服务架构、REST架构和大数据架构等。</li><li>企业级设计模式（Enterprise Pattern）：主要用于企业级应用程序设计，包括基于服务的架构（SOA）、企业集成模式（EIP）、业务流程建模（BPM）和企业规则引擎（BRE）等。</li><li>领域驱动设计模式（Domain Driven Design Pattern）：主要用于领域建模和开发，包括聚合、实体、值对象、领域事件和领域服务等。</li><li>并发设计模式（Concurrency Pattern）：主要用于处理并发性问题，包括互斥、线程池、管道、多线程算法和Actor模型等。</li><li>数据访问模式（Data Access Pattern）：主要用于处理数据访问层次结构，包括数据访问对象（DAO）、仓库模式和活动记录模式等。</li></ol></li><li>GoF设计模式的分类？<ol><li>创建型：主要解决对象的创建问题</li><li>结构型：通过设计和构建对象之间的关系，以达到更好的重用性、扩展性和灵活性</li><li>行为型：主要用于处理对象之间的算法和责任分配</li></ol></li></ul><h3 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式（GoF23种设计模式之一，最简单的设计模式：保证某种类型的对象只创建一个）</p><h4 id="饿汉式-类加载时就创建对象。"><a href="#饿汉式-类加载时就创建对象。" class="headerlink" title="饿汉式:类加载时就创建对象。"></a>饿汉式:类加载时就创建对象。</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton(); <span class="hljs-comment">// 在类加载的时候就创建实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>{}  <span class="hljs-comment">// 将构造方法设为私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>{  <span class="hljs-comment">// 提供一个公有的静态方法，以获取实例</span><br>        <span class="hljs-keyword">return</span> instance;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="懒汉式：第一次调用get方法时才会创建对象。"><a href="#懒汉式：第一次调用get方法时才会创建对象。" class="headerlink" title="懒汉式：第一次调用get方法时才会创建对象。"></a>懒汉式：第一次调用get方法时才会创建对象。</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance; <span class="hljs-comment">// 声明一个静态的、私有的该类类型的变量，用于存储该类的实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>{} <span class="hljs-comment">// 将构造方法设为私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">// 提供一个公有的静态方法，以获取实例</span><br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) { <span class="hljs-comment">// 第一次调用该方法时，才真正创建实例</span><br>            instance = <span class="hljs-keyword">new</span> Singleton(); <span class="hljs-comment">// 创建实例</span><br>        }<br>        <span class="hljs-keyword">return</span> instance;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol><li>面向对象三大特征之一：继承</li><li>继承作用？<ul><li>基本作用：代码复用</li><li>重要作用：有了继承，才有了方法覆盖和多态机制。</li></ul></li><li>继承在java中如何实现？<ul><li>[修饰符列表] class 类名 extends 父类名{}</li><li>extends翻译为扩展。表示子类继承父类后，子类是对父类的扩展。</li></ul></li><li>继承相关的术语：当B类继承A类时<ul><li>A类称为：父类、超类、基类、superclass</li><li>B类称为：子类、派生类、subclass</li></ul></li><li>Java只支持单继承，一个类只能直接继承一个类。</li><li>Java不支持多继承，但支持多重继承（多层继承）。</li><li>子类继承父类后，除私有的不支持继承、构造方法不支持继承。其它的全部会继承。</li><li>一个类没有显示继承任何类时，默认继承java.lang.Object类。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616194149481.png" alt="image-20250616194149481"></p><h2 id="方法覆盖-override-方法重写-overwrite"><a href="#方法覆盖-override-方法重写-overwrite" class="headerlink" title="方法覆盖(override)/方法重写(overwrite)"></a>方法覆盖(override)/方法重写(overwrite)</h2><ol><li>什么情况下考虑使用方法覆盖？<ul><li>当从父类中继承过来的方法无法满足当前子类的业务需求时。</li></ul></li><li>发生方法覆盖的条件？<ul><li>具有继承关系的父子类之间</li><li>相同的返回值类型，相同的方法名，相同的形式参数列表</li><li>访问权限不能变低，可以变高。</li><li>抛出异常不能变多，可以变少。</li><li>返回值类型可以是父类方法返回值类型的子类。</li></ul></li><li>方法覆盖的小细节：<ul><li>@Override注解标注的方法会在编译阶段检查该方法是否重写了父类的方法。</li><li>私有方法不能继承，所以不能覆盖。</li><li>构造方法不能继承，所以不能覆盖。</li><li>静态方法不存在方法覆盖，方法覆盖针对的是实例方法。</li><li>方法覆盖说的实例方法，和实例变量无关。</li></ul></li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="多态的基础语法"><a href="#多态的基础语法" class="headerlink" title="多态的基础语法"></a>多态的基础语法</h3><ol><li>什么是向上转型和向下转型？<ul><li>java允许具有继承关系的父子类型之间的类型转换。</li><li>向上转型（upcasting）：子–&gt;父<ul><li>子类型的对象可以赋值给一个父类型的引用。</li></ul></li><li>向下转型（downcasting）：父–&gt;子<ul><li>父类型的引用可以转换为子类型的引用。但是需要加强制类型转换符。</li></ul></li><li>无论是向上转型还是向下转型，前提条件是：两种类型之间必须存在继承关系。这样编译器才能编译通过。</li></ul></li><li>什么是多态？<ul><li>父类型引用指向子类对象。Animal a = new Cat(); a.move();</li><li>程序分为编译阶段和运行阶段：<ul><li>编译阶段：编译器只知道a是Animal类型，因此去Animal类中找move()方法，找到之后，绑定成功，编译通过。这个过程通常被称为静态绑定。</li><li>运行阶段：运行时和JVM堆内存中的真实Java对象有关，所以运行时会自动调用真实对象的move()方法。这个过程通常被称为动态绑定。</li></ul></li><li>多态指的是：多种形态，编译阶段一种形态，运行阶段另一种形态，因此叫做多态。</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616194646187.png" alt="image-20250616194646187"></p><ol start="3"><li>向下转型我们需要注意什么？<ul><li>向下转型时，使用不当，容易发生类型转换异常：ClassCastException。</li><li>在向下转型时，一般建议使用instanceof运算符进行判断来避免ClassCastException的发生。</li></ul></li><li>instanceof运算符的使用<ul><li>语法格式：(引用 instanceof 类型)</li><li>执行结果是true或者false</li><li>例如：(a instanceof Cat)<ul><li>如果结果是true：表示a引用指向的对象是Cat类型的。</li><li>如果结果是false：表示a引用指向的对象不是Cat类型的。</li></ul></li></ul></li></ol><h3 id="软件开发七大原则"><a href="#软件开发七大原则" class="headerlink" title="软件开发七大原则"></a>软件开发七大原则</h3><ol><li>软件开发原则旨在引导软件行业的从业者在代码设计和开发过程中，遵循一些基本原则，以达到高质量、易维护、易扩展、安全性强等目标。软件开发原则与具体的编程语言无关的，属于软件设计方面的知识。</li><li>软件开发七大原则？<ul><li>开闭原则 (Open-Closed Principle，OCP)：一个软件实体应该对扩展开放，对修改关闭。即在不修改原有代码的基础上，通过添加新的代码来扩展功能。（最基本的原则，其它原则都是为这个原则服务的。）</li><li>单一职责原则：一个类只负责单一的职责，也就是一个类只有一个引起它变化的原因。</li><li>里氏替换原则：子类对象可以替换其基类对象出现的任何地方，并且保证原有程序的正确性。</li><li>接口隔离原则：客户端不应该依赖它不需要的接口。</li><li>依赖倒置原则：高层模块不应该依赖底层模块，它们都应该依赖于抽象接口。换言之，面向接口编程。</li><li>迪米特法则：一个对象应该对其它对象保持最少的了解。即一个类应该对自己需要耦合或调用的类知道得最少。</li><li>合成复用原则：尽量使用对象组合和聚合，而不是继承来达到复用的目的。组合和聚合可以在获取外部对象的方法中被调用，是一种运行时关联，而继承则是一种编译时关联。</li></ul></li></ol><h3 id="多态在开发中的作用"><a href="#多态在开发中的作用" class="headerlink" title="多态在开发中的作用"></a>多态在开发中的作用</h3><ol><li>降低程序的耦合度，提高程序的扩展力。</li><li>尽量使用多态，面向抽象编程，不要面向具体编程。</li></ol><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><ol><li>super关键字和this关键字对比来学习。this代表的是当前对象。super代表的是当前对象中的父类型特征。</li><li>super不能使用在静态上下文中。</li><li>“super.”大部分情况下是可以省略的。什么时候不能省略？<ul><li>当父类和子类中定义了相同的属性（实例变量）或者相同方法（实例方法）时，如果需要在子类中访问父类的属性或方法时，super.不能省略。</li></ul></li><li>this可以单独输出，super不能单独输出。</li><li>super(实参); 通过子类的构造方法调用父类的构造方法，目的是为了完成父类型特征的初始化。当一个构造方法第一行没有显示的调用“super(实参);”，也没有显示的调用“this(实参)”，系统会自动调用super()。因此一个类中的无参数构造方法建议显示的定义出来。</li><li>super(实参); 这个语法只能出现在构造方法第一行。</li><li>在Java语言中只要new对象，Object的无参数构造方法一定会执行。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616195155900.png" alt="image-20250616195155900"></p><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ol><li>final修饰的类不能被继承</li><li>final修饰的方法不能被覆盖</li><li>final修饰的变量，一旦赋值不能重新赋值</li><li>final修饰的实例变量必须在对象初始化时手动赋值</li><li>final修饰的实例变量一般和static联合使用：称为常量</li><li>final修饰的引用，一旦指向某个对象后，不能再指向其它对象。但指向的对象内部的数据是可以修改的。</li></ol><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ol><li>什么时候考虑将类定义为抽象类？<ul><li>如果类中有些方法无法实现或者没有意义，可以将方法定义为抽象方法，类定义为抽象类。这样在抽象类中只提供公共代码，具体的实现强行交给子类去做。</li><li>比如一个Person类有一个问候的方法greet()，但是不同国家的人问候的方式不同，因此greet()方法具体实现应该交给子类。再比如主人喂养宠物的例子中的宠物Pet，Pet中的eat()方法的方法体就是没有意义的。</li></ul></li><li>抽象类如何定义？<ul><li>abstract class 类名{}</li></ul></li><li>抽象类有构造方法，但无法实例化。抽象类的构造方法是给子类使用的。</li><li>抽象方法如何定义？<ul><li>abstract 方法返回值类型 方法名(形参);</li></ul></li><li>抽象类中不一定有抽象方法，但如果有抽象方法那么类要求必须是抽象类。</li><li>一个非抽象的类继承抽象类，要求必须将抽象方法进行实现/重写。</li><li>abstract关键字不能和private，final，static关键字共存。</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口的基础语法"><a href="#接口的基础语法" class="headerlink" title="接口的基础语法"></a>接口的基础语法</h3><ol><li>接口（interface）在Java中表示一种规范或契约，它定义了一组抽象方法和常量，用来描述一些实现这个接口的类应该具有哪些行为和属性。接口和类一样，也是一种引用数据类型。</li><li>接口怎么定义？[修饰符列表] interface 接口名{}</li><li>抽象类是半抽象的，接口是完全抽象的。接口没有构造方法，也无法实例化。</li><li>接口中只能定义：常量+抽象方法。接口中的常量的static final可以省略。接口中的抽象方法的abstract可以省略。接口中所有的方法和变量都是public修饰的。</li><li>接口和接口之间可以多继承。</li><li>类和接口的关系我们叫做实现（这里的实现也可以等同看做继承）。使用implements关键字进行接口的实现。</li><li>一个非抽象的类实现接口必须将接口中所有的抽象方法全部实现。</li><li>一个类可以实现多个接口。语法是：class 类 implements 接口A,接口B{}</li><li>Java8之后，接口中允许出现默认方法和静态方法(JDK8新特性)<ul><li>引入默认方式是为了解决接口演变问题：接口可以定义抽象方法，但是不能实现这些方法。所有实现接口的类都必须实现这些抽象方法。这会导致接口升级的问题：当我们向接口添加或删除一个抽象方法时，这会破坏该接口的所有实现，并且所有该接口的用户都必须修改其代码才能适应更改。这就是所谓的”接口演变”问题。</li><li>引入的静态方法只能使用本接口名来访问，无法使用实现类的类名访问。</li></ul></li><li>JDK9之后允许接口中定义私有的实例方法（为默认方法服务的）和私有的静态方法（为静态方法服务的）。</li><li>所有的接口隐式的继承Object。因此接口也可以调用Object类的相关方法。</li></ol><h3 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h3><ol><li><p>面向接口调用的称为：接口调用者</p></li><li><p>面向接口实现的称为：接口实现者</p></li><li><p>调用者和实现者通过接口达到了解耦合。也就是说调用者不需要关心具体的实现者，实现者也不需要关心具体的调用者，双方都遵循规范，面向接口进行开发。</p></li><li><p><font color="red">面向抽象编程，面向接口编程，可以降低程序的耦合度，提高程序的扩展力。</font></p></li><li><p>定义一个Usb接口，提供read()和write()方法，通过read()方法读，通过write()方法写：</p><ul><li><p>定义一个电脑类Computer，它是调用者，面向Usb接口来调用。</p></li><li><p>Usb接口的实现可以有很多，例如：打印机（Printer），硬盘（HardDrive）。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span></span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">conn</span><span class="hljs-params">(Usb usb)</span></span>{<br>        usb.read();<br>        usb.write();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ol><ol start="6"><li>再想想，我们平时去饭店吃饭，这个场景中有没有接口呢？食谱菜单就是接口。顾客是调用者。厨师是实现者。</li></ol><h3 id="接口与抽象类如何选择"><a href="#接口与抽象类如何选择" class="headerlink" title="接口与抽象类如何选择"></a>接口与抽象类如何选择</h3><ol><li>抽象类和接口虽然在代码角度都能达到同样的效果，但适用场景不同：<ul><li>抽象类主要适用于公共代码的提取。当多个类中有共同的属性和方法时，为了达到代码的复用，建议为这几个类提取出来一个父类，在该父类中编写公共的代码。如果有一些方法无法在该类中实现，可以延迟到子类中实现。这样的类就应该使用抽象类。</li><li>接口主要用于功能的扩展。例如有很多类，一些类需要这个方法，另外一些类不需要这个方法时，可以将该方法定义到接口中。需要这个方法的类就去实现这个接口，不需要这个方法的就可以不实现这个接口。接口主要规定的是行为。</li></ul></li></ol><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><ol><li>UML（Unified Modeling Language，统一建模语言）是一种用于面向对象软件开发的图形化的建模语言。它由Grady Booch、James Rumbaugh和Ivar Jacobson等三位著名的软件工程师所开发，并于1997年正式发布。UML提供了一套通用的图形化符号和规范，帮助开发人员以图形化的形式表达软件设计和编写的所有关键方面，从而更好地展示软件系统的设计和实现过程。</li><li>UML是一种图形化的语言，类似于现实生活中建筑工程师画的建筑图纸，图纸上有特定的符号代表特殊的含义。</li><li>UML不是专门为java语言准备的。只要是面向对象的编程语言，开发前的设计，都需要画UML图进行系统设计。（设计模式、软件开发七大原则等同样也不是只为java语言准备的。）</li><li>UML图包括：<ul><li><font color="red">类图（Class Diagram）：描述软件系统中的类、接口、关系和其属性等；</font></li><li><font color="red">用例图（Use Case Diagram）：描述系统的功能需求和用户与系统之间的关系；</font></li><li><font color="red">序列图（Sequence Diagram）：描述对象之间的交互、消息传递和时序约束等；</font></li><li><font color="red">状态图（Statechart Diagram）：描述类或对象的生命周期以及状态之间的转换；</font></li><li>对象图（Object Diagram）：表示特定时间的系统状态，并显示其包含的对象及其属性；</li><li>协作图（Collaboration Diagram）：描述对象之间的协作，表示对象之间相互合作来完成任务的关系；</li><li>活动图（Activity Diagram）：描述系统的动态行为和流程，包括控制流和对象流；</li><li>部署图（Deployment Diagram）：描述软件或系统在不同物理设备上部署的情况，包括计算机、网络、中间件、应用程序等。</li></ul></li><li>常见的UML建模工具有：StarUML，Rational Rose等。</li></ol><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><ol><li>泛化关系（is a）</li><li>实现关系（is like a）</li><li>关联关系（has a）</li><li>聚合关系<ul><li>聚合关系指的是一个类包含、合成或者拥有另一个类的实例，而这个实例是可以独立存在的。</li><li>聚合关系是一种弱关联关系，表示整体与部分之间的关系。</li><li>例如一个教室有多个学生</li></ul></li><li>组合关系（Composition）<ul><li>组合关系是聚合关系的一种特殊情况，表示整体与部分之间的关系更加强烈。</li><li>组合关系指的是一个类包含、合成或者拥有另一个类的实例，而这个实例只能同时存在于一个整体对象中。如果整体对象被销毁，那么部分对象也会被销毁。</li><li>例如一个人对应四个肢体。</li></ul></li><li>依赖关系（Dependency）<ul><li>依赖关系是一种临时性的关系，当一个类使用另一个类的功能时，就会产生依赖关系。</li><li>如果一个类的改变会影响到另一个类的功能，那么这两个类之间就存在依赖关系。</li><li>依赖关系是一种较弱的关系，可以存在多个依赖于同一个类的对象。</li><li>例如A类中使用了B类，但是B类作为A类的方法参数或者局部变量等。</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616200545886.png" alt="image-20250616200545886"></p><h2 id="访问控制权限"><a href="#访问控制权限" class="headerlink" title="访问控制权限"></a>访问控制权限</h2><ol><li><p>private：私有的，只能在本类中访问。</p></li><li><p>缺省：默认的，同一个包下可以访问。</p></li><li><p>protected：受保护的，子类中可以访问。（受保护的通常就是给子孙用的。）</p></li><li><p>public：公共的，在任何位置都可以访问。</p></li></ol><p>   a.  类中的属性和方法访问权限共有四种：private、缺省、protected和public。b. 类的访问权限只有两种：public和 缺省。</p><p>   c. 访问权限控制符不能修饰局部变量。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616200559988.png" alt="image-20250616200559988"></p><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><ol><li>java.lang.Object是所有类的超类。java中所有类都实现了这个类中的方法。</li><li>Object类是我们学习JDK类库的第一个类。通过这个类的学习要求掌握会查阅API帮助文档。</li><li>现阶段Object类中需要掌握的方法：<ul><li>toString：将java对象转换成字符串。</li><li>equals：判断两个对象是否相等。</li></ul></li><li>现阶段Object类中需要了解的方法：<ul><li>hashCode：返回一个对象的哈希值，通常作为在哈希表中查找该对象的键值。Object类的默认实现是根据对象的内存地址生成一个哈希码（即将对象的内存地址转换为整数作为哈希值）。hashCode()方法是为了HashMap、Hashtable、HashSet等集合类进行优化而设置的，以便更快地查找和存储对象。</li><li>finalize：当java对象被回收时，由GC自动调用被回收对象的finalize方法，通常在该方法中完成销毁前的准备。</li><li>clone：对象的拷贝。（浅拷贝，深拷贝）protected修饰的只能在同一个包下或者子类中访问。只有实现了Cloneable接口的对象才能被克隆。</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250616201851462.png" alt="image-20250616201851462"></p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ol><li>什么是内部类？<ul><li>定义在一个类中的类。</li></ul></li><li>什么时候使用内部类？<ul><li>一个类用到了另外一个类，而这两个类的联系比较密切，但是如果把这两个类定义为独立的类，不但增加了类的数量，也不利于代码的阅读和维护。</li><li>内部类可以访问外部类的私有成员，这样可以将相关的类和接口隐藏在外部类的内部，从而提高封装性。</li><li>匿名内部类是指没有名字的内部类，通常用于定义一个只使用一次的类，比如在事件处理中。</li></ul></li><li>内部类包括哪几种？<ul><li>静态内部类：和静态变量一个级别<ul><li>静态内部类如何实例化：OuterClass.StaticInnerClass staticInnerClass = new OuterClass.StaticInnerClass();</li><li>无法直接访问外部类中实例变量和实例方法。</li></ul></li><li>实例内部类：和实例变量一个级别<ul><li>实例内部类如何实例化：OuterClass.InnerClass innerClass = new OuterClass().new InnerClass();</li><li>可以直接访问外部类中所有的实例变量，实例方法，静态变量，静态方法。</li></ul></li><li>局部内部类：和局部变量一个级别<ul><li>局部内部类方外类外部的局部变量时，局部变量需要被final修饰。</li><li>从JDK8开始，不需要手动添加final了，但JVM会自动添加。</li></ul></li><li>匿名内部类：特殊的局部内部类，没有名字，只能用一次。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;面向对象概述&quot;&gt;&lt;a href=&quot;#面向对象概述&quot; class=&quot;headerlink&quot; title=&quot;面向对象概述&quot;&gt;&lt;/a&gt;面向对象概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;软件开发方法：面向过程和面向对象&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;面向过程：关注点在实现功能的步骤上。&lt;ul&gt;
&lt;li&gt;PO：Procedure Oriented。代表语言：C语言&lt;/li&gt;
&lt;li&gt;面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。&lt;/li&gt;
&lt;li&gt;例如开汽车：启动、踩离合、挂挡、松离合、踩油门、车走了。&lt;/li&gt;
&lt;li&gt;再例如装修房子：做水电、刷墙、贴地砖、做柜子和家具、入住。&lt;/li&gt;
&lt;li&gt;对于简单的流程是适合使用面向过程的方式进行的。复杂的流程不适合使用面向过程的开发方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面向对象：关注点在实现功能需要哪些对象的参与。&lt;ul&gt;
&lt;li&gt;OO：Object Oriented 面向对象。包括OOA,OOD,OOP。OOA：Object Oriented Analysis 面向对象分析。OOD：Object Oriented Design 面向对象设计。OOP：Object Oriented Programming 面向对象编程。代表语言：Java、C#、Python等。&lt;/li&gt;
&lt;li&gt;人类是以面向对象的方式去认知世界的。所以采用面向对象的思想更加容易处理复杂的问题。&lt;/li&gt;
&lt;li&gt;面向对象就是分析出解决这个问题都需要哪些对象的参加，然后让对象与对象之间协作起来形成一个系统。&lt;/li&gt;
&lt;li&gt;例如开汽车：汽车对象、司机对象。司机对象有一个驾驶的行为。司机对象驾驶汽车对象。&lt;/li&gt;
&lt;li&gt;再例如装修房子：水电工对象，油漆工对象，瓦工对象，木工对象。每个对象都有自己的行为动作。最终完成装修。&lt;/li&gt;
&lt;li&gt;面向对象开发方式耦合度低，扩展能力强。例如采用面向过程生产一台电脑，不会分CPU、内存和硬盘，它会按照电脑的工作流程一次成型。采用面向对象生产一台电脑，CPU是一个对象，内存条是一个对象，硬盘是一个对象，如果觉得硬盘容量小，后期是很容易更换的，这就是扩展性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;面向对象三大特征&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;封装（Encapsulation）&lt;/li&gt;
&lt;li&gt;继承（Inheritance）&lt;/li&gt;
&lt;li&gt;多态（Polymorphism）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;类与对象&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类&lt;ul&gt;
&lt;li&gt;现实世界中，事物与事物之间具有共同特征，例如：刘德华和梁朝伟都有姓名、身份证号、身高等状态，都有吃、跑、跳等行为。将这些共同的状态和行为提取出来，形成了一个模板，称为类。&lt;/li&gt;
&lt;li&gt;类实际上是人类大脑思考总结的一个模板，类是一个抽象的概念。&lt;/li&gt;
&lt;li&gt;状态在程序中对应属性。属性通常用变量来表示。&lt;/li&gt;
&lt;li&gt;行为在程序中对应方法。用方法来描述行为动作。&lt;/li&gt;
&lt;li&gt;类 = 属性 + 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对象&lt;ul&gt;
&lt;li&gt;实际存在的个体。&lt;/li&gt;
&lt;li&gt;对象又称为实例（instance）。&lt;/li&gt;
&lt;li&gt;通过类这个模板可以实例化n个对象。（通过类可以创造多个对象）&lt;ul&gt;
&lt;li&gt;例如通过“明星类”可以创造出“刘德华对象”和“梁朝伟对象”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;明星类中有一个属性姓名：String name;“&lt;/li&gt;
&lt;li&gt;刘德华对象”和“梁朝伟对象”由于是通过明星类造出来的，所以这两个都有name属性，但是值是不同的。因此这种属性被称为&lt;font color=&quot;red&quot;&gt;实例变量&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609065526094.png&quot; alt=&quot;image-20250609065526094&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对象的创建和使用&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://xiaofanshutu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础语法</title>
    <link href="https://xiaofanshutu.github.io/posts/ea538f2a.html"/>
    <id>https://xiaofanshutu.github.io/posts/ea538f2a.html</id>
    <published>2025-06-08T22:12:37.686Z</published>
    <updated>2025-06-08T23:23:09.087Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p><strong>什么是标识符</strong></p><p>在Java中，程序员有权利自己取名的就是标识符。标识符是用来给变量、方法、类和包等命名的字符序列。</p><p>标识符的长度没有限制，但是建议使用有意义的、简洁的标识符，以提高代码的可读性和可维护性。</p><p><strong>标识符可以标识什么</strong></p><ol><li>变量名</li><li>方法名</li><li>类名、接口名、枚举名、注解名</li><li>包名</li><li>常量名</li><li>其他……</li></ol><p><strong>标识符命名规则</strong></p><ol><li>标识符可以由字母、数字、下划线(_)和美元符号($)组成，不能含有其他符号。（java支持全球所有语言，所以这里的 字母 指的是任何一个国家的文字都可以）</li><li>标识符不能以数字开头。</li><li>标识符不能是Java中的关键字，如public、class、void等。</li><li>标识符是区分大小写的，即Foo和foo是两个不同的标识符。</li><li>标识符的长度没有限制，但是Java建议使用有意义的、简短的标识符。</li></ol><p><strong>标识符命名规范</strong></p><ol><li>见名知意</li><li>驼峰式命名方式</li><li>类名、接口名、枚举、注解：首字母大写，后面每个单词首字母大写。（StudentService，UserService）</li><li>变量名和方法名：首字母小写，后面每个单词首字母大写。（doSome，doOther）</li><li>常量名：全部大写，每个单词用下划线连接。（LOGIN_SUCCESS，SYSTEM_ERROR）</li><li>包名：全部小写</li></ol><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><strong>什么是关键字</strong></p><ol><li><p>Java关键字是Java编程语言中预定义的具有特殊含义的单词，这些单词不能被用作标识符，而是在语法中有特定的用法和限制。</p></li><li><p>Java关键字都是小写的。</p></li></ol><p><strong>Java关键字有哪些</strong></p><ol><li>abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, finally, float, for, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, transient, try, void, volatile, while</li><li>保留字：goto，const</li></ol><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p><strong>什么是字面量</strong></p><ol><li>字面量指的是在程序中直接使用的数据。</li><li>字面量是Java中最基本的表达式，不需要进行计算或转换，直接使用即可。</li></ol><p><strong>Java中有哪些字面量</strong></p><ol><li>整数型：10、-5、0、100</li><li>浮点型：3.14、-0.5、1.0</li><li>布尔型：true、false</li><li>字符型：’a’、’b’、’c’、’1’、’2’、’国’</li><li>字符串型：”Hello”、”World”、”Java”、”你好呀”</li></ol><p><strong>加号运算符 +</strong></p><p>作用1：求和（当加号两边都是数字时进行求和运算）</p><p>作用2：字符串拼接（当加号两边有任意一边是字符串类型时会进行字符串拼接，结果还是一个字符串）</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>什么是变量？</strong></p><ol><li>变量是内存当中的一块空间。是计算机中存储数据最基本的单元。</li><li>变量三要素：<ul><li>数据类型（决定空间大小）【int, double, String】</li><li>变量名（只要是合法的标识符即可）</li><li>变量值（变量中具体存储的数据）</li></ul></li><li>变量的声明、赋值、访问<ul><li>int i; // 声明一个整数型的变量，起名i</li><li>i = 100; // 给变量i赋值100</li><li>System.out.println(i); // 访问i变量：读操作</li><li>i = 200; // 访问i变量：改操作【给变量i重新赋值200】</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609062938704.png" alt="image-20250609062938704"></p><p><strong>变量的作用</strong></p><ol><li>变量的存在会让程序更加便于维护。</li><li>变量的存在可以增强程序的可读性。</li></ol><p><strong>变量的小细节</strong></p><ol><li>变量必须先声明，再赋值，才能访问</li><li>方法体当中的代码遵循自上而下的顺序依次逐行执行，变量先访问，再声明肯定是不行的</li><li>一行代码上可以同时声明多个变量</li><li>在同一个作用域当中，变量名不能重名，可以重新赋值</li><li>变量值的数据类型必须和变量的数据类型一致，这样是不允许的：String name = 100;</li></ol><p><strong>变量的作用域</strong></p><ol><li>作用域就是变量的有效范围。变量的作用域是怎样的呢？用一句大白话就可以概括了：出了大括号就不认识了。</li><li>作用域的不同主要是因为声明在不同位置的变量具有不同的生命周期。所谓的生命周期是：从内存开辟到内存释放。</li><li>Java遵循就近原则</li></ol><p><strong>变量的分类</strong></p><ol><li>局部变量</li><li>成员变量<ul><li>静态变量</li><li>实例变量</li></ul></li></ol><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//二进制字面量是以ob开始的</span><br>System.out.println(<span class="hljs-number">0b10011011</span>);<span class="hljs-comment">//155</span><br><span class="hljs-comment">//八进制字面量是以0开始的</span><br>System.out.println(<span class="hljs-number">0123</span>);<span class="hljs-comment">//83</span><br><span class="hljs-comment">//十六进制字面量是以0x开始的</span><br>System.out.println(<span class="hljs-number">0x1A3F</span>);<span class="hljs-comment">//6719</span><br></code></pre></td></tr></tbody></table></figure><p><strong>二进制概述</strong></p><ol><li>计算机底层只能识别二进制。</li><li>计算机底层只识别二进制是因为计算机内部的电子元件只能识别两种状态，即开和关，或者高电平和低电平。二进制正好可以用两种状态来表示数字和字符，因此成为了计算机最基本的表示方法。</li><li>在计算机内部，所有的数据都被转化为二进制形式进行处理和存储。</li><li>虽然计算机可以通过不同的编程语言和程序来处理不同的数据类型和格式，但最终都需要将其转化为二进制形式才能被计算机底层识别和处理。</li></ol><p><strong>什么是二进制</strong></p><p>十进制：满十进一</p><p>二进制：满二进一</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609063242912.png" alt="image-20250609063242912"></p><p><strong>十进制转换为二进制</strong></p><ol><li>将十进制数除以2，得到商和余数。</li><li>将余数记录下来，然后将商作为新的十进制数，重复步骤1，直到商为0为止。</li><li>将记录的余数从下往上排列，得到的就是对应的二进制数。</li></ol><p><strong>二进制转换为十进制</strong></p><ol><li>将二进制数每一位权值找出来，然后每个权值与对应二进制位相乘，最后将它们相加，即可得到十进制数。</li><li>什么是权值？<ul><li>在二进制中，权值指的是每个位所代表的数值大小，即二进制中每个位的位置所代表的数值大小。</li><li>例如，在二进制数1101中，最高位的权值为8，次高位的权值为4，第三位的权值为2，最低位的权值为1。</li></ul></li><li>二进制数1101转换为十进制数的计算过程如下：<ul><li>1×2³ + 1×2² + 0×2¹ + 1×2⁰ = 8 + 4 + 0 + 1 = 13</li></ul></li></ol><h2 id="八进制与十六进制"><a href="#八进制与十六进制" class="headerlink" title="八进制与十六进制"></a>八进制与十六进制</h2><p>八进制是满8进1</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609063527771.png" alt="image-20250609063527771"></p><p>十六进制是满十六进1</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609063629833.png" alt="image-20250609063629833"></p><p>十进制转为八进制（或十六进制）与二进制相同。</p><p>八进制（或十六进制）转为十进制的原理与二进制相同。</p><p><strong>二进制转为十六进制</strong></p><ol><li>将二进制数从右往左每四位一组，不足四位则在左侧补0，得到若干个四位二进制数。 </li><li>将每个四位二进制数转换为对应的十六进制数</li></ol><p><strong>十六进制转为二进制</strong></p><ol><li>将十六进制中的每个数字转换成4个二进制位</li></ol><h2 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h2><p><strong>byte与bit</strong></p><ol><li>byte（字节）是计算机存储和处理数据的基本单位，通常由8个比特（bit）组成。每个比特（bit）是计算机中最小的存储单位，只能存储0或1两个状态。因此，一个字节（byte）可以存储8个比特（bit）的数据。</li><li>两者之间的关系是，1 byte = 8 bit，即8个比特（bit）组成一个字节（byte）。</li><li>在计算机中，数据通常以字节（byte）为单位进行存储和传输，而比特（bit）则是用来表示数据的最小单位。</li><li>1KB = 1024byte</li><li>1MB = 1024KB</li><li>1GB = 1024MB</li><li>1TB = 1024GB</li></ol><p><strong>原码反码补码</strong></p><ol><li>原码反码补码是计算机二进制的三种表示形式。</li><li>计算机在底层都是采用二进制补码形式表示的。</li><li>二进制位最高位称为符号位，0为正数，1为负数。</li></ol><p><strong>正数的原码反码补码</strong></p><ol><li>正数的原码反码补码是相同的。</li><li>127的原码反码补码分别是多少？都是0111 1111</li></ol><p><strong>负数的原码反码补码</strong></p><ol><li>负数的原码运算规则：将绝对值转换为二进制后，最高位改为1。</li><li>-5的原码：10000101</li><li>-5的反码：11111010（原则是：以原码作为参考，符号位不变，其他位取反。）</li><li>-5的补码：11111011（原则是：以反码作为参考，符号位不变，加1）</li><li>-20的原码反码补码是多少？</li><li>-128的原码反码补码是多少？<ul><li>-128的原码和补码都是1000 0000</li></ul></li></ol><p><strong>已知负数补码怎么得到原码</strong></p><ol><li>虽然计算机底层是采用补码的形式存储的，但最终显示给人类的时候是以原码的形式显示的。</li><li>将负数的补码形式除符号位外的所有位按位取反，再加1即可得到原码。</li><li>已知补码：10000001</li><li>它的原码是：11111111</li><li>结果是：-127</li><li>通过这个可以得出，对于一个字节来说，最大值127，最小值-128。</li></ol><p><strong>计算机底层为什么采用补码</strong></p><ol><li>可以简化电路设计：采用补码形式可以将加减法运算转化为相同的操作，从而简化电路设计。 </li><li>解决了0的正负问题：在原码中，0有两个表示，+0和-0，这样会导致计算结果不唯一，而在补码中，0只有一种表示，即全0，可以避免这个问题。 </li><li>解决了负数溢出问题：在原码中，负数的表示范围比正数少1，这样在进行减法运算时容易出现负数溢出的情况，而在补码中，负数的表示范围与正数相同，可以避免负数溢出的问题。 </li><li>方便计算机进行运算：补码形式可以方便计算机进行加减法运算，而且可以使用相同的电路进行运算，从而提高了计算机的运算效率。 </li><li>可以计算一下 -3 + 2，看看能不能理解。</li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=&quot;标识符&quot;&gt;&lt;/a&gt;标识符&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;什么是标识符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Java中，程序员有权利自己取名的就是标识符。标识符是用来给变量、方法、类和包等命名的字符序列。&lt;/p&gt;
&lt;p&gt;标识符的长度没有限制，但是建议使用有意义的、简洁的标识符，以提高代码的可读性和可维护性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标识符可以标识什么&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量名&lt;/li&gt;
&lt;li&gt;方法名&lt;/li&gt;
&lt;li&gt;类名、接口名、枚举名、注解名&lt;/li&gt;
&lt;li&gt;包名&lt;/li&gt;
&lt;li&gt;常量名&lt;/li&gt;
&lt;li&gt;其他……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;标识符命名规则&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标识符可以由字母、数字、下划线(_)和美元符号($)组成，不能含有其他符号。（java支持全球所有语言，所以这里的 字母 指的是任何一个国家的文字都可以）&lt;/li&gt;
&lt;li&gt;标识符不能以数字开头。&lt;/li&gt;
&lt;li&gt;标识符不能是Java中的关键字，如public、class、void等。&lt;/li&gt;
&lt;li&gt;标识符是区分大小写的，即Foo和foo是两个不同的标识符。&lt;/li&gt;
&lt;li&gt;标识符的长度没有限制，但是Java建议使用有意义的、简短的标识符。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;标识符命名规范&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://xiaofanshutu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java开发环境搭建</title>
    <link href="https://xiaofanshutu.github.io/posts/77a3ba8f.html"/>
    <id>https://xiaofanshutu.github.io/posts/77a3ba8f.html</id>
    <published>2025-06-08T21:33:49.327Z</published>
    <updated>2025-06-08T23:23:09.086Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常用的windows组合键"><a href="#常用的windows组合键" class="headerlink" title="常用的windows组合键"></a>常用的windows组合键</h2><ul><li>win + D<ul><li>回到桌面</li></ul></li><li>win + E<ul><li>打开资源管理器</li></ul></li><li>win + R<ul><li>打开运行窗口</li></ul></li><li>win + L<ul><li>锁屏</li></ul></li><li>alt + tab<ul><li>应用之间的切换</li></ul></li></ul><h2 id="常用的DOS命令"><a href="#常用的DOS命令" class="headerlink" title="常用的DOS命令"></a>常用的DOS命令</h2><ul><li><p>打开DOS命令窗口</p><ul><li>win + R，输入cmd</li><li>cmd是commond单词的缩写。</li></ul></li><li><p>怎么在DOS命令窗口中完成复制和粘贴？</p><ul><li><p>鼠标左键选中要复制的内容，再点击鼠标右键</p></li><li><p>在任意空白处，鼠标右键，即可粘贴</p></li></ul></li><li><p>什么是当前路径？</p><ul><li>假设进入DOS命令窗口时显示的是：C:\Users\Administrator&gt;。那么当前路径就是：C:\Users\Administrator</li></ul></li><li><p>常用DOS命令：</p><ul><li>dir：列出当前路径下所有的文件以及目录。</li><li>cls：clear screen清屏。</li><li>exit：退出DOS命令窗口。</li><li>切换盘符：c: 或者 d: 或者e:</li><li>del：删除一个文件或者多个文件。del Test.java  del *.java</li><li>ipconfig以及ipconfig /all：查看网卡的相关信息，例如ip地址，mac地址等。</li><li>ping命令：查看两台计算机之间是否可以正常通信<ul><li>ping 192.168.137.101</li><li>ping 192.168.137.101 -t</li><li>ping <a href="http://www.baidu.com/">www.baidu.com</a></li><li>ping <a href="http://www.baidu.com/">www.baidu.com</a> -t</li><li>终止DOS命令窗口中某个命令的执行：ctrl + c</li></ul></li><li>mkdir：创建目录<ul><li>mkdir abc，表示在当前目录下新建一个目录：abc</li></ul></li><li>rd：删除目录<ul><li>rd abc，表示删除当前路径下的abc目录</li></ul></li><li>ren：重命名<ul><li>ren abc xyz，表示将当前路径下的abc目录名修改为xyz</li></ul></li><li>cd命令：<ul><li>作用是：切换目录。change directory</li><li>cd命令的用法：cd 路径</li><li>路径包括：<ul><li>相对路径：相对路径一定是相对于当前路径而言的，以当前路径为基准，从当前所在的位置开始找。</li><li>绝对路径：在windows当中，路径开始的时候，是以盘符开始的，都是绝对路径。例如：C:\Users\Administrator\xyz\abc\def</li></ul></li><li>cd .. 回到上级目录 （在windows系统中两个点.. 代表的是一个上级目录。扩展：其实还有一个路径叫做一个点 . 一个点代表的是当前路径。）</li><li>cd / 回到跟目录</li><li>注意：路径在windows当中自动补全：使用tab键。</li></ul></li><li>定时关机：<ul><li>shutdown -s -t 3600 一小时之后自动关机。</li></ul></li></ul></li><li><p>批处理文件</p><ul><li>my.bat文件</li></ul><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-built_in">cd</span> C:\Users\Administrator\xyz\abc\def<br><span class="hljs-function">c:</span><br><span class="hljs-function"><span class="hljs-title">del</span> *.<span class="hljs-title">java</span></span><br></code></pre></td></tr></tbody></table></figure><p>作用：切换到C:\Users\Administrator\xyz\abc\def目录下，删除这个目录中所有的java文件。</p></li></ul><h2 id="通用的文本编辑快捷键"><a href="#通用的文本编辑快捷键" class="headerlink" title="通用的文本编辑快捷键"></a>通用的文本编辑快捷键</h2><p>ctrl+c 复制</p><p>ctrl+v 粘贴</p><p>ctrl+x 剪切</p><p>ctrl+s 保存</p><p>ctrl+z 撤销</p><p>ctrl+y 重做</p><p>ctrl+a 全选</p><p><strong>home 光标回到行首</strong></p><p><strong>end 光标回到行尾</strong></p><p><strong>ctrl + home 光标回到文章开始</strong></p><p><strong>ctrl + end 光标回到文章末尾</strong></p><p><strong>shift + home 或 end 选中一行</strong></p><p>鼠标双击 （选中一个单词）</p><p>ctrl + shift + 右箭头或左箭头 （选中一个单词）</p><p>ctrl + f 查找</p><h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><p><strong>Java SE（Java Standard Edition）是Java的标准版</strong>，它包含了Java语言的核心部分，包括基础类库、虚拟机和开发工具等。Java SE主要用于开发桌面应用程序、控制台程序和小型服务器端应用程序等。</p><p><strong>Java EE（Java Enterprise Edition）是Java的企业版</strong>，它是在Java SE的基础上扩展而来，主要用于开发大型企业级应用程序，如电子商务系统、ERP系统和CRM系统等。Java EE包含了许多企业级技术，如Servlet、JSP、EJB、JMS、JTA等。</p><p><strong>Java ME（Java Micro Edition）是Java的微型版</strong>，它主要用于嵌入式设备和移动设备上的应用程序开发，如手机、平板电脑、数码相机、路由器等。Java ME的特点是体积小、速度快、资源占用少，可以在较小的内存和处理能力的设备上运行。</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609055232739.png" alt="image-20250609055232739"></p><h2 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h2><p>简单易学：Java语言的语法和C语言很相似，但是它去掉了C中的复杂的指针和多重继承等特性，使得Java语言更加简单易学。 </p><p>面向对象：Java语言是一种纯面向对象的编程语言，它支持对象的封装、继承和多态等面向对象的特性。 </p><p><font color="red">平台无关性</font>&gt;（跨平台性：一次编译，到处运行）：Java语言的程序可以在不同的操作系统和硬件平台上运行，这是因为Java程序被编译成字节码，而不是机器码，字节码可以在任何支持Java虚拟机的平台上运行。 实现原理：不同的操作系统上安装属于自己的Java虚拟机，而Java虚拟机屏蔽了各个操作系统之间的差异，从而做到跨平台。</p><p>安全性：Java语言具有很高的安全性，它提供了一系列的安全措施来保护程序不受恶意攻击和病毒侵害。 高性能：Java语言具有很高的性能，它采用了一系列优化措施来提高程序的执行速度和内存使用效率。 </p><p>多线程支持：Java语言具有很好的多线程支持，它提供了一系列的线程控制机制，使得程序可以更好地利用计算机的多核处理能力。 </p><p><font color="red">自动垃圾回收机制</font>：Java语言采用的是垃圾回收机制（Garbage Collection，简称GC），也就是自动内存管理机制。在传统的编程语言中，程序员需要手动分配和释放内存，容易出现内存泄漏和悬挂指针等问题。而Java语言采用的垃圾回收机制可以自动分配和释放内存，避免了内存泄漏和悬挂指针等问题。</p><h2 id="JDK的加载与执行原理"><a href="#JDK的加载与执行原理" class="headerlink" title="JDK的加载与执行原理"></a>JDK的加载与执行原理</h2><ol><li>包含两个阶段：编译阶段和运行阶段。Java既是编译型语言，又是解释型语言</li><li>编译阶段和运行阶段可以在不同的操作系统上完成。</li><li>编译后删除java源程序，不会影响程序的执行。</li><li>生成的class文件如果是A.class，则类名为A。如果是Hello.class，则类名为Hello。</li><li>javac是负责编译的命令（检查语法规则），java是负责运行的命令。</li><li>class文件不是机器码，操作系统无法直接执行。只有JVM才能看懂。</li><li>JVM会把class字节码解释为机器码，这样操作系统才能看懂。</li><li>JDK(Java Development Kit)、JRE(Java Runtime Environment)、JVM(Java Virtual Machine)分别是什么？他们的关系是什么？<ul><li>JDK包含JRE，JRE里面有JVM</li><li>JVM其实就是一个规范</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609060047533.png" alt="image-20250609060047533"></p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609060148755.png" alt="image-20250609060148755" style="zoom: 67%;"><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><p>JDK的下载与安装</p><p>环境变量PATH的配置</p><p>JDK的重点目录介绍</p><p>​    bin：该目录主要存放命令</p><p>​    lib：该目录主要存放JDK的类库</p><p>​    lib/src.zip：JDK源码</p><p>第一个Java程序的编写</p><p>第一个Java程序的编译</p><p>​    javac命令的使用：javac 后面可以跟相对路径或者绝对路径（有盘符就是绝对路径）</p><p>第一个Java程序的运行</p><p>​    java命令的使用</p><p>理解环境变量CLASSPATH</p><p>​    类加载器（ClassLoader）</p><p>​    CLASSPATH是给Java的类加载器指路的</p><h2 id="PATH环境变量"><a href="#PATH环境变量" class="headerlink" title="PATH环境变量"></a>PATH环境变量</h2><ul><li>path环境变量不是java的，隶属于windows操作系统</li><li>path环境变量的作用是什么？<ul><li>在path中有很多路径，路径和路径之间采用 分号（;） 隔开</li><li>在DOS命令窗口中输入一个DOS命令之后，windows会先从当前路径下找这个命令，如果找不到，则会去环境变量PATH的路径中查找该命令，找到则执行，找不到，则报错。</li><li>PATH环境变量实际上就是给windows操作系统指路的。</li></ul></li></ul><h2 id="编写第一个Java程序"><a href="#编写第一个Java程序" class="headerlink" title="编写第一个Java程序"></a>编写第一个Java程序</h2><p>在硬盘的任何位置，新建一个java源文件，起名：HelloWorld.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>{<br>        System.out.println(<span class="hljs-string">"Hello World!"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="编译第一个java程序"><a href="#编译第一个java程序" class="headerlink" title="编译第一个java程序"></a>编译第一个java程序</h2><ul><li>使用javac命令来编译。首先确保javac命令能用。</li><li>javac命令怎么用，语法是什么？<ul><li>javac      java源文件的路径</li><li>javac     java源文件的相对路径</li><li>javac     java源文件的绝对路径</li></ul></li></ul><h2 id="运行第一个Java程序"><a href="#运行第一个Java程序" class="headerlink" title="运行第一个Java程序"></a>运行第一个Java程序</h2><ul><li><p>使用java命令来运行程序，首先确保java命令可以用。</p></li><li><p>java命令怎么用？语法格式是什么？</p><ul><li>java 类名（比如：java HelloWorld）</li><li>切记切记切记~！！！！！！！！！ java命令后面跟的<strong>不是文件路径</strong>。java命令后面跟的是<font size="5">类名</font></li></ul></li><li><p>什么是类名？</p><ul><li>A.class，类名是A</li><li>HelloWorld.class，类名是HelloWorld</li><li>Test.class，类名是：Test</li></ul></li><li><p><font color="red">要使用java命令，首先DOS命令窗口中的当前路径必须切换到class文件所在的位置。</font></p></li></ul><h2 id="掌握环境变量CLASSPATH"><a href="#掌握环境变量CLASSPATH" class="headerlink" title="掌握环境变量CLASSPATH"></a>掌握环境变量CLASSPATH</h2><ul><li>classpath环境变量是隶属于Java语言的。不是windows操作系统的。和PATH环境变量完全不同。</li><li>classpath环境变量是给classloader（类加载器）指路的。</li><li>java A。执行后。先启动JVM，JVM启动classloader，classloader去硬盘上通过classpath找A.class文件。找到则执行，找不到则报错。</li><li>如果classpath没有配置的话，默认从当前路径下找class字节码文件。</li><li>如果classpath配置了，例如配置到桌面上了：C:\Users\Administrator\Desktop，那么classloader以后就只会去桌面上找字节码文件了，不再从当前路径下找了。</li><li>注意，如果classpath配置为：classpath=.;C:\Users\Administrator\Desktop 是什么意思呢？<ul><li>先让类加载器从当前路径下找，如果找不到的话，去C:\Users\Administrator\Desktop找。</li></ul></li></ul><h2 id="关于编译时的乱码问题"><a href="#关于编译时的乱码问题" class="headerlink" title="关于编译时的乱码问题"></a>关于编译时的乱码问题</h2><ul><li><p>当java源文件中有中文时，用EditPlus工具写代码，最后会出现中文乱码问题，为什么？</p><ul><li>EditPlus默认是简体中文GBK。</li><li>java21的javac编译器采用的是UTF-8的编码方式进行编译。</li><li>编码不一致，所以乱码了。</li></ul></li><li><p>怎么解决？</p><ul><li><p>第一种方案：编译的时候用特定字符集编译</p><ul><li>javac -encoding GBK HelloWorld2.java</li></ul></li><li><p>第二种方案：</p><ul><li><p>将editplus的字符集修改为UTF-8</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250609062007061.png" alt="image-20250609062007061"></p></li></ul></li></ul></li></ul><h2 id="java中的三种注释"><a href="#java中的三种注释" class="headerlink" title="java中的三种注释"></a>java中的三种注释</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单行注释</span><br><span class="hljs-comment">// 单行注释</span><br><span class="hljs-comment">// 单行注释</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* javadoc注释，可以给javadoc命令解析提取并生成帮助文档</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> qingya</span><br><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><p>使用以下命令可以提取生成帮助文档：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">javadoc -d docs -author -version -encoding utf-8 HelloWorld.java<br></code></pre></td></tr></tbody></table></figure><h2 id="public-class与class的区别"><a href="#public-class与class的区别" class="headerlink" title="public class与class的区别"></a>public class与class的区别</h2><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">1. 一个Java源文件中可以定义多个class<br>2. 编译之后，一个class就会对应生成一个class字节码文件<br>3. 如果一个类是public的，类名必须和源文件名保持一致。<br>4. public的类可以没有。如果有的话，也只能有一个。<br>5. 每个类中都可以编写入口main方法。想执行X类的main方法怎么办？java X<br>6. 在实际的开发中，对于一个软件来说，一般入口只有1个。<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;常用的windows组合键&quot;&gt;&lt;a href=&quot;#常用的windows组合键&quot; class=&quot;headerlink&quot; title=&quot;常用的windows组合键&quot;&gt;&lt;/a&gt;常用的windows组合键&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;win + D&lt;ul&gt;
&lt;li&gt;回到桌面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;win + E&lt;ul&gt;
&lt;li&gt;打开资源管理器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;win + R&lt;ul&gt;
&lt;li&gt;打开运行窗口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;win + L&lt;ul&gt;
&lt;li&gt;锁屏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;alt + tab&lt;ul&gt;
&lt;li&gt;应用之间的切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;常用的DOS命令&quot;&gt;&lt;a href=&quot;#常用的DOS命令&quot; class=&quot;headerlink&quot; title=&quot;常用的DOS命令&quot;&gt;&lt;/a&gt;常用的DOS命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;打开DOS命令窗口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;win + R，输入cmd&lt;/li&gt;
&lt;li&gt;cmd是commond单词的缩写。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;怎么在DOS命令窗口中完成复制和粘贴？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;鼠标左键选中要复制的内容，再点击鼠标右键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在任意空白处，鼠标右键，即可粘贴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么是当前路径？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设进入DOS命令窗口时显示的是：C:&#92;Users&#92;Administrator&amp;gt;。那么当前路径就是：C:&#92;Users&#92;Administrator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常用DOS命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dir：列出当前路径下所有的文件以及目录。&lt;/li&gt;
&lt;li&gt;cls：clear screen清屏。&lt;/li&gt;
&lt;li&gt;exit：退出DOS命令窗口。&lt;/li&gt;
&lt;li&gt;切换盘符：c: 或者 d: 或者e:&lt;/li&gt;
&lt;li&gt;del：删除一个文件或者多个文件。del Test.java  del *.java&lt;/li&gt;
&lt;li&gt;ipconfig以及ipconfig /all：查看网卡的相关信息，例如ip地址，mac地址等。&lt;/li&gt;
&lt;li&gt;ping命令：查看两台计算机之间是否可以正常通信&lt;ul&gt;
&lt;li&gt;ping 192.168.137.101&lt;/li&gt;
&lt;li&gt;ping 192.168.137.101 -t&lt;/li&gt;
&lt;li&gt;ping &lt;a href=&quot;http://www.baidu.com/&quot;&gt;www.baidu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ping &lt;a href=&quot;http://www.baidu.com/&quot;&gt;www.baidu.com&lt;/a&gt; -t&lt;/li&gt;
&lt;li&gt;终止DOS命令窗口中某个命令的执行：ctrl + c&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mkdir：创建目录&lt;ul&gt;
&lt;li&gt;mkdir abc，表示在当前目录下新建一个目录：abc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rd：删除目录&lt;ul&gt;
&lt;li&gt;rd abc，表示删除当前路径下的abc目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ren：重命名&lt;ul&gt;
&lt;li&gt;ren abc xyz，表示将当前路径下的abc目录名修改为xyz&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cd命令：&lt;ul&gt;
&lt;li&gt;作用是：切换目录。change directory&lt;/li&gt;
&lt;li&gt;cd命令的用法：cd 路径&lt;/li&gt;
&lt;li&gt;路径包括：&lt;ul&gt;
&lt;li&gt;相对路径：相对路径一定是相对于当前路径而言的，以当前路径为基准，从当前所在的位置开始找。&lt;/li&gt;
&lt;li&gt;绝对路径：在windows当中，路径开始的时候，是以盘符开始的，都是绝对路径。例如：C:&#92;Users&#92;Administrator&#92;xyz&#92;abc&#92;def&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cd .. 回到上级目录 （在windows系统中两个点.. 代表的是一个上级目录。扩展：其实还有一个路径叫做一个点 . 一个点代表的是当前路径。）&lt;/li&gt;
&lt;li&gt;cd / 回到跟目录&lt;/li&gt;
&lt;li&gt;注意：路径在windows当中自动补全：使用tab键。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定时关机：&lt;ul&gt;
&lt;li&gt;shutdown -s -t 3600 一小时之后自动关机。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;批处理文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;my.bat文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bat&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; C:&#92;Users&#92;Administrator&#92;xyz&#92;abc&#92;def&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;c:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;del&lt;/span&gt; *.&lt;span class=&quot;hljs-title&quot;&gt;java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;作用：切换到C:&#92;Users&#92;Administrator&#92;xyz&#92;abc&#92;def目录下，删除这个目录中所有的java文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;通用的文本编辑快捷键&quot;&gt;&lt;a href=&quot;#通用的文本编辑快捷键&quot; class=&quot;headerlink&quot; title=&quot;通用的文本编辑快捷键&quot;&gt;&lt;/a&gt;通用的文本编辑快捷键&lt;/h2&gt;&lt;p&gt;ctrl+c 复制&lt;/p&gt;
&lt;p&gt;ctrl+v 粘贴&lt;/p&gt;
&lt;p&gt;ctrl+x 剪切&lt;/p&gt;
&lt;p&gt;ctrl+s 保存&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://xiaofanshutu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaofanshutu.github.io/posts/0.html"/>
    <id>https://xiaofanshutu.github.io/posts/0.html</id>
    <published>2025-05-09T00:22:18.937Z</published>
    <updated>2025-06-08T23:23:09.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>《疯狂Java讲义》 第一章</p><h1 id="第一个HelloWorld程序"><a href="#第一个HelloWorld程序" class="headerlink" title="第一个HelloWorld程序"></a>第一个HelloWorld程序</h1><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250509082341018.png" alt="image-20250509082341018"></p><p>javac -d . HelloWorld.java(javac -d destdir srcdir) destdir是.的时候表示将字节码生成到java文件所在的路径下。</p><p>java是区分大小写的</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250509082427441.png" alt="image-20250509082427441"></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;p&gt;《疯狂Java讲义》 第一章&lt;/p&gt;
&lt;h1 id=&quot;第一个HelloWorld程序&quot;&gt;&lt;a href=&quot;#第一个HelloWorld程序&quot; class=&quot;headerlink&quot; title=&quot;第一个HelloWorld程序&quot;&gt;&lt;/a&gt;第一个HelloWorld程序&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250509082341018.png&quot; alt=&quot;image-20250509082341018&quot;&gt;&lt;/p&gt;
&lt;p&gt;javac -d . HelloWorld.java(javac -d destdir srcdir) destdir是.的时候表示将字节码生成到java文件所在的路径下。&lt;/p&gt;
&lt;p&gt;java是区分大小写的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250509082427441.png&quot; alt=&quot;image-20250509082427441&quot;&gt;&lt;/p&gt;
</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>IDEA常用快捷键</title>
    <link href="https://xiaofanshutu.github.io/posts/566321e7.html"/>
    <id>https://xiaofanshutu.github.io/posts/566321e7.html</id>
    <published>2025-04-12T10:43:43.493Z</published>
    <updated>2025-04-10T00:10:05.718Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h1><ol><li>单行注释：ctrl + /</li><li>多行注释：ctrl + shift + /</li><li>查看源码：按ctrl别松手，鼠标移动到对应的类名下方，出现下划线，点击过去，可以查看类源码。</li><li>多行编辑：按alt别松手，鼠标拖动多行，完成多行编辑。</li><li>怎么快速生成创建对象语句：类名.new.var</li><li>怎么快速生成if语句：布尔类型值.if</li><li>怎么快速生成setter和getter方法：alt + insert，然后选择setter and getter生成。</li><li>怎么快速生成构造方法：alt + insert，然后选择Constructor。</li><li>在IDEA当中如何自动纠错：将光标移动到错误的位置，按atl + enter。会有提示，根据提示进行纠错。</li><li>移动代码到上一行：alt + shift + 上/下方向</li><li>怎么快速重写方法？alt + insert，选择Override….</li><li>怎么快速重写方法？ctrl + o</li><li>快速向下转型，并同时生成变量名：变量名.castvar</li><li>快速查看方法的参数：ctrl + p</li><li>返回上一步：ctrl + alt + 左方向键。 下一步：ctrl + alt + 右方向键。</li><li>代码格式化：ctrl + alt + L</li><li>查看继承结构：ctrl + H</li><li>自动代码包裹：ctrl + alt + t</li><li>快速运行程序 ctrl + shift + F10</li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;IDEA常用快捷键&quot;&gt;&lt;a href=&quot;#IDEA常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;IDEA常用快捷键&quot;&gt;&lt;/a&gt;IDEA常用快捷键&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;单行注释：ctrl + /&lt;/li&gt;
&lt;li&gt;多行注释：ctrl + shift + /&lt;/li&gt;
&lt;li&gt;查看源码：按ctrl别松手，鼠标移动到对应的类名下方，出现下划线，点击过去，可以查看类源码。&lt;/li&gt;
&lt;li&gt;多行编辑：按alt别松手，鼠标拖动多行，完成多行编辑。&lt;/li&gt;
&lt;li&gt;怎么快速生成创建对象语句：类名.new.var&lt;/li&gt;
&lt;li&gt;怎么快速生成if语句：布尔类型值.if&lt;/li&gt;
&lt;li&gt;怎么快速生成setter和getter方法：alt + insert，然后选择setter and getter生成。&lt;/li&gt;
&lt;li&gt;怎么快速生成构造方法：alt + insert，然后选择Constructor。&lt;/li&gt;
&lt;li&gt;在IDEA当中如何自动纠错：将光标移动到错误的位置，按atl + enter。会有提示，根据提示进行纠错。&lt;/li&gt;
&lt;li&gt;移动代码到上一行：alt + shift + 上/下方向&lt;/li&gt;
&lt;li&gt;怎么快速重写方法？alt + insert，选择Override….&lt;/li&gt;
&lt;li&gt;怎么快速重写方法？ctrl + o&lt;/li&gt;
&lt;li&gt;快速向下转型，并同时生成变量名：变量名.castvar&lt;/li&gt;
&lt;li&gt;快速查看方法的参数：ctrl + p&lt;/li&gt;
&lt;li&gt;返回上一步：ctrl + alt + 左方向键。 下一步：ctrl + alt + 右方向键。&lt;/li&gt;
&lt;li&gt;代码格式化：ctrl + alt + L&lt;/li&gt;
&lt;li&gt;查看继承结构：ctrl + H&lt;/li&gt;
&lt;li&gt;自动代码包裹：ctrl + alt + t&lt;/li&gt;
&lt;li&gt;快速运行程序 ctrl + shift + F10&lt;/li&gt;
&lt;/ol&gt;
</summary>
    
    
    
    <category term="Java" scheme="https://xiaofanshutu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://xiaofanshutu.github.io/posts/d366874c.html"/>
    <id>https://xiaofanshutu.github.io/posts/d366874c.html</id>
    <published>2025-04-11T12:10:19.347Z</published>
    <updated>2025-04-29T14:08:56.210Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h1><ol><li>Java集合中存储的是引用，存的不是堆中的对象。堆中的对象的地址存储到了集合中。</li><li>默认情况下，如果不使用泛型，集合中可以存储任何类型的引用。（只要是Object类的子类都可以存储）</li><li>Java集合框架相关的类都在java.util包下。</li><li>Java集合框架分为两部分：<ul><li>Collection结构：元素以单个形式存储。</li><li>Map结构：元素以键值对的映射关系存储。</li></ul></li></ol><h1 id="Collection继承结构"><a href="#Collection继承结构" class="headerlink" title="Collection继承结构"></a>Collection继承结构</h1><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412180840197.png" alt="image-20250412180840197"></p><ol><li><p>上图6个蓝色的实现类中，只有HashSet是无序集合，其他都是有序集合。</p><ul><li><p>有序集合：集合中存储的元素有下标 <strong>或者</strong> 集合中存储的元素是可排序的</p></li><li><p>无序集合： 集合中存储的元素没有下标 <strong>并且</strong> 集合中存储的元素也没有排序</p></li></ul></li><li><p>每个集合实现类对应的数据结构：</p></li></ol><table><thead><tr><th>集合类型</th><th>数据结构</th><th>描述</th></tr></thead><tbody><tr><td>ArrayList</td><td>数组</td><td>一种可以动态增长和缩减的索引序列</td></tr><tr><td>LinkedList</td><td>双向链表（不是队列结构，但是可以用它模拟队列）</td><td>一种可以在任何位置进行高效插入和删除操作的有序序列</td></tr><tr><td>Vector</td><td>数组（线程安全）</td><td></td></tr><tr><td>HashSet</td><td>哈希表</td><td>一种没有重复元素的无序集合</td></tr><tr><td>LinkedHashSet</td><td>双向链表+哈希表</td><td>一种可以记住元素插入次序的集</td></tr><tr><td>TreeSet</td><td>红黑树</td><td>一种有序集</td></tr></tbody></table><ol start="3"><li>List集合中存储的元素可以重复，Set集合中的元素不可重复。</li></ol><h1 id="Collection接口的常用方法"><a href="#Collection接口的常用方法" class="headerlink" title="Collection接口的常用方法"></a>Collection接口的常用方法</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean add(E e);</td><td>向集合中添加元素</td></tr><tr><td>int size();</td><td>获取集合中元素个数</td></tr><tr><td>boolean addAll(Collection c);</td><td>将参数集合中所有元素全部加入当前集合</td></tr><tr><td>boolean contains(Object o);</td><td>判断集合中是否包含对象o</td></tr><tr><td>boolean remove(Object o);</td><td>从集合中删除对象o</td></tr><tr><td>void clear();</td><td>清空集合</td></tr><tr><td>boolean isEmpty();</td><td>判断集合中元素个数是否为0</td></tr><tr><td>Object[] toArray();</td><td>将集合转换成一维数组</td></tr></tbody></table><p>这里有疑问：为什么col.toArray()返回的是地址？？？    </p><h2 id="add-E-e-amp-size-amp-toArray"><a href="#add-E-e-amp-size-amp-toArray" class="headerlink" title="add(E e) &amp; size() &amp; toArray()"></a>add(E e) &amp; size() &amp; toArray()</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection col = <span class="hljs-keyword">new</span> ArrayList();<br><span class="hljs-comment">//add(E e)</span><br>col.add(<span class="hljs-string">"zhangsan"</span>);<br>col.add(<span class="hljs-number">123</span>);<br>col.add(<span class="hljs-keyword">true</span>);<br>System.out.println(col); <span class="hljs-comment">// [zhangsan, 123, true]</span><br>System.out.println(col.toArray());<span class="hljs-comment">// [Ljava.lang.Object;@1b6d3586</span><br><br><span class="hljs-comment">//size()</span><br>System.out.println(col.size());<span class="hljs-comment">// 3</span><br></code></pre></td></tr></tbody></table></figure><h2 id="addAll-Collection-c"><a href="#addAll-Collection-c" class="headerlink" title="addAll(Collection c)"></a>addAll(Collection c)</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//addAll(Collection c)</span><br>Collection col2 = <span class="hljs-keyword">new</span> ArrayList();<br>col2.add(<span class="hljs-string">"好好学习，天天向上"</span>);<br>col2.add(<span class="hljs-string">"you are the best~"</span>);<br>col.addAll(col2); <span class="hljs-comment">// 将col2中的元素添加到col中</span><br>System.out.println(col);<br></code></pre></td></tr></tbody></table></figure><p>遇到问题：控制台中文乱码</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412183545975.png" alt="image-20250412183545975"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//addAll(Collection c)</span><br>Collection col2 = <span class="hljs-keyword">new</span> ArrayList();<br>col2.add(<span class="hljs-string">"hello~"</span>);<br>col.addAll(col2); <span class="hljs-comment">// 将col2中的元素添加到col中</span><br>System.out.println(col);<span class="hljs-comment">// [zhangsan, 123, true, hello~]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="contains-Object-o"><a href="#contains-Object-o" class="headerlink" title="contains(Object o)"></a>contains(Object o)</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//contains(Object o)</span><br>System.out.println(col.contains(<span class="hljs-string">"zhangsan"</span>)); <span class="hljs-comment">// true</span><br>System.out.println(col.contains(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"zhangsan"</span>))); <span class="hljs-comment">// true</span><br></code></pre></td></tr></tbody></table></figure><h2 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(col);<span class="hljs-comment">//[zhangsan, 123, true, hello~]</span><br>col.remove(<span class="hljs-string">"zhangsan"</span>); <span class="hljs-comment">// 删除元素</span><br>System.out.println(col);<span class="hljs-comment">//[123, true, hello~]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="clear-amp-isEmpty"><a href="#clear-amp-isEmpty" class="headerlink" title="clear() &amp; isEmpty()"></a>clear() &amp; isEmpty()</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(col);<span class="hljs-comment">// [123, true, hello~]</span><br>col.clear();<br>System.out.println(col);<span class="hljs-comment">// []</span><br>System.out.println(col.isEmpty()); <span class="hljs-comment">// true</span><br></code></pre></td></tr></tbody></table></figure><h1 id="Collection集合的遍历"><a href="#Collection集合的遍历" class="headerlink" title="Collection集合的遍历"></a>Collection集合的遍历</h1><p>第一步：获取当前集合依赖的迭代器对象</p><p>​    Iterator it = collection.iterator();</p><p>第二步：编写循环，循环条件：当前光标指向的位置是否存在元素。</p><p>​    while(it.hasNext()){}</p><p>第三步：如果有，将光标指向的当前元素返回，并且将光标向下移动一位。</p><p>​    Object obj = it.next();</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412190556190.png" alt="image-20250412190556190"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412190641158.png" alt="image-20250412190641158"></p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><ol><li><p>泛型是Java5的新特性，属于编译阶段的功能。</p></li><li><p>泛型可以让开发者在编写代码时指定集合中存储数据的数据类型。</p></li><li><p>泛型作用：</p><ul><li>类型安全：指定类型后，编译期会在编译阶段进行类型检查。如果尝试将错误的类型加入集合中，则会在编译阶段报错。避免了在运行时出现类型错误的问题。</li><li>代码简洁：使用泛型后可以简化代码，避免了繁琐的类型转换操作。没有泛型的时候，需要使用Object类型来保存集合中的元素，在使用时需要强制类型转换成实际类型。</li></ul></li><li><p>在集合中使用泛型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; strs = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br><span class="hljs-comment">//这就表示该集合只能存储字符串，存储其它类型时编译器报错。并且以上代码使用泛型后，避免了繁琐的类型转换，集合中的元素可以直接调用String类特有的方法。</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>Java7的新特性：钻石表达式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; strs = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="泛型擦除与补偿"><a href="#泛型擦除与补偿" class="headerlink" title="泛型擦除与补偿"></a>泛型擦除与补偿</h2><ol><li><p>泛型的出现提高了编译时的安全性，正因为编译时对添加的数据做了检查，则程序运行时才不会抛出类型转换异常。因此泛型本质上是编译时期的技术，是专门给编译器用的。加载类的时候，会将泛型擦除掉（擦除之后的类型为Object类型），这个称为<strong>泛型擦除</strong>。</p></li><li><p>为什么要有泛型擦除呢？其本质是为了让JDK1.4和JDK1.5能够兼容同一个类加载器。在JDK1.5版本中，程序编译时期会对集合添加的元素进行安全检查，如果检查完是安全的、没有错误的，那么就意味着添加的元素都属于同一种数据类型，则加载类时就可以把这个泛型擦除掉，将泛型擦除后的类型就是Object类，这样擦除之后的代码就与JDK1.4的代码一致。</p></li><li><p>由于加载类的时候，会默认将类中的泛型擦除为Object类型，所以添加的元素就被转化为Object类型，同时取出的元素也默认为Object类型。而我们获得集合中的元素时，按理说取出的元素应该是Object类型，为什么取出的元素却是实际添加的元素类型呢？</p><p>这是因为这里又做了一个默认的操作，我们称之为<strong>泛型的补偿</strong>。在程序运行时，通过获取元素的实际类型进行强转，这就叫做泛型补偿（不必手动实现强制转换）。获得集合中的元素时，虚拟机会根据获得元素的实际类型进行向下转型，也就是会恢复获得元素的实际类型，因此我们就无需手动执行向下转型操作，从本质上避免了抛出类型转换异常。</p></li></ol><h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><h3 id="在类上定义泛型"><a href="#在类上定义泛型" class="headerlink" title="在类上定义泛型"></a>在类上定义泛型</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.javase.collection.Summer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAnimal</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Integer</span>&gt; </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyAnimal</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> java.lang.<span class="hljs-function">String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"MyAnimal{"</span> +<br>                <span class="hljs-string">"name="</span> + name +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这种可以直接调用String或者Integer类特有的方法（因为声明泛型的时候直接指定了泛型类型是String和Object）</span><br>MyAnimal&lt;String, Integer&gt; myAnimal = <span class="hljs-keyword">new</span> MyAnimal&lt;&gt;(<span class="hljs-string">"dog"</span>, <span class="hljs-number">2</span>);<br>System.out.println(myAnimal.getName().charAt(<span class="hljs-number">1</span>));<br><br><span class="hljs-comment">//这种的不能直接调用String或者Integer类特有的方法</span><br>MyAnimal&lt;Object, Object&gt; myAnimal1 = <span class="hljs-keyword">new</span> MyAnimal&lt;&gt;(<span class="hljs-string">"cat"</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//myAnimal1.getName().charAt(1); 调用不了这个方法</span><br></code></pre></td></tr></tbody></table></figure><h3 id="在静态方法上定义泛型"><a href="#在静态方法上定义泛型" class="headerlink" title="在静态方法上定义泛型"></a>在静态方法上定义泛型</h3><ol><li><p>在类上定义的泛型，在静态方法中无法使用。</p></li><li><p>如果在静态方法中使用泛型，则需要在方法返回值类型前面进行泛型的声明。</p><ul><li><strong>语法格式：&lt;泛型1, 泛型2, 泛型3, …&gt; 返回值类型 方法名(形参列表) {}</strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(T[] t)</span> </span>{<br>        <span class="hljs-keyword">for</span> (T t1 : t) {<br>            System.out.println(t1);<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        String[] strs = {<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>};<br>        Integer[] ints = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br>        Double[] doubles = {<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>};<br><br>        A.print(strs);<br>        System.out.println(<span class="hljs-string">"=========="</span>);<br>        A.print(ints);<br>        System.out.println(<span class="hljs-string">"=========="</span>);<br>        A.print(doubles);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">a<br>b<br>c<br>==========<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>==========<br><span class="hljs-number">1.1</span><br><span class="hljs-number">2.2</span><br><span class="hljs-number">3.3</span><br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="在接口上定义泛型"><a href="#在接口上定义泛型" class="headerlink" title="在接口上定义泛型"></a>在接口上定义泛型</h3><p><strong>语法格式：interface 接口名&lt;泛型1,泛型2,…&gt; {}</strong></p><ul><li>例如：<code>public interface Flayable &lt;T&gt; {}</code><ul><li>实现接口时，如果知道具体的类型，则：<code>public class MyClass implements Flyable &lt;Bird&gt; {}</code></li><li>实现接口时，如果不知道具体的类型，则：<code>public class MyClass &lt;T&gt; implements Flyable &lt;T&gt; {}</code></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">定义一个泛型接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyFlyable</span>&lt;<span class="hljs-title">T</span>&gt; </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">(T t)</span></span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">B类实现接口时，指定具体类型为Bird</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MyFlyable</span>&lt;<span class="hljs-title">Bird</span>&gt; </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">(Bird bird)</span> </span>{<br>        System.out.println(<span class="hljs-string">"Bird "</span> + bird.getName() + <span class="hljs-string">" is flying."</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>​    </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">C类实现接口时，未指定具体类型</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">MyFlyable</span>&lt;<span class="hljs-title">T</span>&gt; </span>{<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">(T t)</span> </span>{<br>        <span class="hljs-keyword">if</span> (t <span class="hljs-keyword">instanceof</span> Bird) {<br>            System.out.println(<span class="hljs-string">"Bird "</span> + ((Bird) t).getName() + <span class="hljs-string">" is flying."</span>);<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t <span class="hljs-keyword">instanceof</span> Dragon) {<br>            System.out.println(<span class="hljs-string">"Dragon "</span> + ((Dragon) t).getName() + <span class="hljs-string">" is flying."</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"Unknown type is flying."</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Bird bird = <span class="hljs-keyword">new</span> Bird(<span class="hljs-string">"xiaohuangli"</span>);<br>        Dragon dragon = <span class="hljs-keyword">new</span> Dragon(<span class="hljs-string">"xiaolongren"</span>);<br><br>        B b = <span class="hljs-keyword">new</span> B();<br>        b.fly(bird);<br>        <span class="hljs-comment">//会报错,因为B类只接受Bird类型的参数</span><br><span class="hljs-comment">//        b.fly(dragon);</span><br><br>        C c = <span class="hljs-keyword">new</span> C();<br>        c.fly(dragon);<br>        c.fly(bird);<br>    }<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Bird xiaohuangli is flying.<br>Dragon xiaolongren is flying.<br>Bird xiaohuangli is flying.<br></code></pre></td></tr></tbody></table></figure><h3 id="泛型通配符-泛型的使用，不属于定义了"><a href="#泛型通配符-泛型的使用，不属于定义了" class="headerlink" title="泛型通配符(泛型的使用，不属于定义了)"></a>泛型通配符(泛型的使用，不属于定义了)</h3><ol><li>无限定通配符，&lt;?&gt;，此处“？”可以为任意引用数据类型。</li><li>上限通配符，&lt;? extends Number&gt;，此处“？”必须为Number及其子类。</li><li>下限通配符，&lt;? super Number&gt;，此处“？”必须为Number及其父类。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">//什么类型都可以接收</span><br>        print(<span class="hljs-keyword">new</span> ArrayList&lt;String&gt;());<br>        print(<span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;());<br>        print(<span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;());<br><br>        <span class="hljs-comment">//报错，这里需要的是BB或者BB的子类</span><br>        <span class="hljs-comment">//print2(new ArrayList&lt;AA&gt;());</span><br>        print2(<span class="hljs-keyword">new</span> ArrayList&lt;BB&gt;());<br>        print2(<span class="hljs-keyword">new</span> ArrayList&lt;CC&gt;());<br>        <br>        print3(<span class="hljs-keyword">new</span> ArrayList&lt;AA&gt;());<br>        print3(<span class="hljs-keyword">new</span> ArrayList&lt;BB&gt;());<br>        <span class="hljs-comment">//报错，这里需要的是BB或者BB的父类</span><br>        <span class="hljs-comment">//print3(new ArrayList&lt;CC&gt;());</span><br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(ArrayList&lt;?&gt; list)</span></span>{<br>        System.out.println(list);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print2</span><span class="hljs-params">(ArrayList&lt;? extends BB&gt; list)</span></span>{<br>        System.out.println(list);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print3</span><span class="hljs-params">(ArrayList&lt;? <span class="hljs-keyword">super</span> BB&gt; list)</span></span>{<br>        System.out.println(list);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AA</span></span>{<br><br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AA</span></span>{<br><br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BB</span></span>{<br><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="迭代时删除元素"><a href="#迭代时删除元素" class="headerlink" title="迭代时删除元素"></a>迭代时删除元素</h3><ol><li>迭代集合时删除元素<ul><li>使用“集合对象.remove(元素)”：会出现ConcurrentModificationException异常。</li><li>使用“迭代器对象.remove()”：不会出现异常。</li></ul></li><li>如何解决并发修改问题？答案：fail-fast机制<ul><li>fail-fast机制又被称为“快速失败机制”。只要程序发现对集合进行了并发修改，就会立即让其失败，以防出错。</li></ul></li><li>fail-fast机制是如何实现的？<ul><li>集合中设置了一个modCount属性，用来记录修改次数，使用集合对象执行增，删，改中任意一个操作时，modCount就会自动加1。</li><li>获取迭代器对象的时候，会给迭代器对象初始化一个expectedModCount属性。并且将expectedModCount初始化为modCount，即：int expectedModCount = modCount;</li><li>当使用集合对象删除元素时：modCount会加1。但是迭代器中的expectedModCount不会加1。而当迭代器对象的next()方法执行时，会检测expectedModCount和modCount是否相等，如果不相等，则抛出：ConcurrentModificationException异常。</li><li>当使用迭代器删除元素的时候：modCount会加1，并且expectedModCount也会加1。这样当迭代器对象的next()方法执行时，检测到的expectedModCount和modCount相等，则不会出现ConcurrentModificationException异常。</li></ul></li><li>注意：虽然我们当前写的程序是单线程的程序，并没有使用多线程，但是通过迭代器去遍历的同时使用集合去删除元素，这个行为将被认定为并发修改。</li><li>结论：迭代集合时，删除元素要使用“迭代器对象.remove()”方法来删除，避免使用“集合对象.remove(元素)”。主要是为了避免ConcurrentModificationException异常的发生。<strong>注意：迭代器的remove()方法删除的是next()方法的返回的那个数据。remove()方法调用之前一定是先调用了next()方法，如果不是这样的，就会报错。</strong></li></ol><p>获取迭代器对象的时候，会给迭代器对象初始化一个expectedModCount属性。并且将expectedModCount初始化为modCount，即：int expectedModCount = modCount;</p><p>​    java.util.ArrayList#iterator</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250414204339412.png" alt="image-20250414204339412"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    ArrayList&lt;Integer&gt; integers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    integers.add(<span class="hljs-number">1</span>);<br>    integers.add(<span class="hljs-number">2</span>);<br>    integers.add(<span class="hljs-number">3</span>);<br><br>    Iterator&lt;Integer&gt; iterator = integers.iterator();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>        Integer integer = iterator.next();<br>        <span class="hljs-keyword">if</span>(integer == <span class="hljs-number">2</span>) {<br>            iterator.remove();<br>        }<br>    }<br><br>    <span class="hljs-keyword">for</span> (Integer integer : integers) {<br>        System.out.println(integer);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        ArrayList&lt;Integer&gt; integers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        integers.add(<span class="hljs-number">1</span>);<br>        integers.add(<span class="hljs-number">2</span>);<br>        integers.add(<span class="hljs-number">3</span>);<br><br>        Iterator&lt;Integer&gt; iterator = integers.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            Integer integer = iterator.next();<br>            <span class="hljs-keyword">if</span>(integer == <span class="hljs-number">2</span>) {<br>                integers.remove(integer);<span class="hljs-comment">//没有异常，为什么</span><br>            }<br>        }<br><br>        <span class="hljs-keyword">for</span> (Integer integer : integers) {<br>            System.out.println(integer);<br>        }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h1><h2 id="List接口常用方法"><a href="#List接口常用方法" class="headerlink" title="List接口常用方法"></a>List接口常用方法</h2><ol><li><p>List集合存储的元素特点：有序可重复</p></li><li><p>List接口下的常见实现类：</p><ul><li>ArrayList：数组</li><li>Vector, Stack：数组（且线程安全）</li><li>LinkedList：双向链表</li></ul></li><li><p>List接口特有方法</p></li></ol><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>void add(int index, E element)</td><td>在指定索引处插入元素</td></tr><tr><td>2</td><td>E set(int index, E element)</td><td>修改索引处的元素</td></tr><tr><td>3</td><td>E get(int index)</td><td>根据索引获取元素（因为有这个方法，所以可以根据下标遍历List集合）</td></tr><tr><td>4</td><td>E remove(int index)</td><td>删除索引处的元素</td></tr><tr><td>5</td><td>int indexOf(Object o)</td><td>获取对象o在当前集合中第一次出现时的索引。</td></tr><tr><td>6</td><td>int lastIndexOf(Object o)</td><td>获取对象o在当前集合中最后一次出现时的索引。</td></tr><tr><td>7</td><td>List<e> subList(int fromIndex, int toIndex)</e></td><td>截取子List集合生成一个新集合（对原集合无影响）。[fromIndex, toIndex)</td></tr><tr><td>8</td><td>static List<e> of(E… elements)</e></td><td>静态方法，返回包含任意数量元素的不可修改列表。（获取的集合是只读的，不可修改的。）</td></tr></tbody></table><p>测试1：在指定索引处添加元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListTest02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 创建List集合对象</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 添加元素</span><br>        list.add(<span class="hljs-string">"1"</span>);<br>        list.add(<span class="hljs-string">"2"</span>);<br>        list.add(<span class="hljs-string">"3"</span>);<br>        list.add(<span class="hljs-string">"4"</span>);<br>        list.add(<span class="hljs-string">"5"</span>);<br>        list.add(<span class="hljs-string">"6"</span>);<br><br>        <span class="hljs-comment">// 在指定位置添加元素</span><br>        list.add(<span class="hljs-number">1</span>, <span class="hljs-string">"张三"</span>);<br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            String next = iterator.next();<br>            System.out.println(next);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br>张三<br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br></code></pre></td></tr></tbody></table></figure><p>测试2和3</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListTest02</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        <span class="hljs-comment">// 创建List集合对象</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 添加元素</span><br>        list.add(<span class="hljs-string">"1"</span>);<br>        list.add(<span class="hljs-string">"2"</span>);<br>        list.add(<span class="hljs-string">"3"</span>);<br>        list.add(<span class="hljs-string">"4"</span>);<br>        list.add(<span class="hljs-string">"5"</span>);<br>        list.add(<span class="hljs-string">"6"</span>);<br><br>        <span class="hljs-comment">//修改索引处的元素</span><br>        list.set(<span class="hljs-number">1</span>, <span class="hljs-string">"李四"</span>);<br>System.out.println(<span class="hljs-string">"下标为2的元素是："</span> + list.get(<span class="hljs-number">2</span>));<br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>            String next = iterator.next();<br>            System.out.println(next);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">下标为<span class="hljs-number">2</span>的元素是：<span class="hljs-number">3</span><br><span class="hljs-number">1</span><br>李四<br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br></code></pre></td></tr></tbody></table></figure><p>通过下标遍历List集合</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    ArrayList&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    animals.add(<span class="hljs-string">"Dog"</span>);<br>    animals.add(<span class="hljs-string">"Cat"</span>);<br>    animals.add(<span class="hljs-string">"Bird"</span>);<br>    animals.add(<span class="hljs-string">"Fish"</span>);<br>    animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; animals.size(); i++) {<br>        String animal = animals.get(i);<br>        System.out.println(animal);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Dog<br>Cat<br>Bird<br>Fish<br>Lizard<br></code></pre></td></tr></tbody></table></figure><p>测试subList</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>    List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    animals.add(<span class="hljs-string">"Dog"</span>);<br>    animals.add(<span class="hljs-string">"Cat"</span>);<br>    animals.add(<span class="hljs-string">"Bird"</span>);<br>    animals.add(<span class="hljs-string">"Fish"</span>);<br>    animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>    List&lt;String&gt; newAnimals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    newAnimals = animals.subList(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">//实际获取到的是下标2和3的元素</span><br>    ListIterator&lt;String&gt; listIterator = newAnimals.listIterator();<br>    <span class="hljs-keyword">while</span> (listIterator.hasNext()) {<br>        String next = listIterator.next();<br>        System.out.println(next);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Bird<br>Fish<br></code></pre></td></tr></tbody></table></figure><p>测试of(E… elements)</p><p>❓疑问：这里为什么是? extends Serializable，这个代码是我的Idea自动生成的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? extends Serializable&gt; hello = List.of(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">"hello"</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">1.2f</span>);<br><span class="hljs-keyword">for</span> (Serializable s : hello) {<br>    System.out.println(s);<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br>hello<br><span class="hljs-keyword">true</span><br><span class="hljs-number">1.2</span><br></code></pre></td></tr></tbody></table></figure><h2 id="List接口特有迭代器"><a href="#List接口特有迭代器" class="headerlink" title="List接口特有迭代器"></a>List接口特有迭代器</h2><ol><li>特有的迭代方式</li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ListIterator<e> listIterator()</e></td><td>获取List集合特有的迭代器（该迭代器功能更加强大，但只适合于List集合使用）</td></tr><tr><td>ListIterator<e> listIterator(int index)</e></td><td>从列表中的指定位置开始，返回列表中元素的列表迭代器</td></tr></tbody></table><ol start="2"><li>ListIterator接口中常用方法</li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>判断光标当前指向的位置是否存在元素。</td></tr><tr><td>E next()</td><td>将当前光标指向的元素返回，然后将光标向下移动一位。</td></tr><tr><td>void remove()</td><td>删除上一次next()方法返回的那个数据(删除的是集合中的)。remove()方法调用的前提是：先调用next()方法。否则会报错。</td></tr><tr><td>void add(E e)</td><td>添加元素（将元素添加到光标指向的位置，然后光标向下移动一位。）</td></tr><tr><td>boolean hasPrevious()</td><td>判断当前光标指向位置的上一个位置是否存在元素。</td></tr><tr><td>E previous()</td><td>获取上一个元素（<strong>将光标向上移动一位</strong>，然后将光标指向的元素返回）</td></tr><tr><td>int nextIndex()</td><td>获取光标指向的那个位置的下标</td></tr><tr><td>int previousIndex()</td><td>获取光标指向的那个位置的上一个位置的下标</td></tr><tr><td>void set(E e)</td><td>修改的是上一次next()方法返回的那个数据（修改的是集合中的）。set()方法调用的前提是：先调用了next()方法。否则会报错。</td></tr></tbody></table><p>hasNext()：判断光标当前指向的位置是否存在元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>animals.add(<span class="hljs-string">"Dog"</span>);<br>animals.add(<span class="hljs-string">"Cat"</span>);<br>animals.add(<span class="hljs-string">"Bird"</span>);<br>animals.add(<span class="hljs-string">"Fish"</span>);<br>animals.add(<span class="hljs-string">"Lizard"</span>);<br><br><span class="hljs-comment">//测试hasNext()</span><br>ListIterator&lt;String&gt; iterator = animals.listIterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>    String animal = iterator.next();<br>    System.out.println(animal);<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Dog<br>Cat<br>Bird<br>Fish<br>Lizard<br></code></pre></td></tr></tbody></table></figure><p>nextIndex()：获取光标指向的那个位置的下标</p><p>previousIndex()：获取光标指向的那个位置的上一个位置的下标</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>animals.add(<span class="hljs-string">"Dog"</span>);<br>animals.add(<span class="hljs-string">"Cat"</span>);<br>animals.add(<span class="hljs-string">"Bird"</span>);<br>animals.add(<span class="hljs-string">"Fish"</span>);<br>animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>ListIterator&lt;String&gt; iterator = animals.listIterator();<br><br><span class="hljs-comment">//测试nextIndex()</span><br>System.out.println(<span class="hljs-string">"Next index: "</span> + iterator.nextIndex());<span class="hljs-comment">//0</span><br><span class="hljs-comment">//测试previousIndex()</span><br>System.out.println(<span class="hljs-string">"Previous index: "</span> + iterator.previousIndex());<span class="hljs-comment">//-1</span><br></code></pre></td></tr></tbody></table></figure><p>remove()：删除上一次next()方法返回的那个数据(删除的是集合中的)。<strong>remove()方法调用的前提是：你先调用next()方法。不然会报错。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>animals.add(<span class="hljs-string">"Dog"</span>);<br>animals.add(<span class="hljs-string">"Cat"</span>);<br>animals.add(<span class="hljs-string">"Bird"</span>);<br>animals.add(<span class="hljs-string">"Fish"</span>);<br>animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>ListIterator&lt;String&gt; iterator = animals.listIterator();<br><br><span class="hljs-comment">//测试remove()</span><br>iterator.remove();<span class="hljs-comment">//java.lang.IllegalStateException</span><br></code></pre></td></tr></tbody></table></figure><p>add(E e)：将元素添加到光标的位置，然后光标向下移动一位</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>animals.add(<span class="hljs-string">"Dog"</span>);<br>animals.add(<span class="hljs-string">"Cat"</span>);<br>animals.add(<span class="hljs-string">"Bird"</span>);<br>animals.add(<span class="hljs-string">"Fish"</span>);<br>animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>ListIterator&lt;String&gt; iterator = animals.listIterator();<br><br><span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>    String animal = iterator.next();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">"Bird"</span>.equals(animal)){<br>        iterator.remove();<br>    }<br>}<br>System.out.println(animals);<span class="hljs-comment">// [Dog, Cat, Bird, Butterfly, Fish, Lizard]</span><br></code></pre></td></tr></tbody></table></figure><p>set(E e)：修改的是上一次next()方法返回的那个数据（修改的是集合中的）。set()方法调用的前提是：你先调用了next()方法。不然会报错</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; animals = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>animals.add(<span class="hljs-string">"Dog"</span>);<br>animals.add(<span class="hljs-string">"Cat"</span>);<br>animals.add(<span class="hljs-string">"Bird"</span>);<br>animals.add(<span class="hljs-string">"Fish"</span>);<br>animals.add(<span class="hljs-string">"Lizard"</span>);<br><br>ListIterator&lt;String&gt; iterator = animals.listIterator();<br><br><span class="hljs-keyword">while</span> (iterator.hasNext()) {<br>    String animal = iterator.next();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">"Bird"</span>.equals(animal)){<br>        iterator.set(<span class="hljs-string">"Butterfly"</span>);<br>    }<br>}<br><br>System.out.println(animals);<span class="hljs-comment">// [Dog, Cat, Butterfly, Fish, Lizard]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="List接口使用Comparator排序"><a href="#List接口使用Comparator排序" class="headerlink" title="List接口使用Comparator排序"></a>List接口使用Comparator排序</h2><h3 id="数组中自定义类型是如何排序的"><a href="#数组中自定义类型是如何排序的" class="headerlink" title="数组中自定义类型是如何排序的"></a>数组中自定义类型是如何排序的</h3><p>让自定义类型实现java.lang.Comparable接口，接着重写compareTo方法。在compareTo方法中指定比较规则。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">User</span>&gt; </span>{<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(User user)</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.compareTo(user.name);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"User{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArraySort</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        User jack = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"Jack"</span>);<br>        User tom = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"Tom"</span>);<br>        User lucy = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"Lucy"</span>);<br>        User[] users = <span class="hljs-keyword">new</span> User[]{jack, tom, lucy};<br>        Arrays.sort(users);<br>        <span class="hljs-keyword">for</span> (User user : users) {<br>            System.out.println(user.getName());<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Jack<br>Lucy<br>Tom<br></code></pre></td></tr></tbody></table></figure><h3 id="List集合的排序"><a href="#List集合的排序" class="headerlink" title="List集合的排序"></a>List集合的排序</h3><p>对list集合排序可以调用 <code>default void sort(Comparator&lt;? super E&gt; c)</code></p><p>​    sort方法参数：java.util.Comparator（我们把这个叫比较器，这是一个接口）</p><ol><li>提供一个Comparator的实现类，重写compare方法</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListSort</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Person zhangsan = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhangsan"</span>, <span class="hljs-number">20</span>);<br>        Person lisi = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"lisi"</span>, <span class="hljs-number">25</span>);<br>        Person wangwu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"wangwu"</span>, <span class="hljs-number">30</span>);<br>        Person zhaoliu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhaoliu"</span>, <span class="hljs-number">35</span>);<br><br>        ArrayList&lt;Person&gt; people = <span class="hljs-keyword">new</span> ArrayList&lt;Person&gt;();<br>        people.add(zhangsan);<br>        people.add(lisi);<br>        people.add(wangwu);<br>        people.add(zhaoliu);<br><br>        System.out.println(<span class="hljs-string">"Before sorting:"</span>);<br>        <span class="hljs-keyword">for</span> (Person person : people) {<br>            System.out.println(person.getName() + <span class="hljs-string">" "</span> + person.getAge());<br>        }<br><br>        <span class="hljs-comment">// Sort the list using the custom comparator</span><br>        people.sort(<span class="hljs-keyword">new</span> PersonComparator());<br>        System.out.println(<span class="hljs-string">"\nAfter sorting by name:"</span>);<br>        <span class="hljs-keyword">for</span> (Person person : people) {<br>            System.out.println(person.getName() + <span class="hljs-string">" "</span> + person.getAge());<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>​        </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<br>        <span class="hljs-keyword">this</span>.name = name;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{<br>        <span class="hljs-keyword">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Before sorting:<br>zhangsan <span class="hljs-number">20</span><br>lisi <span class="hljs-number">25</span><br>wangwu <span class="hljs-number">30</span><br>zhaoliu <span class="hljs-number">35</span><br><br>After sorting by name:<br>lisi <span class="hljs-number">25</span><br>wangwu <span class="hljs-number">30</span><br>zhangsan <span class="hljs-number">20</span><br>zhaoliu <span class="hljs-number">35</span><br></code></pre></td></tr></tbody></table></figure><ol start="2"><li>采用匿名内部类的方式提供Comparator的实现类</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListSort2</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Person zhangsan = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhangsan"</span>, <span class="hljs-number">20</span>);<br>        Person lisi = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"lisi"</span>, <span class="hljs-number">25</span>);<br>        Person wangwu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"wangwu"</span>, <span class="hljs-number">30</span>);<br>        Person zhaoliu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhaoliu"</span>, <span class="hljs-number">35</span>);<br><br>        ArrayList&lt;Person&gt; people = <span class="hljs-keyword">new</span> ArrayList&lt;Person&gt;();<br>        people.add(zhangsan);<br>        people.add(lisi);<br>        people.add(wangwu);<br>        people.add(zhaoliu);<br><br>        System.out.println(<span class="hljs-string">"Before sorting:"</span>);<br>        <span class="hljs-keyword">for</span> (Person person : people) {<br>            System.out.println(person.getName() + <span class="hljs-string">" "</span> + person.getAge());<br>        }<br><br>        <span class="hljs-comment">// Sort the list using an anonymous inner class</span><br>        people.sort(<span class="hljs-keyword">new</span> Comparator&lt;Person&gt;() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Person o1, Person o2)</span> </span>{<br>                <span class="hljs-keyword">return</span> o2.getName().compareTo(o1.getName());<br>            }<br>        });<br><br>        System.out.println(<span class="hljs-string">"\nAfter sorting by name:"</span>);<br>        <span class="hljs-keyword">for</span> (Person person : people) {<br>            System.out.println(person.getName() + <span class="hljs-string">" "</span> + person.getAge());<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><ol><li>底层采用了数组数据结构</li><li>优点：底层是数组，因此根据下标查找元素的时间复杂度是O(1)，检索效率高</li><li>缺点：随机增删元素效率低。注意：只要数组的容量没有满，对末尾元素进行增删时，效率不会受影响</li><li>适用场景：需要频繁检索元素，并且很少进行随机增删元素时建议使用ArrayList</li><li>默认初始化容量：<ul><li>当调用无参构造方法时，初始化容量为0，当第一次调用add方法时，会将ArrayList容量初始化为10个长度</li></ul></li><li>扩容策略<ul><li>底层扩容会创建一个新数组，然后使用数组拷贝。扩容之后的新容量是原容量的1.5倍</li></ul></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object[] grow(<span class="hljs-keyword">int</span> minCapacity) {<br>    <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>    <span class="hljs-keyword">if</span> (oldCapacity &gt; <span class="hljs-number">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {<br>        <span class="hljs-keyword">int</span> newCapacity = ArraysSupport.newLength(oldCapacity,<br>                                                  minCapacity - oldCapacity, <span class="hljs-comment">/* minimum growth */</span><br>                                                  oldCapacity &gt;&gt; <span class="hljs-number">1</span>           <span class="hljs-comment">/* preferred growth */</span>);<br>        <span class="hljs-keyword">return</span> elementData = Arrays.copyOf(elementData, newCapacity);<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">return</span> elementData = <span class="hljs-keyword">new</span> Object[Math.max(DEFAULT_CAPACITY, minCapacity)];<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">newLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> oldLength, <span class="hljs-keyword">int</span> minGrowth, <span class="hljs-keyword">int</span> prefGrowth)</span> </span>{<br>    <span class="hljs-comment">// preconditions not checked because of inlining</span><br>    <span class="hljs-comment">// assert oldLength &gt;= 0</span><br>    <span class="hljs-comment">// assert minGrowth &gt; 0</span><br><br>    <span class="hljs-keyword">int</span> prefLength = oldLength + Math.max(minGrowth, prefGrowth); <span class="hljs-comment">// might overflow</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt; prefLength &amp;&amp; prefLength &lt;= SOFT_MAX_ARRAY_LENGTH) {<br>        <span class="hljs-keyword">return</span> prefLength;<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-comment">// put code cold in a separate method</span><br>        <span class="hljs-keyword">return</span> hugeLength(oldLength, minGrowth);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="8"><li>集合源码分析</li></ol><ul><li><p>属性分析</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//The array buffer into which the elements of the ArrayList are stored. </span><br><span class="hljs-keyword">transient</span> Object[] elementData; <span class="hljs-comment">// non-private to simplify nested class access</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The size of the ArrayList (the number of elements it contains).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@serial</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>构造方法分析（使用ArrayList时，最好预测一下最大数量，给定初始化容量，减少扩容次数）</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250415222113163.png" alt="image-20250415222113163"></p></li><li><p>添加元素</p><p>看上面扩容策略处的代码</p></li><li><p>修改元素: <strong>修改元素时会将修改前的值返回</strong></p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span></span>;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>{<br>    Objects.checkIndex(index, size);<br>    E oldValue = elementData(index);<br>    elementData[index] = element;<br>    <span class="hljs-keyword">return</span> oldValue;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListSort</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        Person zhangsan = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhangsan"</span>, <span class="hljs-number">20</span>);<br>        Person lisi = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"lisi"</span>, <span class="hljs-number">25</span>);<br>        Person wangwu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"wangwu"</span>, <span class="hljs-number">30</span>);<br>        Person zhaoliu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"zhaoliu"</span>, <span class="hljs-number">35</span>);<br><br>        List&lt;Person&gt; people = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        people.add(zhangsan);<br>        people.add(lisi);<br>        people.add(wangwu);<br>        people.add(zhaoliu);<br><br>        System.out.println(people.set(<span class="hljs-number">2</span>, zhaoliu)); <span class="hljs-comment">//Person{name='wangwu', age=30}</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>插入元素</li><li>删除元素</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ol><li>Vector底层也是数组，和ArrayList相同。</li><li>不同的是Vector几乎所有的方法都是同步的（被synchronized修饰：线程排队执行，不能并发），因此Vector是线程安全的，但是因为效率低，所以很少使用。控制线程安全有新的方式，所以这个很少用。</li><li>初始化容量：10</li><li>扩容策略：扩容之后的容量是原容量的2倍。</li></ol><h2 id="链表存储结构"><a href="#链表存储结构" class="headerlink" title="链表存储结构"></a>链表存储结构</h2><ol><li><p>单向链表</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225542715.png" alt="image-20250416225542715"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225623438.png" alt="image-20250416225623438"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225638228.png" alt="image-20250416225638228"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225649156.png" alt="image-20250416225649156"></p></li><li><p>双向链表</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225702308.png" alt="image-20250416225702308"></p></li><li><p>环形链表</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225714227.png" alt="image-20250416225714227"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250416225726534.png" alt="image-20250416225726534"></p></li><li><p>链表优点</p><p>因为链表节点在空间存储上，内存地址不是连续的。因此删除某个节点时不需要涉及到元素位移的问题。因此随机增删元素效率较高。时间复杂度O(1)</p></li><li><p>链表缺点</p><p>链表中元素在查找时，只能从某个节点开始顺序查找，因为链表节点的内存地址在空间上不是连续的。链表查找元素效率较低，时间复杂度O(n)</p></li><li><p>适用场景</p></li></ol><p>​        需要频繁进行随机增删，但很少的查找的操作时。</p><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><ol><li><p>LinkedList是一个双向链表</p></li><li><p>源码分析</p><ul><li><p>属性分析</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Pointer to first node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; first;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Pointer to last node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; last;<br></code></pre></td></tr></tbody></table></figure></li><li><p>构造方法分析</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250417072257109.png" alt="image-20250417072257109"></p></li><li><p>添加元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>{<br>    checkPositionIndex(index);<br><br>    <span class="hljs-keyword">if</span> (index == size)<br>        linkLast(element);<br>    <span class="hljs-keyword">else</span><br>        linkBefore(element, node(index));<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkLast</span><span class="hljs-params">(E e)</span> </span>{<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(l, e, <span class="hljs-keyword">null</span>);<br>    last = newNode;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-keyword">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Inserts element e before non-null Node succ.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkBefore</span><span class="hljs-params">(E e, Node&lt;E&gt; succ)</span> </span>{<br>    <span class="hljs-comment">// assert succ != null;</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; pred = succ.prev;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(pred, e, succ);<br>    succ.prev = newNode;<br>    <span class="hljs-keyword">if</span> (pred == <span class="hljs-keyword">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        pred.next = newNode;<br>    size++;<br>    modCount++;<br>}<br><br><span class="hljs-function">Node&lt;E&gt; <span class="hljs-title">node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    <span class="hljs-comment">// assert isElementIndex(index);</span><br><br>    <span class="hljs-keyword">if</span> (index &lt; (size &gt;&gt; <span class="hljs-number">1</span>)) {<br>        Node&lt;E&gt; x = first;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++)<br>            x = x.next;<br>        <span class="hljs-keyword">return</span> x;<br>    } <span class="hljs-keyword">else</span> {<br>        Node&lt;E&gt; x = last;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size - <span class="hljs-number">1</span>; i &gt; index; i--)<br>            x = x.prev;<br>        <span class="hljs-keyword">return</span> x;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ol><pre><code class="hljs"> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>{<br>    checkElementIndex(index);<br>    Node&lt;E&gt; x = node(index);<br>    E oldVal = x.item;<br>    x.item = element;<br>    <span class="hljs-keyword">return</span> oldVal;<br>}<br></code></pre></td></tr></tbody></table></figure></code></pre><ul><li><p>修改元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>{<br>    checkElementIndex(index);<br>    Node&lt;E&gt; x = node(index);<br>    E oldVal = x.item;<br>    x.item = element;<br>    <span class="hljs-keyword">return</span> oldVal;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>插入元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>{<br>    checkPositionIndex(index);<br><br>    <span class="hljs-keyword">if</span> (index == size)<br>        linkLast(element);<br>    <span class="hljs-keyword">else</span><br>        linkBefore(element, node(index));<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>删除元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>    checkElementIndex(index);<br>    <span class="hljs-keyword">return</span> unlink(node(index));<br>}<br><br><span class="hljs-function">E <span class="hljs-title">unlink</span><span class="hljs-params">(Node&lt;E&gt; x)</span> </span>{<br>    <span class="hljs-comment">// assert x != null;</span><br>    <span class="hljs-keyword">final</span> E element = x.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = x.next;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; prev = x.prev;<br><br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-keyword">null</span>) {<br>        first = next;<br>    } <span class="hljs-keyword">else</span> {<br>        prev.next = next;<br>        x.prev = <span class="hljs-keyword">null</span>;<br>    }<br><br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-keyword">null</span>) {<br>        last = prev;<br>    } <span class="hljs-keyword">else</span> {<br>        next.prev = prev;<br>        x.next = <span class="hljs-keyword">null</span>;<br>    }<br><br>    x.item = <span class="hljs-keyword">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><ol start="3"><li>手写单向链表</li></ol>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义的单向链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinked</span>&lt;<span class="hljs-title">E</span>&gt; </span>{<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 元素个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单向链表的头结点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; first;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建一个空链表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyLinked</span><span class="hljs-params">()</span> </span>{<br><br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取集合中元素的个数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> size;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向单向链表的末尾添加一个元素。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(E data)</span> </span>{<br>        <span class="hljs-comment">//如果first是空，表示是一个空链表</span><br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span>) {<br>            first = <span class="hljs-keyword">new</span> Node&lt;&gt;(data, <span class="hljs-keyword">null</span>);<br>            size++;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        Node&lt;E&gt; last = findLast();<br>        Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(data, <span class="hljs-keyword">null</span>);<br>        last.next = newNode;<br>        size++;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 找到单向链表的末尾结点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 末尾结点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Node&lt;E&gt; <span class="hljs-title">findLast</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span>) {<br>            <span class="hljs-comment">//空链表</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        }<br><br>        Node&lt;E&gt; last = first;<br>        <span class="hljs-keyword">while</span> (last.next != <span class="hljs-keyword">null</span>) {<br>            <span class="hljs-comment">//把last.next看做是最后一个结点</span><br>            last = last.next;<br>        }<br>        <span class="hljs-keyword">return</span> last;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将元素添加到指定索引处</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data  数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E data)</span> </span>{<br>        Node&lt;E&gt; oldNode = node(index);<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) {<br>            first = <span class="hljs-keyword">new</span> Node&lt;&gt;(data, first);<br>        } <span class="hljs-keyword">else</span> {<br>            Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(data, oldNode);<br>            Node&lt;E&gt; prev = node(index - <span class="hljs-number">1</span>);<br>            prev.next = newNode;<br>        }<br>        size++;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回索引处的结点对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结点对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Node&lt;E&gt; <span class="hljs-title">node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>        <span class="hljs-comment">//假设头结点是下一个结点</span><br>        Node&lt;E&gt; next = first;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++) {<br>            next = next.next;<br>        }<br>        <span class="hljs-keyword">return</span> next;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除指定索引处的元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) {<br>            first = first.next;<br>        } <span class="hljs-keyword">else</span> {<br>            Node&lt;E&gt; pre = node(index - <span class="hljs-number">1</span>);<br>            Node&lt;E&gt; cur = node(index);<br><br>            pre.next = cur.next;<br><br>            cur.next = <span class="hljs-keyword">null</span>;<br>            cur.item = <span class="hljs-keyword">null</span>;<br><br>        }<br>        size--;<br><br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改指定索引处的数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data  数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E data)</span> </span>{<br>        node(index).item = data;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据下标获取数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{<br>        <span class="hljs-keyword">return</span> node(index).item;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单向链表当中的结点（建议定义为静态内部类。）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt; </span>{<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 数据</span><br><span class="hljs-comment">         */</span><br>        E item;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 下一个结点的内存地址</span><br><span class="hljs-comment">         */</span><br>        Node&lt;E&gt; next;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 构造一个结点对象</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> item 结点中的数据</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> next 下一个结点的内存地址。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(E item, Node&lt;E&gt; next)</span> </span>{<br>            <span class="hljs-keyword">this</span>.item = item;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.javase.collection.Summer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedTest</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>        MyLinked&lt;String&gt; myLinked = <span class="hljs-keyword">new</span> MyLinked&lt;&gt;();<br>        myLinked.add(<span class="hljs-string">"hello"</span>);<br>        myLinked.add(<span class="hljs-string">"world"</span>);<br>        myLinked.add(<span class="hljs-string">"java"</span>);<br><br>        <span class="hljs-comment">//遍历</span><br>        traverseCollection(myLinked);<br><br>        <span class="hljs-comment">//删除</span><br>        System.out.println(<span class="hljs-string">"-----------------"</span>);<br>        myLinked.remove(<span class="hljs-number">1</span>);<br>        traverseCollection(myLinked);<br><br>        <span class="hljs-comment">//修改</span><br>        System.out.println(<span class="hljs-string">"-----------------"</span>);<br>        myLinked.set(<span class="hljs-number">0</span>, <span class="hljs-string">"hello~hello~"</span>);<br>        traverseCollection(myLinked);<br><br>        <span class="hljs-comment">//新增</span><br>        System.out.println(<span class="hljs-string">"-----------------"</span>);<br>        myLinked.add(<span class="hljs-number">1</span>, <span class="hljs-string">"world~world~"</span>);<br>        traverseCollection(myLinked);<br><br>        <span class="hljs-comment">//查询</span><br>        System.out.println(<span class="hljs-string">"-----------------"</span>);<br>        String s = myLinked.get(<span class="hljs-number">2</span>);<br>        System.out.println(s);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traverseCollection</span><span class="hljs-params">(MyLinked&lt;String&gt; myLinked)</span> </span>{<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; myLinked.size(); i++) {<br>            String s = myLinked.get(i);<br>            System.out.println(s);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">hello<br>world<br>java<br>-----------------<br>hello<br>java<br>-----------------<br>hello~hello~<br>java<br>-----------------<br>hello~hello~<br>world~world~<br>java<br>-----------------<br>java<br></code></pre></td></tr></tbody></table></figure><h2 id="栈数据结构"><a href="#栈数据结构" class="headerlink" title="栈数据结构"></a>栈数据结构</h2><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250417210230514.png" alt="image-20250417210230514"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250417210230514.png"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250417210258424.png" alt="image-20250417210258424"></p><ol><li>LIFO原则（Last In, First Out）：后进先出</li><li>可以用<strong>数组</strong>实现栈数据结构，也可以用<strong>双向链表</strong>来实现。</li><li>用数组实现栈数据结构的代表有：Stack、ArrayDeque<ul><li>Stack：Vetor的子类，实现了栈数据结构，除了具有Vetor的方法，还扩展了其它方法，完成了栈结构的模拟。不过在JDK1.6（Java6）之后就不建议使用了，因为它是线程安全的，太慢了。Stack中的方法如下：<ul><li>E push(E item)：压栈</li><li>E pop()：弹栈（将栈顶元素删除，并返回被删除的引用）</li><li>int search(Object o)：查找栈中元素（返回值的意思是：以1为开始，从栈顶往下数第几个）</li><li>E peek()：窥视栈顶元素（不会将栈顶元素删除，只是看看栈顶元素是什么。注意：如果栈为空时会报异常。）</li></ul></li><li>ArrayDeque<ul><li>E push(E item)</li><li>E pop()</li></ul></li></ul></li><li>用链表实现的代表是：LinkedList<ul><li>E push(E item)</li><li>E pop()</li></ul></li></ol><h2 id="队列数据结构"><a href="#队列数据结构" class="headerlink" title="队列数据结构"></a>队列数据结构</h2><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250418214107920.png" alt="image-20250418214107920"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，队列是一种操作受限制的线性表。进行插入操作（入口）的端称为队尾，进行删除操作（出口）的端称为队头。</p></li><li><p>队列的插入操作只能在队尾操作，队列的删除操作只能在队头操作，因此队列是一种先进先出（First In First Out）的线性表，简称FIFO表。</p></li><li><p>Queue接口是一种基于FIFO（先进先出）的数据结构，而Deque接口则同时支持FIFO和LIFO（后进先出）两种操作。因此Deque接口也被称为“双端队列”。</p></li><li><p>Java集合框架中队列的实现：</p><ul><li><p>链表实现方式：LinkedList</p></li><li><p>数组实现方式：ArrayDeque</p></li></ul></li></ol><pre><code class="hljs"> ![image-20250418214047976](https://raw.githubusercontent.com/growingbambi/typora/master/image-20250418214047976.png)</code></pre><ol start="5"><li>LinkedList和ArrayDeque都实现了Queue、Deque接口，因此这两个类都具备队列和双端队列的特性。</li><li>LinkedList底层是基于双向链表实现的，因此它天然就是一个双端队列，既支持从队尾入队，从队头出队，也支持从队头入队，从队尾出队。用Deque的实现方式来说，就是它既实现了队列的offer()和poll()方法，也实现了双端队列的offerFirst()、offerLast()、pollFirst()和pollLast()方法等。</li><li>ArrayDeque底层是使用环形数组实现的，也是一个双端队列。它比LinkedList更加高效，因为在数组中随机访问元素的时间复杂度是O(1)，而链表中需要从头或尾部遍历链表寻找元素，时间复杂度是O(N)。循环数组：index = (start + i) % capacity</li></ol><h3 id="Queue接口基于Collection扩展的方法"><a href="#Queue接口基于Collection扩展的方法" class="headerlink" title="Queue接口基于Collection扩展的方法"></a>Queue接口基于Collection扩展的方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean offer(E e);</td><td>入队</td></tr><tr><td>E poll();</td><td>出队，如果队列为空，返回null。</td></tr><tr><td>E remove();</td><td>出队，如果队列为空，抛异常。</td></tr><tr><td>E peek();</td><td>查看队头元素，如果为空则返回null。</td></tr><tr><td>E element();</td><td>查看对头元素，如果为空则抛异常。</td></tr></tbody></table><h3 id="Deque接口基于Queen接口扩展的方法"><a href="#Deque接口基于Queen接口扩展的方法" class="headerlink" title="Deque接口基于Queen接口扩展的方法"></a>Deque接口基于Queen接口扩展的方法</h3><table><thead><tr><th>可以模拟队列的方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean offerLast(E e);</td><td>从队尾入队</td></tr><tr><td>E pollFirst();</td><td>从队头出队</td></tr></tbody></table><table><thead><tr><th>可以模拟双端队列的方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean offerLast(E e);</td><td>从队尾入队</td></tr><tr><td>E pollFirst();</td><td>从队头出队</td></tr><tr><td>boolean offerFirst(E e);</td><td>从队头入队</td></tr><tr><td>E pollLast();</td><td>从队尾出队</td></tr></tbody></table><p>另外offerLast+pollLast或者pollFirst+offerFirst可以模拟栈数据结构。或者也可以直接调用push/pop方法。</p><h1 id="Map继承结构"><a href="#Map继承结构" class="headerlink" title="Map继承结构"></a>Map继承结构</h1><ol><li>Map集合以key和value的键值对形式存储。key和value存储的都是引用。</li><li>Map集合中key起主导作用。value是附属在key上的。</li><li>SequencedMap是Java21新增的。</li><li>LinkedHashMap和TreeMap都是有序集合。（key是有序的）</li><li>HashMap，Hashtable，Properties都是无序集合。（key是无序的）</li><li>Map集合的key都是不可重复的。key重复的话，value会覆盖。</li><li>HashSet集合底层是new了一个HashMap。往HashSet集合中存储元素实际上是将元素存储到HashMap集合的key部分。HashMap集合的key是无序不可重复的，因此HashSet集合就是无序不可重复的。HashMap集合底层是哈希表/散列表数据结构，因此HashSet底层也是哈希表/散列表。</li><li>TreeSet集合底层是new了一个TreeMap。往TreeSet集合中存储元素实际上是将元素存储到TreeMap集合的key部分。TreeMap集合的key是不可重复但可排序的，因此TreeSet集合就是不可重复但可排序的。TreeMap集合底层是红黑树，因此TreeSet底层也是红黑树。它们的排序通过java.lang.Comparable和java.util.Comparator均可实现。</li><li>LinkedHashSet集合底层是new了一个LinkedHashMap。LinkedHashMap集合只是为了保证元素的插入顺序，效率比HashSet低，底层采用的哈希表+双向链表实现。</li><li>根据源码可以看到向Set集合中add时，底层会向Map中put。value只是一个固定不变的常量，只是起到一个占位符的作用。主要是key。</li></ol><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250418213331399.png" alt="image-20250418213331399"></p><h1 id="Map接口的常用方法"><a href="#Map接口的常用方法" class="headerlink" title="Map接口的常用方法"></a>Map接口的常用方法</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>V put(K key, V value);</td><td>添加键值对</td></tr><tr><td>void putAll(Map&lt;? extends K,? extends V&gt; m);</td><td>添加多个键值对</td></tr><tr><td>V get(Object key);</td><td>通过key获取value</td></tr><tr><td>boolean containsKey(Object key);</td><td>是否包含某个key</td></tr><tr><td>boolean containsValue(Object value);</td><td>是否包含某个value</td></tr><tr><td>V remove(Object key);</td><td>通过key删除key-value</td></tr><tr><td>void clear();</td><td>清空Map</td></tr><tr><td>int size();</td><td>键值对个数</td></tr><tr><td>boolean isEmpty();</td><td>判断是否为空Map</td></tr><tr><td>Collection<v> values();</v></td><td>获取所有的value</td></tr><tr><td>Set<k> keySet();</k></td><td>获取所有的key</td></tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet();</td><td>获取所有键值对的Set视图</td></tr><tr><td>static &lt;K,V&gt; Map&lt;K,V&gt; of(K k1, V v1, K k2, V v2, K k3, V v3);</td><td>静态方法，使用key-value构造map</td></tr></tbody></table><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;集合概述&quot;&gt;&lt;a href=&quot;#集合概述&quot; class=&quot;headerlink&quot; title=&quot;集合概述&quot;&gt;&lt;/a&gt;集合概述&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Java集合中存储的是引用，存的不是堆中的对象。堆中的对象的地址存储到了集合中。&lt;/li&gt;
&lt;li&gt;默认情况下，如果不使用泛型，集合中可以存储任何类型的引用。（只要是Object类的子类都可以存储）&lt;/li&gt;
&lt;li&gt;Java集合框架相关的类都在java.util包下。&lt;/li&gt;
&lt;li&gt;Java集合框架分为两部分：&lt;ul&gt;
&lt;li&gt;Collection结构：元素以单个形式存储。&lt;/li&gt;
&lt;li&gt;Map结构：元素以键值对的映射关系存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Collection继承结构&quot;&gt;&lt;a href=&quot;#Collection继承结构&quot; class=&quot;headerlink&quot; title=&quot;Collection继承结构&quot;&gt;&lt;/a&gt;Collection继承结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412180840197.png&quot; alt=&quot;image-20250412180840197&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;上图6个蓝色的实现类中，只有HashSet是无序集合，其他都是有序集合。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有序集合：集合中存储的元素有下标 &lt;strong&gt;或者&lt;/strong&gt; 集合中存储的元素是可排序的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无序集合： 集合中存储的元素没有下标 &lt;strong&gt;并且&lt;/strong&gt; 集合中存储的元素也没有排序&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个集合实现类对应的数据结构：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;集合类型&lt;/th&gt;
&lt;th&gt;数据结构&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ArrayList&lt;/td&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;td&gt;一种可以动态增长和缩减的索引序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedList&lt;/td&gt;
&lt;td&gt;双向链表（不是队列结构，但是可以用它模拟队列）&lt;/td&gt;
&lt;td&gt;一种可以在任何位置进行高效插入和删除操作的有序序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vector&lt;/td&gt;
&lt;td&gt;数组（线程安全）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HashSet&lt;/td&gt;
&lt;td&gt;哈希表&lt;/td&gt;
&lt;td&gt;一种没有重复元素的无序集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashSet&lt;/td&gt;
&lt;td&gt;双向链表+哈希表&lt;/td&gt;
&lt;td&gt;一种可以记住元素插入次序的集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeSet&lt;/td&gt;
&lt;td&gt;红黑树&lt;/td&gt;
&lt;td&gt;一种有序集&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;List集合中存储的元素可以重复，Set集合中的元素不可重复。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Collection接口的常用方法&quot;&gt;&lt;a href=&quot;#Collection接口的常用方法&quot; class=&quot;headerlink&quot; title=&quot;Collection接口的常用方法&quot;&gt;&lt;/a&gt;Collection接口的常用方法&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;boolean add(E e);&lt;/td&gt;
&lt;td&gt;向集合中添加元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int size();&lt;/td&gt;
&lt;td&gt;获取集合中元素个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean addAll(Collection c);&lt;/td&gt;
&lt;td&gt;将参数集合中所有元素全部加入当前集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean contains(Object o);&lt;/td&gt;
&lt;td&gt;判断集合中是否包含对象o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean remove(Object o);&lt;/td&gt;
&lt;td&gt;从集合中删除对象o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void clear();&lt;/td&gt;
&lt;td&gt;清空集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean isEmpty();&lt;/td&gt;
&lt;td&gt;判断集合中元素个数是否为0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object[] toArray();&lt;/td&gt;
&lt;td&gt;将集合转换成一维数组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Java" scheme="https://xiaofanshutu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>常用类_String类</title>
    <link href="https://xiaofanshutu.github.io/posts/6dd21eef.html"/>
    <id>https://xiaofanshutu.github.io/posts/6dd21eef.html</id>
    <published>2025-04-10T23:38:26.701Z</published>
    <updated>2025-04-11T12:11:43.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="String初识"><a href="#String初识" class="headerlink" title="String初识"></a>String初识</h1><ol><li><p>java.lang.String</p></li><li><p>Java中String属于引用数据类型，代表字符串。</p></li><li><p>Java在堆中为字符串准备了字符串常量池。（是一种缓存技术，提高程序执行效率）</p></li></ol><blockquote><p>​    <strong>注：字符串字面量在编译的时候就已经确定了将其放到字符串常量池中。JVM启动时会立即将程序中带有双引号的字符串字面量全部放入字符串常量池。</strong></p></blockquote><ol start="3"><li>Java8之后字符串常量池存放在堆中，Java8之前字符串常量池在永久代。</li><li>字符串一旦创建是不可变的。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Stable</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] value;<br></code></pre></td></tr></tbody></table></figure><h1 id="String的拼接"><a href="#String的拼接" class="headerlink" title="String的拼接"></a>String的拼接</h1><ol><li>动态拼接后新的字符串不会自动放到字符串常量池。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String str1 = <span class="hljs-string">"abc"</span>; <span class="hljs-comment">//字符串常量池</span><br>String str2 = <span class="hljs-string">"def"</span>; <span class="hljs-comment">//字符串常量池</span><br>String str3 = <span class="hljs-string">"abcdef"</span>; <span class="hljs-comment">//字符串常量池</span><br>String str4 = str1 + str2; <span class="hljs-comment">//运行时才会创建对象, str4在堆内存中</span><br>System.out.println(str3 == str4); <span class="hljs-comment">//false</span><br></code></pre></td></tr></tbody></table></figure><ol start="2"><li>两个字符串字面量拼接会做编译阶段的优化，在编译阶段就会进行字符串的拼接。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在字符串常量池中只有一个abcdef</span><br>String str3 = <span class="hljs-string">"abcdef"</span>; <span class="hljs-comment">//字符串常量池</span><br>String str5 = <span class="hljs-string">"abc"</span> + <span class="hljs-string">"def"</span>; <span class="hljs-comment">//字符串常量池</span><br>System.out.println(str3 == str5); <span class="hljs-comment">//true </span><br></code></pre></td></tr></tbody></table></figure><h1 id="String类的常用构造方法"><a href="#String类的常用构造方法" class="headerlink" title="String类的常用构造方法"></a>String类的常用构造方法</h1><ol><li><p>String(char[] value)：</p><ul><li><p>根据字符数组创建一个新的字符串对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]{<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>};<br>String s = <span class="hljs-keyword">new</span> String(chars);<br>System.out.println(s);<span class="hljs-comment">//abc</span><br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>String(char[] value, int offset, int count)：</p><ul><li><p>根据字符数组的指定部分创建一个新的字符串对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]{<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span>};<br>String s = <span class="hljs-keyword">new</span> String(chars, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>System.out.println(s);<span class="hljs-comment">//bcd</span><br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>String(byte[] bytes)：</p><ul><li>根据字节数组创建一个新的字符串对象，默认使用平台默认的字符集进行解码。</li></ul></li><li><p>String(byte[] bytes, int offset, int length)：</p><ul><li><p>根据字节数组的指定部分创建一个新的字符串对象，默认使用平台默认的字符集进行解码。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]{<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">102</span>};<br>String str = <span class="hljs-keyword">new</span> String(chars, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>System.out.println(str);<span class="hljs-comment">//cde</span><br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>String(byte[] bytes, Charset charset)：根据字节数组和指定的字符集创建一个新的字符串对象。</p><ul><li><p>如果编码和解码用到的字符集不一致，则会出现乱码。</p></li><li><p>new String(bytes, Charset.defaultCharset());</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span>[] bytesArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]{<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">102</span>};<br>String s5 = <span class="hljs-keyword">new</span> String(bytesArr, Charset.defaultCharset());<br>System.out.println(s5);<span class="hljs-comment">//abcdef</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 先将字符串转换成byte[]数组（这个过程是一个编码的过程）</span><br><span class="hljs-keyword">byte</span>[] bytes1 = <span class="hljs-string">"你好旧时光"</span>.getBytes(StandardCharsets.UTF_8);<br><span class="hljs-comment">// 将以上的byte[]数组转换成字符串（这个过程是一个解码的过程）</span><br>String s6 = <span class="hljs-keyword">new</span> String(bytes1, StandardCharsets.UTF_8);<br>System.out.println(s6);<span class="hljs-comment">//你好旧时光</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 乱码的本质：在进行编码和解码的时候没有使用同一个字符编码方式。</span><br><span class="hljs-comment">//如果编码和解码的字符集不一致，就会出现乱码。</span><br><br><span class="hljs-comment">// 先将字符串转换成byte[]数组（这个过程是一个编码的过程）</span><br><span class="hljs-keyword">byte</span>[] bytes1 = <span class="hljs-string">"你好旧时光"</span>.getBytes(StandardCharsets.UTF_8);<br><span class="hljs-comment">// 将以上的byte[]数组转换成字符串（这个过程是一个解码的过程）</span><br>String s6 = <span class="hljs-keyword">new</span> String(bytes1, StandardCharsets.ISO_8859_1);<br>System.out.println(s6);<br></code></pre></td></tr></tbody></table></figure></li></ul><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250411085551049.png" alt="image-20250411085551049"></p></li></ol><ol start="6"><li><p>String(byte[] bytes, String charsetName)：根据字节数组和指定的字符集名称创建一个新的字符串对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编码</span><br><span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-string">"淡然"</span>.getBytes(<span class="hljs-string">"GBK"</span>);<br><span class="hljs-comment">// 解码</span><br>String s6 = <span class="hljs-keyword">new</span> String(bytes, <span class="hljs-string">"GBK"</span>);<br>System.out.println(s6);<span class="hljs-comment">//淡然</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>String(String original)：通过复制现有字符串创建一个新的字符串对象。</p><ul><li><p>这个方法被@IntrinsicCandidate标注，这个注解的作用是告诉编译器，该方法或构造函数是一个内在的候选方法,可以被优化和替换为更高效的代码。因此它是不建议使用的。</p></li><li><p>new String(“hello”); 这个代码会让常量池中有一个 “hello”，并且在堆中也有有一个String对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@IntrinsicCandidate</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">(String original)</span> </span>{<br>    <span class="hljs-keyword">this</span>.value = original.value;<br>    <span class="hljs-keyword">this</span>.coder = original.coder;<br>    <span class="hljs-keyword">this</span>.hash = original.hash;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String helloStr = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"hello"</span>);<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ol><h1 id="String类的常用方法"><a href="#String类的常用方法" class="headerlink" title="String类的常用方法"></a>String类的常用方法</h1><ol><li>byte[] getBytes(); 将字符串转换成字节数组。其实就是对字符串进行编码。默认按照系统默认字符集。</li><li>byte[] getBytes(String charsetName); 将字符串按照指定字符集的方式进行编码。</li><li>byte[] getBytes(Charset charset);</li><li>char[] toCharArray(); 将字符串转换字符数组。</li><li>String toLowerCase(); 转小写</li><li>String toUpperCase(); 转大写</li><li>String concat(String str); 进行字符串的拼接操作。和 + 的区别？+ <ul><li>既可以进行求和，也可以进行字符串的拼接，底层拼接时会创建StringBuilder对象进行拼接。+ 拼接null时不会出现空指针异常。</li><li>concat方法参数只能时字符串类型，拼接时不会创建StringBuilder对象，拼接完成后返回一个新的String对象。拼接null会出现空指针异常。</li><li>+使用较多。如果进行大量字符串拼接，这两个都不合适。</li></ul></li><li>String substring(int beginIndex); 从指定下标beginIndex开始截取子字符串</li><li>String substring(int beginIndex, int endIndex);</li><li>String trim(); 去除字符串前后空白（只能去除ASCII码中的空格和制表符）</li><li>String strip(); 去除字符串前后空白（支持所有的编码形式的空白，可以将全角空格去除，\u3000是全角空格，Java11新增）</li><li>String stripLeading(); 去除前空白</li><li>String stripTrailing(); 去除后空白</li><li>String toString();</li><li>String intern(); 获取字符串常量池中的字符串，如果常量池中没有，则将字符串加入常量池并返回。<ul><li>byte[] bytes = {97,98,99,100}; String s = new String(bytes);</li><li>String s2 = s.intern(); // 将字符串 “abcd”放入字符串常量池并返回常量池中的字符串 “abcd”</li></ul></li><li>static String join(CharSequence d, CharSequence… elements); 将多个字符串以某个分隔符连接（Java8新增）</li><li>static String join(CharSequence delimiter, Iterable&lt;? extends CharSequence&gt; elements);</li><li>static String valueOf(boolean b); 以下所有的静态方法valueOf作用是将非字符串类型的数据转换为字符串形式。</li><li>static String valueOf(char c);</li><li>static String valueOf(char[] data);</li><li>static String valueOf(char[] data, int offset, int count);</li><li>static String valueOf(double d);</li><li>static String valueOf(float f);</li><li>static String valueOf(int i);</li><li>static String valueOf(long l);</li><li>static String valueOf(Object obj);</li></ol><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h1 id="String类的面试题"><a href="#String类的面试题" class="headerlink" title="String类的面试题"></a>String类的面试题</h1><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;String初识&quot;&gt;&lt;a href=&quot;#String初识&quot; class=&quot;headerlink&quot; title=&quot;String初识&quot;&gt;&lt;/a&gt;String初识&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;java.lang.String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java中String属于引用数据类型，代表字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java在堆中为字符串准备了字符串常量池。（是一种缓存技术，提高程序执行效率）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;​    &lt;strong&gt;注：字符串字面量在编译的时候就已经确定了将其放到字符串常量池中。JVM启动时会立即将程序中带有双引号的字符串字面量全部放入字符串常量池。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Java8之后字符串常量池存放在堆中，Java8之前字符串常量池在永久代。&lt;/li&gt;
&lt;li&gt;字符串一旦创建是不可变的。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Stable&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] value;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;String的拼接&quot;&gt;&lt;a href=&quot;#String的拼接&quot; class=&quot;headerlink&quot; title=&quot;String的拼接&quot;&gt;&lt;/a&gt;String的拼接&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;动态拼接后新的字符串不会自动放到字符串常量池。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;String str1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//字符串常量池&lt;/span&gt;&lt;br&gt;String str2 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;def&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//字符串常量池&lt;/span&gt;&lt;br&gt;String str3 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abcdef&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//字符串常量池&lt;/span&gt;&lt;br&gt;String str4 = str1 + str2; &lt;span class=&quot;hljs-comment&quot;&gt;//运行时才会创建对象, str4在堆内存中&lt;/span&gt;&lt;br&gt;System.out.println(str3 == str4); &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;两个字符串字面量拼接会做编译阶段的优化，在编译阶段就会进行字符串的拼接。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://xiaofanshutu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA常用</title>
    <link href="https://xiaofanshutu.github.io/posts/566321e7.html"/>
    <id>https://xiaofanshutu.github.io/posts/566321e7.html</id>
    <published>2025-04-09T14:14:33.587Z</published>
    <updated>2025-06-08T23:04:47.582Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h1><ol><li>单行注释：ctrl + /</li><li>多行注释：ctrl + shift + /</li><li>查看源码：按ctrl别松手，鼠标移动到对应的类名下方，出现下划线，点击过去，可以查看类源码。</li><li>多行编辑：按alt别松手，鼠标拖动多行，完成多行编辑。</li><li>怎么快速生成创建对象语句：类名.new.var</li><li>怎么快速生成if语句：布尔类型值.if</li><li>怎么快速生成setter和getter方法：alt + insert，然后选择setter and getter生成。</li><li>怎么快速生成构造方法：alt + insert，然后选择Constructor。</li><li>在IDEA当中如何自动纠错：将光标移动到错误的位置，按atl + enter。会有提示，根据提示进行纠错。</li><li>移动代码到上一行：alt + shift + 上/下方向</li><li>怎么快速重写方法？alt + insert，选择Override….</li><li>怎么快速重写方法？ctrl + o</li><li>快速向下转型，并同时生成变量名：变量名.castvar</li><li>快速查看方法的参数：ctrl + p</li><li>返回上一步：ctrl + alt + 左方向键。 下一步：ctrl + alt + 右方向键。</li><li>代码格式化：ctrl + alt + L</li><li>查看继承结构：ctrl + H（或者F4）</li><li>自动代码包裹：ctrl + alt + t</li><li>快速运行程序 ctrl + shift + F10</li></ol><h1 id="IDEA中文乱码"><a href="#IDEA中文乱码" class="headerlink" title="IDEA中文乱码"></a>IDEA中文乱码</h1><ol><li><p>在 IntelliJ IDEA 中，可以通过以下步骤检查和设置文件编码：<br>右键文件 -&gt; File Encoding -&gt; 选择 UTF-8。</p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412184653927.png" alt="image-20250412184653927"></li><li><p>设置 JVM 的字符编码：<br>在运行配置中添加 JVM 参数，强制指定 UTF-8 编码：-Dfile.encoding=UTF-8<br>在 IntelliJ IDEA 中：<br>打开 Run/Debug Configurations。<br>在 VM options 中添加上述参数。</p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412184810062.png" alt="image-20250412184810062"></li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;IDEA常用快捷键&quot;&gt;&lt;a href=&quot;#IDEA常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;IDEA常用快捷键&quot;&gt;&lt;/a&gt;IDEA常用快捷键&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;单行注释：ctrl + /&lt;/li&gt;
&lt;li&gt;多行注释：ctrl + shift + /&lt;/li&gt;
&lt;li&gt;查看源码：按ctrl别松手，鼠标移动到对应的类名下方，出现下划线，点击过去，可以查看类源码。&lt;/li&gt;
&lt;li&gt;多行编辑：按alt别松手，鼠标拖动多行，完成多行编辑。&lt;/li&gt;
&lt;li&gt;怎么快速生成创建对象语句：类名.new.var&lt;/li&gt;
&lt;li&gt;怎么快速生成if语句：布尔类型值.if&lt;/li&gt;
&lt;li&gt;怎么快速生成setter和getter方法：alt + insert，然后选择setter and getter生成。&lt;/li&gt;
&lt;li&gt;怎么快速生成构造方法：alt + insert，然后选择Constructor。&lt;/li&gt;
&lt;li&gt;在IDEA当中如何自动纠错：将光标移动到错误的位置，按atl + enter。会有提示，根据提示进行纠错。&lt;/li&gt;
&lt;li&gt;移动代码到上一行：alt + shift + 上/下方向&lt;/li&gt;
&lt;li&gt;怎么快速重写方法？alt + insert，选择Override….&lt;/li&gt;
&lt;li&gt;怎么快速重写方法？ctrl + o&lt;/li&gt;
&lt;li&gt;快速向下转型，并同时生成变量名：变量名.castvar&lt;/li&gt;
&lt;li&gt;快速查看方法的参数：ctrl + p&lt;/li&gt;
&lt;li&gt;返回上一步：ctrl + alt + 左方向键。 下一步：ctrl + alt + 右方向键。&lt;/li&gt;
&lt;li&gt;代码格式化：ctrl + alt + L&lt;/li&gt;
&lt;li&gt;查看继承结构：ctrl + H（或者F4）&lt;/li&gt;
&lt;li&gt;自动代码包裹：ctrl + alt + t&lt;/li&gt;
&lt;li&gt;快速运行程序 ctrl + shift + F10&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;IDEA中文乱码&quot;&gt;&lt;a href=&quot;#IDEA中文乱码&quot; class=&quot;headerlink&quot; title=&quot;IDEA中文乱码&quot;&gt;&lt;/a&gt;IDEA中文乱码&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 IntelliJ IDEA 中，可以通过以下步骤检查和设置文件编码：&lt;br&gt;右键文件 -&amp;gt; File Encoding -&amp;gt; 选择 UTF-8。&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412184653927.png&quot; alt=&quot;image-20250412184653927&quot;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置 JVM 的字符编码：&lt;br&gt;在运行配置中添加 JVM 参数，强制指定 UTF-8 编码：-Dfile.encoding=UTF-8&lt;br&gt;在 IntelliJ IDEA 中：&lt;br&gt;打开 Run/Debug Configurations。&lt;br&gt;在 VM options 中添加上述参数。&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/growingbambi/typora/master/image-20250412184810062.png&quot; alt=&quot;image-20250412184810062&quot;&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary>
    
    
    
    <category term="Java" scheme="https://xiaofanshutu.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>常用类_日期</title>
    <link href="https://xiaofanshutu.github.io/posts/4f0359c2.html"/>
    <id>https://xiaofanshutu.github.io/posts/4f0359c2.html</id>
    <published>2025-04-09T13:56:08.600Z</published>
    <updated>2025-04-10T00:10:05.716Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><h2 id="日期类-java-util-Date"><a href="#日期类-java-util-Date" class="headerlink" title="日期类 java.util.Date"></a>日期类 java.util.Date</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">this</span>(System.currentTimeMillis());<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-keyword">long</span> date)</span> </span>{<br>    fastTime = date;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="日期格式化类-SimpleDateFormat"><a href="#日期格式化类-SimpleDateFormat" class="headerlink" title="日期格式化类 SimpleDateFormat"></a>日期格式化类 SimpleDateFormat</h2><h3 id="日期转字符串"><a href="#日期转字符串" class="headerlink" title="日期转字符串"></a>日期转字符串</h3><h3 id="字符串转日期"><a href="#字符串转日期" class="headerlink" title="字符串转日期"></a>字符串转日期</h3><h2 id="日历类-java-util-Calendar"><a href="#日历类-java-util-Calendar" class="headerlink" title="日历类 java.util.Calendar"></a>日历类 java.util.Calendar</h2><h3 id="获取当前时间的日历对象"><a href="#获取当前时间的日历对象" class="headerlink" title="获取当前时间的日历对象"></a>获取当前时间的日历对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Gets a calendar using the default time zone and locale.</span><br>Calendar instance = Calendar.getInstance();<br>System.out.println(instance);<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.GregorianCalendar[time=<span class="hljs-number">1744207975651</span>,areFieldsSet=<span class="hljs-keyword">true</span>,areAllFieldsSet=<span class="hljs-keyword">true</span>,lenient=<span class="hljs-keyword">true</span>,zone=sun.util.calendar.ZoneInfo[id=<span class="hljs-string">"GMT+08:00"</span>,offset=<span class="hljs-number">28800000</span>,dstSavings=<span class="hljs-number">0</span>,useDaylight=<span class="hljs-keyword">false</span>,transitions=<span class="hljs-number">0</span>,lastRule=<span class="hljs-keyword">null</span>],firstDayOfWeek=<span class="hljs-number">1</span>,minimalDaysInFirstWeek=<span class="hljs-number">1</span>,ERA=<span class="hljs-number">1</span>,YEAR=<span class="hljs-number">2025</span>,MONTH=<span class="hljs-number">3</span>,WEEK_OF_YEAR=<span class="hljs-number">15</span>,WEEK_OF_MONTH=<span class="hljs-number">2</span>,DAY_OF_MONTH=<span class="hljs-number">9</span>,DAY_OF_YEAR=<span class="hljs-number">99</span>,DAY_OF_WEEK=<span class="hljs-number">4</span>,DAY_OF_WEEK_IN_MONTH=<span class="hljs-number">2</span>,AM_PM=<span class="hljs-number">1</span>,HOUR=<span class="hljs-number">10</span>,HOUR_OF_DAY=<span class="hljs-number">22</span>,MINUTE=<span class="hljs-number">12</span>,SECOND=<span class="hljs-number">55</span>,MILLISECOND=<span class="hljs-number">651</span>,ZONE_OFFSET=<span class="hljs-number">28800000</span>,DST_OFFSET=<span class="hljs-number">0</span>]<br></code></pre></td></tr></tbody></table></figure><h3 id="获取日历中某部分（年份-月份-星期等）"><a href="#获取日历中某部分（年份-月份-星期等）" class="headerlink" title="获取日历中某部分（年份/月份/星期等）"></a>获取日历中某部分（年份/月份/星期等）</h3><table><thead><tr><th>类型</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>Calendar.YEAR</td><td>获取年份</td><td></td></tr><tr><td>Calendar.MONTH</td><td>获取月份</td><td>0表示1月，1表示2月，…，11表示12月</td></tr><tr><td>Calendar.DAY_OF_MONTH</td><td>获取本月的第几天</td><td></td></tr><tr><td>Calendar.DAY_OF_YEAR</td><td>获取本年的第几天</td><td></td></tr><tr><td>Calendar.DAY_OF_WEEK</td><td>获取星期几</td><td>1表示星期日，…，7表示星期六</td></tr><tr><td>Calendar.HOUR_OF_DAY</td><td>小时，24小时制</td><td></td></tr><tr><td>Calendar.HOUR</td><td>小时，12小时制</td><td></td></tr><tr><td>Calendar.MINUTE</td><td>获取分钟</td><td></td></tr><tr><td>Calendar.SECOND</td><td>获取秒</td><td></td></tr><tr><td>Calendar.MILLISECOND</td><td>获取毫秒</td><td></td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar instance = Calendar.getInstance();<br>System.out.println(<span class="hljs-string">"year: "</span> + instance.get(Calendar.YEAR));<span class="hljs-comment">//2025</span><br>System.out.println(<span class="hljs-string">"month: "</span> + instance.get(Calendar.MONTH));<span class="hljs-comment">//3: 四月</span><br>System.out.println(<span class="hljs-string">"the day of the month: "</span> + instance.get(Calendar.DAY_OF_MONTH));<span class="hljs-comment">//9</span><br>System.out.println(<span class="hljs-string">"the day number within the current year: "</span> + instance.get(Calendar.DAY_OF_YEAR));<span class="hljs-comment">//99</span><br>System.out.println(<span class="hljs-string">"the day of the week:"</span> + instance.get(Calendar.DAY_OF_WEEK));<span class="hljs-comment">//4: 星期三</span><br><span class="hljs-comment">//the hour of the day. HOUR_OF_DAY is used for the 24-hour clock</span><br>System.out.println(<span class="hljs-string">"the hour of the day. 24-hour clock: "</span> + instance.get(Calendar.HOUR_OF_DAY));<span class="hljs-comment">//22</span><br><span class="hljs-comment">//the hour of the morning or afternoon. HOUR is used for the 12-hour clock (0 - 11). Noon and midnight are represented by 0, not by 12.</span><br>System.out.println(<span class="hljs-string">"the hour of the day. 12-hour clock: "</span> + instance.get(Calendar.HOUR));<span class="hljs-comment">//10</span><br>System.out.println(<span class="hljs-string">"minute: "</span> + instance.get(Calendar.MINUTE));<span class="hljs-comment">//39</span><br>System.out.println(<span class="hljs-string">"second: "</span> + instance.get(Calendar.SECOND));<span class="hljs-comment">//35</span><br>System.out.println(<span class="hljs-string">"millsecond: "</span> + instance.get(Calendar.MILLISECOND));<span class="hljs-comment">//711</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取自1970年1月1日0时0分0秒到系统当前时间的总毫秒数。</span><br>System.out.println(System.currentTimeMillis());<span class="hljs-comment">//1744207198604</span><br></code></pre></td></tr></tbody></table></figure><h3 id="设置日历-set方法"><a href="#设置日历-set方法" class="headerlink" title="设置日历 set方法"></a>设置日历 set方法</h3><h4 id="calendar-set-Calendar-YEAR-2023"><a href="#calendar-set-Calendar-YEAR-2023" class="headerlink" title="calendar.set(Calendar.YEAR, 2023)"></a>calendar.set(Calendar.YEAR, 2023)</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar calendar2 = Calendar.getInstance();<br>calendar2.set(Calendar.YEAR, <span class="hljs-number">2023</span>);<br>System.out.println(calendar2.get(Calendar.YEAR) + <span class="hljs-string">"年"</span> + (calendar2.get(Calendar.MONTH) + <span class="hljs-number">1</span>) + <span class="hljs-string">"月"</span> + calendar2.get(Calendar.DAY_OF_MONTH) + <span class="hljs-string">"日"</span>); <span class="hljs-comment">//2023年4月9日</span><br></code></pre></td></tr></tbody></table></figure><h4 id="calendar-set-2015-Calendar-SEPTEMBER-8"><a href="#calendar-set-2015-Calendar-SEPTEMBER-8" class="headerlink" title="calendar.set(2015, Calendar.SEPTEMBER,8)"></a>calendar.set(2015, Calendar.SEPTEMBER,8)</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar calendar2 = Calendar.getInstance();<br>calendar2.set(<span class="hljs-number">2015</span>, Calendar.JULY, <span class="hljs-number">26</span>, <span class="hljs-number">8</span>, <span class="hljs-number">30</span>, <span class="hljs-number">0</span>);<br>System.out.println(calendar2);<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2015</span>年<span class="hljs-number">7</span>月<span class="hljs-number">26</span>日<br></code></pre></td></tr></tbody></table></figure><p>小点：最好用提供的常量</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250409224631266.png" alt="image-20250409224631266"></p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250409224610367.png" alt="image-20250409224610367"></p><h3 id="日历中各部分加减-add方法"><a href="#日历中各部分加减-add方法" class="headerlink" title="日历中各部分加减 add方法"></a>日历中各部分加减 add方法</h3><h4 id="calendar-add-Calendar-YEAR-1"><a href="#calendar-add-Calendar-YEAR-1" class="headerlink" title="calendar.add(Calendar.YEAR, 1)"></a>calendar.add(Calendar.YEAR, 1)</h4><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Calendar calendar2 = Calendar.getInstance();<br>calendar2.<span class="hljs-builtin-name">add</span>(Calendar.YEAR, 1);<br>System.out.println(calendar2.<span class="hljs-builtin-name">get</span>(Calendar.YEAR) + <span class="hljs-string">"年"</span> + (calendar2.<span class="hljs-builtin-name">get</span>(Calendar.MONTH) + 1) + <span class="hljs-string">"月"</span> + calendar2.<span class="hljs-builtin-name">get</span>(Calendar.DAY_OF_MONTH) + <span class="hljs-string">"日"</span>);<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2026</span>年<span class="hljs-number">4</span>月<span class="hljs-number">9</span>日<br></code></pre></td></tr></tbody></table></figure><h3 id="让日历关联具体时间-setTime方法"><a href="#让日历关联具体时间-setTime方法" class="headerlink" title="让日历关联具体时间 setTime方法"></a>让日历关联具体时间 setTime方法</h3><h4 id="calendar-setTime-new-Date"><a href="#calendar-setTime-new-Date" class="headerlink" title="calendar.setTime(new Date())"></a>calendar.setTime(new Date())</h4><p><strong><em>//年份偏移： Date 构造方法中的年份参数是基于 1900 的偏移量。例如，传入 2015 实际表示 1900 + 2015 = 3915 年。</em></strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar calendar2 = Calendar.getInstance();<br><br>calendar2.setTime(<span class="hljs-keyword">new</span> Date(<span class="hljs-number">2015</span>, Calendar.JULY, <span class="hljs-number">15</span>));<br>System.out.println(calendar2.get(Calendar.YEAR) + <span class="hljs-string">"年"</span> + (calendar2.get(Calendar.MONTH) + <span class="hljs-number">1</span>) + <span class="hljs-string">"月"</span> + calendar2.get(Calendar.DAY_OF_MONTH) + <span class="hljs-string">"日"</span>); <span class="hljs-comment">//3915年7月15日</span><br></code></pre></td></tr></tbody></table></figure><h3 id="获取日历的具体时间-getTime方法"><a href="#获取日历的具体时间-getTime方法" class="headerlink" title="获取日历的具体时间 getTime方法"></a>获取日历的具体时间 getTime方法</h3><h4 id="Date-time-calendar-getTime"><a href="#Date-time-calendar-getTime" class="headerlink" title="Date time = calendar.getTime();"></a>Date time = calendar.getTime();</h4><p>IDEA小技巧：</p><p>自动提示忽略大小写，取消勾选Match Case checkbox</p><p><img src="https://raw.githubusercontent.com/growingbambi/typora/master/image-20250409215455705.png" alt="image-20250409215455705"></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;日期&quot;&gt;&lt;a href=&quot;#日期&quot; class=&quot;headerlink&quot; title=&quot;日期&quot;&gt;&lt;/a&gt;日期&lt;/h1&gt;&lt;h2 id=&quot;日期类-java-util-Date&quot;&gt;&lt;a href=&quot;#日期类-java-util-Date&quot; class=&quot;headerlink&quot; title=&quot;日期类 java.util.Date&quot;&gt;&lt;/a&gt;日期类 java.util.Date&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;(System.currentTimeMillis());&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; date)&lt;/span&gt; &lt;/span&gt;{&lt;br&gt;    fastTime = date;&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h2 id=&quot;日期格式化类-SimpleDateFormat&quot;&gt;&lt;a href=&quot;#日期格式化类-SimpleDateFormat&quot; class=&quot;headerlink&quot; title=&quot;日期格式化类 SimpleDateFormat&quot;&gt;&lt;/a&gt;日期格式化类 SimpleDateFormat&lt;/h2&gt;&lt;h3 id=&quot;日期转字符串&quot;&gt;&lt;a href=&quot;#日期转字符串&quot; class=&quot;headerlink&quot; title=&quot;日期转字符串&quot;&gt;&lt;/a&gt;日期转字符串&lt;/h3&gt;&lt;h3 id=&quot;字符串转日期&quot;&gt;&lt;a href=&quot;#字符串转日期&quot; class=&quot;headerlink&quot; title=&quot;字符串转日期&quot;&gt;&lt;/a&gt;字符串转日期&lt;/h3&gt;&lt;h2 id=&quot;日历类-java-util-Calendar&quot;&gt;&lt;a href=&quot;#日历类-java-util-Calendar&quot; class=&quot;headerlink&quot; title=&quot;日历类 java.util.Calendar&quot;&gt;&lt;/a&gt;日历类 java.util.Calendar&lt;/h2&gt;&lt;h3 id=&quot;获取当前时间的日历对象&quot;&gt;&lt;a href=&quot;#获取当前时间的日历对象&quot; class=&quot;headerlink&quot; title=&quot;获取当前时间的日历对象&quot;&gt;&lt;/a&gt;获取当前时间的日历对象&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="https://xiaofanshutu.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
